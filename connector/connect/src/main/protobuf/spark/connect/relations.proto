/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';

package spark.connect;

import "spark/connect/expressions.proto";

option java_multiple_files = true;
option java_package = "org.apache.spark.connect.proto";

// The main [[Relation]] type. Fundamentally, a relation is a typed container
// that has exactly one explicit relation type set.
//
// When adding new relation types, they have to be registered here.
message Relation {
  RelationCommon common = 1;
  oneof rel_type {
    Read read = 2;
    Project project = 3;
    Filter filter = 4;
    Join join = 5;
    SetOperation set_op = 6;
    Sort sort = 7;
    Limit limit = 8;
    Aggregate aggregate = 9;
    SQL sql = 10;
    LocalRelation local_relation = 11;
    Sample sample = 12;
    Offset offset = 13;
    Deduplicate deduplicate = 14;
    Range range = 15;
    SubqueryAlias subquery_alias = 16;
    Repartition repartition = 17;
    RenameColumnsBySameLengthNames rename_columns_by_same_length_names = 18;
    RenameColumnsByNameToNameMap rename_columns_by_name_to_name_map = 19;
    ShowString show_string = 20;

    // NA functions
    NAFill fill_na = 90;

    // stat functions
    StatSummary summary = 100;
    StatCrosstab crosstab = 101;

    Unknown unknown = 999;
  }
}

// Used for testing purposes only.
message Unknown {}

// Common metadata of all relations.
message RelationCommon {
  string source_info = 1;
}

// Relation that uses a SQL query to generate the output.
message SQL {
  string query = 1;
}

// Relation that reads from a file / table or other data source. Does not have additional
// inputs.
message Read {
  oneof read_type {
    NamedTable named_table = 1;
    DataSource data_source = 2;
  }

  message NamedTable {
    string unparsed_identifier = 1;
  }

  message DataSource {
    // Required. Supported formats include: parquet, orc, text, json, parquet, csv, avro.
    string format = 1;
    // Optional. If not set, Spark will infer the schema.
    string schema = 2;
    // The key is case insensitive.
    map<string, string> options = 3;
  }
}

// Projection of a bag of expressions for a given input relation.
//
// The input relation must be specified.
// The projected expression can be an arbitrary expression.
message Project {
  // (Optional) Input relation is optional for Project.
  //
  // For example, `SELECT ABS(-1)` is valid plan without an input plan.
  Relation input = 1;
  repeated Expression expressions = 3;
}

// Relation that applies a boolean expression `condition` on each row of `input` to produce
// the output result.
message Filter {
  Relation input = 1;
  Expression condition = 2;
}

// Relation of type [[Join]].
//
// `left` and `right` must be present.
message Join {
  Relation left = 1;
  Relation right = 2;
  Expression join_condition = 3;
  JoinType join_type = 4;
  // Optional. using_columns provides a list of columns that should present on both sides of
  // the join inputs that this Join will join on. For example A JOIN B USING col_name is
  // equivalent to A JOIN B on A.col_name = B.col_name.
  //
  // This field does not co-exist with join_condition.
  repeated string using_columns = 5;

  enum JoinType {
    JOIN_TYPE_UNSPECIFIED = 0;
    JOIN_TYPE_INNER = 1;
    JOIN_TYPE_FULL_OUTER = 2;
    JOIN_TYPE_LEFT_OUTER = 3;
    JOIN_TYPE_RIGHT_OUTER = 4;
    JOIN_TYPE_LEFT_ANTI = 5;
    JOIN_TYPE_LEFT_SEMI = 6;
  }
}

// Relation of type [[SetOperation]]
message SetOperation {
  Relation left_input = 1;
  Relation right_input = 2;
  SetOpType set_op_type = 3;
  bool is_all = 4;
  bool by_name = 5;

  enum SetOpType {
    SET_OP_TYPE_UNSPECIFIED = 0;
    SET_OP_TYPE_INTERSECT = 1;
    SET_OP_TYPE_UNION = 2;
    SET_OP_TYPE_EXCEPT = 3;
  }
}

// Relation of type [[Limit]] that is used to `limit` rows from the input relation.
message Limit {
  Relation input = 1;
  int32 limit = 2;
}

// Relation of type [[Offset]] that is used to read rows staring from the `offset` on
// the input relation.
message Offset {
  Relation input = 1;
  int32 offset = 2;
}

// Relation of type [[Aggregate]].
message Aggregate {
  Relation input = 1;
  repeated Expression grouping_expressions = 2;
  repeated Expression result_expressions = 3;
}

// Relation of type [[Sort]].
message Sort {
  Relation input = 1;
  repeated SortField sort_fields = 2;
  bool is_global = 3;

  message SortField {
    Expression expression = 1;
    SortDirection direction = 2;
    SortNulls nulls = 3;
  }

  enum SortDirection {
    SORT_DIRECTION_UNSPECIFIED = 0;
    SORT_DIRECTION_ASCENDING = 1;
    SORT_DIRECTION_DESCENDING = 2;
  }

  enum SortNulls {
    SORT_NULLS_UNSPECIFIED = 0;
    SORT_NULLS_FIRST = 1;
    SORT_NULLS_LAST = 2;
  }
}

// Relation of type [[Deduplicate]] which have duplicate rows removed, could consider either only
// the subset of columns or all the columns.
message Deduplicate {
  Relation input = 1;
  repeated string column_names = 2;
  bool all_columns_as_keys = 3;
}

message LocalRelation {
  repeated Expression.QualifiedAttribute attributes = 1;
  // TODO: support local data.
}

// Relation of type [[Sample]] that samples a fraction of the dataset.
message Sample {
  Relation input = 1;
  double lower_bound = 2;
  double upper_bound = 3;
  bool with_replacement = 4;
  optional int64 seed = 5;
}

// Relation of type [[Range]] that generates a sequence of integers.
message Range {
  // Optional. Default value = 0
  int64 start = 1;
  // Required.
  int64 end = 2;
  // Required.
  int64 step = 3;
  // Optional. Default value is assigned by 1) SQL conf "spark.sql.leafNodeDefaultParallelism" if
  // it is set, or 2) spark default parallelism.
  optional int32 num_partitions = 4;
}

// Relation alias.
message SubqueryAlias {
  // Required. The input relation.
  Relation input = 1;
  // Required. The alias.
  string alias = 2;
  // Optional. Qualifier of the alias.
  repeated string qualifier = 3;
}

// Relation repartition.
message Repartition {
  // Required. The input relation.
  Relation input = 1;

  // Required. Must be positive.
  int32 num_partitions = 2;

  // Optional. Default value is false.
  bool shuffle = 3;
}

// Compose the string representing rows for output.
// It will invoke 'Dataset.showString' to compute the results.
message ShowString {
  // (Required) The input relation.
  Relation input = 1;

  // (Required) Number of rows to show.
  optional int32 numRows = 2;

  // (Required) If set to more than 0, truncates strings to
  // `truncate` characters and all cells will be aligned right.
  optional int32 truncate = 3;

  // (Required) If set to true, prints output rows vertically (one line per column value).
  optional bool vertical = 4;
}

// Computes specified statistics for numeric and string columns.
// It will invoke 'Dataset.summary' (same as 'StatFunctions.summary')
// to compute the results.
message StatSummary {
  // (Required) The input relation.
  Relation input = 1;

  // (Optional) Statistics from to be computed.
  //
  // Available statistics are:
  //  count
  //  mean
  //  stddev
  //  min
  //  max
  //  arbitrary approximate percentiles specified as a percentage (e.g. 75%)
  //  count_distinct
  //  approx_count_distinct
  //
  // If no statistics are given, this function computes 'count', 'mean', 'stddev', 'min',
  // 'approximate quartiles' (percentiles at 25%, 50%, and 75%), and 'max'.
  repeated string statistics = 2;
}

// Computes a pair-wise frequency table of the given columns. Also known as a contingency table.
// It will invoke 'Dataset.stat.crosstab' (same as 'StatFunctions.crossTabulate')
// to compute the results.
message StatCrosstab {
  // (Required) The input relation.
  Relation input = 1;

  // (Required) The name of the first column.
  //
  // Distinct items will make the first item of each row.
  string col1 = 2;

  // (Required) The name of the second column.
  //
  // Distinct items will make the column names of the DataFrame.
  string col2 = 3;
}

// Replaces null values.
// It will invoke 'Dataset.na.fill' (same as 'DataFrameNaFunctions.fill') to compute the results.
// Following 3 parameter combinations are supported:
//  1, 'values' only contains 1 item, 'cols' is empty:
//    replaces null values in all type-compatible columns.
//  2, 'values' only contains 1 item, 'cols' is not empty:
//    replaces null values in specified columns.
//  3, 'values' contains more than 1 items, then 'cols' is required to have the same length:
//    replaces each specified column with corresponding value.
message NAFill {
  // (Required) The input relation.
  Relation input = 1;

  // (Optional) Optional list of column names to consider.
  repeated string cols = 2;

  // (Required) Values to replace null values with.
  //
  // Should contain at least 1 item.
  // Only 4 data types are supported now: bool, long, double, string
  repeated Expression.Literal values = 3;
}

// Rename columns on the input relation by the same length of names.
message RenameColumnsBySameLengthNames {
  // Required. The input relation.
  Relation input = 1;

  // Required.
  //
  // The number of columns of the input relation must be equal to the length
  // of this field. If this is not true, an exception will be returned.
  repeated string column_names = 2;
}


// Rename columns on the input relation by a map with name to name mapping.
message RenameColumnsByNameToNameMap {
  // Required. The input relation.
  Relation input = 1;


  // Required.
  //
  // Renaming column names of input relation from A to B where A is the map key
  // and B is the map value. This is a no-op if schema doesn't contain any A. It
  // does not require that all input relation column names to present as keys.
  // duplicated B are not allowed.
  map<string, string> rename_columns_map = 2;
}
