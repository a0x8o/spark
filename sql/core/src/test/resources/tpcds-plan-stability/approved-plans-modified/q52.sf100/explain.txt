== Physical Plan ==
TakeOrderedAndProject (21)
+- * HashAggregate (20)
   +- Exchange (19)
      +- * HashAggregate (18)
         +- * Project (17)
            +- * BroadcastHashJoin Inner BuildRight (16)
               :- * Project (10)
               :  +- * BroadcastHashJoin Inner BuildLeft (9)
               :     :- BroadcastExchange (5)
               :     :  +- * Project (4)
               :     :     +- * Filter (3)
               :     :        +- * ColumnarToRow (2)
               :     :           +- Scan parquet default.date_dim (1)
               :     +- * Filter (8)
               :        +- * ColumnarToRow (7)
               :           +- Scan parquet default.store_sales (6)
               +- BroadcastExchange (15)
                  +- * Project (14)
                     +- * Filter (13)
                        +- * ColumnarToRow (12)
                           +- Scan parquet default.item (11)


(1) Scan parquet default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), GreaterThanOrEqual(d_date_sk,2451149), LessThanOrEqual(d_date_sk,2451179), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(3) Filter [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((((((isnotnull(d_moy#3) AND isnotnull(d_year#2)) AND (d_moy#3 = 12)) AND (d_year#2 = 1998)) AND (d_date_sk#1 >= 2451149)) AND (d_date_sk#1 <= 2451179)) AND isnotnull(d_date_sk#1))

(4) Project [codegen id : 1]
Output [2]: [d_date_sk#1, d_year#2]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(5) BroadcastExchange
Input [2]: [d_date_sk#1, d_year#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#4]

(6) Scan parquet default.store_sales
Output [3]: [ss_item_sk#5, ss_ext_sales_price#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), (ss_sold_date_sk#7 >= 2451149), (ss_sold_date_sk#7 <= 2451179), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(7) ColumnarToRow
Input [3]: [ss_item_sk#5, ss_ext_sales_price#6, ss_sold_date_sk#7]

(8) Filter
Input [3]: [ss_item_sk#5, ss_ext_sales_price#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_item_sk#5)

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#7]
Join condition: None

(10) Project [codegen id : 3]
Output [3]: [d_year#2, ss_item_sk#5, ss_ext_sales_price#6]
Input [5]: [d_date_sk#1, d_year#2, ss_item_sk#5, ss_ext_sales_price#6, ss_sold_date_sk#7]

(11) Scan parquet default.item
Output [4]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manager_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>

(12) ColumnarToRow [codegen id : 2]
Input [4]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manager_id#12]

(13) Filter [codegen id : 2]
Input [4]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manager_id#12]
Condition : ((isnotnull(i_manager_id#12) AND (i_manager_id#12 = 1)) AND isnotnull(i_item_sk#9))

(14) Project [codegen id : 2]
Output [3]: [i_item_sk#9, i_brand_id#10, i_brand#11]
Input [4]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manager_id#12]

(15) BroadcastExchange
Input [3]: [i_item_sk#9, i_brand_id#10, i_brand#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#5]
Right keys [1]: [i_item_sk#9]
Join condition: None

(17) Project [codegen id : 3]
Output [4]: [d_year#2, ss_ext_sales_price#6, i_brand_id#10, i_brand#11]
Input [6]: [d_year#2, ss_item_sk#5, ss_ext_sales_price#6, i_item_sk#9, i_brand_id#10, i_brand#11]

(18) HashAggregate [codegen id : 3]
Input [4]: [d_year#2, ss_ext_sales_price#6, i_brand_id#10, i_brand#11]
Keys [3]: [d_year#2, i_brand#11, i_brand_id#10]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#6))]
Aggregate Attributes [1]: [sum#14]
Results [4]: [d_year#2, i_brand#11, i_brand_id#10, sum#15]

(19) Exchange
Input [4]: [d_year#2, i_brand#11, i_brand_id#10, sum#15]
Arguments: hashpartitioning(d_year#2, i_brand#11, i_brand_id#10, 5), ENSURE_REQUIREMENTS, [id=#16]

(20) HashAggregate [codegen id : 4]
Input [4]: [d_year#2, i_brand#11, i_brand_id#10, sum#15]
Keys [3]: [d_year#2, i_brand#11, i_brand_id#10]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#6))#17]
Results [4]: [d_year#2, i_brand_id#10 AS brand_id#18, i_brand#11 AS brand#19, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#6))#17,17,2) AS ext_price#20]

(21) TakeOrderedAndProject
Input [4]: [d_year#2, brand_id#18, brand#19, ext_price#20]
Arguments: 100, [d_year#2 ASC NULLS FIRST, ext_price#20 DESC NULLS LAST, brand_id#18 ASC NULLS FIRST], [d_year#2, brand_id#18, brand#19, ext_price#20]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
ReusedExchange (22)


(22) ReusedExchange [Reuses operator id: 5]
Output [2]: [d_date_sk#1, d_year#2]


