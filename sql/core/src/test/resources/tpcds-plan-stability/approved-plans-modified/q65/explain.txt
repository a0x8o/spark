== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- * BroadcastHashJoin Inner BuildRight (40)
      :- * Project (26)
      :  +- * BroadcastHashJoin Inner BuildRight (25)
      :     :- * Project (20)
      :     :  +- * BroadcastHashJoin Inner BuildRight (19)
      :     :     :- * Filter (3)
      :     :     :  +- * ColumnarToRow (2)
      :     :     :     +- Scan parquet default.store (1)
      :     :     +- BroadcastExchange (18)
      :     :        +- * Filter (17)
      :     :           +- * HashAggregate (16)
      :     :              +- Exchange (15)
      :     :                 +- * HashAggregate (14)
      :     :                    +- * Project (13)
      :     :                       +- * BroadcastHashJoin Inner BuildRight (12)
      :     :                          :- * Filter (6)
      :     :                          :  +- * ColumnarToRow (5)
      :     :                          :     +- Scan parquet default.store_sales (4)
      :     :                          +- BroadcastExchange (11)
      :     :                             +- * Project (10)
      :     :                                +- * Filter (9)
      :     :                                   +- * ColumnarToRow (8)
      :     :                                      +- Scan parquet default.date_dim (7)
      :     +- BroadcastExchange (24)
      :        +- * Filter (23)
      :           +- * ColumnarToRow (22)
      :              +- Scan parquet default.item (21)
      +- BroadcastExchange (39)
         +- * HashAggregate (38)
            +- Exchange (37)
               +- * HashAggregate (36)
                  +- * HashAggregate (35)
                     +- Exchange (34)
                        +- * HashAggregate (33)
                           +- * Project (32)
                              +- * BroadcastHashJoin Inner BuildRight (31)
                                 :- * Filter (29)
                                 :  +- * ColumnarToRow (28)
                                 :     +- Scan parquet default.store_sales (27)
                                 +- ReusedExchange (30)


(1) Scan parquet default.store
Output [2]: [s_store_sk#1, s_store_name#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(2) ColumnarToRow [codegen id : 9]
Input [2]: [s_store_sk#1, s_store_name#2]

(3) Filter [codegen id : 9]
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(4) Scan parquet default.store_sales
Output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), (ss_sold_date_sk#6 >= 2451911), (ss_sold_date_sk#6 <= 2452275), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 2]
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]

(6) Filter [codegen id : 2]
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_store_sk#4) AND isnotnull(ss_item_sk#3))

(7) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), GreaterThanOrEqual(d_date_sk,2451911), LessThanOrEqual(d_date_sk,2452275), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(8) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_month_seq#9]

(9) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_month_seq#9]
Condition : (((((isnotnull(d_month_seq#9) AND (d_month_seq#9 >= 1212)) AND (d_month_seq#9 <= 1223)) AND (d_date_sk#8 >= 2451911)) AND (d_date_sk#8 <= 2452275)) AND isnotnull(d_date_sk#8))

(10) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_month_seq#9]

(11) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(12) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(13) Project [codegen id : 2]
Output [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Input [5]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6, d_date_sk#8]

(14) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#5))]
Aggregate Attributes [1]: [sum#11]
Results [3]: [ss_store_sk#4, ss_item_sk#3, sum#12]

(15) Exchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#12]
Arguments: hashpartitioning(ss_store_sk#4, ss_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#13]

(16) HashAggregate [codegen id : 3]
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#12]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [sum(UnscaledValue(ss_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#5))#14]
Results [3]: [ss_store_sk#4, ss_item_sk#3, MakeDecimal(sum(UnscaledValue(ss_sales_price#5))#14,17,2) AS revenue#15]

(17) Filter [codegen id : 3]
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#15]
Condition : isnotnull(revenue#15)

(18) BroadcastExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(19) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [s_store_sk#1]
Right keys [1]: [ss_store_sk#4]
Join condition: None

(20) Project [codegen id : 9]
Output [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#15]
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#15]

(21) Scan parquet default.item
Output [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(22) ColumnarToRow [codegen id : 4]
Input [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]

(23) Filter [codegen id : 4]
Input [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Condition : isnotnull(i_item_sk#17)

(24) BroadcastExchange
Input [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22]

(25) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#3]
Right keys [1]: [i_item_sk#17]
Join condition: None

(26) Project [codegen id : 9]
Output [7]: [s_store_name#2, ss_store_sk#4, revenue#15, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Input [9]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#15, i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]

(27) Scan parquet default.store_sales
Output [4]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), (ss_sold_date_sk#26 >= 2451911), (ss_sold_date_sk#26 <= 2452275), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(28) ColumnarToRow [codegen id : 6]
Input [4]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25, ss_sold_date_sk#26]

(29) Filter [codegen id : 6]
Input [4]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Condition : isnotnull(ss_store_sk#24)

(30) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#8]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#26]
Right keys [1]: [d_date_sk#8]
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25]
Input [5]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25, ss_sold_date_sk#26, d_date_sk#8]

(33) HashAggregate [codegen id : 6]
Input [3]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25]
Keys [2]: [ss_store_sk#24, ss_item_sk#23]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum#27]
Results [3]: [ss_store_sk#24, ss_item_sk#23, sum#28]

(34) Exchange
Input [3]: [ss_store_sk#24, ss_item_sk#23, sum#28]
Arguments: hashpartitioning(ss_store_sk#24, ss_item_sk#23, 5), ENSURE_REQUIREMENTS, [id=#29]

(35) HashAggregate [codegen id : 7]
Input [3]: [ss_store_sk#24, ss_item_sk#23, sum#28]
Keys [2]: [ss_store_sk#24, ss_item_sk#23]
Functions [1]: [sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#25))#30]
Results [2]: [ss_store_sk#24, MakeDecimal(sum(UnscaledValue(ss_sales_price#25))#30,17,2) AS revenue#31]

(36) HashAggregate [codegen id : 7]
Input [2]: [ss_store_sk#24, revenue#31]
Keys [1]: [ss_store_sk#24]
Functions [1]: [partial_avg(revenue#31)]
Aggregate Attributes [2]: [sum#32, count#33]
Results [3]: [ss_store_sk#24, sum#34, count#35]

(37) Exchange
Input [3]: [ss_store_sk#24, sum#34, count#35]
Arguments: hashpartitioning(ss_store_sk#24, 5), ENSURE_REQUIREMENTS, [id=#36]

(38) HashAggregate [codegen id : 8]
Input [3]: [ss_store_sk#24, sum#34, count#35]
Keys [1]: [ss_store_sk#24]
Functions [1]: [avg(revenue#31)]
Aggregate Attributes [1]: [avg(revenue#31)#37]
Results [2]: [ss_store_sk#24, avg(revenue#31)#37 AS ave#38]

(39) BroadcastExchange
Input [2]: [ss_store_sk#24, ave#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [ss_store_sk#24]
Join condition: (cast(revenue#15 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#38)), DecimalType(23,7), true))

(41) Project [codegen id : 9]
Output [6]: [s_store_name#2, i_item_desc#18, revenue#15, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Input [9]: [s_store_name#2, ss_store_sk#4, revenue#15, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21, ss_store_sk#24, ave#38]

(42) TakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#18, revenue#15, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Arguments: 100, [s_store_name#2 ASC NULLS FIRST, i_item_desc#18 ASC NULLS FIRST], [s_store_name#2, i_item_desc#18, revenue#15, i_current_price#19, i_wholesale_cost#20, i_brand#21]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
ReusedExchange (43)


(43) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#8]

Subquery:2 Hosting operator id = 27 Hosting Expression = ss_sold_date_sk#26 IN dynamicpruning#7


