== Physical Plan ==
* Project (25)
+- * Sort (24)
   +- Exchange (23)
      +- * Project (22)
         +- Window (21)
            +- * Sort (20)
               +- Exchange (19)
                  +- * HashAggregate (18)
                     +- Exchange (17)
                        +- * HashAggregate (16)
                           +- * Project (15)
                              +- * SortMergeJoin Inner (14)
                                 :- * Sort (8)
                                 :  +- Exchange (7)
                                 :     +- * Project (6)
                                 :        +- * BroadcastHashJoin Inner BuildRight (5)
                                 :           :- * Filter (3)
                                 :           :  +- * ColumnarToRow (2)
                                 :           :     +- Scan parquet default.store_sales (1)
                                 :           +- ReusedExchange (4)
                                 +- * Sort (13)
                                    +- Exchange (12)
                                       +- * Filter (11)
                                          +- * ColumnarToRow (10)
                                             +- Scan parquet default.item (9)


(1) Scan parquet default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), (ss_sold_date_sk#3 >= 2451911), (ss_sold_date_sk#3 <= 2451941), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(4) ReusedExchange [Reuses operator id: 30]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 2]
Output [2]: [ss_item_sk#1, ss_ext_sales_price#2]
Input [4]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#5]

(7) Exchange
Input [2]: [ss_item_sk#1, ss_ext_sales_price#2]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(8) Sort [codegen id : 3]
Input [2]: [ss_item_sk#1, ss_ext_sales_price#2]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet default.item
Output [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_category, [Books                                             ,Jewelry                                           ,Sports                                            ]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:string,i_category:string>

(10) ColumnarToRow [codegen id : 4]
Input [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]

(11) Filter [codegen id : 4]
Input [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Condition : (i_category#12 IN (Jewelry                                           ,Sports                                            ,Books                                             ) AND isnotnull(i_item_sk#7))

(12) Exchange
Input [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#13]

(13) Sort [codegen id : 5]
Input [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(15) Project [codegen id : 6]
Output [6]: [ss_ext_sales_price#2, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Input [8]: [ss_item_sk#1, ss_ext_sales_price#2, i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]

(16) HashAggregate [codegen id : 6]
Input [6]: [ss_ext_sales_price#2, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Keys [5]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#14]
Results [6]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, sum#15]

(17) Exchange
Input [6]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, sum#15]
Arguments: hashpartitioning(i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, 5), ENSURE_REQUIREMENTS, [id=#16]

(18) HashAggregate [codegen id : 7]
Input [6]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, sum#15]
Keys [5]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#17]
Results [8]: [i_item_desc#9, i_category#12, i_class#11, i_current_price#10, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#17,17,2) AS itemrevenue#18, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#17,17,2) AS _w0#19, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#17,17,2) AS _w1#20, i_item_id#8]

(19) Exchange
Input [8]: [i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#18, _w0#19, _w1#20, i_item_id#8]
Arguments: hashpartitioning(i_class#11, 5), ENSURE_REQUIREMENTS, [id=#21]

(20) Sort [codegen id : 8]
Input [8]: [i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#18, _w0#19, _w1#20, i_item_id#8]
Arguments: [i_class#11 ASC NULLS FIRST], false, 0

(21) Window
Input [8]: [i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#18, _w0#19, _w1#20, i_item_id#8]
Arguments: [sum(_w1#20) windowspecdefinition(i_class#11, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#22], [i_class#11]

(22) Project [codegen id : 9]
Output [7]: [i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#18, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#19) * 100.00), DecimalType(21,2), true) as decimal(27,2))) / promote_precision(_we0#22)), DecimalType(38,17), true) AS revenueratio#23, i_item_id#8]
Input [9]: [i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#18, _w0#19, _w1#20, i_item_id#8, _we0#22]

(23) Exchange
Input [7]: [i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#18, revenueratio#23, i_item_id#8]
Arguments: rangepartitioning(i_category#12 ASC NULLS FIRST, i_class#11 ASC NULLS FIRST, i_item_id#8 ASC NULLS FIRST, i_item_desc#9 ASC NULLS FIRST, revenueratio#23 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#24]

(24) Sort [codegen id : 10]
Input [7]: [i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#18, revenueratio#23, i_item_id#8]
Arguments: [i_category#12 ASC NULLS FIRST, i_class#11 ASC NULLS FIRST, i_item_id#8 ASC NULLS FIRST, i_item_desc#9 ASC NULLS FIRST, revenueratio#23 ASC NULLS FIRST], true, 0

(25) Project [codegen id : 10]
Output [6]: [i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#18, revenueratio#23]
Input [7]: [i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#18, revenueratio#23, i_item_id#8]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (30)
+- * Project (29)
   +- * Filter (28)
      +- * ColumnarToRow (27)
         +- Scan parquet default.date_dim (26)


(26) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_date#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2001-01-01), LessThanOrEqual(d_date,2001-01-31), GreaterThanOrEqual(d_date_sk,2451911), LessThanOrEqual(d_date_sk,2451941), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(27) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_date#25]

(28) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_date#25]
Condition : (((((isnotnull(d_date#25) AND (d_date#25 >= 2001-01-01)) AND (d_date#25 <= 2001-01-31)) AND (d_date_sk#5 >= 2451911)) AND (d_date_sk#5 <= 2451941)) AND isnotnull(d_date_sk#5))

(29) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_date#25]

(30) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]


