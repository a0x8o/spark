== Physical Plan ==
TakeOrderedAndProject (32)
+- * Project (31)
   +- * Filter (30)
      +- Window (29)
         +- * Sort (28)
            +- Exchange (27)
               +- * HashAggregate (26)
                  +- Exchange (25)
                     +- * HashAggregate (24)
                        +- * Project (23)
                           +- * BroadcastHashJoin Inner BuildRight (22)
                              :- * Project (16)
                              :  +- * BroadcastHashJoin Inner BuildRight (15)
                              :     :- * Project (10)
                              :     :  +- * BroadcastHashJoin Inner BuildLeft (9)
                              :     :     :- BroadcastExchange (5)
                              :     :     :  +- * Project (4)
                              :     :     :     +- * Filter (3)
                              :     :     :        +- * ColumnarToRow (2)
                              :     :     :           +- Scan parquet default.item (1)
                              :     :     +- * Filter (8)
                              :     :        +- * ColumnarToRow (7)
                              :     :           +- Scan parquet default.store_sales (6)
                              :     +- BroadcastExchange (14)
                              :        +- * Filter (13)
                              :           +- * ColumnarToRow (12)
                              :              +- Scan parquet default.store (11)
                              +- BroadcastExchange (21)
                                 +- * Project (20)
                                    +- * Filter (19)
                                       +- * ColumnarToRow (18)
                                          +- Scan parquet default.date_dim (17)


(1) Scan parquet default.item
Output [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manager_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [Or(And(And(In(i_category, [Books,Children,Electronics]),In(i_class, [personal,portable,reference,self-help])),In(i_brand, [scholaramalgamalg #6,scholaramalgamalg #7,exportiunivamalg #8,scholaramalgamalg #8])),And(And(In(i_category, [Women,Music,Men]),In(i_class, [accessories,classical,fragrances,pants])),In(i_brand, [amalgimporto #9,edu packscholar #9,exportiimporto #9,importoamalg #9]))), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_manager_id:int>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manager_id#5]

(3) Filter [codegen id : 1]
Input [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manager_id#5]
Condition : ((((i_category#4 IN (Books,Children,Electronics) AND i_class#3 IN (personal,portable,reference,self-help)) AND i_brand#2 IN (scholaramalgamalg #6,scholaramalgamalg #7,exportiunivamalg #8,scholaramalgamalg #8)) OR ((i_category#4 IN (Women,Music,Men) AND i_class#3 IN (accessories,classical,fragrances,pants)) AND i_brand#2 IN (amalgimporto #9,edu packscholar #9,exportiimporto #9,importoamalg #9))) AND isnotnull(i_item_sk#1))

(4) Project [codegen id : 1]
Output [2]: [i_item_sk#1, i_manager_id#5]
Input [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manager_id#5]

(5) BroadcastExchange
Input [2]: [i_item_sk#1, i_manager_id#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(6) Scan parquet default.store_sales
Output [4]: [ss_item_sk#11, ss_store_sk#12, ss_sales_price#13, ss_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#14), (ss_sold_date_sk#14 >= 2452123), (ss_sold_date_sk#14 <= 2452487), dynamicpruningexpression(ss_sold_date_sk#14 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(7) ColumnarToRow
Input [4]: [ss_item_sk#11, ss_store_sk#12, ss_sales_price#13, ss_sold_date_sk#14]

(8) Filter
Input [4]: [ss_item_sk#11, ss_store_sk#12, ss_sales_price#13, ss_sold_date_sk#14]
Condition : (isnotnull(ss_item_sk#11) AND isnotnull(ss_store_sk#12))

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#11]
Join condition: None

(10) Project [codegen id : 4]
Output [4]: [i_manager_id#5, ss_store_sk#12, ss_sales_price#13, ss_sold_date_sk#14]
Input [6]: [i_item_sk#1, i_manager_id#5, ss_item_sk#11, ss_store_sk#12, ss_sales_price#13, ss_sold_date_sk#14]

(11) Scan parquet default.store
Output [1]: [s_store_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(12) ColumnarToRow [codegen id : 2]
Input [1]: [s_store_sk#16]

(13) Filter [codegen id : 2]
Input [1]: [s_store_sk#16]
Condition : isnotnull(s_store_sk#16)

(14) BroadcastExchange
Input [1]: [s_store_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#12]
Right keys [1]: [s_store_sk#16]
Join condition: None

(16) Project [codegen id : 4]
Output [3]: [i_manager_id#5, ss_sales_price#13, ss_sold_date_sk#14]
Input [5]: [i_manager_id#5, ss_store_sk#12, ss_sales_price#13, ss_sold_date_sk#14, s_store_sk#16]

(17) Scan parquet default.date_dim
Output [3]: [d_date_sk#18, d_month_seq#19, d_moy#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_month_seq, [1222,1228,1223,1227,1219,1226,1224,1225,1230,1220,1221,1229]), GreaterThanOrEqual(d_date_sk,2452123), LessThanOrEqual(d_date_sk,2452487), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_moy:int>

(18) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#18, d_month_seq#19, d_moy#20]

(19) Filter [codegen id : 3]
Input [3]: [d_date_sk#18, d_month_seq#19, d_moy#20]
Condition : (((d_month_seq#19 INSET (1222,1228,1223,1227,1219,1226,1224,1225,1230,1220,1221,1229) AND (d_date_sk#18 >= 2452123)) AND (d_date_sk#18 <= 2452487)) AND isnotnull(d_date_sk#18))

(20) Project [codegen id : 3]
Output [2]: [d_date_sk#18, d_moy#20]
Input [3]: [d_date_sk#18, d_month_seq#19, d_moy#20]

(21) BroadcastExchange
Input [2]: [d_date_sk#18, d_moy#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#14]
Right keys [1]: [d_date_sk#18]
Join condition: None

(23) Project [codegen id : 4]
Output [3]: [i_manager_id#5, ss_sales_price#13, d_moy#20]
Input [5]: [i_manager_id#5, ss_sales_price#13, ss_sold_date_sk#14, d_date_sk#18, d_moy#20]

(24) HashAggregate [codegen id : 4]
Input [3]: [i_manager_id#5, ss_sales_price#13, d_moy#20]
Keys [2]: [i_manager_id#5, d_moy#20]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#13))]
Aggregate Attributes [1]: [sum#22]
Results [3]: [i_manager_id#5, d_moy#20, sum#23]

(25) Exchange
Input [3]: [i_manager_id#5, d_moy#20, sum#23]
Arguments: hashpartitioning(i_manager_id#5, d_moy#20, 5), ENSURE_REQUIREMENTS, [id=#24]

(26) HashAggregate [codegen id : 5]
Input [3]: [i_manager_id#5, d_moy#20, sum#23]
Keys [2]: [i_manager_id#5, d_moy#20]
Functions [1]: [sum(UnscaledValue(ss_sales_price#13))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#13))#25]
Results [3]: [i_manager_id#5, MakeDecimal(sum(UnscaledValue(ss_sales_price#13))#25,17,2) AS sum_sales#26, MakeDecimal(sum(UnscaledValue(ss_sales_price#13))#25,17,2) AS _w0#27]

(27) Exchange
Input [3]: [i_manager_id#5, sum_sales#26, _w0#27]
Arguments: hashpartitioning(i_manager_id#5, 5), ENSURE_REQUIREMENTS, [id=#28]

(28) Sort [codegen id : 6]
Input [3]: [i_manager_id#5, sum_sales#26, _w0#27]
Arguments: [i_manager_id#5 ASC NULLS FIRST], false, 0

(29) Window
Input [3]: [i_manager_id#5, sum_sales#26, _w0#27]
Arguments: [avg(_w0#27) windowspecdefinition(i_manager_id#5, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#29], [i_manager_id#5]

(30) Filter [codegen id : 7]
Input [4]: [i_manager_id#5, sum_sales#26, _w0#27, avg_monthly_sales#29]
Condition : ((isnotnull(avg_monthly_sales#29) AND (avg_monthly_sales#29 > 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#26 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#29 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#29 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000))

(31) Project [codegen id : 7]
Output [3]: [i_manager_id#5, sum_sales#26, avg_monthly_sales#29]
Input [4]: [i_manager_id#5, sum_sales#26, _w0#27, avg_monthly_sales#29]

(32) TakeOrderedAndProject
Input [3]: [i_manager_id#5, sum_sales#26, avg_monthly_sales#29]
Arguments: 100, [i_manager_id#5 ASC NULLS FIRST, avg_monthly_sales#29 ASC NULLS FIRST, sum_sales#26 ASC NULLS FIRST], [i_manager_id#5, sum_sales#26, avg_monthly_sales#29]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#14 IN dynamicpruning#15
ReusedExchange (33)


(33) ReusedExchange [Reuses operator id: 21]
Output [2]: [d_date_sk#18, d_moy#20]


