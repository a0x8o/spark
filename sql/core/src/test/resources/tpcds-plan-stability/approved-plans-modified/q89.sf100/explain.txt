== Physical Plan ==
TakeOrderedAndProject (31)
+- * Project (30)
   +- * Filter (29)
      +- Window (28)
         +- * Sort (27)
            +- Exchange (26)
               +- * HashAggregate (25)
                  +- Exchange (24)
                     +- * HashAggregate (23)
                        +- * Project (22)
                           +- * BroadcastHashJoin Inner BuildRight (21)
                              :- * Project (16)
                              :  +- * BroadcastHashJoin Inner BuildRight (15)
                              :     :- * Project (10)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (9)
                              :     :     :- * Filter (3)
                              :     :     :  +- * ColumnarToRow (2)
                              :     :     :     +- Scan parquet default.store_sales (1)
                              :     :     +- BroadcastExchange (8)
                              :     :        +- * Project (7)
                              :     :           +- * Filter (6)
                              :     :              +- * ColumnarToRow (5)
                              :     :                 +- Scan parquet default.date_dim (4)
                              :     +- BroadcastExchange (14)
                              :        +- * Filter (13)
                              :           +- * ColumnarToRow (12)
                              :              +- Scan parquet default.store (11)
                              +- BroadcastExchange (20)
                                 +- * Filter (19)
                                    +- * ColumnarToRow (18)
                                       +- Scan parquet default.item (17)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), (ss_sold_date_sk#4 >= 2451545), (ss_sold_date_sk#4 <= 2451910), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 4]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), GreaterThanOrEqual(d_date_sk,2451545), LessThanOrEqual(d_date_sk,2451910), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND (d_date_sk#6 >= 2451545)) AND (d_date_sk#6 <= 2451910)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#6, d_moy#8]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(8) BroadcastExchange
Input [2]: [d_date_sk#6, d_moy#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 4]
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, d_moy#8]
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4, d_date_sk#6, d_moy#8]

(11) Scan parquet default.store
Output [3]: [s_store_sk#10, s_store_name#11, s_company_name#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#10, s_store_name#11, s_company_name#12]

(13) Filter [codegen id : 2]
Input [3]: [s_store_sk#10, s_store_name#11, s_company_name#12]
Condition : isnotnull(s_store_sk#10)

(14) BroadcastExchange
Input [3]: [s_store_sk#10, s_store_name#11, s_company_name#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#10]
Join condition: None

(16) Project [codegen id : 4]
Output [5]: [ss_item_sk#1, ss_sales_price#3, d_moy#8, s_store_name#11, s_company_name#12]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, d_moy#8, s_store_sk#10, s_store_name#11, s_company_name#12]

(17) Scan parquet default.item
Output [4]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [Or(And(In(i_category, [Home,Books,Electronics]),In(i_class, [wallpaper,parenting,musical])),And(In(i_category, [Shoes,Jewelry,Men]),In(i_class, [womens,birdal,pants]))), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string>

(18) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17]

(19) Filter [codegen id : 3]
Input [4]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17]
Condition : (((i_category#17 IN (Home,Books,Electronics) AND i_class#16 IN (wallpaper,parenting,musical)) OR (i_category#17 IN (Shoes,Jewelry,Men) AND i_class#16 IN (womens,birdal,pants))) AND isnotnull(i_item_sk#14))

(20) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#14]
Join condition: None

(22) Project [codegen id : 4]
Output [7]: [i_brand#15, i_class#16, i_category#17, ss_sales_price#3, d_moy#8, s_store_name#11, s_company_name#12]
Input [9]: [ss_item_sk#1, ss_sales_price#3, d_moy#8, s_store_name#11, s_company_name#12, i_item_sk#14, i_brand#15, i_class#16, i_category#17]

(23) HashAggregate [codegen id : 4]
Input [7]: [i_brand#15, i_class#16, i_category#17, ss_sales_price#3, d_moy#8, s_store_name#11, s_company_name#12]
Keys [6]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum#19]
Results [7]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum#20]

(24) Exchange
Input [7]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum#20]
Arguments: hashpartitioning(i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, 5), ENSURE_REQUIREMENTS, [id=#21]

(25) HashAggregate [codegen id : 5]
Input [7]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum#20]
Keys [6]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8]
Functions [1]: [sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#3))#22]
Results [8]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#22,17,2) AS sum_sales#23, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#22,17,2) AS _w0#24]

(26) Exchange
Input [8]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum_sales#23, _w0#24]
Arguments: hashpartitioning(i_category#17, i_brand#15, s_store_name#11, s_company_name#12, 5), ENSURE_REQUIREMENTS, [id=#25]

(27) Sort [codegen id : 6]
Input [8]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum_sales#23, _w0#24]
Arguments: [i_category#17 ASC NULLS FIRST, i_brand#15 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST, s_company_name#12 ASC NULLS FIRST], false, 0

(28) Window
Input [8]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum_sales#23, _w0#24]
Arguments: [avg(_w0#24) windowspecdefinition(i_category#17, i_brand#15, s_store_name#11, s_company_name#12, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#26], [i_category#17, i_brand#15, s_store_name#11, s_company_name#12]

(29) Filter [codegen id : 7]
Input [9]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum_sales#23, _w0#24, avg_monthly_sales#26]
Condition : ((isnotnull(avg_monthly_sales#26) AND NOT (avg_monthly_sales#26 = 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#23 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#26 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#26 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000))

(30) Project [codegen id : 7]
Output [8]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum_sales#23, avg_monthly_sales#26]
Input [9]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum_sales#23, _w0#24, avg_monthly_sales#26]

(31) TakeOrderedAndProject
Input [8]: [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum_sales#23, avg_monthly_sales#26]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#23 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#26 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST], [i_category#17, i_class#16, i_brand#15, s_store_name#11, s_company_name#12, d_moy#8, sum_sales#23, avg_monthly_sales#26]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (32)


(32) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#6, d_moy#8]


