== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- * BroadcastHashJoin Inner BuildLeft (40)
      :- BroadcastExchange (36)
      :  +- * Project (35)
      :     +- * BroadcastHashJoin Inner BuildLeft (34)
      :        :- BroadcastExchange (30)
      :        :  +- * Project (29)
      :        :     +- * BroadcastHashJoin Inner BuildRight (28)
      :        :        :- * Filter (14)
      :        :        :  +- * HashAggregate (13)
      :        :        :     +- Exchange (12)
      :        :        :        +- * HashAggregate (11)
      :        :        :           +- * Project (10)
      :        :        :              +- * BroadcastHashJoin Inner BuildRight (9)
      :        :        :                 :- * Filter (3)
      :        :        :                 :  +- * ColumnarToRow (2)
      :        :        :                 :     +- Scan parquet default.store_sales (1)
      :        :        :                 +- BroadcastExchange (8)
      :        :        :                    +- * Project (7)
      :        :        :                       +- * Filter (6)
      :        :        :                          +- * ColumnarToRow (5)
      :        :        :                             +- Scan parquet default.date_dim (4)
      :        :        +- BroadcastExchange (27)
      :        :           +- * HashAggregate (26)
      :        :              +- Exchange (25)
      :        :                 +- * HashAggregate (24)
      :        :                    +- * HashAggregate (23)
      :        :                       +- Exchange (22)
      :        :                          +- * HashAggregate (21)
      :        :                             +- * Project (20)
      :        :                                +- * BroadcastHashJoin Inner BuildRight (19)
      :        :                                   :- * Filter (17)
      :        :                                   :  +- * ColumnarToRow (16)
      :        :                                   :     +- Scan parquet default.store_sales (15)
      :        :                                   +- ReusedExchange (18)
      :        +- * Filter (33)
      :           +- * ColumnarToRow (32)
      :              +- Scan parquet default.store (31)
      +- * Filter (39)
         +- * ColumnarToRow (38)
            +- Scan parquet default.item (37)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), (ss_sold_date_sk#4 >= 2451911), (ss_sold_date_sk#4 <= 2452275), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), GreaterThanOrEqual(d_date_sk,2451911), LessThanOrEqual(d_date_sk,2452275), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_month_seq#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_month_seq#7]
Condition : (((((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND (d_date_sk#6 >= 2451911)) AND (d_date_sk#6 <= 2452275)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_month_seq#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4, d_date_sk#6]

(11) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3]
Keys [2]: [ss_store_sk#2, ss_item_sk#1]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum#9]
Results [3]: [ss_store_sk#2, ss_item_sk#1, sum#10]

(12) Exchange
Input [3]: [ss_store_sk#2, ss_item_sk#1, sum#10]
Arguments: hashpartitioning(ss_store_sk#2, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#11]

(13) HashAggregate [codegen id : 7]
Input [3]: [ss_store_sk#2, ss_item_sk#1, sum#10]
Keys [2]: [ss_store_sk#2, ss_item_sk#1]
Functions [1]: [sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#3))#12]
Results [3]: [ss_store_sk#2, ss_item_sk#1, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#12,17,2) AS revenue#13]

(14) Filter [codegen id : 7]
Input [3]: [ss_store_sk#2, ss_item_sk#1, revenue#13]
Condition : isnotnull(revenue#13)

(15) Scan parquet default.store_sales
Output [4]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16, ss_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#17), (ss_sold_date_sk#17 >= 2451911), (ss_sold_date_sk#17 <= 2452275), dynamicpruningexpression(ss_sold_date_sk#17 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16, ss_sold_date_sk#17]

(17) Filter [codegen id : 4]
Input [4]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16, ss_sold_date_sk#17]
Condition : isnotnull(ss_store_sk#15)

(18) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#6]

(19) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#17]
Right keys [1]: [d_date_sk#6]
Join condition: None

(20) Project [codegen id : 4]
Output [3]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16]
Input [5]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16, ss_sold_date_sk#17, d_date_sk#6]

(21) HashAggregate [codegen id : 4]
Input [3]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16]
Keys [2]: [ss_store_sk#15, ss_item_sk#14]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#16))]
Aggregate Attributes [1]: [sum#18]
Results [3]: [ss_store_sk#15, ss_item_sk#14, sum#19]

(22) Exchange
Input [3]: [ss_store_sk#15, ss_item_sk#14, sum#19]
Arguments: hashpartitioning(ss_store_sk#15, ss_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#20]

(23) HashAggregate [codegen id : 5]
Input [3]: [ss_store_sk#15, ss_item_sk#14, sum#19]
Keys [2]: [ss_store_sk#15, ss_item_sk#14]
Functions [1]: [sum(UnscaledValue(ss_sales_price#16))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#16))#21]
Results [2]: [ss_store_sk#15, MakeDecimal(sum(UnscaledValue(ss_sales_price#16))#21,17,2) AS revenue#22]

(24) HashAggregate [codegen id : 5]
Input [2]: [ss_store_sk#15, revenue#22]
Keys [1]: [ss_store_sk#15]
Functions [1]: [partial_avg(revenue#22)]
Aggregate Attributes [2]: [sum#23, count#24]
Results [3]: [ss_store_sk#15, sum#25, count#26]

(25) Exchange
Input [3]: [ss_store_sk#15, sum#25, count#26]
Arguments: hashpartitioning(ss_store_sk#15, 5), ENSURE_REQUIREMENTS, [id=#27]

(26) HashAggregate [codegen id : 6]
Input [3]: [ss_store_sk#15, sum#25, count#26]
Keys [1]: [ss_store_sk#15]
Functions [1]: [avg(revenue#22)]
Aggregate Attributes [1]: [avg(revenue#22)#28]
Results [2]: [ss_store_sk#15, avg(revenue#22)#28 AS ave#29]

(27) BroadcastExchange
Input [2]: [ss_store_sk#15, ave#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30]

(28) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [ss_store_sk#15]
Join condition: (cast(revenue#13 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#29)), DecimalType(23,7), true))

(29) Project [codegen id : 7]
Output [3]: [ss_store_sk#2, ss_item_sk#1, revenue#13]
Input [5]: [ss_store_sk#2, ss_item_sk#1, revenue#13, ss_store_sk#15, ave#29]

(30) BroadcastExchange
Input [3]: [ss_store_sk#2, ss_item_sk#1, revenue#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(31) Scan parquet default.store
Output [2]: [s_store_sk#32, s_store_name#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(32) ColumnarToRow
Input [2]: [s_store_sk#32, s_store_name#33]

(33) Filter
Input [2]: [s_store_sk#32, s_store_name#33]
Condition : isnotnull(s_store_sk#32)

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#32]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [ss_item_sk#1, revenue#13, s_store_name#33]
Input [5]: [ss_store_sk#2, ss_item_sk#1, revenue#13, s_store_sk#32, s_store_name#33]

(36) BroadcastExchange
Input [3]: [ss_item_sk#1, revenue#13, s_store_name#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34]

(37) Scan parquet default.item
Output [5]: [i_item_sk#35, i_item_desc#36, i_current_price#37, i_wholesale_cost#38, i_brand#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(38) ColumnarToRow
Input [5]: [i_item_sk#35, i_item_desc#36, i_current_price#37, i_wholesale_cost#38, i_brand#39]

(39) Filter
Input [5]: [i_item_sk#35, i_item_desc#36, i_current_price#37, i_wholesale_cost#38, i_brand#39]
Condition : isnotnull(i_item_sk#35)

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#35]
Join condition: None

(41) Project [codegen id : 9]
Output [6]: [s_store_name#33, i_item_desc#36, revenue#13, i_current_price#37, i_wholesale_cost#38, i_brand#39]
Input [8]: [ss_item_sk#1, revenue#13, s_store_name#33, i_item_sk#35, i_item_desc#36, i_current_price#37, i_wholesale_cost#38, i_brand#39]

(42) TakeOrderedAndProject
Input [6]: [s_store_name#33, i_item_desc#36, revenue#13, i_current_price#37, i_wholesale_cost#38, i_brand#39]
Arguments: 100, [s_store_name#33 ASC NULLS FIRST, i_item_desc#36 ASC NULLS FIRST], [s_store_name#33, i_item_desc#36, revenue#13, i_current_price#37, i_wholesale_cost#38, i_brand#39]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (43)


(43) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#6]

Subquery:2 Hosting operator id = 15 Hosting Expression = ss_sold_date_sk#17 IN dynamicpruning#5


