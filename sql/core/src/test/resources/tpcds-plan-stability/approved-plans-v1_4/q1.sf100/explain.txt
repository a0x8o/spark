== Physical Plan ==
TakeOrderedAndProject (43)
+- * Project (42)
   +- * SortMergeJoin Inner (41)
      :- * Sort (35)
      :  +- Exchange (34)
      :     +- * Project (33)
      :        +- * BroadcastHashJoin Inner BuildRight (32)
      :           :- * Project (26)
      :           :  +- * BroadcastHashJoin Inner BuildRight (25)
      :           :     :- * Filter (10)
      :           :     :  +- * HashAggregate (9)
      :           :     :     +- Exchange (8)
      :           :     :        +- * HashAggregate (7)
      :           :     :           +- * Project (6)
      :           :     :              +- * BroadcastHashJoin Inner BuildRight (5)
      :           :     :                 :- * Filter (3)
      :           :     :                 :  +- * ColumnarToRow (2)
      :           :     :                 :     +- Scan parquet default.store_returns (1)
      :           :     :                 +- ReusedExchange (4)
      :           :     +- BroadcastExchange (24)
      :           :        +- * Filter (23)
      :           :           +- * HashAggregate (22)
      :           :              +- Exchange (21)
      :           :                 +- * HashAggregate (20)
      :           :                    +- * HashAggregate (19)
      :           :                       +- Exchange (18)
      :           :                          +- * HashAggregate (17)
      :           :                             +- * Project (16)
      :           :                                +- * BroadcastHashJoin Inner BuildRight (15)
      :           :                                   :- * Filter (13)
      :           :                                   :  +- * ColumnarToRow (12)
      :           :                                   :     +- Scan parquet default.store_returns (11)
      :           :                                   +- ReusedExchange (14)
      :           +- BroadcastExchange (31)
      :              +- * Project (30)
      :                 +- * Filter (29)
      :                    +- * ColumnarToRow (28)
      :                       +- Scan parquet default.store (27)
      +- * Sort (40)
         +- Exchange (39)
            +- * Filter (38)
               +- * ColumnarToRow (37)
                  +- Scan parquet default.customer (36)


(1) Scan parquet default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(sr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : (isnotnull(sr_store_sk#2) AND isnotnull(sr_customer_sk#1))

(4) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]

(8) Exchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 8]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#3))#9]
Results [3]: [sr_customer_sk#1 AS ctr_customer_sk#10, sr_store_sk#2 AS ctr_store_sk#11, MakeDecimal(sum(UnscaledValue(sr_return_amt#3))#9,17,2) AS ctr_total_return#12]

(10) Filter [codegen id : 8]
Input [3]: [ctr_customer_sk#10, ctr_store_sk#11, ctr_total_return#12]
Condition : isnotnull(ctr_total_return#12)

(11) Scan parquet default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(sr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(12) ColumnarToRow [codegen id : 4]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(13) Filter [codegen id : 4]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : isnotnull(sr_store_sk#2)

(14) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#6]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(16) Project [codegen id : 4]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#6]

(17) HashAggregate [codegen id : 4]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#13]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#14]

(18) Exchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#14]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(19) HashAggregate [codegen id : 5]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#14]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#3))#9]
Results [2]: [sr_store_sk#2 AS ctr_store_sk#11, MakeDecimal(sum(UnscaledValue(sr_return_amt#3))#9,17,2) AS ctr_total_return#12]

(20) HashAggregate [codegen id : 5]
Input [2]: [ctr_store_sk#11, ctr_total_return#12]
Keys [1]: [ctr_store_sk#11]
Functions [1]: [partial_avg(ctr_total_return#12)]
Aggregate Attributes [2]: [sum#15, count#16]
Results [3]: [ctr_store_sk#11, sum#17, count#18]

(21) Exchange
Input [3]: [ctr_store_sk#11, sum#17, count#18]
Arguments: hashpartitioning(ctr_store_sk#11, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(22) HashAggregate [codegen id : 6]
Input [3]: [ctr_store_sk#11, sum#17, count#18]
Keys [1]: [ctr_store_sk#11]
Functions [1]: [avg(ctr_total_return#12)]
Aggregate Attributes [1]: [avg(ctr_total_return#12)#19]
Results [2]: [(avg(ctr_total_return#12)#19 * 1.2) AS (avg(ctr_total_return) * 1.2)#20, ctr_store_sk#11 AS ctr_store_sk#11#21]

(23) Filter [codegen id : 6]
Input [2]: [(avg(ctr_total_return) * 1.2)#20, ctr_store_sk#11#21]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#20)

(24) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#20, ctr_store_sk#11#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=4]

(25) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ctr_store_sk#11]
Right keys [1]: [ctr_store_sk#11#21]
Join condition: (cast(ctr_total_return#12 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#20)

(26) Project [codegen id : 8]
Output [2]: [ctr_customer_sk#10, ctr_store_sk#11]
Input [5]: [ctr_customer_sk#10, ctr_store_sk#11, ctr_total_return#12, (avg(ctr_total_return) * 1.2)#20, ctr_store_sk#11#21]

(27) Scan parquet default.store
Output [2]: [s_store_sk#22, s_state#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(28) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#22, s_state#23]

(29) Filter [codegen id : 7]
Input [2]: [s_store_sk#22, s_state#23]
Condition : ((isnotnull(s_state#23) AND (s_state#23 = TN)) AND isnotnull(s_store_sk#22))

(30) Project [codegen id : 7]
Output [1]: [s_store_sk#22]
Input [2]: [s_store_sk#22, s_state#23]

(31) BroadcastExchange
Input [1]: [s_store_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ctr_store_sk#11]
Right keys [1]: [s_store_sk#22]
Join condition: None

(33) Project [codegen id : 8]
Output [1]: [ctr_customer_sk#10]
Input [3]: [ctr_customer_sk#10, ctr_store_sk#11, s_store_sk#22]

(34) Exchange
Input [1]: [ctr_customer_sk#10]
Arguments: hashpartitioning(ctr_customer_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(35) Sort [codegen id : 9]
Input [1]: [ctr_customer_sk#10]
Arguments: [ctr_customer_sk#10 ASC NULLS FIRST], false, 0

(36) Scan parquet default.customer
Output [2]: [c_customer_sk#24, c_customer_id#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(37) ColumnarToRow [codegen id : 10]
Input [2]: [c_customer_sk#24, c_customer_id#25]

(38) Filter [codegen id : 10]
Input [2]: [c_customer_sk#24, c_customer_id#25]
Condition : isnotnull(c_customer_sk#24)

(39) Exchange
Input [2]: [c_customer_sk#24, c_customer_id#25]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(40) Sort [codegen id : 11]
Input [2]: [c_customer_sk#24, c_customer_id#25]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 12]
Left keys [1]: [ctr_customer_sk#10]
Right keys [1]: [c_customer_sk#24]
Join condition: None

(42) Project [codegen id : 12]
Output [1]: [c_customer_id#25]
Input [3]: [ctr_customer_sk#10, c_customer_sk#24, c_customer_id#25]

(43) TakeOrderedAndProject
Input [1]: [c_customer_id#25]
Arguments: 100, [c_customer_id#25 ASC NULLS FIRST], [c_customer_id#25]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = sr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (48)
+- * Project (47)
   +- * Filter (46)
      +- * ColumnarToRow (45)
         +- Scan parquet default.date_dim (44)


(44) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(45) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#26]

(46) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#26]
Condition : ((isnotnull(d_year#26) AND (d_year#26 = 2000)) AND isnotnull(d_date_sk#6))

(47) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#26]

(48) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 11 Hosting Expression = sr_returned_date_sk#4 IN dynamicpruning#5


