== Physical Plan ==
CollectLimit (31)
+- * Project (30)
   +- * BroadcastHashJoin Inner BuildRight (29)
      :- * Project (27)
      :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :- * Project (10)
      :     :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :     :- * Filter (3)
      :     :     :  +- * ColumnarToRow (2)
      :     :     :     +- Scan parquet default.catalog_sales (1)
      :     :     +- BroadcastExchange (8)
      :     :        +- * Project (7)
      :     :           +- * Filter (6)
      :     :              +- * ColumnarToRow (5)
      :     :                 +- Scan parquet default.item (4)
      :     +- BroadcastExchange (25)
      :        +- * Filter (24)
      :           +- * HashAggregate (23)
      :              +- Exchange (22)
      :                 +- * HashAggregate (21)
      :                    +- * Project (20)
      :                       +- * BroadcastHashJoin Inner BuildRight (19)
      :                          :- * Filter (13)
      :                          :  +- * ColumnarToRow (12)
      :                          :     +- Scan parquet default.catalog_sales (11)
      :                          +- BroadcastExchange (18)
      :                             +- * Project (17)
      :                                +- * Filter (16)
      :                                   +- * ColumnarToRow (15)
      :                                      +- Scan parquet default.date_dim (14)
      +- ReusedExchange (28)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_ext_discount_amt)]
ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 6]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 6]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#1) AND isnotnull(cs_ext_discount_amt#2))

(4) Scan parquet default.item
Output [2]: [i_item_sk#5, i_manufact_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,977), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_manufact_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#5, i_manufact_id#6]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#5, i_manufact_id#6]
Condition : ((isnotnull(i_manufact_id#6) AND (i_manufact_id#6 = 977)) AND isnotnull(i_item_sk#5))

(7) Project [codegen id : 1]
Output [1]: [i_item_sk#5]
Input [2]: [i_item_sk#5, i_manufact_id#6]

(8) BroadcastExchange
Input [1]: [i_item_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#1]
Right keys [1]: [i_item_sk#5]
Join condition: None

(10) Project [codegen id : 6]
Output [3]: [cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5]
Input [4]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5]

(11) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>

(12) ColumnarToRow [codegen id : 3]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]

(13) Filter [codegen id : 3]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Condition : isnotnull(cs_item_sk#1)

(14) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_date#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(15) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#8, d_date#9]

(16) Filter [codegen id : 2]
Input [2]: [d_date_sk#8, d_date#9]
Condition : (((isnotnull(d_date#9) AND (d_date#9 >= 10983)) AND (d_date#9 <= 11073)) AND isnotnull(d_date_sk#8))

(17) Project [codegen id : 2]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_date#9]

(18) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(19) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#8]
Join condition: None

(20) Project [codegen id : 3]
Output [2]: [cs_item_sk#1, cs_ext_discount_amt#2]
Input [4]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3, d_date_sk#8]

(21) HashAggregate [codegen id : 3]
Input [2]: [cs_item_sk#1, cs_ext_discount_amt#2]
Keys [1]: [cs_item_sk#1]
Functions [1]: [partial_avg(UnscaledValue(cs_ext_discount_amt#2))]
Aggregate Attributes [2]: [sum#11, count#12]
Results [3]: [cs_item_sk#1, sum#13, count#14]

(22) Exchange
Input [3]: [cs_item_sk#1, sum#13, count#14]
Arguments: hashpartitioning(cs_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#15]

(23) HashAggregate [codegen id : 4]
Input [3]: [cs_item_sk#1, sum#13, count#14]
Keys [1]: [cs_item_sk#1]
Functions [1]: [avg(UnscaledValue(cs_ext_discount_amt#2))]
Aggregate Attributes [1]: [avg(UnscaledValue(cs_ext_discount_amt#2))#16]
Results [2]: [CheckOverflow((1.300000 * promote_precision(cast((avg(UnscaledValue(cs_ext_discount_amt#2))#16 / 100.0) as decimal(11,6)))), DecimalType(14,7), true) AS (1.3 * avg(cs_ext_discount_amt))#17, cs_item_sk#1 AS cs_item_sk#1#18]

(24) Filter [codegen id : 4]
Input [2]: [(1.3 * avg(cs_ext_discount_amt))#17, cs_item_sk#1#18]
Condition : isnotnull((1.3 * avg(cs_ext_discount_amt))#17)

(25) BroadcastExchange
Input [2]: [(1.3 * avg(cs_ext_discount_amt))#17, cs_item_sk#1#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#19]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [cs_item_sk#1#18]
Join condition: (cast(cs_ext_discount_amt#2 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#17)

(27) Project [codegen id : 6]
Output [1]: [cs_sold_date_sk#3]
Input [5]: [cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5, (1.3 * avg(cs_ext_discount_amt))#17, cs_item_sk#1#18]

(28) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#8]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#8]
Join condition: None

(30) Project [codegen id : 6]
Output [1]: [1 AS excess discount amount #20]
Input [2]: [cs_sold_date_sk#3, d_date_sk#8]

(31) CollectLimit
Input [1]: [excess discount amount #20]
Arguments: 100

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
ReusedExchange (32)


(32) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#8]

Subquery:2 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4


