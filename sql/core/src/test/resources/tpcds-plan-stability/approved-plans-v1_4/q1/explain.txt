== Physical Plan ==
TakeOrderedAndProject (40)
+- * Project (39)
   +- * BroadcastHashJoin Inner BuildRight (38)
      :- * Project (33)
      :  +- * BroadcastHashJoin Inner BuildRight (32)
      :     :- * Project (26)
      :     :  +- * BroadcastHashJoin Inner BuildRight (25)
      :     :     :- * Filter (10)
      :     :     :  +- * HashAggregate (9)
      :     :     :     +- Exchange (8)
      :     :     :        +- * HashAggregate (7)
      :     :     :           +- * Project (6)
      :     :     :              +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                 :- * Filter (3)
      :     :     :                 :  +- * ColumnarToRow (2)
      :     :     :                 :     +- Scan parquet default.store_returns (1)
      :     :     :                 +- ReusedExchange (4)
      :     :     +- BroadcastExchange (24)
      :     :        +- * Filter (23)
      :     :           +- * HashAggregate (22)
      :     :              +- Exchange (21)
      :     :                 +- * HashAggregate (20)
      :     :                    +- * HashAggregate (19)
      :     :                       +- Exchange (18)
      :     :                          +- * HashAggregate (17)
      :     :                             +- * Project (16)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (15)
      :     :                                   :- * Filter (13)
      :     :                                   :  +- * ColumnarToRow (12)
      :     :                                   :     +- Scan parquet default.store_returns (11)
      :     :                                   +- ReusedExchange (14)
      :     +- BroadcastExchange (31)
      :        +- * Project (30)
      :           +- * Filter (29)
      :              +- * ColumnarToRow (28)
      :                 +- Scan parquet default.store (27)
      +- BroadcastExchange (37)
         +- * Filter (36)
            +- * ColumnarToRow (35)
               +- Scan parquet default.customer (34)


(1) Scan parquet default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(sr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : (isnotnull(sr_store_sk#2) AND isnotnull(sr_customer_sk#1))

(4) ReusedExchange [Reuses operator id: 45]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]

(8) Exchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, [id=#9]

(9) HashAggregate [codegen id : 9]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#3))#10]
Results [3]: [sr_customer_sk#1 AS ctr_customer_sk#11, sr_store_sk#2 AS ctr_store_sk#12, MakeDecimal(sum(UnscaledValue(sr_return_amt#3))#10,17,2) AS ctr_total_return#13]

(10) Filter [codegen id : 9]
Input [3]: [ctr_customer_sk#11, ctr_store_sk#12, ctr_total_return#13]
Condition : isnotnull(ctr_total_return#13)

(11) Scan parquet default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(sr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(12) ColumnarToRow [codegen id : 4]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(13) Filter [codegen id : 4]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : isnotnull(sr_store_sk#2)

(14) ReusedExchange [Reuses operator id: 45]
Output [1]: [d_date_sk#6]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(16) Project [codegen id : 4]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#6]

(17) HashAggregate [codegen id : 4]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#14]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#15]

(18) Exchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#15]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, [id=#16]

(19) HashAggregate [codegen id : 5]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#15]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#3))#10]
Results [2]: [sr_store_sk#2 AS ctr_store_sk#12, MakeDecimal(sum(UnscaledValue(sr_return_amt#3))#10,17,2) AS ctr_total_return#13]

(20) HashAggregate [codegen id : 5]
Input [2]: [ctr_store_sk#12, ctr_total_return#13]
Keys [1]: [ctr_store_sk#12]
Functions [1]: [partial_avg(ctr_total_return#13)]
Aggregate Attributes [2]: [sum#17, count#18]
Results [3]: [ctr_store_sk#12, sum#19, count#20]

(21) Exchange
Input [3]: [ctr_store_sk#12, sum#19, count#20]
Arguments: hashpartitioning(ctr_store_sk#12, 5), ENSURE_REQUIREMENTS, [id=#21]

(22) HashAggregate [codegen id : 6]
Input [3]: [ctr_store_sk#12, sum#19, count#20]
Keys [1]: [ctr_store_sk#12]
Functions [1]: [avg(ctr_total_return#13)]
Aggregate Attributes [1]: [avg(ctr_total_return#13)#22]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#13)#22) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#23, ctr_store_sk#12 AS ctr_store_sk#12#24]

(23) Filter [codegen id : 6]
Input [2]: [(avg(ctr_total_return) * 1.2)#23, ctr_store_sk#12#24]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#23)

(24) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#23, ctr_store_sk#12#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#25]

(25) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ctr_store_sk#12]
Right keys [1]: [ctr_store_sk#12#24]
Join condition: (cast(ctr_total_return#13 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#23)

(26) Project [codegen id : 9]
Output [2]: [ctr_customer_sk#11, ctr_store_sk#12]
Input [5]: [ctr_customer_sk#11, ctr_store_sk#12, ctr_total_return#13, (avg(ctr_total_return) * 1.2)#23, ctr_store_sk#12#24]

(27) Scan parquet default.store
Output [2]: [s_store_sk#26, s_state#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(28) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#26, s_state#27]

(29) Filter [codegen id : 7]
Input [2]: [s_store_sk#26, s_state#27]
Condition : ((isnotnull(s_state#27) AND (s_state#27 = TN)) AND isnotnull(s_store_sk#26))

(30) Project [codegen id : 7]
Output [1]: [s_store_sk#26]
Input [2]: [s_store_sk#26, s_state#27]

(31) BroadcastExchange
Input [1]: [s_store_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(32) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ctr_store_sk#12]
Right keys [1]: [s_store_sk#26]
Join condition: None

(33) Project [codegen id : 9]
Output [1]: [ctr_customer_sk#11]
Input [3]: [ctr_customer_sk#11, ctr_store_sk#12, s_store_sk#26]

(34) Scan parquet default.customer
Output [2]: [c_customer_sk#29, c_customer_id#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(35) ColumnarToRow [codegen id : 8]
Input [2]: [c_customer_sk#29, c_customer_id#30]

(36) Filter [codegen id : 8]
Input [2]: [c_customer_sk#29, c_customer_id#30]
Condition : isnotnull(c_customer_sk#29)

(37) BroadcastExchange
Input [2]: [c_customer_sk#29, c_customer_id#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ctr_customer_sk#11]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(39) Project [codegen id : 9]
Output [1]: [c_customer_id#30]
Input [3]: [ctr_customer_sk#11, c_customer_sk#29, c_customer_id#30]

(40) TakeOrderedAndProject
Input [1]: [c_customer_id#30]
Arguments: 100, [c_customer_id#30 ASC NULLS FIRST], [c_customer_id#30]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = sr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (45)
+- * Project (44)
   +- * Filter (43)
      +- * ColumnarToRow (42)
         +- Scan parquet default.date_dim (41)


(41) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(42) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#32]

(43) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#32]
Condition : ((isnotnull(d_year#32) AND (d_year#32 = 2000)) AND isnotnull(d_date_sk#6))

(44) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#32]

(45) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

Subquery:2 Hosting operator id = 11 Hosting Expression = sr_returned_date_sk#4 IN dynamicpruning#5


