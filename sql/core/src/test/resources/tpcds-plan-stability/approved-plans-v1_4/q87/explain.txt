== Physical Plan ==
* HashAggregate (54)
+- Exchange (53)
   +- * HashAggregate (52)
      +- * HashAggregate (51)
         +- * HashAggregate (50)
            +- * BroadcastHashJoin LeftAnti BuildRight (49)
               :- * HashAggregate (35)
               :  +- * HashAggregate (34)
               :     +- * BroadcastHashJoin LeftAnti BuildRight (33)
               :        :- * HashAggregate (19)
               :        :  +- Exchange (18)
               :        :     +- * HashAggregate (17)
               :        :        +- * Project (16)
               :        :           +- * BroadcastHashJoin Inner BuildRight (15)
               :        :              :- * Project (10)
               :        :              :  +- * BroadcastHashJoin Inner BuildRight (9)
               :        :              :     :- * Filter (3)
               :        :              :     :  +- * ColumnarToRow (2)
               :        :              :     :     +- Scan parquet default.store_sales (1)
               :        :              :     +- BroadcastExchange (8)
               :        :              :        +- * Project (7)
               :        :              :           +- * Filter (6)
               :        :              :              +- * ColumnarToRow (5)
               :        :              :                 +- Scan parquet default.date_dim (4)
               :        :              +- BroadcastExchange (14)
               :        :                 +- * Filter (13)
               :        :                    +- * ColumnarToRow (12)
               :        :                       +- Scan parquet default.customer (11)
               :        +- BroadcastExchange (32)
               :           +- * HashAggregate (31)
               :              +- Exchange (30)
               :                 +- * HashAggregate (29)
               :                    +- * Project (28)
               :                       +- * BroadcastHashJoin Inner BuildRight (27)
               :                          :- * Project (25)
               :                          :  +- * BroadcastHashJoin Inner BuildRight (24)
               :                          :     :- * Filter (22)
               :                          :     :  +- * ColumnarToRow (21)
               :                          :     :     +- Scan parquet default.catalog_sales (20)
               :                          :     +- ReusedExchange (23)
               :                          +- ReusedExchange (26)
               +- BroadcastExchange (48)
                  +- * HashAggregate (47)
                     +- Exchange (46)
                        +- * HashAggregate (45)
                           +- * Project (44)
                              +- * BroadcastHashJoin Inner BuildRight (43)
                                 :- * Project (41)
                                 :  +- * BroadcastHashJoin Inner BuildRight (40)
                                 :     :- * Filter (38)
                                 :     :  +- * ColumnarToRow (37)
                                 :     :     +- Scan parquet default.web_sales (36)
                                 :     +- ReusedExchange (39)
                                 +- ReusedExchange (42)


(1) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#2), dynamicpruningexpression(ss_sold_date_sk#2 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 3]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]

(3) Filter [codegen id : 3]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Condition : isnotnull(ss_customer_sk#1)

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#4))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#4, d_date#5]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]

(8) BroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#2]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 3]
Output [2]: [ss_customer_sk#1, d_date#5]
Input [4]: [ss_customer_sk#1, ss_sold_date_sk#2, d_date_sk#4, d_date#5]

(11) Scan parquet default.customer
Output [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]

(13) Filter [codegen id : 2]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Condition : isnotnull(c_customer_sk#8)

(14) BroadcastExchange
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#8]
Join condition: None

(16) Project [codegen id : 3]
Output [3]: [c_last_name#10, c_first_name#9, d_date#5]
Input [5]: [ss_customer_sk#1, d_date#5, c_customer_sk#8, c_first_name#9, c_last_name#10]

(17) HashAggregate [codegen id : 3]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#5]

(18) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Arguments: hashpartitioning(c_last_name#10, c_first_name#9, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#12]

(19) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#5]

(20) Scan parquet default.catalog_sales
Output [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#14), dynamicpruningexpression(cs_sold_date_sk#14 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int>

(21) ColumnarToRow [codegen id : 6]
Input [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]

(22) Filter [codegen id : 6]
Input [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]
Condition : isnotnull(cs_bill_customer_sk#13)

(23) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#15, d_date#16]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#14]
Right keys [1]: [d_date_sk#15]
Join condition: None

(25) Project [codegen id : 6]
Output [2]: [cs_bill_customer_sk#13, d_date#16]
Input [4]: [cs_bill_customer_sk#13, cs_sold_date_sk#14, d_date_sk#15, d_date#16]

(26) ReusedExchange [Reuses operator id: 14]
Output [3]: [c_customer_sk#17, c_first_name#18, c_last_name#19]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_bill_customer_sk#13]
Right keys [1]: [c_customer_sk#17]
Join condition: None

(28) Project [codegen id : 6]
Output [3]: [c_last_name#19, c_first_name#18, d_date#16]
Input [5]: [cs_bill_customer_sk#13, d_date#16, c_customer_sk#17, c_first_name#18, c_last_name#19]

(29) HashAggregate [codegen id : 6]
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Keys [3]: [c_last_name#19, c_first_name#18, d_date#16]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#19, c_first_name#18, d_date#16]

(30) Exchange
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Arguments: hashpartitioning(c_last_name#19, c_first_name#18, d_date#16, 5), ENSURE_REQUIREMENTS, [id=#20]

(31) HashAggregate [codegen id : 7]
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Keys [3]: [c_last_name#19, c_first_name#18, d_date#16]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#19, c_first_name#18, d_date#16]

(32) BroadcastExchange
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, string, true], ), isnull(input[1, string, true]), coalesce(input[2, date, true], 0), isnull(input[2, date, true])),false), [id=#21]

(33) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#5, 0), isnull(d_date#5)]
Right keys [6]: [coalesce(c_last_name#19, ), isnull(c_last_name#19), coalesce(c_first_name#18, ), isnull(c_first_name#18), coalesce(d_date#16, 0), isnull(d_date#16)]
Join condition: None

(34) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#5]

(35) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#5]

(36) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#22, ws_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#23), dynamicpruningexpression(ws_sold_date_sk#23 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(37) ColumnarToRow [codegen id : 10]
Input [2]: [ws_bill_customer_sk#22, ws_sold_date_sk#23]

(38) Filter [codegen id : 10]
Input [2]: [ws_bill_customer_sk#22, ws_sold_date_sk#23]
Condition : isnotnull(ws_bill_customer_sk#22)

(39) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#24, d_date#25]

(40) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#24]
Join condition: None

(41) Project [codegen id : 10]
Output [2]: [ws_bill_customer_sk#22, d_date#25]
Input [4]: [ws_bill_customer_sk#22, ws_sold_date_sk#23, d_date_sk#24, d_date#25]

(42) ReusedExchange [Reuses operator id: 14]
Output [3]: [c_customer_sk#26, c_first_name#27, c_last_name#28]

(43) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_bill_customer_sk#22]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(44) Project [codegen id : 10]
Output [3]: [c_last_name#28, c_first_name#27, d_date#25]
Input [5]: [ws_bill_customer_sk#22, d_date#25, c_customer_sk#26, c_first_name#27, c_last_name#28]

(45) HashAggregate [codegen id : 10]
Input [3]: [c_last_name#28, c_first_name#27, d_date#25]
Keys [3]: [c_last_name#28, c_first_name#27, d_date#25]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#28, c_first_name#27, d_date#25]

(46) Exchange
Input [3]: [c_last_name#28, c_first_name#27, d_date#25]
Arguments: hashpartitioning(c_last_name#28, c_first_name#27, d_date#25, 5), ENSURE_REQUIREMENTS, [id=#29]

(47) HashAggregate [codegen id : 11]
Input [3]: [c_last_name#28, c_first_name#27, d_date#25]
Keys [3]: [c_last_name#28, c_first_name#27, d_date#25]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#28, c_first_name#27, d_date#25]

(48) BroadcastExchange
Input [3]: [c_last_name#28, c_first_name#27, d_date#25]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, string, true], ), isnull(input[1, string, true]), coalesce(input[2, date, true], 0), isnull(input[2, date, true])),false), [id=#30]

(49) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#5, 0), isnull(d_date#5)]
Right keys [6]: [coalesce(c_last_name#28, ), isnull(c_last_name#28), coalesce(c_first_name#27, ), isnull(c_first_name#27), coalesce(d_date#25, 0), isnull(d_date#25)]
Join condition: None

(50) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#5]

(51) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results: []

(52) HashAggregate [codegen id : 12]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#31]
Results [1]: [count#32]

(53) Exchange
Input [1]: [count#32]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#33]

(54) HashAggregate [codegen id : 13]
Input [1]: [count#32]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#34]
Results [1]: [count(1)#34 AS count(1)#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#2 IN dynamicpruning#3
ReusedExchange (55)


(55) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#4, d_date#5]

Subquery:2 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#14 IN dynamicpruning#3

Subquery:3 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#23 IN dynamicpruning#3


