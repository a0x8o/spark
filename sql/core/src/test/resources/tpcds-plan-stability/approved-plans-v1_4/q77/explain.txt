== Physical Plan ==
TakeOrderedAndProject (89)
+- * HashAggregate (88)
   +- Exchange (87)
      +- * HashAggregate (86)
         +- * Expand (85)
            +- Union (84)
               :- * Project (34)
               :  +- * BroadcastHashJoin LeftOuter BuildRight (33)
               :     :- * HashAggregate (19)
               :     :  +- Exchange (18)
               :     :     +- * HashAggregate (17)
               :     :        +- * Project (16)
               :     :           +- * BroadcastHashJoin Inner BuildRight (15)
               :     :              :- * Project (10)
               :     :              :  +- * BroadcastHashJoin Inner BuildRight (9)
               :     :              :     :- * Filter (3)
               :     :              :     :  +- * ColumnarToRow (2)
               :     :              :     :     +- Scan parquet default.store_sales (1)
               :     :              :     +- BroadcastExchange (8)
               :     :              :        +- * Project (7)
               :     :              :           +- * Filter (6)
               :     :              :              +- * ColumnarToRow (5)
               :     :              :                 +- Scan parquet default.date_dim (4)
               :     :              +- BroadcastExchange (14)
               :     :                 +- * Filter (13)
               :     :                    +- * ColumnarToRow (12)
               :     :                       +- Scan parquet default.store (11)
               :     +- BroadcastExchange (32)
               :        +- * HashAggregate (31)
               :           +- Exchange (30)
               :              +- * HashAggregate (29)
               :                 +- * Project (28)
               :                    +- * BroadcastHashJoin Inner BuildRight (27)
               :                       :- * Project (25)
               :                       :  +- * BroadcastHashJoin Inner BuildRight (24)
               :                       :     :- * Filter (22)
               :                       :     :  +- * ColumnarToRow (21)
               :                       :     :     +- Scan parquet default.store_returns (20)
               :                       :     +- ReusedExchange (23)
               :                       +- ReusedExchange (26)
               :- * Project (53)
               :  +- * BroadcastNestedLoopJoin Inner BuildLeft (52)
               :     :- BroadcastExchange (43)
               :     :  +- * HashAggregate (42)
               :     :     +- Exchange (41)
               :     :        +- * HashAggregate (40)
               :     :           +- * Project (39)
               :     :              +- * BroadcastHashJoin Inner BuildRight (38)
               :     :                 :- * ColumnarToRow (36)
               :     :                 :  +- Scan parquet default.catalog_sales (35)
               :     :                 +- ReusedExchange (37)
               :     +- * HashAggregate (51)
               :        +- Exchange (50)
               :           +- * HashAggregate (49)
               :              +- * Project (48)
               :                 +- * BroadcastHashJoin Inner BuildRight (47)
               :                    :- * ColumnarToRow (45)
               :                    :  +- Scan parquet default.catalog_returns (44)
               :                    +- ReusedExchange (46)
               +- * Project (83)
                  +- * BroadcastHashJoin LeftOuter BuildRight (82)
                     :- * HashAggregate (68)
                     :  +- Exchange (67)
                     :     +- * HashAggregate (66)
                     :        +- * Project (65)
                     :           +- * BroadcastHashJoin Inner BuildRight (64)
                     :              :- * Project (59)
                     :              :  +- * BroadcastHashJoin Inner BuildRight (58)
                     :              :     :- * Filter (56)
                     :              :     :  +- * ColumnarToRow (55)
                     :              :     :     +- Scan parquet default.web_sales (54)
                     :              :     +- ReusedExchange (57)
                     :              +- BroadcastExchange (63)
                     :                 +- * Filter (62)
                     :                    +- * ColumnarToRow (61)
                     :                       +- Scan parquet default.web_page (60)
                     +- BroadcastExchange (81)
                        +- * HashAggregate (80)
                           +- Exchange (79)
                              +- * HashAggregate (78)
                                 +- * Project (77)
                                    +- * BroadcastHashJoin Inner BuildRight (76)
                                       :- * Project (74)
                                       :  +- * BroadcastHashJoin Inner BuildRight (73)
                                       :     :- * Filter (71)
                                       :     :  +- * ColumnarToRow (70)
                                       :     :     +- Scan parquet default.web_returns (69)
                                       :     +- ReusedExchange (72)
                                       +- ReusedExchange (75)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_date#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 2000-08-03)) AND (d_date#7 <= 2000-09-02)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 3]
Output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#6]

(11) Scan parquet default.store
Output [1]: [s_store_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(12) ColumnarToRow [codegen id : 2]
Input [1]: [s_store_sk#9]

(13) Filter [codegen id : 2]
Input [1]: [s_store_sk#9]
Condition : isnotnull(s_store_sk#9)

(14) BroadcastExchange
Input [1]: [s_store_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#9]
Join condition: None

(16) Project [codegen id : 3]
Output [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#9]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#9]

(17) HashAggregate [codegen id : 3]
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#9]
Keys [1]: [s_store_sk#9]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#11, sum#12]
Results [3]: [s_store_sk#9, sum#13, sum#14]

(18) Exchange
Input [3]: [s_store_sk#9, sum#13, sum#14]
Arguments: hashpartitioning(s_store_sk#9, 5), ENSURE_REQUIREMENTS, [id=#15]

(19) HashAggregate [codegen id : 8]
Input [3]: [s_store_sk#9, sum#13, sum#14]
Keys [1]: [s_store_sk#9]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_ext_sales_price#2))#16, sum(UnscaledValue(ss_net_profit#3))#17]
Results [3]: [s_store_sk#9, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#16,17,2) AS sales#18, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#17,17,2) AS profit#19]

(20) Scan parquet default.store_returns
Output [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(21) ColumnarToRow [codegen id : 6]
Input [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23]

(22) Filter [codegen id : 6]
Input [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23]
Condition : isnotnull(sr_store_sk#20)

(23) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#25]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_returned_date_sk#23]
Right keys [1]: [cast(d_date_sk#25 as bigint)]
Join condition: None

(25) Project [codegen id : 6]
Output [3]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22]
Input [5]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23, d_date_sk#25]

(26) ReusedExchange [Reuses operator id: 14]
Output [1]: [s_store_sk#26]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_store_sk#20]
Right keys [1]: [cast(s_store_sk#26 as bigint)]
Join condition: None

(28) Project [codegen id : 6]
Output [3]: [sr_return_amt#21, sr_net_loss#22, s_store_sk#26]
Input [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, s_store_sk#26]

(29) HashAggregate [codegen id : 6]
Input [3]: [sr_return_amt#21, sr_net_loss#22, s_store_sk#26]
Keys [1]: [s_store_sk#26]
Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#21)), partial_sum(UnscaledValue(sr_net_loss#22))]
Aggregate Attributes [2]: [sum#27, sum#28]
Results [3]: [s_store_sk#26, sum#29, sum#30]

(30) Exchange
Input [3]: [s_store_sk#26, sum#29, sum#30]
Arguments: hashpartitioning(s_store_sk#26, 5), ENSURE_REQUIREMENTS, [id=#31]

(31) HashAggregate [codegen id : 7]
Input [3]: [s_store_sk#26, sum#29, sum#30]
Keys [1]: [s_store_sk#26]
Functions [2]: [sum(UnscaledValue(sr_return_amt#21)), sum(UnscaledValue(sr_net_loss#22))]
Aggregate Attributes [2]: [sum(UnscaledValue(sr_return_amt#21))#32, sum(UnscaledValue(sr_net_loss#22))#33]
Results [3]: [s_store_sk#26, MakeDecimal(sum(UnscaledValue(sr_return_amt#21))#32,17,2) AS returns#34, MakeDecimal(sum(UnscaledValue(sr_net_loss#22))#33,17,2) AS profit_loss#35]

(32) BroadcastExchange
Input [3]: [s_store_sk#26, returns#34, profit_loss#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#36]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [s_store_sk#9]
Right keys [1]: [s_store_sk#26]
Join condition: None

(34) Project [codegen id : 8]
Output [5]: [sales#18, coalesce(returns#34, 0.00) AS returns#37, CheckOverflow((promote_precision(cast(profit#19 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#35, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#38, store channel AS channel#39, s_store_sk#9 AS id#40]
Input [6]: [s_store_sk#9, sales#18, profit#19, s_store_sk#26, returns#34, profit_loss#35]

(35) Scan parquet default.catalog_sales
Output [4]: [cs_call_center_sk#41, cs_ext_sales_price#42, cs_net_profit#43, cs_sold_date_sk#44]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#44), dynamicpruningexpression(cs_sold_date_sk#44 IN dynamicpruning#5)]
ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(36) ColumnarToRow [codegen id : 10]
Input [4]: [cs_call_center_sk#41, cs_ext_sales_price#42, cs_net_profit#43, cs_sold_date_sk#44]

(37) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#45]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#44]
Right keys [1]: [d_date_sk#45]
Join condition: None

(39) Project [codegen id : 10]
Output [3]: [cs_call_center_sk#41, cs_ext_sales_price#42, cs_net_profit#43]
Input [5]: [cs_call_center_sk#41, cs_ext_sales_price#42, cs_net_profit#43, cs_sold_date_sk#44, d_date_sk#45]

(40) HashAggregate [codegen id : 10]
Input [3]: [cs_call_center_sk#41, cs_ext_sales_price#42, cs_net_profit#43]
Keys [1]: [cs_call_center_sk#41]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#42)), partial_sum(UnscaledValue(cs_net_profit#43))]
Aggregate Attributes [2]: [sum#46, sum#47]
Results [3]: [cs_call_center_sk#41, sum#48, sum#49]

(41) Exchange
Input [3]: [cs_call_center_sk#41, sum#48, sum#49]
Arguments: hashpartitioning(cs_call_center_sk#41, 5), ENSURE_REQUIREMENTS, [id=#50]

(42) HashAggregate [codegen id : 11]
Input [3]: [cs_call_center_sk#41, sum#48, sum#49]
Keys [1]: [cs_call_center_sk#41]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#42)), sum(UnscaledValue(cs_net_profit#43))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_sales_price#42))#51, sum(UnscaledValue(cs_net_profit#43))#52]
Results [3]: [cs_call_center_sk#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#42))#51,17,2) AS sales#53, MakeDecimal(sum(UnscaledValue(cs_net_profit#43))#52,17,2) AS profit#54]

(43) BroadcastExchange
Input [3]: [cs_call_center_sk#41, sales#53, profit#54]
Arguments: IdentityBroadcastMode, [id=#55]

(44) Scan parquet default.catalog_returns
Output [3]: [cr_return_amount#56, cr_net_loss#57, cr_returned_date_sk#58]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#58), dynamicpruningexpression(cr_returned_date_sk#58 IN dynamicpruning#5)]
ReadSchema: struct<cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(45) ColumnarToRow [codegen id : 13]
Input [3]: [cr_return_amount#56, cr_net_loss#57, cr_returned_date_sk#58]

(46) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#59]

(47) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cr_returned_date_sk#58]
Right keys [1]: [d_date_sk#59]
Join condition: None

(48) Project [codegen id : 13]
Output [2]: [cr_return_amount#56, cr_net_loss#57]
Input [4]: [cr_return_amount#56, cr_net_loss#57, cr_returned_date_sk#58, d_date_sk#59]

(49) HashAggregate [codegen id : 13]
Input [2]: [cr_return_amount#56, cr_net_loss#57]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#56)), partial_sum(UnscaledValue(cr_net_loss#57))]
Aggregate Attributes [2]: [sum#60, sum#61]
Results [2]: [sum#62, sum#63]

(50) Exchange
Input [2]: [sum#62, sum#63]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#64]

(51) HashAggregate
Input [2]: [sum#62, sum#63]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#56)), sum(UnscaledValue(cr_net_loss#57))]
Aggregate Attributes [2]: [sum(UnscaledValue(cr_return_amount#56))#65, sum(UnscaledValue(cr_net_loss#57))#66]
Results [2]: [MakeDecimal(sum(UnscaledValue(cr_return_amount#56))#65,17,2) AS returns#67, MakeDecimal(sum(UnscaledValue(cr_net_loss#57))#66,17,2) AS profit_loss#68]

(52) BroadcastNestedLoopJoin [codegen id : 14]
Join condition: None

(53) Project [codegen id : 14]
Output [5]: [sales#53, returns#67, CheckOverflow((promote_precision(cast(profit#54 as decimal(18,2))) - promote_precision(cast(profit_loss#68 as decimal(18,2)))), DecimalType(18,2), true) AS profit#69, catalog channel AS channel#70, cs_call_center_sk#41 AS id#71]
Input [5]: [cs_call_center_sk#41, sales#53, profit#54, returns#67, profit_loss#68]

(54) Scan parquet default.web_sales
Output [4]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74, ws_sold_date_sk#75]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#75), dynamicpruningexpression(ws_sold_date_sk#75 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(55) ColumnarToRow [codegen id : 17]
Input [4]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74, ws_sold_date_sk#75]

(56) Filter [codegen id : 17]
Input [4]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74, ws_sold_date_sk#75]
Condition : isnotnull(ws_web_page_sk#72)

(57) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#76]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#75]
Right keys [1]: [d_date_sk#76]
Join condition: None

(59) Project [codegen id : 17]
Output [3]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74]
Input [5]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74, ws_sold_date_sk#75, d_date_sk#76]

(60) Scan parquet default.web_page
Output [1]: [wp_web_page_sk#77]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(61) ColumnarToRow [codegen id : 16]
Input [1]: [wp_web_page_sk#77]

(62) Filter [codegen id : 16]
Input [1]: [wp_web_page_sk#77]
Condition : isnotnull(wp_web_page_sk#77)

(63) BroadcastExchange
Input [1]: [wp_web_page_sk#77]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#78]

(64) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_web_page_sk#72]
Right keys [1]: [wp_web_page_sk#77]
Join condition: None

(65) Project [codegen id : 17]
Output [3]: [ws_ext_sales_price#73, ws_net_profit#74, wp_web_page_sk#77]
Input [4]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74, wp_web_page_sk#77]

(66) HashAggregate [codegen id : 17]
Input [3]: [ws_ext_sales_price#73, ws_net_profit#74, wp_web_page_sk#77]
Keys [1]: [wp_web_page_sk#77]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#73)), partial_sum(UnscaledValue(ws_net_profit#74))]
Aggregate Attributes [2]: [sum#79, sum#80]
Results [3]: [wp_web_page_sk#77, sum#81, sum#82]

(67) Exchange
Input [3]: [wp_web_page_sk#77, sum#81, sum#82]
Arguments: hashpartitioning(wp_web_page_sk#77, 5), ENSURE_REQUIREMENTS, [id=#83]

(68) HashAggregate [codegen id : 22]
Input [3]: [wp_web_page_sk#77, sum#81, sum#82]
Keys [1]: [wp_web_page_sk#77]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#73)), sum(UnscaledValue(ws_net_profit#74))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_sales_price#73))#84, sum(UnscaledValue(ws_net_profit#74))#85]
Results [3]: [wp_web_page_sk#77, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#73))#84,17,2) AS sales#86, MakeDecimal(sum(UnscaledValue(ws_net_profit#74))#85,17,2) AS profit#87]

(69) Scan parquet default.web_returns
Output [4]: [wr_web_page_sk#88, wr_return_amt#89, wr_net_loss#90, wr_returned_date_sk#91]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#91), dynamicpruningexpression(wr_returned_date_sk#91 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(wr_web_page_sk)]
ReadSchema: struct<wr_web_page_sk:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(70) ColumnarToRow [codegen id : 20]
Input [4]: [wr_web_page_sk#88, wr_return_amt#89, wr_net_loss#90, wr_returned_date_sk#91]

(71) Filter [codegen id : 20]
Input [4]: [wr_web_page_sk#88, wr_return_amt#89, wr_net_loss#90, wr_returned_date_sk#91]
Condition : isnotnull(wr_web_page_sk#88)

(72) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#92]

(73) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_returned_date_sk#91]
Right keys [1]: [cast(d_date_sk#92 as bigint)]
Join condition: None

(74) Project [codegen id : 20]
Output [3]: [wr_web_page_sk#88, wr_return_amt#89, wr_net_loss#90]
Input [5]: [wr_web_page_sk#88, wr_return_amt#89, wr_net_loss#90, wr_returned_date_sk#91, d_date_sk#92]

(75) ReusedExchange [Reuses operator id: 63]
Output [1]: [wp_web_page_sk#93]

(76) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_web_page_sk#88]
Right keys [1]: [cast(wp_web_page_sk#93 as bigint)]
Join condition: None

(77) Project [codegen id : 20]
Output [3]: [wr_return_amt#89, wr_net_loss#90, wp_web_page_sk#93]
Input [4]: [wr_web_page_sk#88, wr_return_amt#89, wr_net_loss#90, wp_web_page_sk#93]

(78) HashAggregate [codegen id : 20]
Input [3]: [wr_return_amt#89, wr_net_loss#90, wp_web_page_sk#93]
Keys [1]: [wp_web_page_sk#93]
Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#89)), partial_sum(UnscaledValue(wr_net_loss#90))]
Aggregate Attributes [2]: [sum#94, sum#95]
Results [3]: [wp_web_page_sk#93, sum#96, sum#97]

(79) Exchange
Input [3]: [wp_web_page_sk#93, sum#96, sum#97]
Arguments: hashpartitioning(wp_web_page_sk#93, 5), ENSURE_REQUIREMENTS, [id=#98]

(80) HashAggregate [codegen id : 21]
Input [3]: [wp_web_page_sk#93, sum#96, sum#97]
Keys [1]: [wp_web_page_sk#93]
Functions [2]: [sum(UnscaledValue(wr_return_amt#89)), sum(UnscaledValue(wr_net_loss#90))]
Aggregate Attributes [2]: [sum(UnscaledValue(wr_return_amt#89))#99, sum(UnscaledValue(wr_net_loss#90))#100]
Results [3]: [wp_web_page_sk#93, MakeDecimal(sum(UnscaledValue(wr_return_amt#89))#99,17,2) AS returns#101, MakeDecimal(sum(UnscaledValue(wr_net_loss#90))#100,17,2) AS profit_loss#102]

(81) BroadcastExchange
Input [3]: [wp_web_page_sk#93, returns#101, profit_loss#102]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#103]

(82) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [wp_web_page_sk#77]
Right keys [1]: [wp_web_page_sk#93]
Join condition: None

(83) Project [codegen id : 22]
Output [5]: [sales#86, coalesce(returns#101, 0.00) AS returns#104, CheckOverflow((promote_precision(cast(profit#87 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#102, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#105, web channel AS channel#106, wp_web_page_sk#77 AS id#107]
Input [6]: [wp_web_page_sk#77, sales#86, profit#87, wp_web_page_sk#93, returns#101, profit_loss#102]

(84) Union

(85) Expand [codegen id : 23]
Input [5]: [sales#18, returns#37, profit#38, channel#39, id#40]
Arguments: [List(sales#18, returns#37, profit#38, channel#39, id#40, 0), List(sales#18, returns#37, profit#38, channel#39, null, 1), List(sales#18, returns#37, profit#38, null, null, 3)], [sales#18, returns#37, profit#38, channel#108, id#109, spark_grouping_id#110]

(86) HashAggregate [codegen id : 23]
Input [6]: [sales#18, returns#37, profit#38, channel#108, id#109, spark_grouping_id#110]
Keys [3]: [channel#108, id#109, spark_grouping_id#110]
Functions [3]: [partial_sum(sales#18), partial_sum(returns#37), partial_sum(profit#38)]
Aggregate Attributes [6]: [sum#111, isEmpty#112, sum#113, isEmpty#114, sum#115, isEmpty#116]
Results [9]: [channel#108, id#109, spark_grouping_id#110, sum#117, isEmpty#118, sum#119, isEmpty#120, sum#121, isEmpty#122]

(87) Exchange
Input [9]: [channel#108, id#109, spark_grouping_id#110, sum#117, isEmpty#118, sum#119, isEmpty#120, sum#121, isEmpty#122]
Arguments: hashpartitioning(channel#108, id#109, spark_grouping_id#110, 5), ENSURE_REQUIREMENTS, [id=#123]

(88) HashAggregate [codegen id : 24]
Input [9]: [channel#108, id#109, spark_grouping_id#110, sum#117, isEmpty#118, sum#119, isEmpty#120, sum#121, isEmpty#122]
Keys [3]: [channel#108, id#109, spark_grouping_id#110]
Functions [3]: [sum(sales#18), sum(returns#37), sum(profit#38)]
Aggregate Attributes [3]: [sum(sales#18)#124, sum(returns#37)#125, sum(profit#38)#126]
Results [5]: [channel#108, id#109, sum(sales#18)#124 AS sales#127, sum(returns#37)#125 AS returns#128, sum(profit#38)#126 AS profit#129]

(89) TakeOrderedAndProject
Input [5]: [channel#108, id#109, sales#127, returns#128, profit#129]
Arguments: 100, [channel#108 ASC NULLS FIRST, id#109 ASC NULLS FIRST], [channel#108, id#109, sales#127, returns#128, profit#129]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (90)


(90) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#6]

Subquery:2 Hosting operator id = 20 Hosting Expression = sr_returned_date_sk#23 IN dynamicpruning#24
ReusedExchange (91)


(91) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#25]

Subquery:3 Hosting operator id = 35 Hosting Expression = cs_sold_date_sk#44 IN dynamicpruning#5

Subquery:4 Hosting operator id = 44 Hosting Expression = cr_returned_date_sk#58 IN dynamicpruning#5

Subquery:5 Hosting operator id = 54 Hosting Expression = ws_sold_date_sk#75 IN dynamicpruning#5

Subquery:6 Hosting operator id = 69 Hosting Expression = wr_returned_date_sk#91 IN dynamicpruning#24


