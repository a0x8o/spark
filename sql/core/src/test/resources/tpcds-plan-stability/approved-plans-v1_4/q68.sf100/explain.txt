== Physical Plan ==
TakeOrderedAndProject (47)
+- * Project (46)
   +- * SortMergeJoin Inner (45)
      :- * Sort (14)
      :  +- Exchange (13)
      :     +- * Project (12)
      :        +- * SortMergeJoin Inner (11)
      :           :- * Sort (5)
      :           :  +- Exchange (4)
      :           :     +- * Filter (3)
      :           :        +- * ColumnarToRow (2)
      :           :           +- Scan parquet default.customer (1)
      :           +- * Sort (10)
      :              +- Exchange (9)
      :                 +- * Filter (8)
      :                    +- * ColumnarToRow (7)
      :                       +- Scan parquet default.customer_address (6)
      +- * Sort (44)
         +- Exchange (43)
            +- * HashAggregate (42)
               +- * HashAggregate (41)
                  +- * Project (40)
                     +- * SortMergeJoin Inner (39)
                        :- * Sort (36)
                        :  +- Exchange (35)
                        :     +- * Project (34)
                        :        +- * BroadcastHashJoin Inner BuildRight (33)
                        :           :- * Project (27)
                        :           :  +- * BroadcastHashJoin Inner BuildRight (26)
                        :           :     :- * Project (20)
                        :           :     :  +- * BroadcastHashJoin Inner BuildRight (19)
                        :           :     :     :- * Filter (17)
                        :           :     :     :  +- * ColumnarToRow (16)
                        :           :     :     :     +- Scan parquet default.store_sales (15)
                        :           :     :     +- ReusedExchange (18)
                        :           :     +- BroadcastExchange (25)
                        :           :        +- * Project (24)
                        :           :           +- * Filter (23)
                        :           :              +- * ColumnarToRow (22)
                        :           :                 +- Scan parquet default.store (21)
                        :           +- BroadcastExchange (32)
                        :              +- * Project (31)
                        :                 +- * Filter (30)
                        :                    +- * ColumnarToRow (29)
                        :                       +- Scan parquet default.household_demographics (28)
                        +- * Sort (38)
                           +- ReusedExchange (37)


(1) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]

(3) Filter [codegen id : 1]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#2))

(4) Exchange
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Arguments: hashpartitioning(c_current_addr_sk#2, 5), ENSURE_REQUIREMENTS, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Arguments: [c_current_addr_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.customer_address
Output [2]: [ca_address_sk#6, ca_city#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#6, ca_city#7]

(8) Filter [codegen id : 3]
Input [2]: [ca_address_sk#6, ca_city#7]
Condition : (isnotnull(ca_address_sk#6) AND isnotnull(ca_city#7))

(9) Exchange
Input [2]: [ca_address_sk#6, ca_city#7]
Arguments: hashpartitioning(ca_address_sk#6, 5), ENSURE_REQUIREMENTS, [id=#8]

(10) Sort [codegen id : 4]
Input [2]: [ca_address_sk#6, ca_city#7]
Arguments: [ca_address_sk#6 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [1]: [c_current_addr_sk#2]
Right keys [1]: [ca_address_sk#6]
Join condition: None

(12) Project [codegen id : 5]
Output [4]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7]
Input [6]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4, ca_address_sk#6, ca_city#7]

(13) Exchange
Input [4]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(14) Sort [codegen id : 6]
Input [4]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(15) Scan parquet default.store_sales
Output [9]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17, ss_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#18), dynamicpruningexpression(ss_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2)>

(16) ColumnarToRow [codegen id : 10]
Input [9]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17, ss_sold_date_sk#18]

(17) Filter [codegen id : 10]
Input [9]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17, ss_sold_date_sk#18]
Condition : (((isnotnull(ss_store_sk#13) AND isnotnull(ss_hdemo_sk#11)) AND isnotnull(ss_addr_sk#12)) AND isnotnull(ss_customer_sk#10))

(18) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#20]

(19) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#18]
Right keys [1]: [d_date_sk#20]
Join condition: None

(20) Project [codegen id : 10]
Output [8]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17]
Input [10]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17, ss_sold_date_sk#18, d_date_sk#20]

(21) Scan parquet default.store
Output [2]: [s_store_sk#21, s_city#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Fairview,Midway]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(22) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#21, s_city#22]

(23) Filter [codegen id : 8]
Input [2]: [s_store_sk#21, s_city#22]
Condition : (s_city#22 IN (Midway,Fairview) AND isnotnull(s_store_sk#21))

(24) Project [codegen id : 8]
Output [1]: [s_store_sk#21]
Input [2]: [s_store_sk#21, s_city#22]

(25) BroadcastExchange
Input [1]: [s_store_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(26) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#13]
Right keys [1]: [s_store_sk#21]
Join condition: None

(27) Project [codegen id : 10]
Output [7]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17]
Input [9]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17, s_store_sk#21]

(28) Scan parquet default.household_demographics
Output [3]: [hd_demo_sk#24, hd_dep_count#25, hd_vehicle_count#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(29) ColumnarToRow [codegen id : 9]
Input [3]: [hd_demo_sk#24, hd_dep_count#25, hd_vehicle_count#26]

(30) Filter [codegen id : 9]
Input [3]: [hd_demo_sk#24, hd_dep_count#25, hd_vehicle_count#26]
Condition : (((hd_dep_count#25 = 4) OR (hd_vehicle_count#26 = 3)) AND isnotnull(hd_demo_sk#24))

(31) Project [codegen id : 9]
Output [1]: [hd_demo_sk#24]
Input [3]: [hd_demo_sk#24, hd_dep_count#25, hd_vehicle_count#26]

(32) BroadcastExchange
Input [1]: [hd_demo_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27]

(33) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_hdemo_sk#11]
Right keys [1]: [hd_demo_sk#24]
Join condition: None

(34) Project [codegen id : 10]
Output [6]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17]
Input [8]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17, hd_demo_sk#24]

(35) Exchange
Input [6]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17]
Arguments: hashpartitioning(ss_addr_sk#12, 5), ENSURE_REQUIREMENTS, [id=#28]

(36) Sort [codegen id : 11]
Input [6]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17]
Arguments: [ss_addr_sk#12 ASC NULLS FIRST], false, 0

(37) ReusedExchange [Reuses operator id: 9]
Output [2]: [ca_address_sk#29, ca_city#30]

(38) Sort [codegen id : 13]
Input [2]: [ca_address_sk#29, ca_city#30]
Arguments: [ca_address_sk#29 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_addr_sk#12]
Right keys [1]: [ca_address_sk#29]
Join condition: None

(40) Project [codegen id : 14]
Output [7]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17, ca_city#30]
Input [8]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17, ca_address_sk#29, ca_city#30]

(41) HashAggregate [codegen id : 14]
Input [7]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_ext_sales_price#15, ss_ext_list_price#16, ss_ext_tax#17, ca_city#30]
Keys [4]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#30]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#15)), partial_sum(UnscaledValue(ss_ext_list_price#16)), partial_sum(UnscaledValue(ss_ext_tax#17))]
Aggregate Attributes [3]: [sum#31, sum#32, sum#33]
Results [7]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#30, sum#34, sum#35, sum#36]

(42) HashAggregate [codegen id : 14]
Input [7]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#30, sum#34, sum#35, sum#36]
Keys [4]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#30]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#15)), sum(UnscaledValue(ss_ext_list_price#16)), sum(UnscaledValue(ss_ext_tax#17))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#15))#37, sum(UnscaledValue(ss_ext_list_price#16))#38, sum(UnscaledValue(ss_ext_tax#17))#39]
Results [6]: [ss_ticket_number#14, ss_customer_sk#10, ca_city#30 AS bought_city#40, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#15))#37,17,2) AS extended_price#41, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#16))#38,17,2) AS list_price#42, MakeDecimal(sum(UnscaledValue(ss_ext_tax#17))#39,17,2) AS extended_tax#43]

(43) Exchange
Input [6]: [ss_ticket_number#14, ss_customer_sk#10, bought_city#40, extended_price#41, list_price#42, extended_tax#43]
Arguments: hashpartitioning(ss_customer_sk#10, 5), ENSURE_REQUIREMENTS, [id=#44]

(44) Sort [codegen id : 15]
Input [6]: [ss_ticket_number#14, ss_customer_sk#10, bought_city#40, extended_price#41, list_price#42, extended_tax#43]
Arguments: [ss_customer_sk#10 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#10]
Join condition: NOT (ca_city#7 = bought_city#40)

(46) Project [codegen id : 16]
Output [8]: [c_last_name#4, c_first_name#3, ca_city#7, bought_city#40, ss_ticket_number#14, extended_price#41, extended_tax#43, list_price#42]
Input [10]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7, ss_ticket_number#14, ss_customer_sk#10, bought_city#40, extended_price#41, list_price#42, extended_tax#43]

(47) TakeOrderedAndProject
Input [8]: [c_last_name#4, c_first_name#3, ca_city#7, bought_city#40, ss_ticket_number#14, extended_price#41, extended_tax#43, list_price#42]
Arguments: 100, [c_last_name#4 ASC NULLS FIRST, ss_ticket_number#14 ASC NULLS FIRST], [c_last_name#4, c_first_name#3, ca_city#7, bought_city#40, ss_ticket_number#14, extended_price#41, extended_tax#43, list_price#42]

===== Subqueries =====

Subquery:1 Hosting operator id = 15 Hosting Expression = ss_sold_date_sk#18 IN dynamicpruning#19
BroadcastExchange (52)
+- * Project (51)
   +- * Filter (50)
      +- * ColumnarToRow (49)
         +- Scan parquet default.date_dim (48)


(48) Scan parquet default.date_dim
Output [3]: [d_date_sk#20, d_year#45, d_dom#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(49) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#20, d_year#45, d_dom#46]

(50) Filter [codegen id : 1]
Input [3]: [d_date_sk#20, d_year#45, d_dom#46]
Condition : ((((isnotnull(d_dom#46) AND (d_dom#46 >= 1)) AND (d_dom#46 <= 2)) AND d_year#45 IN (1999,2000,2001)) AND isnotnull(d_date_sk#20))

(51) Project [codegen id : 1]
Output [1]: [d_date_sk#20]
Input [3]: [d_date_sk#20, d_year#45, d_dom#46]

(52) BroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47]


