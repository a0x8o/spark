== Physical Plan ==
* HashAggregate (98)
+- Exchange (97)
   +- * HashAggregate (96)
      +- Union (95)
         :- * Project (59)
         :  +- * BroadcastHashJoin Inner BuildRight (58)
         :     :- * Project (52)
         :     :  +- SortMergeJoin LeftSemi (51)
         :     :     :- * Sort (32)
         :     :     :  +- Exchange (31)
         :     :     :     +- * Project (30)
         :     :     :        +- SortMergeJoin LeftSemi (29)
         :     :     :           :- * Sort (4)
         :     :     :           :  +- Exchange (3)
         :     :     :           :     +- * ColumnarToRow (2)
         :     :     :           :        +- Scan parquet default.catalog_sales (1)
         :     :     :           +- * Sort (28)
         :     :     :              +- * Project (27)
         :     :     :                 +- * Filter (26)
         :     :     :                    +- * HashAggregate (25)
         :     :     :                       +- * HashAggregate (24)
         :     :     :                          +- * Project (23)
         :     :     :                             +- * SortMergeJoin Inner (22)
         :     :     :                                :- * Sort (16)
         :     :     :                                :  +- Exchange (15)
         :     :     :                                :     +- * Project (14)
         :     :     :                                :        +- * BroadcastHashJoin Inner BuildRight (13)
         :     :     :                                :           :- * Filter (7)
         :     :     :                                :           :  +- * ColumnarToRow (6)
         :     :     :                                :           :     +- Scan parquet default.store_sales (5)
         :     :     :                                :           +- BroadcastExchange (12)
         :     :     :                                :              +- * Project (11)
         :     :     :                                :                 +- * Filter (10)
         :     :     :                                :                    +- * ColumnarToRow (9)
         :     :     :                                :                       +- Scan parquet default.date_dim (8)
         :     :     :                                +- * Sort (21)
         :     :     :                                   +- Exchange (20)
         :     :     :                                      +- * Filter (19)
         :     :     :                                         +- * ColumnarToRow (18)
         :     :     :                                            +- Scan parquet default.item (17)
         :     :     +- * Sort (50)
         :     :        +- * Project (49)
         :     :           +- * Filter (48)
         :     :              +- * HashAggregate (47)
         :     :                 +- * HashAggregate (46)
         :     :                    +- * Project (45)
         :     :                       +- * SortMergeJoin Inner (44)
         :     :                          :- * Sort (38)
         :     :                          :  +- Exchange (37)
         :     :                          :     +- * Project (36)
         :     :                          :        +- * Filter (35)
         :     :                          :           +- * ColumnarToRow (34)
         :     :                          :              +- Scan parquet default.store_sales (33)
         :     :                          +- * Sort (43)
         :     :                             +- Exchange (42)
         :     :                                +- * Filter (41)
         :     :                                   +- * ColumnarToRow (40)
         :     :                                      +- Scan parquet default.customer (39)
         :     +- BroadcastExchange (57)
         :        +- * Project (56)
         :           +- * Filter (55)
         :              +- * ColumnarToRow (54)
         :                 +- Scan parquet default.date_dim (53)
         +- * Project (94)
            +- * BroadcastHashJoin Inner BuildRight (93)
               :- * Project (91)
               :  +- SortMergeJoin LeftSemi (90)
               :     :- * Sort (78)
               :     :  +- Exchange (77)
               :     :     +- * Project (76)
               :     :        +- SortMergeJoin LeftSemi (75)
               :     :           :- * Sort (63)
               :     :           :  +- Exchange (62)
               :     :           :     +- * ColumnarToRow (61)
               :     :           :        +- Scan parquet default.web_sales (60)
               :     :           +- * Sort (74)
               :     :              +- * Project (73)
               :     :                 +- * Filter (72)
               :     :                    +- * HashAggregate (71)
               :     :                       +- * HashAggregate (70)
               :     :                          +- * Project (69)
               :     :                             +- * SortMergeJoin Inner (68)
               :     :                                :- * Sort (65)
               :     :                                :  +- ReusedExchange (64)
               :     :                                +- * Sort (67)
               :     :                                   +- ReusedExchange (66)
               :     +- * Sort (89)
               :        +- * Project (88)
               :           +- * Filter (87)
               :              +- * HashAggregate (86)
               :                 +- * HashAggregate (85)
               :                    +- * Project (84)
               :                       +- * SortMergeJoin Inner (83)
               :                          :- * Sort (80)
               :                          :  +- ReusedExchange (79)
               :                          +- * Sort (82)
               :                             +- ReusedExchange (81)
               +- ReusedExchange (92)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(4) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(5) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(6) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(7) Filter [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(8) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(9) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#11, d_date#12, d_year#13]

(10) Filter [codegen id : 3]
Input [3]: [d_date_sk#11, d_date#12, d_year#13]
Condition : (d_year#13 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(11) Project [codegen id : 3]
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#13]

(12) BroadcastExchange
Input [2]: [d_date_sk#11, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(13) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(14) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(15) Exchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#15]

(16) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(17) Scan parquet default.item
Output [2]: [i_item_sk#16, i_item_desc#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(18) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#16, i_item_desc#17]

(19) Filter [codegen id : 6]
Input [2]: [i_item_sk#16, i_item_desc#17]
Condition : isnotnull(i_item_sk#16)

(20) Exchange
Input [2]: [i_item_sk#16, i_item_desc#17]
Arguments: hashpartitioning(i_item_sk#16, 5), ENSURE_REQUIREMENTS, [id=#18]

(21) Sort [codegen id : 7]
Input [2]: [i_item_sk#16, i_item_desc#17]
Arguments: [i_item_sk#16 ASC NULLS FIRST], false, 0

(22) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#16]
Join condition: None

(23) Project [codegen id : 8]
Output [3]: [d_date#12, i_item_sk#16, i_item_desc#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#16, i_item_desc#17]

(24) HashAggregate [codegen id : 8]
Input [3]: [d_date#12, i_item_sk#16, i_item_desc#17]
Keys [3]: [substr(i_item_desc#17, 1, 30) AS substr(i_item_desc#17, 1, 30)#19, i_item_sk#16, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#20]
Results [4]: [substr(i_item_desc#17, 1, 30)#19, i_item_sk#16, d_date#12, count#21]

(25) HashAggregate [codegen id : 8]
Input [4]: [substr(i_item_desc#17, 1, 30)#19, i_item_sk#16, d_date#12, count#21]
Keys [3]: [substr(i_item_desc#17, 1, 30)#19, i_item_sk#16, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#22]
Results [2]: [i_item_sk#16 AS item_sk#23, count(1)#22 AS count(1)#24]

(26) Filter [codegen id : 8]
Input [2]: [item_sk#23, count(1)#24]
Condition : (count(1)#24 > 4)

(27) Project [codegen id : 8]
Output [1]: [item_sk#23]
Input [2]: [item_sk#23, count(1)#24]

(28) Sort [codegen id : 8]
Input [1]: [item_sk#23]
Arguments: [item_sk#23 ASC NULLS FIRST], false, 0

(29) SortMergeJoin
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#23]
Join condition: None

(30) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(31) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#25]

(32) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(33) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(34) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]

(35) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]
Condition : isnotnull(ss_customer_sk#26)

(36) Project [codegen id : 11]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]

(37) Exchange
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), ENSURE_REQUIREMENTS, [id=#29]

(38) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(39) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(40) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#30]

(41) Filter [codegen id : 13]
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(42) Exchange
Input [1]: [c_customer_sk#30]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(43) Sort [codegen id : 14]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(45) Project [codegen id : 15]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(46) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#32, isEmpty#33]
Results [3]: [c_customer_sk#30, sum#34, isEmpty#35]

(47) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#30, sum#34, isEmpty#35]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(48) Filter [codegen id : 15]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(49) Project [codegen id : 15]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(50) Sort [codegen id : 15]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(51) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(52) Project [codegen id : 17]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(53) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#13, d_moy#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(54) ColumnarToRow [codegen id : 16]
Input [3]: [d_date_sk#11, d_year#13, d_moy#40]

(55) Filter [codegen id : 16]
Input [3]: [d_date_sk#11, d_year#13, d_moy#40]
Condition : ((((isnotnull(d_year#13) AND isnotnull(d_moy#40)) AND (d_year#13 = 2000)) AND (d_moy#40 = 2)) AND isnotnull(d_date_sk#11))

(56) Project [codegen id : 16]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#13, d_moy#40]

(57) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#11]
Join condition: None

(59) Project [codegen id : 17]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true) AS sales#42]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#11]

(60) Scan parquet default.web_sales
Output [5]: [ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#47), dynamicpruningexpression(ws_sold_date_sk#47 IN dynamicpruning#6)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(61) ColumnarToRow [codegen id : 18]
Input [5]: [ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]

(62) Exchange
Input [5]: [ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Arguments: hashpartitioning(ws_item_sk#43, 5), ENSURE_REQUIREMENTS, [id=#48]

(63) Sort [codegen id : 19]
Input [5]: [ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Arguments: [ws_item_sk#43 ASC NULLS FIRST], false, 0

(64) ReusedExchange [Reuses operator id: unknown]
Output [2]: [ss_item_sk#8, d_date#12]

(65) Sort [codegen id : 22]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(66) ReusedExchange [Reuses operator id: 20]
Output [2]: [i_item_sk#16, i_item_desc#17]

(67) Sort [codegen id : 24]
Input [2]: [i_item_sk#16, i_item_desc#17]
Arguments: [i_item_sk#16 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#16]
Join condition: None

(69) Project [codegen id : 25]
Output [3]: [d_date#12, i_item_sk#16, i_item_desc#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#16, i_item_desc#17]

(70) HashAggregate [codegen id : 25]
Input [3]: [d_date#12, i_item_sk#16, i_item_desc#17]
Keys [3]: [substr(i_item_desc#17, 1, 30) AS substr(i_item_desc#17, 1, 30)#49, i_item_sk#16, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#50]
Results [4]: [substr(i_item_desc#17, 1, 30)#49, i_item_sk#16, d_date#12, count#51]

(71) HashAggregate [codegen id : 25]
Input [4]: [substr(i_item_desc#17, 1, 30)#49, i_item_sk#16, d_date#12, count#51]
Keys [3]: [substr(i_item_desc#17, 1, 30)#49, i_item_sk#16, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#52]
Results [2]: [i_item_sk#16 AS item_sk#23, count(1)#52 AS count(1)#53]

(72) Filter [codegen id : 25]
Input [2]: [item_sk#23, count(1)#53]
Condition : (count(1)#53 > 4)

(73) Project [codegen id : 25]
Output [1]: [item_sk#23]
Input [2]: [item_sk#23, count(1)#53]

(74) Sort [codegen id : 25]
Input [1]: [item_sk#23]
Arguments: [item_sk#23 ASC NULLS FIRST], false, 0

(75) SortMergeJoin
Left keys [1]: [ws_item_sk#43]
Right keys [1]: [item_sk#23]
Join condition: None

(76) Project [codegen id : 26]
Output [4]: [ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Input [5]: [ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]

(77) Exchange
Input [4]: [ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Arguments: hashpartitioning(ws_bill_customer_sk#44, 5), ENSURE_REQUIREMENTS, [id=#54]

(78) Sort [codegen id : 27]
Input [4]: [ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Arguments: [ws_bill_customer_sk#44 ASC NULLS FIRST], false, 0

(79) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(80) Sort [codegen id : 29]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(81) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#30]

(82) Sort [codegen id : 31]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(83) SortMergeJoin [codegen id : 32]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(84) Project [codegen id : 32]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(85) HashAggregate [codegen id : 32]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#55, isEmpty#56]
Results [3]: [c_customer_sk#30, sum#57, isEmpty#58]

(86) HashAggregate [codegen id : 32]
Input [3]: [c_customer_sk#30, sum#57, isEmpty#58]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#59]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#60]

(87) Filter [codegen id : 32]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#60]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#60) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#60 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(88) Project [codegen id : 32]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#60]

(89) Sort [codegen id : 32]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(90) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#44]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(91) Project [codegen id : 34]
Output [3]: [ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Input [4]: [ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]

(92) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#11]

(93) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ws_sold_date_sk#47]
Right keys [1]: [d_date_sk#11]
Join condition: None

(94) Project [codegen id : 34]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#46 as decimal(12,2)))), DecimalType(18,2), true) AS sales#61]
Input [4]: [ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47, d_date_sk#11]

(95) Union

(96) HashAggregate [codegen id : 35]
Input [1]: [sales#42]
Keys: []
Functions [1]: [partial_sum(sales#42)]
Aggregate Attributes [2]: [sum#62, isEmpty#63]
Results [2]: [sum#64, isEmpty#65]

(97) Exchange
Input [2]: [sum#64, isEmpty#65]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#66]

(98) HashAggregate [codegen id : 36]
Input [2]: [sum#64, isEmpty#65]
Keys: []
Functions [1]: [sum(sales#42)]
Aggregate Attributes [1]: [sum(sales#42)#67]
Results [1]: [sum(sales#42)#67 AS sum(sales)#68]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
ReusedExchange (99)


(99) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#11]

Subquery:2 Hosting operator id = 5 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
ReusedExchange (100)


(100) ReusedExchange [Reuses operator id: 12]
Output [2]: [d_date_sk#11, d_date#12]

Subquery:3 Hosting operator id = 48 Hosting Expression = Subquery scalar-subquery#38, [id=#39]
* HashAggregate (124)
+- Exchange (123)
   +- * HashAggregate (122)
      +- * HashAggregate (121)
         +- * HashAggregate (120)
            +- * Project (119)
               +- * SortMergeJoin Inner (118)
                  :- * Sort (112)
                  :  +- Exchange (111)
                  :     +- * Project (110)
                  :        +- * BroadcastHashJoin Inner BuildRight (109)
                  :           :- * Filter (103)
                  :           :  +- * ColumnarToRow (102)
                  :           :     +- Scan parquet default.store_sales (101)
                  :           +- BroadcastExchange (108)
                  :              +- * Project (107)
                  :                 +- * Filter (106)
                  :                    +- * ColumnarToRow (105)
                  :                       +- Scan parquet default.date_dim (104)
                  +- * Sort (117)
                     +- Exchange (116)
                        +- * Filter (115)
                           +- * ColumnarToRow (114)
                              +- Scan parquet default.customer (113)


(101) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#69)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(102) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]

(103) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]
Condition : isnotnull(ss_customer_sk#26)

(104) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(105) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#13]

(106) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#13]
Condition : (d_year#13 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(107) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#13]

(108) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70]

(109) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(110) Project [codegen id : 2]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Input [5]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9, d_date_sk#11]

(111) Exchange
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), ENSURE_REQUIREMENTS, [id=#71]

(112) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(113) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(114) ColumnarToRow [codegen id : 4]
Input [1]: [c_customer_sk#30]

(115) Filter [codegen id : 4]
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(116) Exchange
Input [1]: [c_customer_sk#30]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#72]

(117) Sort [codegen id : 5]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(118) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(119) Project [codegen id : 6]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(120) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#73, isEmpty#74]
Results [3]: [c_customer_sk#30, sum#75, isEmpty#76]

(121) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#30, sum#75, isEmpty#76]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#77]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#77 AS csales#78]

(122) HashAggregate [codegen id : 6]
Input [1]: [csales#78]
Keys: []
Functions [1]: [partial_max(csales#78)]
Aggregate Attributes [1]: [max#79]
Results [1]: [max#80]

(123) Exchange
Input [1]: [max#80]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#81]

(124) HashAggregate [codegen id : 7]
Input [1]: [max#80]
Keys: []
Functions [1]: [max(csales#78)]
Aggregate Attributes [1]: [max(csales#78)#82]
Results [1]: [max(csales#78)#82 AS tpcds_cmax#83]

Subquery:4 Hosting operator id = 101 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#69
ReusedExchange (125)


(125) ReusedExchange [Reuses operator id: 108]
Output [1]: [d_date_sk#11]

Subquery:5 Hosting operator id = 60 Hosting Expression = ws_sold_date_sk#47 IN dynamicpruning#6

Subquery:6 Hosting operator id = 87 Hosting Expression = ReusedSubquery Subquery scalar-subquery#38, [id=#39]


