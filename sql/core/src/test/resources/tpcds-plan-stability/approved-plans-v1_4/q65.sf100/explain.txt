== Physical Plan ==
TakeOrderedAndProject (45)
+- * Project (44)
   +- * SortMergeJoin Inner (43)
      :- * Sort (37)
      :  +- Exchange (36)
      :     +- * Project (35)
      :        +- * BroadcastHashJoin Inner BuildRight (34)
      :           :- * Project (29)
      :           :  +- * BroadcastHashJoin Inner BuildRight (28)
      :           :     :- * Filter (14)
      :           :     :  +- * HashAggregate (13)
      :           :     :     +- Exchange (12)
      :           :     :        +- * HashAggregate (11)
      :           :     :           +- * Project (10)
      :           :     :              +- * BroadcastHashJoin Inner BuildRight (9)
      :           :     :                 :- * Filter (3)
      :           :     :                 :  +- * ColumnarToRow (2)
      :           :     :                 :     +- Scan parquet default.store_sales (1)
      :           :     :                 +- BroadcastExchange (8)
      :           :     :                    +- * Project (7)
      :           :     :                       +- * Filter (6)
      :           :     :                          +- * ColumnarToRow (5)
      :           :     :                             +- Scan parquet default.date_dim (4)
      :           :     +- BroadcastExchange (27)
      :           :        +- * HashAggregate (26)
      :           :           +- Exchange (25)
      :           :              +- * HashAggregate (24)
      :           :                 +- * HashAggregate (23)
      :           :                    +- Exchange (22)
      :           :                       +- * HashAggregate (21)
      :           :                          +- * Project (20)
      :           :                             +- * BroadcastHashJoin Inner BuildRight (19)
      :           :                                :- * Filter (17)
      :           :                                :  +- * ColumnarToRow (16)
      :           :                                :     +- Scan parquet default.store_sales (15)
      :           :                                +- ReusedExchange (18)
      :           +- BroadcastExchange (33)
      :              +- * Filter (32)
      :                 +- * ColumnarToRow (31)
      :                    +- Scan parquet default.store (30)
      +- * Sort (42)
         +- Exchange (41)
            +- * Filter (40)
               +- * ColumnarToRow (39)
                  +- Scan parquet default.item (38)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_month_seq#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1176)) AND (d_month_seq#7 <= 1187)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_month_seq#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4, d_date_sk#6]

(11) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3]
Keys [2]: [ss_store_sk#2, ss_item_sk#1]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum#9]
Results [3]: [ss_store_sk#2, ss_item_sk#1, sum#10]

(12) Exchange
Input [3]: [ss_store_sk#2, ss_item_sk#1, sum#10]
Arguments: hashpartitioning(ss_store_sk#2, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#11]

(13) HashAggregate [codegen id : 8]
Input [3]: [ss_store_sk#2, ss_item_sk#1, sum#10]
Keys [2]: [ss_store_sk#2, ss_item_sk#1]
Functions [1]: [sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#3))#12]
Results [3]: [ss_store_sk#2, ss_item_sk#1, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#12,17,2) AS revenue#13]

(14) Filter [codegen id : 8]
Input [3]: [ss_store_sk#2, ss_item_sk#1, revenue#13]
Condition : isnotnull(revenue#13)

(15) Scan parquet default.store_sales
Output [4]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16, ss_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#17), dynamicpruningexpression(ss_sold_date_sk#17 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16, ss_sold_date_sk#17]

(17) Filter [codegen id : 4]
Input [4]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16, ss_sold_date_sk#17]
Condition : isnotnull(ss_store_sk#15)

(18) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#18]

(19) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#17]
Right keys [1]: [d_date_sk#18]
Join condition: None

(20) Project [codegen id : 4]
Output [3]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16]
Input [5]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16, ss_sold_date_sk#17, d_date_sk#18]

(21) HashAggregate [codegen id : 4]
Input [3]: [ss_item_sk#14, ss_store_sk#15, ss_sales_price#16]
Keys [2]: [ss_store_sk#15, ss_item_sk#14]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#16))]
Aggregate Attributes [1]: [sum#19]
Results [3]: [ss_store_sk#15, ss_item_sk#14, sum#20]

(22) Exchange
Input [3]: [ss_store_sk#15, ss_item_sk#14, sum#20]
Arguments: hashpartitioning(ss_store_sk#15, ss_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#21]

(23) HashAggregate [codegen id : 5]
Input [3]: [ss_store_sk#15, ss_item_sk#14, sum#20]
Keys [2]: [ss_store_sk#15, ss_item_sk#14]
Functions [1]: [sum(UnscaledValue(ss_sales_price#16))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#16))#22]
Results [2]: [ss_store_sk#15, MakeDecimal(sum(UnscaledValue(ss_sales_price#16))#22,17,2) AS revenue#23]

(24) HashAggregate [codegen id : 5]
Input [2]: [ss_store_sk#15, revenue#23]
Keys [1]: [ss_store_sk#15]
Functions [1]: [partial_avg(revenue#23)]
Aggregate Attributes [2]: [sum#24, count#25]
Results [3]: [ss_store_sk#15, sum#26, count#27]

(25) Exchange
Input [3]: [ss_store_sk#15, sum#26, count#27]
Arguments: hashpartitioning(ss_store_sk#15, 5), ENSURE_REQUIREMENTS, [id=#28]

(26) HashAggregate [codegen id : 6]
Input [3]: [ss_store_sk#15, sum#26, count#27]
Keys [1]: [ss_store_sk#15]
Functions [1]: [avg(revenue#23)]
Aggregate Attributes [1]: [avg(revenue#23)#29]
Results [2]: [ss_store_sk#15, avg(revenue#23)#29 AS ave#30]

(27) BroadcastExchange
Input [2]: [ss_store_sk#15, ave#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [ss_store_sk#15]
Join condition: (cast(revenue#13 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#30)), DecimalType(23,7), true))

(29) Project [codegen id : 8]
Output [3]: [ss_store_sk#2, ss_item_sk#1, revenue#13]
Input [5]: [ss_store_sk#2, ss_item_sk#1, revenue#13, ss_store_sk#15, ave#30]

(30) Scan parquet default.store
Output [2]: [s_store_sk#32, s_store_name#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(31) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#32, s_store_name#33]

(32) Filter [codegen id : 7]
Input [2]: [s_store_sk#32, s_store_name#33]
Condition : isnotnull(s_store_sk#32)

(33) BroadcastExchange
Input [2]: [s_store_sk#32, s_store_name#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#32]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [ss_item_sk#1, revenue#13, s_store_name#33]
Input [5]: [ss_store_sk#2, ss_item_sk#1, revenue#13, s_store_sk#32, s_store_name#33]

(36) Exchange
Input [3]: [ss_item_sk#1, revenue#13, s_store_name#33]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#35]

(37) Sort [codegen id : 9]
Input [3]: [ss_item_sk#1, revenue#13, s_store_name#33]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(38) Scan parquet default.item
Output [5]: [i_item_sk#36, i_item_desc#37, i_current_price#38, i_wholesale_cost#39, i_brand#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(39) ColumnarToRow [codegen id : 10]
Input [5]: [i_item_sk#36, i_item_desc#37, i_current_price#38, i_wholesale_cost#39, i_brand#40]

(40) Filter [codegen id : 10]
Input [5]: [i_item_sk#36, i_item_desc#37, i_current_price#38, i_wholesale_cost#39, i_brand#40]
Condition : isnotnull(i_item_sk#36)

(41) Exchange
Input [5]: [i_item_sk#36, i_item_desc#37, i_current_price#38, i_wholesale_cost#39, i_brand#40]
Arguments: hashpartitioning(i_item_sk#36, 5), ENSURE_REQUIREMENTS, [id=#41]

(42) Sort [codegen id : 11]
Input [5]: [i_item_sk#36, i_item_desc#37, i_current_price#38, i_wholesale_cost#39, i_brand#40]
Arguments: [i_item_sk#36 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#36]
Join condition: None

(44) Project [codegen id : 12]
Output [6]: [s_store_name#33, i_item_desc#37, revenue#13, i_current_price#38, i_wholesale_cost#39, i_brand#40]
Input [8]: [ss_item_sk#1, revenue#13, s_store_name#33, i_item_sk#36, i_item_desc#37, i_current_price#38, i_wholesale_cost#39, i_brand#40]

(45) TakeOrderedAndProject
Input [6]: [s_store_name#33, i_item_desc#37, revenue#13, i_current_price#38, i_wholesale_cost#39, i_brand#40]
Arguments: 100, [s_store_name#33 ASC NULLS FIRST, i_item_desc#37 ASC NULLS FIRST], [s_store_name#33, i_item_desc#37, revenue#13, i_current_price#38, i_wholesale_cost#39, i_brand#40]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (46)


(46) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#6]

Subquery:2 Hosting operator id = 15 Hosting Expression = ss_sold_date_sk#17 IN dynamicpruning#5


