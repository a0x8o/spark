== Physical Plan ==
TakeOrderedAndProject (58)
+- * HashAggregate (57)
   +- Exchange (56)
      +- * HashAggregate (55)
         +- * Project (54)
            +- * SortMergeJoin Inner (53)
               :- * Sort (41)
               :  +- Exchange (40)
               :     +- * Project (39)
               :        +- * BroadcastHashJoin Inner BuildRight (38)
               :           :- * Project (32)
               :           :  +- * BroadcastHashJoin Inner BuildRight (31)
               :           :     :- * Project (26)
               :           :     :  +- * BroadcastHashJoin Inner BuildRight (25)
               :           :     :     :- * Project (19)
               :           :     :     :  +- * SortMergeJoin Inner (18)
               :           :     :     :     :- * Sort (11)
               :           :     :     :     :  +- Exchange (10)
               :           :     :     :     :     +- * Project (9)
               :           :     :     :     :        +- * BroadcastHashJoin Inner BuildRight (8)
               :           :     :     :     :           :- * Filter (3)
               :           :     :     :     :           :  +- * ColumnarToRow (2)
               :           :     :     :     :           :     +- Scan parquet default.web_sales (1)
               :           :     :     :     :           +- BroadcastExchange (7)
               :           :     :     :     :              +- * Filter (6)
               :           :     :     :     :                 +- * ColumnarToRow (5)
               :           :     :     :     :                    +- Scan parquet default.web_page (4)
               :           :     :     :     +- * Sort (17)
               :           :     :     :        +- Exchange (16)
               :           :     :     :           +- * Project (15)
               :           :     :     :              +- * Filter (14)
               :           :     :     :                 +- * ColumnarToRow (13)
               :           :     :     :                    +- Scan parquet default.web_returns (12)
               :           :     :     +- BroadcastExchange (24)
               :           :     :        +- * Project (23)
               :           :     :           +- * Filter (22)
               :           :     :              +- * ColumnarToRow (21)
               :           :     :                 +- Scan parquet default.date_dim (20)
               :           :     +- BroadcastExchange (30)
               :           :        +- * Filter (29)
               :           :           +- * ColumnarToRow (28)
               :           :              +- Scan parquet default.reason (27)
               :           +- BroadcastExchange (37)
               :              +- * Project (36)
               :                 +- * Filter (35)
               :                    +- * ColumnarToRow (34)
               :                       +- Scan parquet default.customer_address (33)
               +- * Sort (52)
                  +- Exchange (51)
                     +- * Project (50)
                        +- * BroadcastHashJoin Inner BuildLeft (49)
                           :- BroadcastExchange (45)
                           :  +- * Filter (44)
                           :     +- * ColumnarToRow (43)
                           :        +- Scan parquet default.customer_demographics (42)
                           +- * Filter (48)
                              +- * ColumnarToRow (47)
                                 +- Scan parquet default.customer_demographics (46)


(1) Scan parquet default.web_sales
Output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#7), dynamicpruningexpression(ws_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterThanOrEqual(ws_sales_price,100.00),LessThanOrEqual(ws_sales_price,150.00)),And(GreaterThanOrEqual(ws_sales_price,50.00),LessThanOrEqual(ws_sales_price,100.00))),And(GreaterThanOrEqual(ws_sales_price,150.00),LessThanOrEqual(ws_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ws_net_profit,100.00),LessThanOrEqual(ws_net_profit,200.00)),And(GreaterThanOrEqual(ws_net_profit,150.00),LessThanOrEqual(ws_net_profit,300.00))),And(GreaterThanOrEqual(ws_net_profit,50.00),LessThanOrEqual(ws_net_profit,250.00)))]
ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]

(3) Filter [codegen id : 2]
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((((isnotnull(ws_item_sk#1) AND isnotnull(ws_order_number#3)) AND isnotnull(ws_web_page_sk#2)) AND ((((ws_sales_price#5 >= 100.00) AND (ws_sales_price#5 <= 150.00)) OR ((ws_sales_price#5 >= 50.00) AND (ws_sales_price#5 <= 100.00))) OR ((ws_sales_price#5 >= 150.00) AND (ws_sales_price#5 <= 200.00)))) AND ((((ws_net_profit#6 >= 100.00) AND (ws_net_profit#6 <= 200.00)) OR ((ws_net_profit#6 >= 150.00) AND (ws_net_profit#6 <= 300.00))) OR ((ws_net_profit#6 >= 50.00) AND (ws_net_profit#6 <= 250.00))))

(4) Scan parquet default.web_page
Output [1]: [wp_web_page_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [wp_web_page_sk#9]

(6) Filter [codegen id : 1]
Input [1]: [wp_web_page_sk#9]
Condition : isnotnull(wp_web_page_sk#9)

(7) BroadcastExchange
Input [1]: [wp_web_page_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_web_page_sk#2]
Right keys [1]: [wp_web_page_sk#9]
Join condition: None

(9) Project [codegen id : 2]
Output [6]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Input [8]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wp_web_page_sk#9]

(10) Exchange
Input [6]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: hashpartitioning(cast(ws_item_sk#1 as bigint), cast(ws_order_number#3 as bigint), 5), ENSURE_REQUIREMENTS, [id=#11]

(11) Sort [codegen id : 3]
Input [6]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: [cast(ws_item_sk#1 as bigint) ASC NULLS FIRST, cast(ws_order_number#3 as bigint) ASC NULLS FIRST], false, 0

(12) Scan parquet default.web_returns
Output [9]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19, wr_returned_date_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)]
ReadSchema: struct<wr_item_sk:bigint,wr_refunded_cdemo_sk:bigint,wr_refunded_addr_sk:bigint,wr_returning_cdemo_sk:bigint,wr_reason_sk:bigint,wr_order_number:bigint,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)>

(13) ColumnarToRow [codegen id : 4]
Input [9]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19, wr_returned_date_sk#20]

(14) Filter [codegen id : 4]
Input [9]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19, wr_returned_date_sk#20]
Condition : (((((isnotnull(wr_item_sk#12) AND isnotnull(wr_order_number#17)) AND isnotnull(wr_refunded_cdemo_sk#13)) AND isnotnull(wr_returning_cdemo_sk#15)) AND isnotnull(wr_refunded_addr_sk#14)) AND isnotnull(wr_reason_sk#16))

(15) Project [codegen id : 4]
Output [8]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19]
Input [9]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19, wr_returned_date_sk#20]

(16) Exchange
Input [8]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19]
Arguments: hashpartitioning(wr_item_sk#12, wr_order_number#17, 5), ENSURE_REQUIREMENTS, [id=#21]

(17) Sort [codegen id : 5]
Input [8]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19]
Arguments: [wr_item_sk#12 ASC NULLS FIRST, wr_order_number#17 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 9]
Left keys [2]: [cast(ws_item_sk#1 as bigint), cast(ws_order_number#3 as bigint)]
Right keys [2]: [wr_item_sk#12, wr_order_number#17]
Join condition: None

(19) Project [codegen id : 9]
Output [10]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19]
Input [14]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19]

(20) Scan parquet default.date_dim
Output [2]: [d_date_sk#22, d_year#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(21) ColumnarToRow [codegen id : 6]
Input [2]: [d_date_sk#22, d_year#23]

(22) Filter [codegen id : 6]
Input [2]: [d_date_sk#22, d_year#23]
Condition : ((isnotnull(d_year#23) AND (d_year#23 = 2000)) AND isnotnull(d_date_sk#22))

(23) Project [codegen id : 6]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_year#23]

(24) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(25) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#7]
Right keys [1]: [d_date_sk#22]
Join condition: None

(26) Project [codegen id : 9]
Output [9]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19]
Input [11]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19, d_date_sk#22]

(27) Scan parquet default.reason
Output [2]: [r_reason_sk#25, r_reason_desc#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk)]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(28) ColumnarToRow [codegen id : 7]
Input [2]: [r_reason_sk#25, r_reason_desc#26]

(29) Filter [codegen id : 7]
Input [2]: [r_reason_sk#25, r_reason_desc#26]
Condition : isnotnull(r_reason_sk#25)

(30) BroadcastExchange
Input [2]: [r_reason_sk#25, r_reason_desc#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [wr_reason_sk#16]
Right keys [1]: [cast(r_reason_sk#25 as bigint)]
Join condition: None

(32) Project [codegen id : 9]
Output [9]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_fee#18, wr_refunded_cash#19, r_reason_desc#26]
Input [11]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19, r_reason_sk#25, r_reason_desc#26]

(33) Scan parquet default.customer_address
Output [3]: [ca_address_sk#28, ca_state#29, ca_country#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [IN,OH,NJ]),In(ca_state, [WI,CT,KY])),In(ca_state, [LA,IA,AR]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(34) ColumnarToRow [codegen id : 8]
Input [3]: [ca_address_sk#28, ca_state#29, ca_country#30]

(35) Filter [codegen id : 8]
Input [3]: [ca_address_sk#28, ca_state#29, ca_country#30]
Condition : (((isnotnull(ca_country#30) AND (ca_country#30 = United States)) AND isnotnull(ca_address_sk#28)) AND ((ca_state#29 IN (IN,OH,NJ) OR ca_state#29 IN (WI,CT,KY)) OR ca_state#29 IN (LA,IA,AR)))

(36) Project [codegen id : 8]
Output [2]: [ca_address_sk#28, ca_state#29]
Input [3]: [ca_address_sk#28, ca_state#29, ca_country#30]

(37) BroadcastExchange
Input [2]: [ca_address_sk#28, ca_state#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [wr_refunded_addr_sk#14]
Right keys [1]: [cast(ca_address_sk#28 as bigint)]
Join condition: ((((ca_state#29 IN (IN,OH,NJ) AND (ws_net_profit#6 >= 100.00)) AND (ws_net_profit#6 <= 200.00)) OR ((ca_state#29 IN (WI,CT,KY) AND (ws_net_profit#6 >= 150.00)) AND (ws_net_profit#6 <= 300.00))) OR ((ca_state#29 IN (LA,IA,AR) AND (ws_net_profit#6 >= 50.00)) AND (ws_net_profit#6 <= 250.00)))

(39) Project [codegen id : 9]
Output [7]: [ws_quantity#4, ws_sales_price#5, wr_refunded_cdemo_sk#13, wr_returning_cdemo_sk#15, wr_fee#18, wr_refunded_cash#19, r_reason_desc#26]
Input [11]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_fee#18, wr_refunded_cash#19, r_reason_desc#26, ca_address_sk#28, ca_state#29]

(40) Exchange
Input [7]: [ws_quantity#4, ws_sales_price#5, wr_refunded_cdemo_sk#13, wr_returning_cdemo_sk#15, wr_fee#18, wr_refunded_cash#19, r_reason_desc#26]
Arguments: hashpartitioning(wr_refunded_cdemo_sk#13, wr_returning_cdemo_sk#15, 5), ENSURE_REQUIREMENTS, [id=#32]

(41) Sort [codegen id : 10]
Input [7]: [ws_quantity#4, ws_sales_price#5, wr_refunded_cdemo_sk#13, wr_returning_cdemo_sk#15, wr_fee#18, wr_refunded_cash#19, r_reason_desc#26]
Arguments: [wr_refunded_cdemo_sk#13 ASC NULLS FIRST, wr_returning_cdemo_sk#15 ASC NULLS FIRST], false, 0

(42) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#33, cd_marital_status#34, cd_education_status#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Advanced Degree)),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College))),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,2 yr Degree)))]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(43) ColumnarToRow [codegen id : 11]
Input [3]: [cd_demo_sk#33, cd_marital_status#34, cd_education_status#35]

(44) Filter [codegen id : 11]
Input [3]: [cd_demo_sk#33, cd_marital_status#34, cd_education_status#35]
Condition : (((isnotnull(cd_demo_sk#33) AND isnotnull(cd_marital_status#34)) AND isnotnull(cd_education_status#35)) AND ((((cd_marital_status#34 = M) AND (cd_education_status#35 = Advanced Degree)) OR ((cd_marital_status#34 = S) AND (cd_education_status#35 = College))) OR ((cd_marital_status#34 = W) AND (cd_education_status#35 = 2 yr Degree))))

(45) BroadcastExchange
Input [3]: [cd_demo_sk#33, cd_marital_status#34, cd_education_status#35]
Arguments: HashedRelationBroadcastMode(List(input[1, string, false], input[2, string, false]),false), [id=#36]

(46) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#37, cd_marital_status#38, cd_education_status#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(47) ColumnarToRow
Input [3]: [cd_demo_sk#37, cd_marital_status#38, cd_education_status#39]

(48) Filter
Input [3]: [cd_demo_sk#37, cd_marital_status#38, cd_education_status#39]
Condition : ((isnotnull(cd_demo_sk#37) AND isnotnull(cd_marital_status#38)) AND isnotnull(cd_education_status#39))

(49) BroadcastHashJoin [codegen id : 12]
Left keys [2]: [cd_marital_status#34, cd_education_status#35]
Right keys [2]: [cd_marital_status#38, cd_education_status#39]
Join condition: None

(50) Project [codegen id : 12]
Output [4]: [cd_demo_sk#33, cd_marital_status#34, cd_education_status#35, cd_demo_sk#37]
Input [6]: [cd_demo_sk#33, cd_marital_status#34, cd_education_status#35, cd_demo_sk#37, cd_marital_status#38, cd_education_status#39]

(51) Exchange
Input [4]: [cd_demo_sk#33, cd_marital_status#34, cd_education_status#35, cd_demo_sk#37]
Arguments: hashpartitioning(cast(cd_demo_sk#33 as bigint), cast(cd_demo_sk#37 as bigint), 5), ENSURE_REQUIREMENTS, [id=#40]

(52) Sort [codegen id : 13]
Input [4]: [cd_demo_sk#33, cd_marital_status#34, cd_education_status#35, cd_demo_sk#37]
Arguments: [cast(cd_demo_sk#33 as bigint) ASC NULLS FIRST, cast(cd_demo_sk#37 as bigint) ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 14]
Left keys [2]: [wr_refunded_cdemo_sk#13, wr_returning_cdemo_sk#15]
Right keys [2]: [cast(cd_demo_sk#33 as bigint), cast(cd_demo_sk#37 as bigint)]
Join condition: ((((((cd_marital_status#34 = M) AND (cd_education_status#35 = Advanced Degree)) AND (ws_sales_price#5 >= 100.00)) AND (ws_sales_price#5 <= 150.00)) OR ((((cd_marital_status#34 = S) AND (cd_education_status#35 = College)) AND (ws_sales_price#5 >= 50.00)) AND (ws_sales_price#5 <= 100.00))) OR ((((cd_marital_status#34 = W) AND (cd_education_status#35 = 2 yr Degree)) AND (ws_sales_price#5 >= 150.00)) AND (ws_sales_price#5 <= 200.00)))

(54) Project [codegen id : 14]
Output [4]: [ws_quantity#4, wr_fee#18, wr_refunded_cash#19, r_reason_desc#26]
Input [11]: [ws_quantity#4, ws_sales_price#5, wr_refunded_cdemo_sk#13, wr_returning_cdemo_sk#15, wr_fee#18, wr_refunded_cash#19, r_reason_desc#26, cd_demo_sk#33, cd_marital_status#34, cd_education_status#35, cd_demo_sk#37]

(55) HashAggregate [codegen id : 14]
Input [4]: [ws_quantity#4, wr_fee#18, wr_refunded_cash#19, r_reason_desc#26]
Keys [1]: [r_reason_desc#26]
Functions [3]: [partial_avg(ws_quantity#4), partial_avg(UnscaledValue(wr_refunded_cash#19)), partial_avg(UnscaledValue(wr_fee#18))]
Aggregate Attributes [6]: [sum#41, count#42, sum#43, count#44, sum#45, count#46]
Results [7]: [r_reason_desc#26, sum#47, count#48, sum#49, count#50, sum#51, count#52]

(56) Exchange
Input [7]: [r_reason_desc#26, sum#47, count#48, sum#49, count#50, sum#51, count#52]
Arguments: hashpartitioning(r_reason_desc#26, 5), ENSURE_REQUIREMENTS, [id=#53]

(57) HashAggregate [codegen id : 15]
Input [7]: [r_reason_desc#26, sum#47, count#48, sum#49, count#50, sum#51, count#52]
Keys [1]: [r_reason_desc#26]
Functions [3]: [avg(ws_quantity#4), avg(UnscaledValue(wr_refunded_cash#19)), avg(UnscaledValue(wr_fee#18))]
Aggregate Attributes [3]: [avg(ws_quantity#4)#54, avg(UnscaledValue(wr_refunded_cash#19))#55, avg(UnscaledValue(wr_fee#18))#56]
Results [4]: [substr(r_reason_desc#26, 1, 20) AS substr(r_reason_desc, 1, 20)#57, avg(ws_quantity#4)#54 AS avg(ws_quantity)#58, cast((avg(UnscaledValue(wr_refunded_cash#19))#55 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#59, cast((avg(UnscaledValue(wr_fee#18))#56 / 100.0) as decimal(11,6)) AS avg(wr_fee)#60]

(58) TakeOrderedAndProject
Input [4]: [substr(r_reason_desc, 1, 20)#57, avg(ws_quantity)#58, avg(wr_refunded_cash)#59, avg(wr_fee)#60]
Arguments: 100, [substr(r_reason_desc, 1, 20)#57 ASC NULLS FIRST, avg(ws_quantity)#58 ASC NULLS FIRST, avg(wr_refunded_cash)#59 ASC NULLS FIRST, avg(wr_fee)#60 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#57, avg(ws_quantity)#58, avg(wr_refunded_cash)#59, avg(wr_fee)#60]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#7 IN dynamicpruning#8
ReusedExchange (59)


(59) ReusedExchange [Reuses operator id: 24]
Output [1]: [d_date_sk#22]


