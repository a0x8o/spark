== Physical Plan ==
TakeOrderedAndProject (46)
+- * Project (45)
   +- * BroadcastHashJoin Inner BuildRight (44)
      :- * Project (38)
      :  +- * BroadcastHashJoin Inner BuildRight (37)
      :     :- * Filter (29)
      :     :  +- Window (28)
      :     :     +- * Sort (27)
      :     :        +- Exchange (26)
      :     :           +- * Project (25)
      :     :              +- Window (24)
      :     :                 +- * Sort (23)
      :     :                    +- Exchange (22)
      :     :                       +- * HashAggregate (21)
      :     :                          +- Exchange (20)
      :     :                             +- * HashAggregate (19)
      :     :                                +- * Project (18)
      :     :                                   +- * BroadcastHashJoin Inner BuildRight (17)
      :     :                                      :- * Project (12)
      :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (11)
      :     :                                      :     :- * Project (9)
      :     :                                      :     :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                                      :     :     :- * Filter (3)
      :     :                                      :     :     :  +- * ColumnarToRow (2)
      :     :                                      :     :     :     +- Scan parquet default.item (1)
      :     :                                      :     :     +- BroadcastExchange (7)
      :     :                                      :     :        +- * Filter (6)
      :     :                                      :     :           +- * ColumnarToRow (5)
      :     :                                      :     :              +- Scan parquet default.catalog_sales (4)
      :     :                                      :     +- ReusedExchange (10)
      :     :                                      +- BroadcastExchange (16)
      :     :                                         +- * Filter (15)
      :     :                                            +- * ColumnarToRow (14)
      :     :                                               +- Scan parquet default.call_center (13)
      :     +- BroadcastExchange (36)
      :        +- * Project (35)
      :           +- Window (34)
      :              +- * Sort (33)
      :                 +- Exchange (32)
      :                    +- * HashAggregate (31)
      :                       +- ReusedExchange (30)
      +- BroadcastExchange (43)
         +- * Project (42)
            +- Window (41)
               +- * Sort (40)
                  +- ReusedExchange (39)


(1) Scan parquet default.item
Output [3]: [i_item_sk#1, i_brand#2, i_category#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]

(3) Filter [codegen id : 4]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Condition : ((isnotnull(i_item_sk#1) AND isnotnull(i_category#3)) AND isnotnull(i_brand#2))

(4) Scan parquet default.catalog_sales
Output [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#7), dynamicpruningexpression(cs_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]

(6) Filter [codegen id : 1]
Input [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]
Condition : (isnotnull(cs_item_sk#5) AND isnotnull(cs_call_center_sk#4))

(7) BroadcastExchange
Input [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#9]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [cs_item_sk#5]
Join condition: None

(9) Project [codegen id : 4]
Output [5]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, cs_sold_date_sk#7]
Input [7]: [i_item_sk#1, i_brand#2, i_category#3, cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]

(10) ReusedExchange [Reuses operator id: 50]
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#7]
Right keys [1]: [d_date_sk#10]
Join condition: None

(12) Project [codegen id : 4]
Output [6]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, d_year#11, d_moy#12]
Input [8]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, cs_sold_date_sk#7, d_date_sk#10, d_year#11, d_moy#12]

(13) Scan parquet default.call_center
Output [2]: [cc_call_center_sk#13, cc_name#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)]
ReadSchema: struct<cc_call_center_sk:int,cc_name:string>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cc_call_center_sk#13, cc_name#14]

(15) Filter [codegen id : 3]
Input [2]: [cc_call_center_sk#13, cc_name#14]
Condition : (isnotnull(cc_call_center_sk#13) AND isnotnull(cc_name#14))

(16) BroadcastExchange
Input [2]: [cc_call_center_sk#13, cc_name#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_call_center_sk#4]
Right keys [1]: [cc_call_center_sk#13]
Join condition: None

(18) Project [codegen id : 4]
Output [6]: [i_brand#2, i_category#3, cs_sales_price#6, d_year#11, d_moy#12, cc_name#14]
Input [8]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, d_year#11, d_moy#12, cc_call_center_sk#13, cc_name#14]

(19) HashAggregate [codegen id : 4]
Input [6]: [i_brand#2, i_category#3, cs_sales_price#6, d_year#11, d_moy#12, cc_name#14]
Keys [5]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#6))]
Aggregate Attributes [1]: [sum#16]
Results [6]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum#17]

(20) Exchange
Input [6]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum#17]
Arguments: hashpartitioning(i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, 5), ENSURE_REQUIREMENTS, [id=#18]

(21) HashAggregate [codegen id : 5]
Input [6]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum#17]
Keys [5]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12]
Functions [1]: [sum(UnscaledValue(cs_sales_price#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#6))#19]
Results [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, MakeDecimal(sum(UnscaledValue(cs_sales_price#6))#19,17,2) AS sum_sales#20, MakeDecimal(sum(UnscaledValue(cs_sales_price#6))#19,17,2) AS _w0#21]

(22) Exchange
Input [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21]
Arguments: hashpartitioning(i_category#3, i_brand#2, cc_name#14, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#22]

(23) Sort [codegen id : 6]
Input [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21]
Arguments: [i_category#3 ASC NULLS FIRST, i_brand#2 ASC NULLS FIRST, cc_name#14 ASC NULLS FIRST, d_year#11 ASC NULLS FIRST], false, 0

(24) Window
Input [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21]
Arguments: [avg(_w0#21) windowspecdefinition(i_category#3, i_brand#2, cc_name#14, d_year#11, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#23], [i_category#3, i_brand#2, cc_name#14, d_year#11]

(25) Project [codegen id : 7]
Output [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#23]
Input [8]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21, avg_monthly_sales#23]

(26) Exchange
Input [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#23]
Arguments: hashpartitioning(i_category#3, i_brand#2, cc_name#14, 5), ENSURE_REQUIREMENTS, [id=#24]

(27) Sort [codegen id : 8]
Input [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#23]
Arguments: [i_category#3 ASC NULLS FIRST, i_brand#2 ASC NULLS FIRST, cc_name#14 ASC NULLS FIRST, d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST], false, 0

(28) Window
Input [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#23]
Arguments: [rank(d_year#11, d_moy#12) windowspecdefinition(i_category#3, i_brand#2, cc_name#14, d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#25], [i_category#3, i_brand#2, cc_name#14], [d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST]

(29) Filter [codegen id : 23]
Input [8]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#23, rn#25]
Condition : ((((isnotnull(d_year#11) AND isnotnull(avg_monthly_sales#23)) AND (d_year#11 = 1999)) AND (avg_monthly_sales#23 > 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#20 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#23 as decimal(22,6)))), DecimalType(22,6), true), false)) / promote_precision(cast(avg_monthly_sales#23 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000))

(30) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_category#26, i_brand#27, cc_name#28, d_year#29, d_moy#30, sum#31]

(31) HashAggregate [codegen id : 13]
Input [6]: [i_category#26, i_brand#27, cc_name#28, d_year#29, d_moy#30, sum#31]
Keys [5]: [i_category#26, i_brand#27, cc_name#28, d_year#29, d_moy#30]
Functions [1]: [sum(UnscaledValue(cs_sales_price#32))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#32))#33]
Results [6]: [i_category#26, i_brand#27, cc_name#28, d_year#29, d_moy#30, MakeDecimal(sum(UnscaledValue(cs_sales_price#32))#33,17,2) AS sum_sales#34]

(32) Exchange
Input [6]: [i_category#26, i_brand#27, cc_name#28, d_year#29, d_moy#30, sum_sales#34]
Arguments: hashpartitioning(i_category#26, i_brand#27, cc_name#28, 5), ENSURE_REQUIREMENTS, [id=#35]

(33) Sort [codegen id : 14]
Input [6]: [i_category#26, i_brand#27, cc_name#28, d_year#29, d_moy#30, sum_sales#34]
Arguments: [i_category#26 ASC NULLS FIRST, i_brand#27 ASC NULLS FIRST, cc_name#28 ASC NULLS FIRST, d_year#29 ASC NULLS FIRST, d_moy#30 ASC NULLS FIRST], false, 0

(34) Window
Input [6]: [i_category#26, i_brand#27, cc_name#28, d_year#29, d_moy#30, sum_sales#34]
Arguments: [rank(d_year#29, d_moy#30) windowspecdefinition(i_category#26, i_brand#27, cc_name#28, d_year#29 ASC NULLS FIRST, d_moy#30 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#36], [i_category#26, i_brand#27, cc_name#28], [d_year#29 ASC NULLS FIRST, d_moy#30 ASC NULLS FIRST]

(35) Project [codegen id : 15]
Output [5]: [i_category#26, i_brand#27, cc_name#28, sum_sales#34, rn#36]
Input [7]: [i_category#26, i_brand#27, cc_name#28, d_year#29, d_moy#30, sum_sales#34, rn#36]

(36) BroadcastExchange
Input [5]: [i_category#26, i_brand#27, cc_name#28, sum_sales#34, rn#36]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] + 1)),false), [id=#37]

(37) BroadcastHashJoin [codegen id : 23]
Left keys [4]: [i_category#3, i_brand#2, cc_name#14, rn#25]
Right keys [4]: [i_category#26, i_brand#27, cc_name#28, (rn#36 + 1)]
Join condition: None

(38) Project [codegen id : 23]
Output [9]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#23, rn#25, sum_sales#34]
Input [13]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#23, rn#25, i_category#26, i_brand#27, cc_name#28, sum_sales#34, rn#36]

(39) ReusedExchange [Reuses operator id: 32]
Output [6]: [i_category#38, i_brand#39, cc_name#40, d_year#41, d_moy#42, sum_sales#43]

(40) Sort [codegen id : 21]
Input [6]: [i_category#38, i_brand#39, cc_name#40, d_year#41, d_moy#42, sum_sales#43]
Arguments: [i_category#38 ASC NULLS FIRST, i_brand#39 ASC NULLS FIRST, cc_name#40 ASC NULLS FIRST, d_year#41 ASC NULLS FIRST, d_moy#42 ASC NULLS FIRST], false, 0

(41) Window
Input [6]: [i_category#38, i_brand#39, cc_name#40, d_year#41, d_moy#42, sum_sales#43]
Arguments: [rank(d_year#41, d_moy#42) windowspecdefinition(i_category#38, i_brand#39, cc_name#40, d_year#41 ASC NULLS FIRST, d_moy#42 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#44], [i_category#38, i_brand#39, cc_name#40], [d_year#41 ASC NULLS FIRST, d_moy#42 ASC NULLS FIRST]

(42) Project [codegen id : 22]
Output [5]: [i_category#38, i_brand#39, cc_name#40, sum_sales#43, rn#44]
Input [7]: [i_category#38, i_brand#39, cc_name#40, d_year#41, d_moy#42, sum_sales#43, rn#44]

(43) BroadcastExchange
Input [5]: [i_category#38, i_brand#39, cc_name#40, sum_sales#43, rn#44]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] - 1)),false), [id=#45]

(44) BroadcastHashJoin [codegen id : 23]
Left keys [4]: [i_category#3, i_brand#2, cc_name#14, rn#25]
Right keys [4]: [i_category#38, i_brand#39, cc_name#40, (rn#44 - 1)]
Join condition: None

(45) Project [codegen id : 23]
Output [9]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, avg_monthly_sales#23, sum_sales#20, sum_sales#34 AS psum#46, sum_sales#43 AS nsum#47]
Input [14]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#23, rn#25, sum_sales#34, i_category#38, i_brand#39, cc_name#40, sum_sales#43, rn#44]

(46) TakeOrderedAndProject
Input [9]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, avg_monthly_sales#23, sum_sales#20, psum#46, nsum#47]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#20 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#23 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, cc_name#14 ASC NULLS FIRST], [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, avg_monthly_sales#23, sum_sales#20, psum#46, nsum#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = cs_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (50)
+- * Filter (49)
   +- * ColumnarToRow (48)
      +- Scan parquet default.date_dim (47)


(47) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(48) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(49) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((d_year#11 = 1999) OR ((d_year#11 = 1998) AND (d_moy#12 = 12))) OR ((d_year#11 = 2000) AND (d_moy#12 = 1))) AND isnotnull(d_date_sk#10))

(50) BroadcastExchange
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#48]


