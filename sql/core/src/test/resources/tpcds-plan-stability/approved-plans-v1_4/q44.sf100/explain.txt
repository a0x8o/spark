== Physical Plan ==
TakeOrderedAndProject (36)
+- * Project (35)
   +- * BroadcastHashJoin Inner BuildRight (34)
      :- * Project (32)
      :  +- * BroadcastHashJoin Inner BuildRight (31)
      :     :- * Project (26)
      :     :  +- * BroadcastHashJoin Inner BuildRight (25)
      :     :     :- * Project (14)
      :     :     :  +- * Filter (13)
      :     :     :     +- Window (12)
      :     :     :        +- * Sort (11)
      :     :     :           +- Exchange (10)
      :     :     :              +- * Project (9)
      :     :     :                 +- * Filter (8)
      :     :     :                    +- * HashAggregate (7)
      :     :     :                       +- Exchange (6)
      :     :     :                          +- * HashAggregate (5)
      :     :     :                             +- * Project (4)
      :     :     :                                +- * Filter (3)
      :     :     :                                   +- * ColumnarToRow (2)
      :     :     :                                      +- Scan parquet default.store_sales (1)
      :     :     +- BroadcastExchange (24)
      :     :        +- * Project (23)
      :     :           +- * Filter (22)
      :     :              +- Window (21)
      :     :                 +- * Sort (20)
      :     :                    +- Exchange (19)
      :     :                       +- * Project (18)
      :     :                          +- * Filter (17)
      :     :                             +- * HashAggregate (16)
      :     :                                +- ReusedExchange (15)
      :     +- BroadcastExchange (30)
      :        +- * Filter (29)
      :           +- * ColumnarToRow (28)
      :              +- Scan parquet default.item (27)
      +- ReusedExchange (33)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_store_sk#2) AND (ss_store_sk#2 = 4))

(4) Project [codegen id : 1]
Output [2]: [ss_item_sk#1, ss_net_profit#3]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) HashAggregate [codegen id : 1]
Input [2]: [ss_item_sk#1, ss_net_profit#3]
Keys [1]: [ss_item_sk#1]
Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#5, count#6]
Results [3]: [ss_item_sk#1, sum#7, count#8]

(6) Exchange
Input [3]: [ss_item_sk#1, sum#7, count#8]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(7) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#1, sum#7, count#8]
Keys [1]: [ss_item_sk#1]
Functions [1]: [avg(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#3))#10]
Results [3]: [ss_item_sk#1 AS item_sk#11, cast((avg(UnscaledValue(ss_net_profit#3))#10 / 100.0) as decimal(11,6)) AS rank_col#12, cast((avg(UnscaledValue(ss_net_profit#3))#10 / 100.0) as decimal(11,6)) AS avg(ss_net_profit#3)#13]

(8) Filter [codegen id : 2]
Input [3]: [item_sk#11, rank_col#12, avg(ss_net_profit#3)#13]
Condition : (isnotnull(avg(ss_net_profit#3)#13) AND (cast(avg(ss_net_profit#3)#13 as decimal(13,7)) > CheckOverflow((0.900000 * promote_precision(Subquery scalar-subquery#14, [id=#15])), DecimalType(13,7), true)))

(9) Project [codegen id : 2]
Output [2]: [item_sk#11, rank_col#12]
Input [3]: [item_sk#11, rank_col#12, avg(ss_net_profit#3)#13]

(10) Exchange
Input [2]: [item_sk#11, rank_col#12]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#16]

(11) Sort [codegen id : 3]
Input [2]: [item_sk#11, rank_col#12]
Arguments: [rank_col#12 ASC NULLS FIRST], false, 0

(12) Window
Input [2]: [item_sk#11, rank_col#12]
Arguments: [rank(rank_col#12) windowspecdefinition(rank_col#12 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#17], [rank_col#12 ASC NULLS FIRST]

(13) Filter [codegen id : 10]
Input [3]: [item_sk#11, rank_col#12, rnk#17]
Condition : ((rnk#17 < 11) AND isnotnull(item_sk#11))

(14) Project [codegen id : 10]
Output [2]: [item_sk#11, rnk#17]
Input [3]: [item_sk#11, rank_col#12, rnk#17]

(15) ReusedExchange [Reuses operator id: 6]
Output [3]: [ss_item_sk#18, sum#19, count#20]

(16) HashAggregate [codegen id : 5]
Input [3]: [ss_item_sk#18, sum#19, count#20]
Keys [1]: [ss_item_sk#18]
Functions [1]: [avg(UnscaledValue(ss_net_profit#21))]
Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#21))#22]
Results [3]: [ss_item_sk#18 AS item_sk#23, cast((avg(UnscaledValue(ss_net_profit#21))#22 / 100.0) as decimal(11,6)) AS rank_col#24, cast((avg(UnscaledValue(ss_net_profit#21))#22 / 100.0) as decimal(11,6)) AS avg(ss_net_profit#21)#25]

(17) Filter [codegen id : 5]
Input [3]: [item_sk#23, rank_col#24, avg(ss_net_profit#21)#25]
Condition : (isnotnull(avg(ss_net_profit#21)#25) AND (cast(avg(ss_net_profit#21)#25 as decimal(13,7)) > CheckOverflow((0.900000 * promote_precision(ReusedSubquery Subquery scalar-subquery#14, [id=#15])), DecimalType(13,7), true)))

(18) Project [codegen id : 5]
Output [2]: [item_sk#23, rank_col#24]
Input [3]: [item_sk#23, rank_col#24, avg(ss_net_profit#21)#25]

(19) Exchange
Input [2]: [item_sk#23, rank_col#24]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#26]

(20) Sort [codegen id : 6]
Input [2]: [item_sk#23, rank_col#24]
Arguments: [rank_col#24 DESC NULLS LAST], false, 0

(21) Window
Input [2]: [item_sk#23, rank_col#24]
Arguments: [rank(rank_col#24) windowspecdefinition(rank_col#24 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#27], [rank_col#24 DESC NULLS LAST]

(22) Filter [codegen id : 7]
Input [3]: [item_sk#23, rank_col#24, rnk#27]
Condition : ((rnk#27 < 11) AND isnotnull(item_sk#23))

(23) Project [codegen id : 7]
Output [2]: [item_sk#23, rnk#27]
Input [3]: [item_sk#23, rank_col#24, rnk#27]

(24) BroadcastExchange
Input [2]: [item_sk#23, rnk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#28]

(25) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [rnk#17]
Right keys [1]: [rnk#27]
Join condition: None

(26) Project [codegen id : 10]
Output [3]: [item_sk#11, rnk#17, item_sk#23]
Input [4]: [item_sk#11, rnk#17, item_sk#23, rnk#27]

(27) Scan parquet default.item
Output [2]: [i_item_sk#29, i_product_name#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_product_name:string>

(28) ColumnarToRow [codegen id : 8]
Input [2]: [i_item_sk#29, i_product_name#30]

(29) Filter [codegen id : 8]
Input [2]: [i_item_sk#29, i_product_name#30]
Condition : isnotnull(i_item_sk#29)

(30) BroadcastExchange
Input [2]: [i_item_sk#29, i_product_name#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(31) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [item_sk#11]
Right keys [1]: [i_item_sk#29]
Join condition: None

(32) Project [codegen id : 10]
Output [3]: [rnk#17, item_sk#23, i_product_name#30]
Input [5]: [item_sk#11, rnk#17, item_sk#23, i_item_sk#29, i_product_name#30]

(33) ReusedExchange [Reuses operator id: 30]
Output [2]: [i_item_sk#32, i_product_name#33]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [item_sk#23]
Right keys [1]: [i_item_sk#32]
Join condition: None

(35) Project [codegen id : 10]
Output [3]: [rnk#17, i_product_name#30 AS best_performing#34, i_product_name#33 AS worst_performing#35]
Input [5]: [rnk#17, item_sk#23, i_product_name#30, i_item_sk#32, i_product_name#33]

(36) TakeOrderedAndProject
Input [3]: [rnk#17, best_performing#34, worst_performing#35]
Arguments: 100, [rnk#17 ASC NULLS FIRST], [rnk#17, best_performing#34, worst_performing#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 8 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
* HashAggregate (43)
+- Exchange (42)
   +- * HashAggregate (41)
      +- * Project (40)
         +- * Filter (39)
            +- * ColumnarToRow (38)
               +- Scan parquet default.store_sales (37)


(37) Scan parquet default.store_sales
Output [4]: [ss_addr_sk#36, ss_store_sk#37, ss_net_profit#38, ss_sold_date_sk#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4), IsNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(38) ColumnarToRow [codegen id : 1]
Input [4]: [ss_addr_sk#36, ss_store_sk#37, ss_net_profit#38, ss_sold_date_sk#39]

(39) Filter [codegen id : 1]
Input [4]: [ss_addr_sk#36, ss_store_sk#37, ss_net_profit#38, ss_sold_date_sk#39]
Condition : ((isnotnull(ss_store_sk#37) AND (ss_store_sk#37 = 4)) AND isnull(ss_addr_sk#36))

(40) Project [codegen id : 1]
Output [2]: [ss_store_sk#37, ss_net_profit#38]
Input [4]: [ss_addr_sk#36, ss_store_sk#37, ss_net_profit#38, ss_sold_date_sk#39]

(41) HashAggregate [codegen id : 1]
Input [2]: [ss_store_sk#37, ss_net_profit#38]
Keys [1]: [ss_store_sk#37]
Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#38))]
Aggregate Attributes [2]: [sum#40, count#41]
Results [3]: [ss_store_sk#37, sum#42, count#43]

(42) Exchange
Input [3]: [ss_store_sk#37, sum#42, count#43]
Arguments: hashpartitioning(ss_store_sk#37, 5), ENSURE_REQUIREMENTS, [id=#44]

(43) HashAggregate [codegen id : 2]
Input [3]: [ss_store_sk#37, sum#42, count#43]
Keys [1]: [ss_store_sk#37]
Functions [1]: [avg(UnscaledValue(ss_net_profit#38))]
Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#38))#45]
Results [1]: [cast((avg(UnscaledValue(ss_net_profit#38))#45 / 100.0) as decimal(11,6)) AS rank_col#46]

Subquery:2 Hosting operator id = 17 Hosting Expression = ReusedSubquery Subquery scalar-subquery#14, [id=#15]


