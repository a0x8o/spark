== Physical Plan ==
* HashAggregate (74)
+- Exchange (73)
   +- * HashAggregate (72)
      +- Union (71)
         :- * Project (53)
         :  +- * BroadcastHashJoin Inner BuildRight (52)
         :     :- * Project (46)
         :     :  +- * SortMergeJoin LeftSemi (45)
         :     :     :- * Sort (28)
         :     :     :  +- Exchange (27)
         :     :     :     +- * Project (26)
         :     :     :        +- * BroadcastHashJoin LeftSemi BuildRight (25)
         :     :     :           :- * ColumnarToRow (2)
         :     :     :           :  +- Scan parquet default.catalog_sales (1)
         :     :     :           +- BroadcastExchange (24)
         :     :     :              +- * Project (23)
         :     :     :                 +- * Filter (22)
         :     :     :                    +- * HashAggregate (21)
         :     :     :                       +- Exchange (20)
         :     :     :                          +- * HashAggregate (19)
         :     :     :                             +- * Project (18)
         :     :     :                                +- * BroadcastHashJoin Inner BuildRight (17)
         :     :     :                                   :- * Project (12)
         :     :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (11)
         :     :     :                                   :     :- * Filter (5)
         :     :     :                                   :     :  +- * ColumnarToRow (4)
         :     :     :                                   :     :     +- Scan parquet default.store_sales (3)
         :     :     :                                   :     +- BroadcastExchange (10)
         :     :     :                                   :        +- * Project (9)
         :     :     :                                   :           +- * Filter (8)
         :     :     :                                   :              +- * ColumnarToRow (7)
         :     :     :                                   :                 +- Scan parquet default.date_dim (6)
         :     :     :                                   +- BroadcastExchange (16)
         :     :     :                                      +- * Filter (15)
         :     :     :                                         +- * ColumnarToRow (14)
         :     :     :                                            +- Scan parquet default.item (13)
         :     :     +- * Sort (44)
         :     :        +- * Project (43)
         :     :           +- * Filter (42)
         :     :              +- * HashAggregate (41)
         :     :                 +- Exchange (40)
         :     :                    +- * HashAggregate (39)
         :     :                       +- * Project (38)
         :     :                          +- * BroadcastHashJoin Inner BuildRight (37)
         :     :                             :- * Project (32)
         :     :                             :  +- * Filter (31)
         :     :                             :     +- * ColumnarToRow (30)
         :     :                             :        +- Scan parquet default.store_sales (29)
         :     :                             +- BroadcastExchange (36)
         :     :                                +- * Filter (35)
         :     :                                   +- * ColumnarToRow (34)
         :     :                                      +- Scan parquet default.customer (33)
         :     +- BroadcastExchange (51)
         :        +- * Project (50)
         :           +- * Filter (49)
         :              +- * ColumnarToRow (48)
         :                 +- Scan parquet default.date_dim (47)
         +- * Project (70)
            +- * BroadcastHashJoin Inner BuildRight (69)
               :- * Project (67)
               :  +- * SortMergeJoin LeftSemi (66)
               :     :- * Sort (60)
               :     :  +- Exchange (59)
               :     :     +- * Project (58)
               :     :        +- * BroadcastHashJoin LeftSemi BuildRight (57)
               :     :           :- * ColumnarToRow (55)
               :     :           :  +- Scan parquet default.web_sales (54)
               :     :           +- ReusedExchange (56)
               :     +- * Sort (65)
               :        +- * Project (64)
               :           +- * Filter (63)
               :              +- * HashAggregate (62)
               :                 +- ReusedExchange (61)
               +- ReusedExchange (68)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Scan parquet default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(4) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(5) Filter [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(6) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(7) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]

(8) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(9) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]

(10) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(12) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(13) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(14) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#14, i_item_desc#15]

(15) Filter [codegen id : 2]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(16) BroadcastExchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16]

(17) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#14]
Join condition: None

(18) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#17]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#14, i_item_desc#15]

(19) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#14, _groupingexpression#17]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#17, i_item_sk#14, d_date#11, count#19]

(20) Exchange
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#11, count#19]
Arguments: hashpartitioning(_groupingexpression#17, i_item_sk#14, d_date#11, 5), ENSURE_REQUIREMENTS, [id=#20]

(21) HashAggregate [codegen id : 4]
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#11, count#19]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#21]
Results [2]: [i_item_sk#14 AS item_sk#22, count(1)#21 AS cnt#23]

(22) Filter [codegen id : 4]
Input [2]: [item_sk#22, cnt#23]
Condition : (cnt#23 > 4)

(23) Project [codegen id : 4]
Output [1]: [item_sk#22]
Input [2]: [item_sk#22, cnt#23]

(24) BroadcastExchange
Input [1]: [item_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(25) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#22]
Join condition: None

(26) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(27) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#25]

(28) Sort [codegen id : 6]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(29) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(30) ColumnarToRow [codegen id : 8]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#29]

(31) Filter [codegen id : 8]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#29]
Condition : isnotnull(ss_customer_sk#26)

(32) Project [codegen id : 8]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#29]

(33) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(34) ColumnarToRow [codegen id : 7]
Input [1]: [c_customer_sk#30]

(35) Filter [codegen id : 7]
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(36) BroadcastExchange
Input [1]: [c_customer_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(37) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(38) Project [codegen id : 8]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(39) HashAggregate [codegen id : 8]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#32, isEmpty#33]
Results [3]: [c_customer_sk#30, sum#34, isEmpty#35]

(40) Exchange
Input [3]: [c_customer_sk#30, sum#34, isEmpty#35]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#36]

(41) HashAggregate [codegen id : 9]
Input [3]: [c_customer_sk#30, sum#34, isEmpty#35]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 AS ssales#38]

(42) Filter [codegen id : 9]
Input [2]: [c_customer_sk#30, ssales#38]
Condition : (isnotnull(ssales#38) AND (cast(ssales#38 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#39, [id=#40] as decimal(32,6)))), DecimalType(38,8), true)))

(43) Project [codegen id : 9]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, ssales#38]

(44) Sort [codegen id : 9]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 11]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(46) Project [codegen id : 11]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(47) Scan parquet default.date_dim
Output [3]: [d_date_sk#41, d_year#42, d_moy#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(48) ColumnarToRow [codegen id : 10]
Input [3]: [d_date_sk#41, d_year#42, d_moy#43]

(49) Filter [codegen id : 10]
Input [3]: [d_date_sk#41, d_year#42, d_moy#43]
Condition : ((((isnotnull(d_year#42) AND isnotnull(d_moy#43)) AND (d_year#42 = 2000)) AND (d_moy#43 = 2)) AND isnotnull(d_date_sk#41))

(50) Project [codegen id : 10]
Output [1]: [d_date_sk#41]
Input [3]: [d_date_sk#41, d_year#42, d_moy#43]

(51) BroadcastExchange
Input [1]: [d_date_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#44]

(52) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#41]
Join condition: None

(53) Project [codegen id : 11]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true) AS sales#45]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#41]

(54) Scan parquet default.web_sales
Output [5]: [ws_item_sk#46, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49, ws_sold_date_sk#50]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#50), dynamicpruningexpression(ws_sold_date_sk#50 IN dynamicpruning#6)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(55) ColumnarToRow [codegen id : 16]
Input [5]: [ws_item_sk#46, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49, ws_sold_date_sk#50]

(56) ReusedExchange [Reuses operator id: unknown]
Output [1]: [item_sk#22]

(57) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#46]
Right keys [1]: [item_sk#22]
Join condition: None

(58) Project [codegen id : 16]
Output [4]: [ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49, ws_sold_date_sk#50]
Input [5]: [ws_item_sk#46, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49, ws_sold_date_sk#50]

(59) Exchange
Input [4]: [ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49, ws_sold_date_sk#50]
Arguments: hashpartitioning(ws_bill_customer_sk#47, 5), ENSURE_REQUIREMENTS, [id=#51]

(60) Sort [codegen id : 17]
Input [4]: [ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49, ws_sold_date_sk#50]
Arguments: [ws_bill_customer_sk#47 ASC NULLS FIRST], false, 0

(61) ReusedExchange [Reuses operator id: 40]
Output [3]: [c_customer_sk#52, sum#53, isEmpty#54]

(62) HashAggregate [codegen id : 20]
Input [3]: [c_customer_sk#52, sum#53, isEmpty#54]
Keys [1]: [c_customer_sk#52]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#55 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#56 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#55 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#56 as decimal(12,2)))), DecimalType(18,2), true))#57]
Results [2]: [c_customer_sk#52, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#55 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#56 as decimal(12,2)))), DecimalType(18,2), true))#57 AS ssales#38]

(63) Filter [codegen id : 20]
Input [2]: [c_customer_sk#52, ssales#38]
Condition : (isnotnull(ssales#38) AND (cast(ssales#38 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#39, [id=#40] as decimal(32,6)))), DecimalType(38,8), true)))

(64) Project [codegen id : 20]
Output [1]: [c_customer_sk#52]
Input [2]: [c_customer_sk#52, ssales#38]

(65) Sort [codegen id : 20]
Input [1]: [c_customer_sk#52]
Arguments: [c_customer_sk#52 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 22]
Left keys [1]: [ws_bill_customer_sk#47]
Right keys [1]: [c_customer_sk#52]
Join condition: None

(67) Project [codegen id : 22]
Output [3]: [ws_quantity#48, ws_list_price#49, ws_sold_date_sk#50]
Input [4]: [ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49, ws_sold_date_sk#50]

(68) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#58]

(69) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#50]
Right keys [1]: [d_date_sk#58]
Join condition: None

(70) Project [codegen id : 22]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#49 as decimal(12,2)))), DecimalType(18,2), true) AS sales#59]
Input [4]: [ws_quantity#48, ws_list_price#49, ws_sold_date_sk#50, d_date_sk#58]

(71) Union

(72) HashAggregate [codegen id : 23]
Input [1]: [sales#45]
Keys: []
Functions [1]: [partial_sum(sales#45)]
Aggregate Attributes [2]: [sum#60, isEmpty#61]
Results [2]: [sum#62, isEmpty#63]

(73) Exchange
Input [2]: [sum#62, isEmpty#63]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#64]

(74) HashAggregate [codegen id : 24]
Input [2]: [sum#62, isEmpty#63]
Keys: []
Functions [1]: [sum(sales#45)]
Aggregate Attributes [1]: [sum(sales#45)#65]
Results [1]: [sum(sales#45)#65 AS sum(sales)#66]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
ReusedExchange (75)


(75) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#41]

Subquery:2 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
ReusedExchange (76)


(76) ReusedExchange [Reuses operator id: 10]
Output [2]: [d_date_sk#10, d_date#11]

Subquery:3 Hosting operator id = 42 Hosting Expression = Subquery scalar-subquery#39, [id=#40]
* HashAggregate (98)
+- Exchange (97)
   +- * HashAggregate (96)
      +- * HashAggregate (95)
         +- Exchange (94)
            +- * HashAggregate (93)
               +- * Project (92)
                  +- * BroadcastHashJoin Inner BuildRight (91)
                     :- * Project (85)
                     :  +- * BroadcastHashJoin Inner BuildRight (84)
                     :     :- * Filter (79)
                     :     :  +- * ColumnarToRow (78)
                     :     :     +- Scan parquet default.store_sales (77)
                     :     +- BroadcastExchange (83)
                     :        +- * Filter (82)
                     :           +- * ColumnarToRow (81)
                     :              +- Scan parquet default.customer (80)
                     +- BroadcastExchange (90)
                        +- * Project (89)
                           +- * Filter (88)
                              +- * ColumnarToRow (87)
                                 +- Scan parquet default.date_dim (86)


(77) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69, ss_sold_date_sk#70]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#70), dynamicpruningexpression(ss_sold_date_sk#70 IN dynamicpruning#71)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(78) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69, ss_sold_date_sk#70]

(79) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69, ss_sold_date_sk#70]
Condition : isnotnull(ss_customer_sk#67)

(80) Scan parquet default.customer
Output [1]: [c_customer_sk#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(81) ColumnarToRow [codegen id : 1]
Input [1]: [c_customer_sk#72]

(82) Filter [codegen id : 1]
Input [1]: [c_customer_sk#72]
Condition : isnotnull(c_customer_sk#72)

(83) BroadcastExchange
Input [1]: [c_customer_sk#72]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#73]

(84) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#67]
Right keys [1]: [c_customer_sk#72]
Join condition: None

(85) Project [codegen id : 3]
Output [4]: [ss_quantity#68, ss_sales_price#69, ss_sold_date_sk#70, c_customer_sk#72]
Input [5]: [ss_customer_sk#67, ss_quantity#68, ss_sales_price#69, ss_sold_date_sk#70, c_customer_sk#72]

(86) Scan parquet default.date_dim
Output [2]: [d_date_sk#74, d_year#75]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(87) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#74, d_year#75]

(88) Filter [codegen id : 2]
Input [2]: [d_date_sk#74, d_year#75]
Condition : (d_year#75 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#74))

(89) Project [codegen id : 2]
Output [1]: [d_date_sk#74]
Input [2]: [d_date_sk#74, d_year#75]

(90) BroadcastExchange
Input [1]: [d_date_sk#74]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76]

(91) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#70]
Right keys [1]: [d_date_sk#74]
Join condition: None

(92) Project [codegen id : 3]
Output [3]: [ss_quantity#68, ss_sales_price#69, c_customer_sk#72]
Input [5]: [ss_quantity#68, ss_sales_price#69, ss_sold_date_sk#70, c_customer_sk#72, d_date_sk#74]

(93) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#68, ss_sales_price#69, c_customer_sk#72]
Keys [1]: [c_customer_sk#72]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#69 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#77, isEmpty#78]
Results [3]: [c_customer_sk#72, sum#79, isEmpty#80]

(94) Exchange
Input [3]: [c_customer_sk#72, sum#79, isEmpty#80]
Arguments: hashpartitioning(c_customer_sk#72, 5), ENSURE_REQUIREMENTS, [id=#81]

(95) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#72, sum#79, isEmpty#80]
Keys [1]: [c_customer_sk#72]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#69 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82 AS csales#83]

(96) HashAggregate [codegen id : 4]
Input [1]: [csales#83]
Keys: []
Functions [1]: [partial_max(csales#83)]
Aggregate Attributes [1]: [max#84]
Results [1]: [max#85]

(97) Exchange
Input [1]: [max#85]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#86]

(98) HashAggregate [codegen id : 5]
Input [1]: [max#85]
Keys: []
Functions [1]: [max(csales#83)]
Aggregate Attributes [1]: [max(csales#83)#87]
Results [1]: [max(csales#83)#87 AS tpcds_cmax#88]

Subquery:4 Hosting operator id = 77 Hosting Expression = ss_sold_date_sk#70 IN dynamicpruning#71
ReusedExchange (99)


(99) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#74]

Subquery:5 Hosting operator id = 54 Hosting Expression = ws_sold_date_sk#50 IN dynamicpruning#6

Subquery:6 Hosting operator id = 63 Hosting Expression = ReusedSubquery Subquery scalar-subquery#39, [id=#40]


