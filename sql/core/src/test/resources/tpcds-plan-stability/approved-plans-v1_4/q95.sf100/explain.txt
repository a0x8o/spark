== Physical Plan ==
TakeOrderedAndProject (63)
+- * HashAggregate (62)
   +- Exchange (61)
      +- * HashAggregate (60)
         +- * HashAggregate (59)
            +- Exchange (58)
               +- * HashAggregate (57)
                  +- * Project (56)
                     +- * BroadcastHashJoin Inner BuildRight (55)
                        :- * Project (49)
                        :  +- * BroadcastHashJoin Inner BuildRight (48)
                        :     :- * Project (42)
                        :     :  +- * BroadcastHashJoin Inner BuildRight (41)
                        :     :     :- SortMergeJoin LeftSemi (35)
                        :     :     :  :- * Sort (19)
                        :     :     :  :  +- Exchange (18)
                        :     :     :  :     +- SortMergeJoin LeftSemi (17)
                        :     :     :  :        :- * Sort (5)
                        :     :     :  :        :  +- Exchange (4)
                        :     :     :  :        :     +- * Filter (3)
                        :     :     :  :        :        +- * ColumnarToRow (2)
                        :     :     :  :        :           +- Scan parquet default.web_sales (1)
                        :     :     :  :        +- * Sort (16)
                        :     :     :  :           +- Exchange (15)
                        :     :     :  :              +- * Project (14)
                        :     :     :  :                 +- * SortMergeJoin Inner (13)
                        :     :     :  :                    :- * Sort (10)
                        :     :     :  :                    :  +- Exchange (9)
                        :     :     :  :                    :     +- * Filter (8)
                        :     :     :  :                    :        +- * ColumnarToRow (7)
                        :     :     :  :                    :           +- Scan parquet default.web_sales (6)
                        :     :     :  :                    +- * Sort (12)
                        :     :     :  :                       +- ReusedExchange (11)
                        :     :     :  +- * Project (34)
                        :     :     :     +- * SortMergeJoin Inner (33)
                        :     :     :        :- * Sort (27)
                        :     :     :        :  +- Exchange (26)
                        :     :     :        :     +- * Project (25)
                        :     :     :        :        +- * SortMergeJoin Inner (24)
                        :     :     :        :           :- * Sort (21)
                        :     :     :        :           :  +- ReusedExchange (20)
                        :     :     :        :           +- * Sort (23)
                        :     :     :        :              +- ReusedExchange (22)
                        :     :     :        +- * Sort (32)
                        :     :     :           +- Exchange (31)
                        :     :     :              +- * Filter (30)
                        :     :     :                 +- * ColumnarToRow (29)
                        :     :     :                    +- Scan parquet default.web_returns (28)
                        :     :     +- BroadcastExchange (40)
                        :     :        +- * Project (39)
                        :     :           +- * Filter (38)
                        :     :              +- * ColumnarToRow (37)
                        :     :                 +- Scan parquet default.customer_address (36)
                        :     +- BroadcastExchange (47)
                        :        +- * Project (46)
                        :           +- * Filter (45)
                        :              +- * ColumnarToRow (44)
                        :                 +- Scan parquet default.web_site (43)
                        +- BroadcastExchange (54)
                           +- * Project (53)
                              +- * Filter (52)
                                 +- * ColumnarToRow (51)
                                    +- Scan parquet default.date_dim (50)


(1) Scan parquet default.web_sales
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]

(3) Filter [codegen id : 1]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Condition : ((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3))

(4) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(ws_order_number#4, 5), true, [id=#7]

(5) Sort [codegen id : 2]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(6) Scan parquet default.web_sales
Output [2]: [ws_warehouse_sk#8, ws_order_number#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]

(8) Filter [codegen id : 3]
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]
Condition : (isnotnull(ws_order_number#4) AND isnotnull(ws_warehouse_sk#8))

(9) Exchange
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]
Arguments: hashpartitioning(ws_order_number#4, 5), true, [id=#9]

(10) Sort [codegen id : 4]
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(11) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#10, ws_order_number#11]

(12) Sort [codegen id : 6]
Input [2]: [ws_warehouse_sk#10, ws_order_number#11]
Arguments: [ws_order_number#11 ASC NULLS FIRST], false, 0

(13) SortMergeJoin [codegen id : 7]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#11]
Join condition: NOT (ws_warehouse_sk#8 = ws_warehouse_sk#10)

(14) Project [codegen id : 7]
Output [1]: [ws_order_number#4 AS ws_order_number#4#12]
Input [4]: [ws_warehouse_sk#8, ws_order_number#4, ws_warehouse_sk#10, ws_order_number#11]

(15) Exchange
Input [1]: [ws_order_number#4#12]
Arguments: hashpartitioning(ws_order_number#4#12, 5), true, [id=#13]

(16) Sort [codegen id : 8]
Input [1]: [ws_order_number#4#12]
Arguments: [ws_order_number#4#12 ASC NULLS FIRST], false, 0

(17) SortMergeJoin
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#4#12]
Join condition: None

(18) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(cast(ws_order_number#4 as bigint), 5), true, [id=#14]

(19) Sort [codegen id : 9]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [cast(ws_order_number#4 as bigint) ASC NULLS FIRST], false, 0

(20) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#8, ws_order_number#4]

(21) Sort [codegen id : 11]
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(22) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#15, ws_order_number#16]

(23) Sort [codegen id : 13]
Input [2]: [ws_warehouse_sk#15, ws_order_number#16]
Arguments: [ws_order_number#16 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 14]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#16]
Join condition: NOT (ws_warehouse_sk#8 = ws_warehouse_sk#15)

(25) Project [codegen id : 14]
Output [1]: [ws_order_number#4]
Input [4]: [ws_warehouse_sk#8, ws_order_number#4, ws_warehouse_sk#15, ws_order_number#16]

(26) Exchange
Input [1]: [ws_order_number#4]
Arguments: hashpartitioning(cast(ws_order_number#4 as bigint), 5), true, [id=#17]

(27) Sort [codegen id : 15]
Input [1]: [ws_order_number#4]
Arguments: [cast(ws_order_number#4 as bigint) ASC NULLS FIRST], false, 0

(28) Scan parquet default.web_returns
Output [1]: [wr_order_number#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:bigint>

(29) ColumnarToRow [codegen id : 16]
Input [1]: [wr_order_number#18]

(30) Filter [codegen id : 16]
Input [1]: [wr_order_number#18]
Condition : isnotnull(wr_order_number#18)

(31) Exchange
Input [1]: [wr_order_number#18]
Arguments: hashpartitioning(wr_order_number#18, 5), true, [id=#19]

(32) Sort [codegen id : 17]
Input [1]: [wr_order_number#18]
Arguments: [wr_order_number#18 ASC NULLS FIRST], false, 0

(33) SortMergeJoin [codegen id : 18]
Left keys [1]: [cast(ws_order_number#4 as bigint)]
Right keys [1]: [wr_order_number#18]
Join condition: None

(34) Project [codegen id : 18]
Output [1]: [wr_order_number#18]
Input [2]: [ws_order_number#4, wr_order_number#18]

(35) SortMergeJoin
Left keys [1]: [cast(ws_order_number#4 as bigint)]
Right keys [1]: [wr_order_number#18]
Join condition: None

(36) Scan parquet default.customer_address
Output [2]: [ca_address_sk#20, ca_state#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(37) ColumnarToRow [codegen id : 19]
Input [2]: [ca_address_sk#20, ca_state#21]

(38) Filter [codegen id : 19]
Input [2]: [ca_address_sk#20, ca_state#21]
Condition : ((isnotnull(ca_state#21) AND (ca_state#21 = IL)) AND isnotnull(ca_address_sk#20))

(39) Project [codegen id : 19]
Output [1]: [ca_address_sk#20]
Input [2]: [ca_address_sk#20, ca_state#21]

(40) BroadcastExchange
Input [1]: [ca_address_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(41) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#20]
Join condition: None

(42) Project [codegen id : 22]
Output [5]: [ws_ship_date_sk#1, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ca_address_sk#20]

(43) Scan parquet default.web_site
Output [2]: [web_site_sk#23, web_company_name#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(44) ColumnarToRow [codegen id : 20]
Input [2]: [web_site_sk#23, web_company_name#24]

(45) Filter [codegen id : 20]
Input [2]: [web_site_sk#23, web_company_name#24]
Condition : ((isnotnull(web_company_name#24) AND (web_company_name#24 = pri)) AND isnotnull(web_site_sk#23))

(46) Project [codegen id : 20]
Output [1]: [web_site_sk#23]
Input [2]: [web_site_sk#23, web_company_name#24]

(47) BroadcastExchange
Input [1]: [web_site_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(48) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#23]
Join condition: None

(49) Project [codegen id : 22]
Output [4]: [ws_ship_date_sk#1, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_date_sk#1, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, web_site_sk#23]

(50) Scan parquet default.date_dim
Output [2]: [d_date_sk#26, d_date#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(51) ColumnarToRow [codegen id : 21]
Input [2]: [d_date_sk#26, d_date#27]

(52) Filter [codegen id : 21]
Input [2]: [d_date_sk#26, d_date#27]
Condition : (((isnotnull(d_date#27) AND (d_date#27 >= 10623)) AND (d_date#27 <= 10683)) AND isnotnull(d_date_sk#26))

(53) Project [codegen id : 21]
Output [1]: [d_date_sk#26]
Input [2]: [d_date_sk#26, d_date#27]

(54) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(55) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#26]
Join condition: None

(56) Project [codegen id : 22]
Output [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [5]: [ws_ship_date_sk#1, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, d_date_sk#26]

(57) HashAggregate [codegen id : 22]
Input [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Keys [1]: [ws_order_number#4]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#5)), partial_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#29, sum(UnscaledValue(ws_net_profit#6))#30]
Results [3]: [ws_order_number#4, sum#31, sum#32]

(58) Exchange
Input [3]: [ws_order_number#4, sum#31, sum#32]
Arguments: hashpartitioning(ws_order_number#4, 5), true, [id=#33]

(59) HashAggregate [codegen id : 23]
Input [3]: [ws_order_number#4, sum#31, sum#32]
Keys [1]: [ws_order_number#4]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#29, sum(UnscaledValue(ws_net_profit#6))#30]
Results [3]: [ws_order_number#4, sum#31, sum#32]

(60) HashAggregate [codegen id : 23]
Input [3]: [ws_order_number#4, sum#31, sum#32]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6)), partial_count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#29, sum(UnscaledValue(ws_net_profit#6))#30, count(ws_order_number#4)#34]
Results [3]: [sum#31, sum#32, count#35]

(61) Exchange
Input [3]: [sum#31, sum#32, count#35]
Arguments: SinglePartition, true, [id=#36]

(62) HashAggregate [codegen id : 24]
Input [3]: [sum#31, sum#32, count#35]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#5)), sum(UnscaledValue(ws_net_profit#6)), count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#29, sum(UnscaledValue(ws_net_profit#6))#30, count(ws_order_number#4)#34]
Results [3]: [count(ws_order_number#4)#34 AS order count #37, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#5))#29,17,2) AS total shipping cost #38, MakeDecimal(sum(UnscaledValue(ws_net_profit#6))#30,17,2) AS total net profit #39]

(63) TakeOrderedAndProject
Input [3]: [order count #37, total shipping cost #38, total net profit #39]
Arguments: 100, [order count #37 ASC NULLS FIRST], [order count #37, total shipping cost #38, total net profit #39]

