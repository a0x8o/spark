== Physical Plan ==
TakeOrderedAndProject (137)
+- Union (136)
   :- * HashAggregate (81)
   :  +- Exchange (80)
   :     +- * HashAggregate (79)
   :        +- * Project (78)
   :           +- * SortMergeJoin Inner (77)
   :              :- * Project (59)
   :              :  +- * BroadcastHashJoin Inner BuildRight (58)
   :              :     :- * SortMergeJoin LeftSemi (52)
   :              :     :  :- * Sort (33)
   :              :     :  :  +- Exchange (32)
   :              :     :  :     +- * Project (31)
   :              :     :  :        +- * SortMergeJoin LeftSemi (30)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- * Sort (29)
   :              :     :  :              +- * Project (28)
   :              :     :  :                 +- * Filter (27)
   :              :     :  :                    +- * HashAggregate (26)
   :              :     :  :                       +- * HashAggregate (25)
   :              :     :  :                          +- * Project (24)
   :              :     :  :                             +- * SortMergeJoin Inner (23)
   :              :     :  :                                :- * Sort (17)
   :              :     :  :                                :  +- Exchange (16)
   :              :     :  :                                :     +- * Project (15)
   :              :     :  :                                :        +- * BroadcastHashJoin Inner BuildRight (14)
   :              :     :  :                                :           :- * Filter (8)
   :              :     :  :                                :           :  +- * ColumnarToRow (7)
   :              :     :  :                                :           :     +- Scan parquet default.store_sales (6)
   :              :     :  :                                :           +- BroadcastExchange (13)
   :              :     :  :                                :              +- * Project (12)
   :              :     :  :                                :                 +- * Filter (11)
   :              :     :  :                                :                    +- * ColumnarToRow (10)
   :              :     :  :                                :                       +- Scan parquet default.date_dim (9)
   :              :     :  :                                +- * Sort (22)
   :              :     :  :                                   +- Exchange (21)
   :              :     :  :                                      +- * Filter (20)
   :              :     :  :                                         +- * ColumnarToRow (19)
   :              :     :  :                                            +- Scan parquet default.item (18)
   :              :     :  +- * Sort (51)
   :              :     :     +- * Project (50)
   :              :     :        +- * Filter (49)
   :              :     :           +- * HashAggregate (48)
   :              :     :              +- * HashAggregate (47)
   :              :     :                 +- * Project (46)
   :              :     :                    +- * SortMergeJoin Inner (45)
   :              :     :                       :- * Sort (39)
   :              :     :                       :  +- Exchange (38)
   :              :     :                       :     +- * Project (37)
   :              :     :                       :        +- * Filter (36)
   :              :     :                       :           +- * ColumnarToRow (35)
   :              :     :                       :              +- Scan parquet default.store_sales (34)
   :              :     :                       +- * Sort (44)
   :              :     :                          +- Exchange (43)
   :              :     :                             +- * Filter (42)
   :              :     :                                +- * ColumnarToRow (41)
   :              :     :                                   +- Scan parquet default.customer (40)
   :              :     +- BroadcastExchange (57)
   :              :        +- * Project (56)
   :              :           +- * Filter (55)
   :              :              +- * ColumnarToRow (54)
   :              :                 +- Scan parquet default.date_dim (53)
   :              +- * SortMergeJoin LeftSemi (76)
   :                 :- * Sort (64)
   :                 :  +- Exchange (63)
   :                 :     +- * Filter (62)
   :                 :        +- * ColumnarToRow (61)
   :                 :           +- Scan parquet default.customer (60)
   :                 +- * Sort (75)
   :                    +- * Project (74)
   :                       +- * Filter (73)
   :                          +- * HashAggregate (72)
   :                             +- * HashAggregate (71)
   :                                +- * Project (70)
   :                                   +- * SortMergeJoin Inner (69)
   :                                      :- * Sort (66)
   :                                      :  +- ReusedExchange (65)
   :                                      +- * Sort (68)
   :                                         +- ReusedExchange (67)
   +- * HashAggregate (135)
      +- Exchange (134)
         +- * HashAggregate (133)
            +- * Project (132)
               +- * SortMergeJoin Inner (131)
                  :- * Project (116)
                  :  +- * BroadcastHashJoin Inner BuildRight (115)
                  :     :- * SortMergeJoin LeftSemi (113)
                  :     :  :- * Sort (101)
                  :     :  :  +- Exchange (100)
                  :     :  :     +- * Project (99)
                  :     :  :        +- * SortMergeJoin LeftSemi (98)
                  :     :  :           :- * Sort (86)
                  :     :  :           :  +- Exchange (85)
                  :     :  :           :     +- * Filter (84)
                  :     :  :           :        +- * ColumnarToRow (83)
                  :     :  :           :           +- Scan parquet default.web_sales (82)
                  :     :  :           +- * Sort (97)
                  :     :  :              +- * Project (96)
                  :     :  :                 +- * Filter (95)
                  :     :  :                    +- * HashAggregate (94)
                  :     :  :                       +- * HashAggregate (93)
                  :     :  :                          +- * Project (92)
                  :     :  :                             +- * SortMergeJoin Inner (91)
                  :     :  :                                :- * Sort (88)
                  :     :  :                                :  +- ReusedExchange (87)
                  :     :  :                                +- * Sort (90)
                  :     :  :                                   +- ReusedExchange (89)
                  :     :  +- * Sort (112)
                  :     :     +- * Project (111)
                  :     :        +- * Filter (110)
                  :     :           +- * HashAggregate (109)
                  :     :              +- * HashAggregate (108)
                  :     :                 +- * Project (107)
                  :     :                    +- * SortMergeJoin Inner (106)
                  :     :                       :- * Sort (103)
                  :     :                       :  +- ReusedExchange (102)
                  :     :                       +- * Sort (105)
                  :     :                          +- ReusedExchange (104)
                  :     +- ReusedExchange (114)
                  +- * SortMergeJoin LeftSemi (130)
                     :- * Sort (118)
                     :  +- ReusedExchange (117)
                     +- * Sort (129)
                        +- * Project (128)
                           +- * Filter (127)
                              +- * HashAggregate (126)
                                 +- * HashAggregate (125)
                                    +- * Project (124)
                                       +- * SortMergeJoin Inner (123)
                                          :- * Sort (120)
                                          :  +- ReusedExchange (119)
                                          +- * Sort (122)
                                             +- ReusedExchange (121)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(8) Filter [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#11, d_date#12, d_year#13]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#11, d_date#12, d_year#13]
Condition : (d_year#13 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(12) Project [codegen id : 3]
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#13]

(13) BroadcastExchange
Input [2]: [d_date_sk#11, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(15) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(16) Exchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#15]

(17) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(18) Scan parquet default.item
Output [2]: [i_item_sk#16, i_item_desc#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(19) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#16, i_item_desc#17]

(20) Filter [codegen id : 6]
Input [2]: [i_item_sk#16, i_item_desc#17]
Condition : isnotnull(i_item_sk#16)

(21) Exchange
Input [2]: [i_item_sk#16, i_item_desc#17]
Arguments: hashpartitioning(i_item_sk#16, 5), ENSURE_REQUIREMENTS, [id=#18]

(22) Sort [codegen id : 7]
Input [2]: [i_item_sk#16, i_item_desc#17]
Arguments: [i_item_sk#16 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#16]
Join condition: None

(24) Project [codegen id : 8]
Output [3]: [d_date#12, i_item_sk#16, substr(i_item_desc#17, 1, 30) AS _groupingexpression#19]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#16, i_item_desc#17]

(25) HashAggregate [codegen id : 8]
Input [3]: [d_date#12, i_item_sk#16, _groupingexpression#19]
Keys [3]: [_groupingexpression#19, i_item_sk#16, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#20]
Results [4]: [_groupingexpression#19, i_item_sk#16, d_date#12, count#21]

(26) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#19, i_item_sk#16, d_date#12, count#21]
Keys [3]: [_groupingexpression#19, i_item_sk#16, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#22]
Results [2]: [i_item_sk#16 AS item_sk#23, count(1)#22 AS cnt#24]

(27) Filter [codegen id : 8]
Input [2]: [item_sk#23, cnt#24]
Condition : (cnt#24 > 4)

(28) Project [codegen id : 8]
Output [1]: [item_sk#23]
Input [2]: [item_sk#23, cnt#24]

(29) Sort [codegen id : 8]
Input [1]: [item_sk#23]
Arguments: [item_sk#23 ASC NULLS FIRST], false, 0

(30) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#23]
Join condition: None

(31) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(32) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#25]

(33) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(34) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(35) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#29]

(36) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#29]
Condition : isnotnull(ss_customer_sk#26)

(37) Project [codegen id : 11]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#29]

(38) Exchange
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), ENSURE_REQUIREMENTS, [id=#30]

(39) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(40) Scan parquet default.customer
Output [1]: [c_customer_sk#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(41) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#31]

(42) Filter [codegen id : 13]
Input [1]: [c_customer_sk#31]
Condition : isnotnull(c_customer_sk#31)

(43) Exchange
Input [1]: [c_customer_sk#31]
Arguments: hashpartitioning(c_customer_sk#31, 5), ENSURE_REQUIREMENTS, [id=#32]

(44) Sort [codegen id : 14]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(46) Project [codegen id : 15]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#31]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#31]

(47) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#31]
Keys [1]: [c_customer_sk#31]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#33, isEmpty#34]
Results [3]: [c_customer_sk#31, sum#35, isEmpty#36]

(48) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#31, sum#35, isEmpty#36]
Keys [1]: [c_customer_sk#31]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Results [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 AS ssales#38]

(49) Filter [codegen id : 15]
Input [2]: [c_customer_sk#31, ssales#38]
Condition : (isnotnull(ssales#38) AND (cast(ssales#38 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#39, [id=#40] as decimal(32,6)))), DecimalType(38,8), true)))

(50) Project [codegen id : 15]
Output [1]: [c_customer_sk#31]
Input [2]: [c_customer_sk#31, ssales#38]

(51) Sort [codegen id : 15]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(53) Scan parquet default.date_dim
Output [3]: [d_date_sk#41, d_year#42, d_moy#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(54) ColumnarToRow [codegen id : 16]
Input [3]: [d_date_sk#41, d_year#42, d_moy#43]

(55) Filter [codegen id : 16]
Input [3]: [d_date_sk#41, d_year#42, d_moy#43]
Condition : ((((isnotnull(d_year#42) AND isnotnull(d_moy#43)) AND (d_year#42 = 2000)) AND (d_moy#43 = 2)) AND isnotnull(d_date_sk#41))

(56) Project [codegen id : 16]
Output [1]: [d_date_sk#41]
Input [3]: [d_date_sk#41, d_year#42, d_moy#43]

(57) BroadcastExchange
Input [1]: [d_date_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#44]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#41]
Join condition: None

(59) Project [codegen id : 17]
Output [3]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4]
Input [5]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#41]

(60) Scan parquet default.customer
Output [3]: [c_customer_sk#45, c_first_name#46, c_last_name#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(61) ColumnarToRow [codegen id : 18]
Input [3]: [c_customer_sk#45, c_first_name#46, c_last_name#47]

(62) Filter [codegen id : 18]
Input [3]: [c_customer_sk#45, c_first_name#46, c_last_name#47]
Condition : isnotnull(c_customer_sk#45)

(63) Exchange
Input [3]: [c_customer_sk#45, c_first_name#46, c_last_name#47]
Arguments: hashpartitioning(c_customer_sk#45, 5), ENSURE_REQUIREMENTS, [id=#48]

(64) Sort [codegen id : 19]
Input [3]: [c_customer_sk#45, c_first_name#46, c_last_name#47]
Arguments: [c_customer_sk#45 ASC NULLS FIRST], false, 0

(65) ReusedExchange [Reuses operator id: 38]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(66) Sort [codegen id : 21]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(67) ReusedExchange [Reuses operator id: 43]
Output [1]: [c_customer_sk#31]

(68) Sort [codegen id : 23]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(69) SortMergeJoin [codegen id : 24]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(70) Project [codegen id : 24]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#31]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#31]

(71) HashAggregate [codegen id : 24]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#31]
Keys [1]: [c_customer_sk#31]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#33, isEmpty#34]
Results [3]: [c_customer_sk#31, sum#35, isEmpty#36]

(72) HashAggregate [codegen id : 24]
Input [3]: [c_customer_sk#31, sum#35, isEmpty#36]
Keys [1]: [c_customer_sk#31]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Results [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 AS ssales#38]

(73) Filter [codegen id : 24]
Input [2]: [c_customer_sk#31, ssales#38]
Condition : (isnotnull(ssales#38) AND (cast(ssales#38 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#39, [id=#40] as decimal(32,6)))), DecimalType(38,8), true)))

(74) Project [codegen id : 24]
Output [1]: [c_customer_sk#31]
Input [2]: [c_customer_sk#31, ssales#38]

(75) Sort [codegen id : 24]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(76) SortMergeJoin [codegen id : 25]
Left keys [1]: [c_customer_sk#45]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(77) SortMergeJoin [codegen id : 26]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#45]
Join condition: None

(78) Project [codegen id : 26]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#46, c_last_name#47]
Input [6]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, c_customer_sk#45, c_first_name#46, c_last_name#47]

(79) HashAggregate [codegen id : 26]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#46, c_last_name#47]
Keys [2]: [c_last_name#47, c_first_name#46]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#49, isEmpty#50]
Results [4]: [c_last_name#47, c_first_name#46, sum#51, isEmpty#52]

(80) Exchange
Input [4]: [c_last_name#47, c_first_name#46, sum#51, isEmpty#52]
Arguments: hashpartitioning(c_last_name#47, c_first_name#46, 5), ENSURE_REQUIREMENTS, [id=#53]

(81) HashAggregate [codegen id : 27]
Input [4]: [c_last_name#47, c_first_name#46, sum#51, isEmpty#52]
Keys [2]: [c_last_name#47, c_first_name#46]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#54]
Results [3]: [c_last_name#47, c_first_name#46, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sales#55]

(82) Scan parquet default.web_sales
Output [5]: [ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, ws_sold_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#60), dynamicpruningexpression(ws_sold_date_sk#60 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(83) ColumnarToRow [codegen id : 28]
Input [5]: [ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, ws_sold_date_sk#60]

(84) Filter [codegen id : 28]
Input [5]: [ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, ws_sold_date_sk#60]
Condition : isnotnull(ws_bill_customer_sk#57)

(85) Exchange
Input [5]: [ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, ws_sold_date_sk#60]
Arguments: hashpartitioning(ws_item_sk#56, 5), ENSURE_REQUIREMENTS, [id=#61]

(86) Sort [codegen id : 29]
Input [5]: [ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, ws_sold_date_sk#60]
Arguments: [ws_item_sk#56 ASC NULLS FIRST], false, 0

(87) ReusedExchange [Reuses operator id: unknown]
Output [2]: [ss_item_sk#62, d_date#63]

(88) Sort [codegen id : 32]
Input [2]: [ss_item_sk#62, d_date#63]
Arguments: [ss_item_sk#62 ASC NULLS FIRST], false, 0

(89) ReusedExchange [Reuses operator id: 21]
Output [2]: [i_item_sk#64, i_item_desc#65]

(90) Sort [codegen id : 34]
Input [2]: [i_item_sk#64, i_item_desc#65]
Arguments: [i_item_sk#64 ASC NULLS FIRST], false, 0

(91) SortMergeJoin [codegen id : 35]
Left keys [1]: [ss_item_sk#62]
Right keys [1]: [i_item_sk#64]
Join condition: None

(92) Project [codegen id : 35]
Output [3]: [d_date#63, i_item_sk#64, substr(i_item_desc#65, 1, 30) AS _groupingexpression#66]
Input [4]: [ss_item_sk#62, d_date#63, i_item_sk#64, i_item_desc#65]

(93) HashAggregate [codegen id : 35]
Input [3]: [d_date#63, i_item_sk#64, _groupingexpression#66]
Keys [3]: [_groupingexpression#66, i_item_sk#64, d_date#63]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#67]
Results [4]: [_groupingexpression#66, i_item_sk#64, d_date#63, count#68]

(94) HashAggregate [codegen id : 35]
Input [4]: [_groupingexpression#66, i_item_sk#64, d_date#63, count#68]
Keys [3]: [_groupingexpression#66, i_item_sk#64, d_date#63]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#69]
Results [2]: [i_item_sk#64 AS item_sk#23, count(1)#69 AS cnt#24]

(95) Filter [codegen id : 35]
Input [2]: [item_sk#23, cnt#24]
Condition : (cnt#24 > 4)

(96) Project [codegen id : 35]
Output [1]: [item_sk#23]
Input [2]: [item_sk#23, cnt#24]

(97) Sort [codegen id : 35]
Input [1]: [item_sk#23]
Arguments: [item_sk#23 ASC NULLS FIRST], false, 0

(98) SortMergeJoin [codegen id : 36]
Left keys [1]: [ws_item_sk#56]
Right keys [1]: [item_sk#23]
Join condition: None

(99) Project [codegen id : 36]
Output [4]: [ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, ws_sold_date_sk#60]
Input [5]: [ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, ws_sold_date_sk#60]

(100) Exchange
Input [4]: [ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, ws_sold_date_sk#60]
Arguments: hashpartitioning(ws_bill_customer_sk#57, 5), ENSURE_REQUIREMENTS, [id=#70]

(101) Sort [codegen id : 37]
Input [4]: [ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, ws_sold_date_sk#60]
Arguments: [ws_bill_customer_sk#57 ASC NULLS FIRST], false, 0

(102) ReusedExchange [Reuses operator id: 38]
Output [3]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73]

(103) Sort [codegen id : 39]
Input [3]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73]
Arguments: [ss_customer_sk#71 ASC NULLS FIRST], false, 0

(104) ReusedExchange [Reuses operator id: 43]
Output [1]: [c_customer_sk#74]

(105) Sort [codegen id : 41]
Input [1]: [c_customer_sk#74]
Arguments: [c_customer_sk#74 ASC NULLS FIRST], false, 0

(106) SortMergeJoin [codegen id : 42]
Left keys [1]: [ss_customer_sk#71]
Right keys [1]: [c_customer_sk#74]
Join condition: None

(107) Project [codegen id : 42]
Output [3]: [ss_quantity#72, ss_sales_price#73, c_customer_sk#74]
Input [4]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73, c_customer_sk#74]

(108) HashAggregate [codegen id : 42]
Input [3]: [ss_quantity#72, ss_sales_price#73, c_customer_sk#74]
Keys [1]: [c_customer_sk#74]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#75, isEmpty#76]
Results [3]: [c_customer_sk#74, sum#77, isEmpty#78]

(109) HashAggregate [codegen id : 42]
Input [3]: [c_customer_sk#74, sum#77, isEmpty#78]
Keys [1]: [c_customer_sk#74]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))#79]
Results [2]: [c_customer_sk#74, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))#79 AS ssales#38]

(110) Filter [codegen id : 42]
Input [2]: [c_customer_sk#74, ssales#38]
Condition : (isnotnull(ssales#38) AND (cast(ssales#38 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#39, [id=#40] as decimal(32,6)))), DecimalType(38,8), true)))

(111) Project [codegen id : 42]
Output [1]: [c_customer_sk#74]
Input [2]: [c_customer_sk#74, ssales#38]

(112) Sort [codegen id : 42]
Input [1]: [c_customer_sk#74]
Arguments: [c_customer_sk#74 ASC NULLS FIRST], false, 0

(113) SortMergeJoin [codegen id : 44]
Left keys [1]: [ws_bill_customer_sk#57]
Right keys [1]: [c_customer_sk#74]
Join condition: None

(114) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#80]

(115) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_sold_date_sk#60]
Right keys [1]: [d_date_sk#80]
Join condition: None

(116) Project [codegen id : 44]
Output [3]: [ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Input [5]: [ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, ws_sold_date_sk#60, d_date_sk#80]

(117) ReusedExchange [Reuses operator id: 63]
Output [3]: [c_customer_sk#81, c_first_name#82, c_last_name#83]

(118) Sort [codegen id : 46]
Input [3]: [c_customer_sk#81, c_first_name#82, c_last_name#83]
Arguments: [c_customer_sk#81 ASC NULLS FIRST], false, 0

(119) ReusedExchange [Reuses operator id: 38]
Output [3]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73]

(120) Sort [codegen id : 48]
Input [3]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73]
Arguments: [ss_customer_sk#71 ASC NULLS FIRST], false, 0

(121) ReusedExchange [Reuses operator id: 43]
Output [1]: [c_customer_sk#74]

(122) Sort [codegen id : 50]
Input [1]: [c_customer_sk#74]
Arguments: [c_customer_sk#74 ASC NULLS FIRST], false, 0

(123) SortMergeJoin [codegen id : 51]
Left keys [1]: [ss_customer_sk#71]
Right keys [1]: [c_customer_sk#74]
Join condition: None

(124) Project [codegen id : 51]
Output [3]: [ss_quantity#72, ss_sales_price#73, c_customer_sk#74]
Input [4]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73, c_customer_sk#74]

(125) HashAggregate [codegen id : 51]
Input [3]: [ss_quantity#72, ss_sales_price#73, c_customer_sk#74]
Keys [1]: [c_customer_sk#74]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#75, isEmpty#76]
Results [3]: [c_customer_sk#74, sum#77, isEmpty#78]

(126) HashAggregate [codegen id : 51]
Input [3]: [c_customer_sk#74, sum#77, isEmpty#78]
Keys [1]: [c_customer_sk#74]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))#79]
Results [2]: [c_customer_sk#74, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))#79 AS ssales#38]

(127) Filter [codegen id : 51]
Input [2]: [c_customer_sk#74, ssales#38]
Condition : (isnotnull(ssales#38) AND (cast(ssales#38 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#39, [id=#40] as decimal(32,6)))), DecimalType(38,8), true)))

(128) Project [codegen id : 51]
Output [1]: [c_customer_sk#74]
Input [2]: [c_customer_sk#74, ssales#38]

(129) Sort [codegen id : 51]
Input [1]: [c_customer_sk#74]
Arguments: [c_customer_sk#74 ASC NULLS FIRST], false, 0

(130) SortMergeJoin [codegen id : 52]
Left keys [1]: [c_customer_sk#81]
Right keys [1]: [c_customer_sk#74]
Join condition: None

(131) SortMergeJoin [codegen id : 53]
Left keys [1]: [ws_bill_customer_sk#57]
Right keys [1]: [c_customer_sk#81]
Join condition: None

(132) Project [codegen id : 53]
Output [4]: [ws_quantity#58, ws_list_price#59, c_first_name#82, c_last_name#83]
Input [6]: [ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, c_customer_sk#81, c_first_name#82, c_last_name#83]

(133) HashAggregate [codegen id : 53]
Input [4]: [ws_quantity#58, ws_list_price#59, c_first_name#82, c_last_name#83]
Keys [2]: [c_last_name#83, c_first_name#82]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#84, isEmpty#85]
Results [4]: [c_last_name#83, c_first_name#82, sum#86, isEmpty#87]

(134) Exchange
Input [4]: [c_last_name#83, c_first_name#82, sum#86, isEmpty#87]
Arguments: hashpartitioning(c_last_name#83, c_first_name#82, 5), ENSURE_REQUIREMENTS, [id=#88]

(135) HashAggregate [codegen id : 54]
Input [4]: [c_last_name#83, c_first_name#82, sum#86, isEmpty#87]
Keys [2]: [c_last_name#83, c_first_name#82]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))#89]
Results [3]: [c_last_name#83, c_first_name#82, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))#89 AS sales#90]

(136) Union

(137) TakeOrderedAndProject
Input [3]: [c_last_name#47, c_first_name#46, sales#55]
Arguments: 100, [c_last_name#47 ASC NULLS FIRST, c_first_name#46 ASC NULLS FIRST, sales#55 ASC NULLS FIRST], [c_last_name#47, c_first_name#46, sales#55]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
ReusedExchange (138)


(138) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#41]

Subquery:2 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
ReusedExchange (139)


(139) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#11, d_date#12]

Subquery:3 Hosting operator id = 49 Hosting Expression = Subquery scalar-subquery#39, [id=#40]
* HashAggregate (163)
+- Exchange (162)
   +- * HashAggregate (161)
      +- * HashAggregate (160)
         +- * HashAggregate (159)
            +- * Project (158)
               +- * SortMergeJoin Inner (157)
                  :- * Sort (151)
                  :  +- Exchange (150)
                  :     +- * Project (149)
                  :        +- * BroadcastHashJoin Inner BuildRight (148)
                  :           :- * Filter (142)
                  :           :  +- * ColumnarToRow (141)
                  :           :     +- Scan parquet default.store_sales (140)
                  :           +- BroadcastExchange (147)
                  :              +- * Project (146)
                  :                 +- * Filter (145)
                  :                    +- * ColumnarToRow (144)
                  :                       +- Scan parquet default.date_dim (143)
                  +- * Sort (156)
                     +- Exchange (155)
                        +- * Filter (154)
                           +- * ColumnarToRow (153)
                              +- Scan parquet default.customer (152)


(140) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#95)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(141) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94]

(142) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94]
Condition : isnotnull(ss_customer_sk#91)

(143) Scan parquet default.date_dim
Output [2]: [d_date_sk#96, d_year#97]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(144) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#96, d_year#97]

(145) Filter [codegen id : 1]
Input [2]: [d_date_sk#96, d_year#97]
Condition : (d_year#97 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#96))

(146) Project [codegen id : 1]
Output [1]: [d_date_sk#96]
Input [2]: [d_date_sk#96, d_year#97]

(147) BroadcastExchange
Input [1]: [d_date_sk#96]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98]

(148) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#94]
Right keys [1]: [d_date_sk#96]
Join condition: None

(149) Project [codegen id : 2]
Output [3]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93]
Input [5]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94, d_date_sk#96]

(150) Exchange
Input [3]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93]
Arguments: hashpartitioning(ss_customer_sk#91, 5), ENSURE_REQUIREMENTS, [id=#99]

(151) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93]
Arguments: [ss_customer_sk#91 ASC NULLS FIRST], false, 0

(152) Scan parquet default.customer
Output [1]: [c_customer_sk#100]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(153) ColumnarToRow [codegen id : 4]
Input [1]: [c_customer_sk#100]

(154) Filter [codegen id : 4]
Input [1]: [c_customer_sk#100]
Condition : isnotnull(c_customer_sk#100)

(155) Exchange
Input [1]: [c_customer_sk#100]
Arguments: hashpartitioning(c_customer_sk#100, 5), ENSURE_REQUIREMENTS, [id=#101]

(156) Sort [codegen id : 5]
Input [1]: [c_customer_sk#100]
Arguments: [c_customer_sk#100 ASC NULLS FIRST], false, 0

(157) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#91]
Right keys [1]: [c_customer_sk#100]
Join condition: None

(158) Project [codegen id : 6]
Output [3]: [ss_quantity#92, ss_sales_price#93, c_customer_sk#100]
Input [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, c_customer_sk#100]

(159) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#92, ss_sales_price#93, c_customer_sk#100]
Keys [1]: [c_customer_sk#100]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#102, isEmpty#103]
Results [3]: [c_customer_sk#100, sum#104, isEmpty#105]

(160) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#100, sum#104, isEmpty#105]
Keys [1]: [c_customer_sk#100]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))#106]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))#106 AS csales#107]

(161) HashAggregate [codegen id : 6]
Input [1]: [csales#107]
Keys: []
Functions [1]: [partial_max(csales#107)]
Aggregate Attributes [1]: [max#108]
Results [1]: [max#109]

(162) Exchange
Input [1]: [max#109]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#110]

(163) HashAggregate [codegen id : 7]
Input [1]: [max#109]
Keys: []
Functions [1]: [max(csales#107)]
Aggregate Attributes [1]: [max(csales#107)#111]
Results [1]: [max(csales#107)#111 AS tpcds_cmax#112]

Subquery:4 Hosting operator id = 140 Hosting Expression = ss_sold_date_sk#94 IN dynamicpruning#95
ReusedExchange (164)


(164) ReusedExchange [Reuses operator id: 147]
Output [1]: [d_date_sk#96]

Subquery:5 Hosting operator id = 73 Hosting Expression = ReusedSubquery Subquery scalar-subquery#39, [id=#40]

Subquery:6 Hosting operator id = 82 Hosting Expression = ws_sold_date_sk#60 IN dynamicpruning#6

Subquery:7 Hosting operator id = 110 Hosting Expression = ReusedSubquery Subquery scalar-subquery#39, [id=#40]

Subquery:8 Hosting operator id = 127 Hosting Expression = ReusedSubquery Subquery scalar-subquery#39, [id=#40]


