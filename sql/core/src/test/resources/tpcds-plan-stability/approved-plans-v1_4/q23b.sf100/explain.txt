== Physical Plan ==
TakeOrderedAndProject (129)
+- Union (128)
   :- * HashAggregate (73)
   :  +- Exchange (72)
   :     +- * HashAggregate (71)
   :        +- * Project (70)
   :           +- * SortMergeJoin Inner (69)
   :              :- * Project (51)
   :              :  +- * BroadcastHashJoin Inner BuildRight (50)
   :              :     :- * SortMergeJoin LeftSemi (48)
   :              :     :  :- * Sort (29)
   :              :     :  :  +- Exchange (28)
   :              :     :  :     +- * Project (27)
   :              :     :  :        +- * SortMergeJoin LeftSemi (26)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- * Sort (25)
   :              :     :  :              +- * Project (24)
   :              :     :  :                 +- * Filter (23)
   :              :     :  :                    +- * HashAggregate (22)
   :              :     :  :                       +- * HashAggregate (21)
   :              :     :  :                          +- * Project (20)
   :              :     :  :                             +- * SortMergeJoin Inner (19)
   :              :     :  :                                :- * Sort (13)
   :              :     :  :                                :  +- Exchange (12)
   :              :     :  :                                :     +- * Project (11)
   :              :     :  :                                :        +- * BroadcastHashJoin Inner BuildRight (10)
   :              :     :  :                                :           :- * Filter (8)
   :              :     :  :                                :           :  +- * ColumnarToRow (7)
   :              :     :  :                                :           :     +- Scan parquet default.store_sales (6)
   :              :     :  :                                :           +- ReusedExchange (9)
   :              :     :  :                                +- * Sort (18)
   :              :     :  :                                   +- Exchange (17)
   :              :     :  :                                      +- * Filter (16)
   :              :     :  :                                         +- * ColumnarToRow (15)
   :              :     :  :                                            +- Scan parquet default.item (14)
   :              :     :  +- * Sort (47)
   :              :     :     +- * Project (46)
   :              :     :        +- * Filter (45)
   :              :     :           +- * HashAggregate (44)
   :              :     :              +- * HashAggregate (43)
   :              :     :                 +- * Project (42)
   :              :     :                    +- * SortMergeJoin Inner (41)
   :              :     :                       :- * Sort (35)
   :              :     :                       :  +- Exchange (34)
   :              :     :                       :     +- * Project (33)
   :              :     :                       :        +- * Filter (32)
   :              :     :                       :           +- * ColumnarToRow (31)
   :              :     :                       :              +- Scan parquet default.store_sales (30)
   :              :     :                       +- * Sort (40)
   :              :     :                          +- Exchange (39)
   :              :     :                             +- * Filter (38)
   :              :     :                                +- * ColumnarToRow (37)
   :              :     :                                   +- Scan parquet default.customer (36)
   :              :     +- ReusedExchange (49)
   :              +- * SortMergeJoin LeftSemi (68)
   :                 :- * Sort (56)
   :                 :  +- Exchange (55)
   :                 :     +- * Filter (54)
   :                 :        +- * ColumnarToRow (53)
   :                 :           +- Scan parquet default.customer (52)
   :                 +- * Sort (67)
   :                    +- * Project (66)
   :                       +- * Filter (65)
   :                          +- * HashAggregate (64)
   :                             +- * HashAggregate (63)
   :                                +- * Project (62)
   :                                   +- * SortMergeJoin Inner (61)
   :                                      :- * Sort (58)
   :                                      :  +- ReusedExchange (57)
   :                                      +- * Sort (60)
   :                                         +- ReusedExchange (59)
   +- * HashAggregate (127)
      +- Exchange (126)
         +- * HashAggregate (125)
            +- * Project (124)
               +- * SortMergeJoin Inner (123)
                  :- * Project (108)
                  :  +- * BroadcastHashJoin Inner BuildRight (107)
                  :     :- * SortMergeJoin LeftSemi (105)
                  :     :  :- * Sort (93)
                  :     :  :  +- Exchange (92)
                  :     :  :     +- * Project (91)
                  :     :  :        +- * SortMergeJoin LeftSemi (90)
                  :     :  :           :- * Sort (78)
                  :     :  :           :  +- Exchange (77)
                  :     :  :           :     +- * Filter (76)
                  :     :  :           :        +- * ColumnarToRow (75)
                  :     :  :           :           +- Scan parquet default.web_sales (74)
                  :     :  :           +- * Sort (89)
                  :     :  :              +- * Project (88)
                  :     :  :                 +- * Filter (87)
                  :     :  :                    +- * HashAggregate (86)
                  :     :  :                       +- * HashAggregate (85)
                  :     :  :                          +- * Project (84)
                  :     :  :                             +- * SortMergeJoin Inner (83)
                  :     :  :                                :- * Sort (80)
                  :     :  :                                :  +- ReusedExchange (79)
                  :     :  :                                +- * Sort (82)
                  :     :  :                                   +- ReusedExchange (81)
                  :     :  +- * Sort (104)
                  :     :     +- * Project (103)
                  :     :        +- * Filter (102)
                  :     :           +- * HashAggregate (101)
                  :     :              +- * HashAggregate (100)
                  :     :                 +- * Project (99)
                  :     :                    +- * SortMergeJoin Inner (98)
                  :     :                       :- * Sort (95)
                  :     :                       :  +- ReusedExchange (94)
                  :     :                       +- * Sort (97)
                  :     :                          +- ReusedExchange (96)
                  :     +- ReusedExchange (106)
                  +- * SortMergeJoin LeftSemi (122)
                     :- * Sort (110)
                     :  +- ReusedExchange (109)
                     +- * Sort (121)
                        +- * Project (120)
                           +- * Filter (119)
                              +- * HashAggregate (118)
                                 +- * HashAggregate (117)
                                    +- * Project (116)
                                       +- * SortMergeJoin Inner (115)
                                          :- * Sort (112)
                                          :  +- ReusedExchange (111)
                                          +- * Sort (114)
                                             +- ReusedExchange (113)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(8) Filter [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(9) ReusedExchange [Reuses operator id: 139]
Output [2]: [d_date_sk#11, d_date#12]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(11) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(12) Exchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#13]

(13) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(14) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(15) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]

(16) Filter [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(17) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(18) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(20) Project [codegen id : 8]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(21) HashAggregate [codegen id : 8]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#17]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]

(22) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(23) Filter [codegen id : 8]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(24) Project [codegen id : 8]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(25) Sort [codegen id : 8]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#21]
Join condition: None

(27) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(28) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(29) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(30) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(31) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(32) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(33) Project [codegen id : 11]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(34) Exchange
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#28]

(35) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(36) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(37) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#29]

(38) Filter [codegen id : 13]
Input [1]: [c_customer_sk#29]
Condition : isnotnull(c_customer_sk#29)

(39) Exchange
Input [1]: [c_customer_sk#29]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(40) Sort [codegen id : 14]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(42) Project [codegen id : 15]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(43) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(44) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 AS ssales#36]

(45) Filter [codegen id : 15]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(46) Project [codegen id : 15]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(47) Sort [codegen id : 15]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(49) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#39]

(50) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#39]
Join condition: None

(51) Project [codegen id : 17]
Output [3]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4]
Input [5]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#39]

(52) Scan parquet default.customer
Output [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(53) ColumnarToRow [codegen id : 18]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]

(54) Filter [codegen id : 18]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Condition : isnotnull(c_customer_sk#40)

(55) Exchange
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: hashpartitioning(c_customer_sk#40, 5), ENSURE_REQUIREMENTS, [id=#43]

(56) Sort [codegen id : 19]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: [c_customer_sk#40 ASC NULLS FIRST], false, 0

(57) ReusedExchange [Reuses operator id: 34]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(58) Sort [codegen id : 21]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(59) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#29]

(60) Sort [codegen id : 23]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(61) SortMergeJoin [codegen id : 24]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(62) Project [codegen id : 24]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(63) HashAggregate [codegen id : 24]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(64) HashAggregate [codegen id : 24]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 AS ssales#36]

(65) Filter [codegen id : 24]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(66) Project [codegen id : 24]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(67) Sort [codegen id : 24]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 25]
Left keys [1]: [c_customer_sk#40]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(69) SortMergeJoin [codegen id : 26]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#40]
Join condition: None

(70) Project [codegen id : 26]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Input [6]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, c_customer_sk#40, c_first_name#41, c_last_name#42]

(71) HashAggregate [codegen id : 26]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]

(72) Exchange
Input [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]
Arguments: hashpartitioning(c_last_name#42, c_first_name#41, 5), ENSURE_REQUIREMENTS, [id=#48]

(73) HashAggregate [codegen id : 27]
Input [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#49]
Results [3]: [c_last_name#42, c_first_name#41, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#49 AS sales#50]

(74) Scan parquet default.web_sales
Output [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#55), dynamicpruningexpression(ws_sold_date_sk#55 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(75) ColumnarToRow [codegen id : 28]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]

(76) Filter [codegen id : 28]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Condition : isnotnull(ws_bill_customer_sk#52)

(77) Exchange
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: hashpartitioning(ws_item_sk#51, 5), ENSURE_REQUIREMENTS, [id=#56]

(78) Sort [codegen id : 29]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: [ws_item_sk#51 ASC NULLS FIRST], false, 0

(79) ReusedExchange [Reuses operator id: 12]
Output [2]: [ss_item_sk#57, d_date#58]

(80) Sort [codegen id : 32]
Input [2]: [ss_item_sk#57, d_date#58]
Arguments: [ss_item_sk#57 ASC NULLS FIRST], false, 0

(81) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#59, i_item_desc#60]

(82) Sort [codegen id : 34]
Input [2]: [i_item_sk#59, i_item_desc#60]
Arguments: [i_item_sk#59 ASC NULLS FIRST], false, 0

(83) SortMergeJoin [codegen id : 35]
Left keys [1]: [ss_item_sk#57]
Right keys [1]: [i_item_sk#59]
Join condition: None

(84) Project [codegen id : 35]
Output [3]: [d_date#58, i_item_sk#59, substr(i_item_desc#60, 1, 30) AS _groupingexpression#61]
Input [4]: [ss_item_sk#57, d_date#58, i_item_sk#59, i_item_desc#60]

(85) HashAggregate [codegen id : 35]
Input [3]: [d_date#58, i_item_sk#59, _groupingexpression#61]
Keys [3]: [_groupingexpression#61, i_item_sk#59, d_date#58]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#62]
Results [4]: [_groupingexpression#61, i_item_sk#59, d_date#58, count#63]

(86) HashAggregate [codegen id : 35]
Input [4]: [_groupingexpression#61, i_item_sk#59, d_date#58, count#63]
Keys [3]: [_groupingexpression#61, i_item_sk#59, d_date#58]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#64]
Results [2]: [i_item_sk#59 AS item_sk#21, count(1)#64 AS cnt#22]

(87) Filter [codegen id : 35]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(88) Project [codegen id : 35]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(89) Sort [codegen id : 35]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(90) SortMergeJoin [codegen id : 36]
Left keys [1]: [ws_item_sk#51]
Right keys [1]: [item_sk#21]
Join condition: None

(91) Project [codegen id : 36]
Output [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]

(92) Exchange
Input [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: hashpartitioning(ws_bill_customer_sk#52, 5), ENSURE_REQUIREMENTS, [id=#65]

(93) Sort [codegen id : 37]
Input [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: [ws_bill_customer_sk#52 ASC NULLS FIRST], false, 0

(94) ReusedExchange [Reuses operator id: 34]
Output [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]

(95) Sort [codegen id : 39]
Input [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]
Arguments: [ss_customer_sk#66 ASC NULLS FIRST], false, 0

(96) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#69]

(97) Sort [codegen id : 41]
Input [1]: [c_customer_sk#69]
Arguments: [c_customer_sk#69 ASC NULLS FIRST], false, 0

(98) SortMergeJoin [codegen id : 42]
Left keys [1]: [ss_customer_sk#66]
Right keys [1]: [c_customer_sk#69]
Join condition: None

(99) Project [codegen id : 42]
Output [3]: [ss_quantity#67, ss_sales_price#68, c_customer_sk#69]
Input [4]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68, c_customer_sk#69]

(100) HashAggregate [codegen id : 42]
Input [3]: [ss_quantity#67, ss_sales_price#68, c_customer_sk#69]
Keys [1]: [c_customer_sk#69]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [3]: [c_customer_sk#69, sum#72, isEmpty#73]

(101) HashAggregate [codegen id : 42]
Input [3]: [c_customer_sk#69, sum#72, isEmpty#73]
Keys [1]: [c_customer_sk#69]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))#74]
Results [2]: [c_customer_sk#69, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))#74 AS ssales#36]

(102) Filter [codegen id : 42]
Input [2]: [c_customer_sk#69, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(103) Project [codegen id : 42]
Output [1]: [c_customer_sk#69]
Input [2]: [c_customer_sk#69, ssales#36]

(104) Sort [codegen id : 42]
Input [1]: [c_customer_sk#69]
Arguments: [c_customer_sk#69 ASC NULLS FIRST], false, 0

(105) SortMergeJoin [codegen id : 44]
Left keys [1]: [ws_bill_customer_sk#52]
Right keys [1]: [c_customer_sk#69]
Join condition: None

(106) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#75]

(107) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_sold_date_sk#55]
Right keys [1]: [d_date_sk#75]
Join condition: None

(108) Project [codegen id : 44]
Output [3]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54]
Input [5]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55, d_date_sk#75]

(109) ReusedExchange [Reuses operator id: 55]
Output [3]: [c_customer_sk#76, c_first_name#77, c_last_name#78]

(110) Sort [codegen id : 46]
Input [3]: [c_customer_sk#76, c_first_name#77, c_last_name#78]
Arguments: [c_customer_sk#76 ASC NULLS FIRST], false, 0

(111) ReusedExchange [Reuses operator id: 34]
Output [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]

(112) Sort [codegen id : 48]
Input [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]
Arguments: [ss_customer_sk#66 ASC NULLS FIRST], false, 0

(113) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#69]

(114) Sort [codegen id : 50]
Input [1]: [c_customer_sk#69]
Arguments: [c_customer_sk#69 ASC NULLS FIRST], false, 0

(115) SortMergeJoin [codegen id : 51]
Left keys [1]: [ss_customer_sk#66]
Right keys [1]: [c_customer_sk#69]
Join condition: None

(116) Project [codegen id : 51]
Output [3]: [ss_quantity#67, ss_sales_price#68, c_customer_sk#69]
Input [4]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68, c_customer_sk#69]

(117) HashAggregate [codegen id : 51]
Input [3]: [ss_quantity#67, ss_sales_price#68, c_customer_sk#69]
Keys [1]: [c_customer_sk#69]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [3]: [c_customer_sk#69, sum#72, isEmpty#73]

(118) HashAggregate [codegen id : 51]
Input [3]: [c_customer_sk#69, sum#72, isEmpty#73]
Keys [1]: [c_customer_sk#69]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))#74]
Results [2]: [c_customer_sk#69, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))#74 AS ssales#36]

(119) Filter [codegen id : 51]
Input [2]: [c_customer_sk#69, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(120) Project [codegen id : 51]
Output [1]: [c_customer_sk#69]
Input [2]: [c_customer_sk#69, ssales#36]

(121) Sort [codegen id : 51]
Input [1]: [c_customer_sk#69]
Arguments: [c_customer_sk#69 ASC NULLS FIRST], false, 0

(122) SortMergeJoin [codegen id : 52]
Left keys [1]: [c_customer_sk#76]
Right keys [1]: [c_customer_sk#69]
Join condition: None

(123) SortMergeJoin [codegen id : 53]
Left keys [1]: [ws_bill_customer_sk#52]
Right keys [1]: [c_customer_sk#76]
Join condition: None

(124) Project [codegen id : 53]
Output [4]: [ws_quantity#53, ws_list_price#54, c_first_name#77, c_last_name#78]
Input [6]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, c_customer_sk#76, c_first_name#77, c_last_name#78]

(125) HashAggregate [codegen id : 53]
Input [4]: [ws_quantity#53, ws_list_price#54, c_first_name#77, c_last_name#78]
Keys [2]: [c_last_name#78, c_first_name#77]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#79, isEmpty#80]
Results [4]: [c_last_name#78, c_first_name#77, sum#81, isEmpty#82]

(126) Exchange
Input [4]: [c_last_name#78, c_first_name#77, sum#81, isEmpty#82]
Arguments: hashpartitioning(c_last_name#78, c_first_name#77, 5), ENSURE_REQUIREMENTS, [id=#83]

(127) HashAggregate [codegen id : 54]
Input [4]: [c_last_name#78, c_first_name#77, sum#81, isEmpty#82]
Keys [2]: [c_last_name#78, c_first_name#77]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#84]
Results [3]: [c_last_name#78, c_first_name#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#84 AS sales#85]

(128) Union

(129) TakeOrderedAndProject
Input [3]: [c_last_name#42, c_first_name#41, sales#50]
Arguments: 100, [c_last_name#42 ASC NULLS FIRST, c_first_name#41 ASC NULLS FIRST, sales#50 ASC NULLS FIRST], [c_last_name#42, c_first_name#41, sales#50]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (134)
+- * Project (133)
   +- * Filter (132)
      +- * ColumnarToRow (131)
         +- Scan parquet default.date_dim (130)


(130) Scan parquet default.date_dim
Output [3]: [d_date_sk#39, d_year#86, d_moy#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(131) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#86, d_moy#87]

(132) Filter [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#86, d_moy#87]
Condition : ((((isnotnull(d_year#86) AND isnotnull(d_moy#87)) AND (d_year#86 = 2000)) AND (d_moy#87 = 2)) AND isnotnull(d_date_sk#39))

(133) Project [codegen id : 1]
Output [1]: [d_date_sk#39]
Input [3]: [d_date_sk#39, d_year#86, d_moy#87]

(134) BroadcastExchange
Input [1]: [d_date_sk#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#88]

Subquery:2 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (139)
+- * Project (138)
   +- * Filter (137)
      +- * ColumnarToRow (136)
         +- Scan parquet default.date_dim (135)


(135) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#89]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(136) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#89]

(137) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#89]
Condition : (d_year#89 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(138) Project [codegen id : 1]
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#89]

(139) BroadcastExchange
Input [2]: [d_date_sk#11, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#90]

Subquery:3 Hosting operator id = 45 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (156)
+- Exchange (155)
   +- * HashAggregate (154)
      +- * HashAggregate (153)
         +- * HashAggregate (152)
            +- * Project (151)
               +- * SortMergeJoin Inner (150)
                  :- * Sort (147)
                  :  +- Exchange (146)
                  :     +- * Project (145)
                  :        +- * BroadcastHashJoin Inner BuildRight (144)
                  :           :- * Filter (142)
                  :           :  +- * ColumnarToRow (141)
                  :           :     +- Scan parquet default.store_sales (140)
                  :           +- ReusedExchange (143)
                  +- * Sort (149)
                     +- ReusedExchange (148)


(140) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#95)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(141) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94]

(142) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94]
Condition : isnotnull(ss_customer_sk#91)

(143) ReusedExchange [Reuses operator id: 161]
Output [1]: [d_date_sk#96]

(144) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#94]
Right keys [1]: [d_date_sk#96]
Join condition: None

(145) Project [codegen id : 2]
Output [3]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93]
Input [5]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94, d_date_sk#96]

(146) Exchange
Input [3]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93]
Arguments: hashpartitioning(ss_customer_sk#91, 5), ENSURE_REQUIREMENTS, [id=#97]

(147) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93]
Arguments: [ss_customer_sk#91 ASC NULLS FIRST], false, 0

(148) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#98]

(149) Sort [codegen id : 5]
Input [1]: [c_customer_sk#98]
Arguments: [c_customer_sk#98 ASC NULLS FIRST], false, 0

(150) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#91]
Right keys [1]: [c_customer_sk#98]
Join condition: None

(151) Project [codegen id : 6]
Output [3]: [ss_quantity#92, ss_sales_price#93, c_customer_sk#98]
Input [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, c_customer_sk#98]

(152) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#92, ss_sales_price#93, c_customer_sk#98]
Keys [1]: [c_customer_sk#98]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#99, isEmpty#100]
Results [3]: [c_customer_sk#98, sum#101, isEmpty#102]

(153) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#98, sum#101, isEmpty#102]
Keys [1]: [c_customer_sk#98]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))#103]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))#103 AS csales#104]

(154) HashAggregate [codegen id : 6]
Input [1]: [csales#104]
Keys: []
Functions [1]: [partial_max(csales#104)]
Aggregate Attributes [1]: [max#105]
Results [1]: [max#106]

(155) Exchange
Input [1]: [max#106]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#107]

(156) HashAggregate [codegen id : 7]
Input [1]: [max#106]
Keys: []
Functions [1]: [max(csales#104)]
Aggregate Attributes [1]: [max(csales#104)#108]
Results [1]: [max(csales#104)#108 AS tpcds_cmax#109]

Subquery:4 Hosting operator id = 140 Hosting Expression = ss_sold_date_sk#94 IN dynamicpruning#95
BroadcastExchange (161)
+- * Project (160)
   +- * Filter (159)
      +- * ColumnarToRow (158)
         +- Scan parquet default.date_dim (157)


(157) Scan parquet default.date_dim
Output [2]: [d_date_sk#96, d_year#110]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(158) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#96, d_year#110]

(159) Filter [codegen id : 1]
Input [2]: [d_date_sk#96, d_year#110]
Condition : (d_year#110 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#96))

(160) Project [codegen id : 1]
Output [1]: [d_date_sk#96]
Input [2]: [d_date_sk#96, d_year#110]

(161) BroadcastExchange
Input [1]: [d_date_sk#96]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#111]

Subquery:5 Hosting operator id = 65 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]

Subquery:6 Hosting operator id = 74 Hosting Expression = ws_sold_date_sk#55 IN dynamicpruning#6

Subquery:7 Hosting operator id = 102 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]

Subquery:8 Hosting operator id = 119 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


