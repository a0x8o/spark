== Physical Plan ==
TakeOrderedAndProject (77)
+- * HashAggregate (76)
   +- Exchange (75)
      +- * HashAggregate (74)
         +- Union (73)
            :- * Project (24)
            :  +- * Filter (23)
            :     +- Window (22)
            :        +- * Sort (21)
            :           +- Window (20)
            :              +- * Sort (19)
            :                 +- Exchange (18)
            :                    +- * HashAggregate (17)
            :                       +- Exchange (16)
            :                          +- * HashAggregate (15)
            :                             +- * Project (14)
            :                                +- * BroadcastHashJoin Inner BuildRight (13)
            :                                   :- * Project (11)
            :                                   :  +- * BroadcastHashJoin Inner BuildLeft (10)
            :                                   :     :- BroadcastExchange (5)
            :                                   :     :  +- * Project (4)
            :                                   :     :     +- * Filter (3)
            :                                   :     :        +- * ColumnarToRow (2)
            :                                   :     :           +- Scan parquet default.web_sales (1)
            :                                   :     +- * Project (9)
            :                                   :        +- * Filter (8)
            :                                   :           +- * ColumnarToRow (7)
            :                                   :              +- Scan parquet default.web_returns (6)
            :                                   +- ReusedExchange (12)
            :- * Project (48)
            :  +- * Filter (47)
            :     +- Window (46)
            :        +- * Sort (45)
            :           +- Window (44)
            :              +- * Sort (43)
            :                 +- Exchange (42)
            :                    +- * HashAggregate (41)
            :                       +- Exchange (40)
            :                          +- * HashAggregate (39)
            :                             +- * Project (38)
            :                                +- * BroadcastHashJoin Inner BuildRight (37)
            :                                   :- * Project (35)
            :                                   :  +- * BroadcastHashJoin Inner BuildLeft (34)
            :                                   :     :- BroadcastExchange (29)
            :                                   :     :  +- * Project (28)
            :                                   :     :     +- * Filter (27)
            :                                   :     :        +- * ColumnarToRow (26)
            :                                   :     :           +- Scan parquet default.catalog_sales (25)
            :                                   :     +- * Project (33)
            :                                   :        +- * Filter (32)
            :                                   :           +- * ColumnarToRow (31)
            :                                   :              +- Scan parquet default.catalog_returns (30)
            :                                   +- ReusedExchange (36)
            +- * Project (72)
               +- * Filter (71)
                  +- Window (70)
                     +- * Sort (69)
                        +- Window (68)
                           +- * Sort (67)
                              +- Exchange (66)
                                 +- * HashAggregate (65)
                                    +- Exchange (64)
                                       +- * HashAggregate (63)
                                          +- * Project (62)
                                             +- * BroadcastHashJoin Inner BuildRight (61)
                                                :- * Project (59)
                                                :  +- * BroadcastHashJoin Inner BuildLeft (58)
                                                :     :- BroadcastExchange (53)
                                                :     :  +- * Project (52)
                                                :     :     +- * Filter (51)
                                                :     :        +- * ColumnarToRow (50)
                                                :     :           +- Scan parquet default.store_sales (49)
                                                :     +- * Project (57)
                                                :        +- * Filter (56)
                                                :           +- * ColumnarToRow (55)
                                                :              +- Scan parquet default.store_returns (54)
                                                +- ReusedExchange (60)


(1) Scan parquet default.web_sales
Output [6]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_net_profit#5, ws_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#6), dynamicpruningexpression(ws_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_profit,1.00), GreaterThan(ws_net_paid,0.00), GreaterThan(ws_quantity,0), IsNotNull(ws_order_number), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_net_paid:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [6]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_net_profit#5, ws_sold_date_sk#6]

(3) Filter [codegen id : 1]
Input [6]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_net_profit#5, ws_sold_date_sk#6]
Condition : (((((((isnotnull(ws_net_profit#5) AND isnotnull(ws_net_paid#4)) AND isnotnull(ws_quantity#3)) AND (ws_net_profit#5 > 1.00)) AND (ws_net_paid#4 > 0.00)) AND (ws_quantity#3 > 0)) AND isnotnull(ws_order_number#2)) AND isnotnull(ws_item_sk#1))

(4) Project [codegen id : 1]
Output [5]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_sold_date_sk#6]
Input [6]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_net_profit#5, ws_sold_date_sk#6]

(5) BroadcastExchange
Input [5]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_sold_date_sk#6]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#8]

(6) Scan parquet default.web_returns
Output [5]: [wr_item_sk#9, wr_order_number#10, wr_return_quantity#11, wr_return_amt#12, wr_returned_date_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2)>

(7) ColumnarToRow
Input [5]: [wr_item_sk#9, wr_order_number#10, wr_return_quantity#11, wr_return_amt#12, wr_returned_date_sk#13]

(8) Filter
Input [5]: [wr_item_sk#9, wr_order_number#10, wr_return_quantity#11, wr_return_amt#12, wr_returned_date_sk#13]
Condition : (((isnotnull(wr_return_amt#12) AND (wr_return_amt#12 > 10000.00)) AND isnotnull(wr_order_number#10)) AND isnotnull(wr_item_sk#9))

(9) Project
Output [4]: [wr_item_sk#9, wr_order_number#10, wr_return_quantity#11, wr_return_amt#12]
Input [5]: [wr_item_sk#9, wr_order_number#10, wr_return_quantity#11, wr_return_amt#12, wr_returned_date_sk#13]

(10) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [ws_order_number#2, ws_item_sk#1]
Right keys [2]: [wr_order_number#10, wr_item_sk#9]
Join condition: None

(11) Project [codegen id : 3]
Output [6]: [ws_item_sk#1, ws_quantity#3, ws_net_paid#4, ws_sold_date_sk#6, wr_return_quantity#11, wr_return_amt#12]
Input [9]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_sold_date_sk#6, wr_item_sk#9, wr_order_number#10, wr_return_quantity#11, wr_return_amt#12]

(12) ReusedExchange [Reuses operator id: 82]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_sold_date_sk#6]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 3]
Output [5]: [ws_item_sk#1, ws_quantity#3, ws_net_paid#4, wr_return_quantity#11, wr_return_amt#12]
Input [7]: [ws_item_sk#1, ws_quantity#3, ws_net_paid#4, ws_sold_date_sk#6, wr_return_quantity#11, wr_return_amt#12, d_date_sk#14]

(15) HashAggregate [codegen id : 3]
Input [5]: [ws_item_sk#1, ws_quantity#3, ws_net_paid#4, wr_return_quantity#11, wr_return_amt#12]
Keys [1]: [ws_item_sk#1]
Functions [4]: [partial_sum(coalesce(wr_return_quantity#11, 0)), partial_sum(coalesce(ws_quantity#3, 0)), partial_sum(coalesce(cast(wr_return_amt#12 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#4 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#15, sum#16, sum#17, isEmpty#18, sum#19, isEmpty#20]
Results [7]: [ws_item_sk#1, sum#21, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]

(16) Exchange
Input [7]: [ws_item_sk#1, sum#21, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#27]

(17) HashAggregate [codegen id : 4]
Input [7]: [ws_item_sk#1, sum#21, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Keys [1]: [ws_item_sk#1]
Functions [4]: [sum(coalesce(wr_return_quantity#11, 0)), sum(coalesce(ws_quantity#3, 0)), sum(coalesce(cast(wr_return_amt#12 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#4 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(wr_return_quantity#11, 0))#28, sum(coalesce(ws_quantity#3, 0))#29, sum(coalesce(cast(wr_return_amt#12 as decimal(12,2)), 0.00))#30, sum(coalesce(cast(ws_net_paid#4 as decimal(12,2)), 0.00))#31]
Results [3]: [ws_item_sk#1 AS item#32, CheckOverflow((promote_precision(cast(sum(coalesce(wr_return_quantity#11, 0))#28 as decimal(15,4))) / promote_precision(cast(sum(coalesce(ws_quantity#3, 0))#29 as decimal(15,4)))), DecimalType(35,20), true) AS return_ratio#33, CheckOverflow((promote_precision(cast(sum(coalesce(cast(wr_return_amt#12 as decimal(12,2)), 0.00))#30 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cast(ws_net_paid#4 as decimal(12,2)), 0.00))#31 as decimal(15,4)))), DecimalType(35,20), true) AS currency_ratio#34]

(18) Exchange
Input [3]: [item#32, return_ratio#33, currency_ratio#34]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#35]

(19) Sort [codegen id : 5]
Input [3]: [item#32, return_ratio#33, currency_ratio#34]
Arguments: [return_ratio#33 ASC NULLS FIRST], false, 0

(20) Window
Input [3]: [item#32, return_ratio#33, currency_ratio#34]
Arguments: [rank(return_ratio#33) windowspecdefinition(return_ratio#33 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#36], [return_ratio#33 ASC NULLS FIRST]

(21) Sort [codegen id : 6]
Input [4]: [item#32, return_ratio#33, currency_ratio#34, return_rank#36]
Arguments: [currency_ratio#34 ASC NULLS FIRST], false, 0

(22) Window
Input [4]: [item#32, return_ratio#33, currency_ratio#34, return_rank#36]
Arguments: [rank(currency_ratio#34) windowspecdefinition(currency_ratio#34 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#37], [currency_ratio#34 ASC NULLS FIRST]

(23) Filter [codegen id : 7]
Input [5]: [item#32, return_ratio#33, currency_ratio#34, return_rank#36, currency_rank#37]
Condition : ((return_rank#36 <= 10) OR (currency_rank#37 <= 10))

(24) Project [codegen id : 7]
Output [5]: [web AS channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37]
Input [5]: [item#32, return_ratio#33, currency_ratio#34, return_rank#36, currency_rank#37]

(25) Scan parquet default.catalog_sales
Output [6]: [cs_item_sk#39, cs_order_number#40, cs_quantity#41, cs_net_paid#42, cs_net_profit#43, cs_sold_date_sk#44]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#44), dynamicpruningexpression(cs_sold_date_sk#44 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_profit,1.00), GreaterThan(cs_net_paid,0.00), GreaterThan(cs_quantity,0), IsNotNull(cs_order_number), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_net_paid:decimal(7,2),cs_net_profit:decimal(7,2)>

(26) ColumnarToRow [codegen id : 8]
Input [6]: [cs_item_sk#39, cs_order_number#40, cs_quantity#41, cs_net_paid#42, cs_net_profit#43, cs_sold_date_sk#44]

(27) Filter [codegen id : 8]
Input [6]: [cs_item_sk#39, cs_order_number#40, cs_quantity#41, cs_net_paid#42, cs_net_profit#43, cs_sold_date_sk#44]
Condition : (((((((isnotnull(cs_net_profit#43) AND isnotnull(cs_net_paid#42)) AND isnotnull(cs_quantity#41)) AND (cs_net_profit#43 > 1.00)) AND (cs_net_paid#42 > 0.00)) AND (cs_quantity#41 > 0)) AND isnotnull(cs_order_number#40)) AND isnotnull(cs_item_sk#39))

(28) Project [codegen id : 8]
Output [5]: [cs_item_sk#39, cs_order_number#40, cs_quantity#41, cs_net_paid#42, cs_sold_date_sk#44]
Input [6]: [cs_item_sk#39, cs_order_number#40, cs_quantity#41, cs_net_paid#42, cs_net_profit#43, cs_sold_date_sk#44]

(29) BroadcastExchange
Input [5]: [cs_item_sk#39, cs_order_number#40, cs_quantity#41, cs_net_paid#42, cs_sold_date_sk#44]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#45]

(30) Scan parquet default.catalog_returns
Output [5]: [cr_item_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49, cr_returned_date_sk#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>

(31) ColumnarToRow
Input [5]: [cr_item_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49, cr_returned_date_sk#50]

(32) Filter
Input [5]: [cr_item_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49, cr_returned_date_sk#50]
Condition : (((isnotnull(cr_return_amount#49) AND (cr_return_amount#49 > 10000.00)) AND isnotnull(cr_order_number#47)) AND isnotnull(cr_item_sk#46))

(33) Project
Output [4]: [cr_item_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49]
Input [5]: [cr_item_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49, cr_returned_date_sk#50]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [cs_order_number#40, cs_item_sk#39]
Right keys [2]: [cr_order_number#47, cr_item_sk#46]
Join condition: None

(35) Project [codegen id : 10]
Output [6]: [cs_item_sk#39, cs_quantity#41, cs_net_paid#42, cs_sold_date_sk#44, cr_return_quantity#48, cr_return_amount#49]
Input [9]: [cs_item_sk#39, cs_order_number#40, cs_quantity#41, cs_net_paid#42, cs_sold_date_sk#44, cr_item_sk#46, cr_order_number#47, cr_return_quantity#48, cr_return_amount#49]

(36) ReusedExchange [Reuses operator id: 82]
Output [1]: [d_date_sk#51]

(37) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#44]
Right keys [1]: [d_date_sk#51]
Join condition: None

(38) Project [codegen id : 10]
Output [5]: [cs_item_sk#39, cs_quantity#41, cs_net_paid#42, cr_return_quantity#48, cr_return_amount#49]
Input [7]: [cs_item_sk#39, cs_quantity#41, cs_net_paid#42, cs_sold_date_sk#44, cr_return_quantity#48, cr_return_amount#49, d_date_sk#51]

(39) HashAggregate [codegen id : 10]
Input [5]: [cs_item_sk#39, cs_quantity#41, cs_net_paid#42, cr_return_quantity#48, cr_return_amount#49]
Keys [1]: [cs_item_sk#39]
Functions [4]: [partial_sum(coalesce(cr_return_quantity#48, 0)), partial_sum(coalesce(cs_quantity#41, 0)), partial_sum(coalesce(cast(cr_return_amount#49 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#42 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#52, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]
Results [7]: [cs_item_sk#39, sum#58, sum#59, sum#60, isEmpty#61, sum#62, isEmpty#63]

(40) Exchange
Input [7]: [cs_item_sk#39, sum#58, sum#59, sum#60, isEmpty#61, sum#62, isEmpty#63]
Arguments: hashpartitioning(cs_item_sk#39, 5), ENSURE_REQUIREMENTS, [id=#64]

(41) HashAggregate [codegen id : 11]
Input [7]: [cs_item_sk#39, sum#58, sum#59, sum#60, isEmpty#61, sum#62, isEmpty#63]
Keys [1]: [cs_item_sk#39]
Functions [4]: [sum(coalesce(cr_return_quantity#48, 0)), sum(coalesce(cs_quantity#41, 0)), sum(coalesce(cast(cr_return_amount#49 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#42 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(cr_return_quantity#48, 0))#65, sum(coalesce(cs_quantity#41, 0))#66, sum(coalesce(cast(cr_return_amount#49 as decimal(12,2)), 0.00))#67, sum(coalesce(cast(cs_net_paid#42 as decimal(12,2)), 0.00))#68]
Results [3]: [cs_item_sk#39 AS item#69, CheckOverflow((promote_precision(cast(sum(coalesce(cr_return_quantity#48, 0))#65 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cs_quantity#41, 0))#66 as decimal(15,4)))), DecimalType(35,20), true) AS return_ratio#70, CheckOverflow((promote_precision(cast(sum(coalesce(cast(cr_return_amount#49 as decimal(12,2)), 0.00))#67 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cast(cs_net_paid#42 as decimal(12,2)), 0.00))#68 as decimal(15,4)))), DecimalType(35,20), true) AS currency_ratio#71]

(42) Exchange
Input [3]: [item#69, return_ratio#70, currency_ratio#71]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#72]

(43) Sort [codegen id : 12]
Input [3]: [item#69, return_ratio#70, currency_ratio#71]
Arguments: [return_ratio#70 ASC NULLS FIRST], false, 0

(44) Window
Input [3]: [item#69, return_ratio#70, currency_ratio#71]
Arguments: [rank(return_ratio#70) windowspecdefinition(return_ratio#70 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#73], [return_ratio#70 ASC NULLS FIRST]

(45) Sort [codegen id : 13]
Input [4]: [item#69, return_ratio#70, currency_ratio#71, return_rank#73]
Arguments: [currency_ratio#71 ASC NULLS FIRST], false, 0

(46) Window
Input [4]: [item#69, return_ratio#70, currency_ratio#71, return_rank#73]
Arguments: [rank(currency_ratio#71) windowspecdefinition(currency_ratio#71 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#74], [currency_ratio#71 ASC NULLS FIRST]

(47) Filter [codegen id : 14]
Input [5]: [item#69, return_ratio#70, currency_ratio#71, return_rank#73, currency_rank#74]
Condition : ((return_rank#73 <= 10) OR (currency_rank#74 <= 10))

(48) Project [codegen id : 14]
Output [5]: [catalog AS channel#75, item#69, return_ratio#70, return_rank#73, currency_rank#74]
Input [5]: [item#69, return_ratio#70, currency_ratio#71, return_rank#73, currency_rank#74]

(49) Scan parquet default.store_sales
Output [6]: [ss_item_sk#76, ss_ticket_number#77, ss_quantity#78, ss_net_paid#79, ss_net_profit#80, ss_sold_date_sk#81]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#81), dynamicpruningexpression(ss_sold_date_sk#81 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_profit,1.00), GreaterThan(ss_net_paid,0.00), GreaterThan(ss_quantity,0), IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_net_paid:decimal(7,2),ss_net_profit:decimal(7,2)>

(50) ColumnarToRow [codegen id : 15]
Input [6]: [ss_item_sk#76, ss_ticket_number#77, ss_quantity#78, ss_net_paid#79, ss_net_profit#80, ss_sold_date_sk#81]

(51) Filter [codegen id : 15]
Input [6]: [ss_item_sk#76, ss_ticket_number#77, ss_quantity#78, ss_net_paid#79, ss_net_profit#80, ss_sold_date_sk#81]
Condition : (((((((isnotnull(ss_net_profit#80) AND isnotnull(ss_net_paid#79)) AND isnotnull(ss_quantity#78)) AND (ss_net_profit#80 > 1.00)) AND (ss_net_paid#79 > 0.00)) AND (ss_quantity#78 > 0)) AND isnotnull(ss_ticket_number#77)) AND isnotnull(ss_item_sk#76))

(52) Project [codegen id : 15]
Output [5]: [ss_item_sk#76, ss_ticket_number#77, ss_quantity#78, ss_net_paid#79, ss_sold_date_sk#81]
Input [6]: [ss_item_sk#76, ss_ticket_number#77, ss_quantity#78, ss_net_paid#79, ss_net_profit#80, ss_sold_date_sk#81]

(53) BroadcastExchange
Input [5]: [ss_item_sk#76, ss_ticket_number#77, ss_quantity#78, ss_net_paid#79, ss_sold_date_sk#81]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#82]

(54) Scan parquet default.store_returns
Output [5]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86, sr_returned_date_sk#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2)>

(55) ColumnarToRow
Input [5]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86, sr_returned_date_sk#87]

(56) Filter
Input [5]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86, sr_returned_date_sk#87]
Condition : (((isnotnull(sr_return_amt#86) AND (sr_return_amt#86 > 10000.00)) AND isnotnull(sr_ticket_number#84)) AND isnotnull(sr_item_sk#83))

(57) Project
Output [4]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86]
Input [5]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86, sr_returned_date_sk#87]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [2]: [ss_ticket_number#77, ss_item_sk#76]
Right keys [2]: [sr_ticket_number#84, sr_item_sk#83]
Join condition: None

(59) Project [codegen id : 17]
Output [6]: [ss_item_sk#76, ss_quantity#78, ss_net_paid#79, ss_sold_date_sk#81, sr_return_quantity#85, sr_return_amt#86]
Input [9]: [ss_item_sk#76, ss_ticket_number#77, ss_quantity#78, ss_net_paid#79, ss_sold_date_sk#81, sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86]

(60) ReusedExchange [Reuses operator id: 82]
Output [1]: [d_date_sk#88]

(61) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#81]
Right keys [1]: [d_date_sk#88]
Join condition: None

(62) Project [codegen id : 17]
Output [5]: [ss_item_sk#76, ss_quantity#78, ss_net_paid#79, sr_return_quantity#85, sr_return_amt#86]
Input [7]: [ss_item_sk#76, ss_quantity#78, ss_net_paid#79, ss_sold_date_sk#81, sr_return_quantity#85, sr_return_amt#86, d_date_sk#88]

(63) HashAggregate [codegen id : 17]
Input [5]: [ss_item_sk#76, ss_quantity#78, ss_net_paid#79, sr_return_quantity#85, sr_return_amt#86]
Keys [1]: [ss_item_sk#76]
Functions [4]: [partial_sum(coalesce(sr_return_quantity#85, 0)), partial_sum(coalesce(ss_quantity#78, 0)), partial_sum(coalesce(cast(sr_return_amt#86 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#79 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#89, sum#90, sum#91, isEmpty#92, sum#93, isEmpty#94]
Results [7]: [ss_item_sk#76, sum#95, sum#96, sum#97, isEmpty#98, sum#99, isEmpty#100]

(64) Exchange
Input [7]: [ss_item_sk#76, sum#95, sum#96, sum#97, isEmpty#98, sum#99, isEmpty#100]
Arguments: hashpartitioning(ss_item_sk#76, 5), ENSURE_REQUIREMENTS, [id=#101]

(65) HashAggregate [codegen id : 18]
Input [7]: [ss_item_sk#76, sum#95, sum#96, sum#97, isEmpty#98, sum#99, isEmpty#100]
Keys [1]: [ss_item_sk#76]
Functions [4]: [sum(coalesce(sr_return_quantity#85, 0)), sum(coalesce(ss_quantity#78, 0)), sum(coalesce(cast(sr_return_amt#86 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#79 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(sr_return_quantity#85, 0))#102, sum(coalesce(ss_quantity#78, 0))#103, sum(coalesce(cast(sr_return_amt#86 as decimal(12,2)), 0.00))#104, sum(coalesce(cast(ss_net_paid#79 as decimal(12,2)), 0.00))#105]
Results [3]: [ss_item_sk#76 AS item#106, CheckOverflow((promote_precision(cast(sum(coalesce(sr_return_quantity#85, 0))#102 as decimal(15,4))) / promote_precision(cast(sum(coalesce(ss_quantity#78, 0))#103 as decimal(15,4)))), DecimalType(35,20), true) AS return_ratio#107, CheckOverflow((promote_precision(cast(sum(coalesce(cast(sr_return_amt#86 as decimal(12,2)), 0.00))#104 as decimal(15,4))) / promote_precision(cast(sum(coalesce(cast(ss_net_paid#79 as decimal(12,2)), 0.00))#105 as decimal(15,4)))), DecimalType(35,20), true) AS currency_ratio#108]

(66) Exchange
Input [3]: [item#106, return_ratio#107, currency_ratio#108]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#109]

(67) Sort [codegen id : 19]
Input [3]: [item#106, return_ratio#107, currency_ratio#108]
Arguments: [return_ratio#107 ASC NULLS FIRST], false, 0

(68) Window
Input [3]: [item#106, return_ratio#107, currency_ratio#108]
Arguments: [rank(return_ratio#107) windowspecdefinition(return_ratio#107 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#110], [return_ratio#107 ASC NULLS FIRST]

(69) Sort [codegen id : 20]
Input [4]: [item#106, return_ratio#107, currency_ratio#108, return_rank#110]
Arguments: [currency_ratio#108 ASC NULLS FIRST], false, 0

(70) Window
Input [4]: [item#106, return_ratio#107, currency_ratio#108, return_rank#110]
Arguments: [rank(currency_ratio#108) windowspecdefinition(currency_ratio#108 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#111], [currency_ratio#108 ASC NULLS FIRST]

(71) Filter [codegen id : 21]
Input [5]: [item#106, return_ratio#107, currency_ratio#108, return_rank#110, currency_rank#111]
Condition : ((return_rank#110 <= 10) OR (currency_rank#111 <= 10))

(72) Project [codegen id : 21]
Output [5]: [store AS channel#112, item#106, return_ratio#107, return_rank#110, currency_rank#111]
Input [5]: [item#106, return_ratio#107, currency_ratio#108, return_rank#110, currency_rank#111]

(73) Union

(74) HashAggregate [codegen id : 22]
Input [5]: [channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37]
Keys [5]: [channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37]

(75) Exchange
Input [5]: [channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37]
Arguments: hashpartitioning(channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37, 5), ENSURE_REQUIREMENTS, [id=#113]

(76) HashAggregate [codegen id : 23]
Input [5]: [channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37]
Keys [5]: [channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37]

(77) TakeOrderedAndProject
Input [5]: [channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37]
Arguments: 100, [channel#38 ASC NULLS FIRST, return_rank#36 ASC NULLS FIRST, currency_rank#37 ASC NULLS FIRST], [channel#38, item#32, return_ratio#33, return_rank#36, currency_rank#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (82)
+- * Project (81)
   +- * Filter (80)
      +- * ColumnarToRow (79)
         +- Scan parquet default.date_dim (78)


(78) Scan parquet default.date_dim
Output [3]: [d_date_sk#14, d_year#114, d_moy#115]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,12), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(79) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#14, d_year#114, d_moy#115]

(80) Filter [codegen id : 1]
Input [3]: [d_date_sk#14, d_year#114, d_moy#115]
Condition : ((((isnotnull(d_year#114) AND isnotnull(d_moy#115)) AND (d_year#114 = 2001)) AND (d_moy#115 = 12)) AND isnotnull(d_date_sk#14))

(81) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [3]: [d_date_sk#14, d_year#114, d_moy#115]

(82) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116]

Subquery:2 Hosting operator id = 25 Hosting Expression = cs_sold_date_sk#44 IN dynamicpruning#7

Subquery:3 Hosting operator id = 49 Hosting Expression = ss_sold_date_sk#81 IN dynamicpruning#7


