== Physical Plan ==
TakeOrderedAndProject (73)
+- * Project (72)
   +- * BroadcastHashJoin Inner BuildRight (71)
      :- * Project (54)
      :  +- * BroadcastHashJoin Inner BuildRight (53)
      :     :- * Project (34)
      :     :  +- * BroadcastHashJoin Inner BuildRight (33)
      :     :     :- * Filter (16)
      :     :     :  +- * HashAggregate (15)
      :     :     :     +- Exchange (14)
      :     :     :        +- * HashAggregate (13)
      :     :     :           +- * Project (12)
      :     :     :              +- * BroadcastHashJoin Inner BuildRight (11)
      :     :     :                 :- * Project (9)
      :     :     :                 :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :                 :     :- * Filter (3)
      :     :     :                 :     :  +- * ColumnarToRow (2)
      :     :     :                 :     :     +- Scan parquet default.customer (1)
      :     :     :                 :     +- BroadcastExchange (7)
      :     :     :                 :        +- * Filter (6)
      :     :     :                 :           +- * ColumnarToRow (5)
      :     :     :                 :              +- Scan parquet default.store_sales (4)
      :     :     :                 +- ReusedExchange (10)
      :     :     +- BroadcastExchange (32)
      :     :        +- * HashAggregate (31)
      :     :           +- Exchange (30)
      :     :              +- * HashAggregate (29)
      :     :                 +- * Project (28)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (27)
      :     :                       :- * Project (25)
      :     :                       :  +- * BroadcastHashJoin Inner BuildRight (24)
      :     :                       :     :- * Filter (19)
      :     :                       :     :  +- * ColumnarToRow (18)
      :     :                       :     :     +- Scan parquet default.customer (17)
      :     :                       :     +- BroadcastExchange (23)
      :     :                       :        +- * Filter (22)
      :     :                       :           +- * ColumnarToRow (21)
      :     :                       :              +- Scan parquet default.store_sales (20)
      :     :                       +- ReusedExchange (26)
      :     +- BroadcastExchange (52)
      :        +- * Project (51)
      :           +- * Filter (50)
      :              +- * HashAggregate (49)
      :                 +- Exchange (48)
      :                    +- * HashAggregate (47)
      :                       +- * Project (46)
      :                          +- * BroadcastHashJoin Inner BuildRight (45)
      :                             :- * Project (43)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (42)
      :                             :     :- * Filter (37)
      :                             :     :  +- * ColumnarToRow (36)
      :                             :     :     +- Scan parquet default.customer (35)
      :                             :     +- BroadcastExchange (41)
      :                             :        +- * Filter (40)
      :                             :           +- * ColumnarToRow (39)
      :                             :              +- Scan parquet default.web_sales (38)
      :                             +- ReusedExchange (44)
      +- BroadcastExchange (70)
         +- * HashAggregate (69)
            +- Exchange (68)
               +- * HashAggregate (67)
                  +- * Project (66)
                     +- * BroadcastHashJoin Inner BuildRight (65)
                        :- * Project (63)
                        :  +- * BroadcastHashJoin Inner BuildRight (62)
                        :     :- * Filter (57)
                        :     :  +- * ColumnarToRow (56)
                        :     :     +- Scan parquet default.customer (55)
                        :     +- BroadcastExchange (61)
                        :        +- * Filter (60)
                        :           +- * ColumnarToRow (59)
                        :              +- Scan parquet default.web_sales (58)
                        +- ReusedExchange (64)


(1) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]

(6) Filter [codegen id : 1]
Input [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_customer_sk#9)

(7) BroadcastExchange
Input [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#9]
Join condition: None

(9) Project [codegen id : 3]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]

(10) ReusedExchange [Reuses operator id: 77]
Output [2]: [d_date_sk#15, d_year#16]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#15]
Join condition: None

(12) Project [codegen id : 3]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, d_year#16]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12, d_date_sk#15, d_year#16]

(13) HashAggregate [codegen id : 3]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, d_year#16]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#17]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#18]

(14) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#18]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, 5), ENSURE_REQUIREMENTS, [id=#19]

(15) HashAggregate [codegen id : 16]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#18]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))#20]
Results [2]: [c_customer_id#2 AS customer_id#21, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))#20,18,2) AS year_total#22]

(16) Filter [codegen id : 16]
Input [2]: [customer_id#21, year_total#22]
Condition : (isnotnull(year_total#22) AND (year_total#22 > 0.00))

(17) Scan parquet default.customer
Output [8]: [c_customer_sk#23, c_customer_id#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(18) ColumnarToRow [codegen id : 6]
Input [8]: [c_customer_sk#23, c_customer_id#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30]

(19) Filter [codegen id : 6]
Input [8]: [c_customer_sk#23, c_customer_id#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30]
Condition : (isnotnull(c_customer_sk#23) AND isnotnull(c_customer_id#24))

(20) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#31, ss_ext_discount_amt#32, ss_ext_list_price#33, ss_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#34), dynamicpruningexpression(ss_sold_date_sk#34 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(21) ColumnarToRow [codegen id : 4]
Input [4]: [ss_customer_sk#31, ss_ext_discount_amt#32, ss_ext_list_price#33, ss_sold_date_sk#34]

(22) Filter [codegen id : 4]
Input [4]: [ss_customer_sk#31, ss_ext_discount_amt#32, ss_ext_list_price#33, ss_sold_date_sk#34]
Condition : isnotnull(ss_customer_sk#31)

(23) BroadcastExchange
Input [4]: [ss_customer_sk#31, ss_ext_discount_amt#32, ss_ext_list_price#33, ss_sold_date_sk#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#23]
Right keys [1]: [ss_customer_sk#31]
Join condition: None

(25) Project [codegen id : 6]
Output [10]: [c_customer_id#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30, ss_ext_discount_amt#32, ss_ext_list_price#33, ss_sold_date_sk#34]
Input [12]: [c_customer_sk#23, c_customer_id#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30, ss_customer_sk#31, ss_ext_discount_amt#32, ss_ext_list_price#33, ss_sold_date_sk#34]

(26) ReusedExchange [Reuses operator id: 81]
Output [2]: [d_date_sk#37, d_year#38]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#34]
Right keys [1]: [d_date_sk#37]
Join condition: None

(28) Project [codegen id : 6]
Output [10]: [c_customer_id#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30, ss_ext_discount_amt#32, ss_ext_list_price#33, d_year#38]
Input [12]: [c_customer_id#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30, ss_ext_discount_amt#32, ss_ext_list_price#33, ss_sold_date_sk#34, d_date_sk#37, d_year#38]

(29) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#24, c_first_name#25, c_last_name#26, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30, ss_ext_discount_amt#32, ss_ext_list_price#33, d_year#38]
Keys [8]: [c_customer_id#24, c_first_name#25, c_last_name#26, d_year#38, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#33 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#32 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#39]
Results [9]: [c_customer_id#24, c_first_name#25, c_last_name#26, d_year#38, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30, sum#40]

(30) Exchange
Input [9]: [c_customer_id#24, c_first_name#25, c_last_name#26, d_year#38, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30, sum#40]
Arguments: hashpartitioning(c_customer_id#24, c_first_name#25, c_last_name#26, d_year#38, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30, 5), ENSURE_REQUIREMENTS, [id=#41]

(31) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#24, c_first_name#25, c_last_name#26, d_year#38, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30, sum#40]
Keys [8]: [c_customer_id#24, c_first_name#25, c_last_name#26, d_year#38, c_preferred_cust_flag#27, c_birth_country#28, c_login#29, c_email_address#30]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#33 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#32 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#33 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#32 as decimal(8,2)))), DecimalType(8,2), true)))#42]
Results [3]: [c_customer_id#24 AS customer_id#43, c_preferred_cust_flag#27 AS customer_preferred_cust_flag#44, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#33 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#32 as decimal(8,2)))), DecimalType(8,2), true)))#42,18,2) AS year_total#45]

(32) BroadcastExchange
Input [3]: [customer_id#43, customer_preferred_cust_flag#44, year_total#45]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#46]

(33) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#21]
Right keys [1]: [customer_id#43]
Join condition: None

(34) Project [codegen id : 16]
Output [4]: [customer_id#21, year_total#22, customer_preferred_cust_flag#44, year_total#45]
Input [5]: [customer_id#21, year_total#22, customer_id#43, customer_preferred_cust_flag#44, year_total#45]

(35) Scan parquet default.customer
Output [8]: [c_customer_sk#47, c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(36) ColumnarToRow [codegen id : 10]
Input [8]: [c_customer_sk#47, c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54]

(37) Filter [codegen id : 10]
Input [8]: [c_customer_sk#47, c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54]
Condition : (isnotnull(c_customer_sk#47) AND isnotnull(c_customer_id#48))

(38) Scan parquet default.web_sales
Output [4]: [ws_bill_customer_sk#55, ws_ext_discount_amt#56, ws_ext_list_price#57, ws_sold_date_sk#58]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#58), dynamicpruningexpression(ws_sold_date_sk#58 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(39) ColumnarToRow [codegen id : 8]
Input [4]: [ws_bill_customer_sk#55, ws_ext_discount_amt#56, ws_ext_list_price#57, ws_sold_date_sk#58]

(40) Filter [codegen id : 8]
Input [4]: [ws_bill_customer_sk#55, ws_ext_discount_amt#56, ws_ext_list_price#57, ws_sold_date_sk#58]
Condition : isnotnull(ws_bill_customer_sk#55)

(41) BroadcastExchange
Input [4]: [ws_bill_customer_sk#55, ws_ext_discount_amt#56, ws_ext_list_price#57, ws_sold_date_sk#58]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#59]

(42) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#47]
Right keys [1]: [ws_bill_customer_sk#55]
Join condition: None

(43) Project [codegen id : 10]
Output [10]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, ws_ext_discount_amt#56, ws_ext_list_price#57, ws_sold_date_sk#58]
Input [12]: [c_customer_sk#47, c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, ws_bill_customer_sk#55, ws_ext_discount_amt#56, ws_ext_list_price#57, ws_sold_date_sk#58]

(44) ReusedExchange [Reuses operator id: 77]
Output [2]: [d_date_sk#60, d_year#61]

(45) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#58]
Right keys [1]: [d_date_sk#60]
Join condition: None

(46) Project [codegen id : 10]
Output [10]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, ws_ext_discount_amt#56, ws_ext_list_price#57, d_year#61]
Input [12]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, ws_ext_discount_amt#56, ws_ext_list_price#57, ws_sold_date_sk#58, d_date_sk#60, d_year#61]

(47) HashAggregate [codegen id : 10]
Input [10]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, ws_ext_discount_amt#56, ws_ext_list_price#57, d_year#61]
Keys [8]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#61]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#56 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#62]
Results [9]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#61, sum#63]

(48) Exchange
Input [9]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#61, sum#63]
Arguments: hashpartitioning(c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#61, 5), ENSURE_REQUIREMENTS, [id=#64]

(49) HashAggregate [codegen id : 11]
Input [9]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#61, sum#63]
Keys [8]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#61]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#56 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#56 as decimal(8,2)))), DecimalType(8,2), true)))#65]
Results [2]: [c_customer_id#48 AS customer_id#66, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#57 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#56 as decimal(8,2)))), DecimalType(8,2), true)))#65,18,2) AS year_total#67]

(50) Filter [codegen id : 11]
Input [2]: [customer_id#66, year_total#67]
Condition : (isnotnull(year_total#67) AND (year_total#67 > 0.00))

(51) Project [codegen id : 11]
Output [2]: [customer_id#66 AS customer_id#68, year_total#67 AS year_total#69]
Input [2]: [customer_id#66, year_total#67]

(52) BroadcastExchange
Input [2]: [customer_id#68, year_total#69]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#70]

(53) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#21]
Right keys [1]: [customer_id#68]
Join condition: None

(54) Project [codegen id : 16]
Output [5]: [customer_id#21, year_total#22, customer_preferred_cust_flag#44, year_total#45, year_total#69]
Input [6]: [customer_id#21, year_total#22, customer_preferred_cust_flag#44, year_total#45, customer_id#68, year_total#69]

(55) Scan parquet default.customer
Output [8]: [c_customer_sk#71, c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(56) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#71, c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78]

(57) Filter [codegen id : 14]
Input [8]: [c_customer_sk#71, c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78]
Condition : (isnotnull(c_customer_sk#71) AND isnotnull(c_customer_id#72))

(58) Scan parquet default.web_sales
Output [4]: [ws_bill_customer_sk#79, ws_ext_discount_amt#80, ws_ext_list_price#81, ws_sold_date_sk#82]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#82), dynamicpruningexpression(ws_sold_date_sk#82 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(59) ColumnarToRow [codegen id : 12]
Input [4]: [ws_bill_customer_sk#79, ws_ext_discount_amt#80, ws_ext_list_price#81, ws_sold_date_sk#82]

(60) Filter [codegen id : 12]
Input [4]: [ws_bill_customer_sk#79, ws_ext_discount_amt#80, ws_ext_list_price#81, ws_sold_date_sk#82]
Condition : isnotnull(ws_bill_customer_sk#79)

(61) BroadcastExchange
Input [4]: [ws_bill_customer_sk#79, ws_ext_discount_amt#80, ws_ext_list_price#81, ws_sold_date_sk#82]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#83]

(62) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#71]
Right keys [1]: [ws_bill_customer_sk#79]
Join condition: None

(63) Project [codegen id : 14]
Output [10]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, ws_ext_discount_amt#80, ws_ext_list_price#81, ws_sold_date_sk#82]
Input [12]: [c_customer_sk#71, c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, ws_bill_customer_sk#79, ws_ext_discount_amt#80, ws_ext_list_price#81, ws_sold_date_sk#82]

(64) ReusedExchange [Reuses operator id: 81]
Output [2]: [d_date_sk#84, d_year#85]

(65) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#82]
Right keys [1]: [d_date_sk#84]
Join condition: None

(66) Project [codegen id : 14]
Output [10]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, ws_ext_discount_amt#80, ws_ext_list_price#81, d_year#85]
Input [12]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, ws_ext_discount_amt#80, ws_ext_list_price#81, ws_sold_date_sk#82, d_date_sk#84, d_year#85]

(67) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, ws_ext_discount_amt#80, ws_ext_list_price#81, d_year#85]
Keys [8]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#85]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#81 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#80 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#86]
Results [9]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#85, sum#87]

(68) Exchange
Input [9]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#85, sum#87]
Arguments: hashpartitioning(c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#85, 5), ENSURE_REQUIREMENTS, [id=#88]

(69) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#85, sum#87]
Keys [8]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#85]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#81 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#80 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#81 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#80 as decimal(8,2)))), DecimalType(8,2), true)))#89]
Results [2]: [c_customer_id#72 AS customer_id#90, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#81 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#80 as decimal(8,2)))), DecimalType(8,2), true)))#89,18,2) AS year_total#91]

(70) BroadcastExchange
Input [2]: [customer_id#90, year_total#91]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#92]

(71) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#21]
Right keys [1]: [customer_id#90]
Join condition: (CASE WHEN (year_total#69 > 0.00) THEN CheckOverflow((promote_precision(year_total#91) / promote_precision(year_total#69)), DecimalType(38,20), true) ELSE null END > CASE WHEN (year_total#22 > 0.00) THEN CheckOverflow((promote_precision(year_total#45) / promote_precision(year_total#22)), DecimalType(38,20), true) ELSE null END)

(72) Project [codegen id : 16]
Output [1]: [customer_preferred_cust_flag#44]
Input [7]: [customer_id#21, year_total#22, customer_preferred_cust_flag#44, year_total#45, year_total#69, customer_id#90, year_total#91]

(73) TakeOrderedAndProject
Input [1]: [customer_preferred_cust_flag#44]
Arguments: 100, [customer_preferred_cust_flag#44 ASC NULLS FIRST], [customer_preferred_cust_flag#44]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (77)
+- * Filter (76)
   +- * ColumnarToRow (75)
      +- Scan parquet default.date_dim (74)


(74) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(75) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#15, d_year#16]

(76) Filter [codegen id : 1]
Input [2]: [d_date_sk#15, d_year#16]
Condition : ((isnotnull(d_year#16) AND (d_year#16 = 2001)) AND isnotnull(d_date_sk#15))

(77) BroadcastExchange
Input [2]: [d_date_sk#15, d_year#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#93]

Subquery:2 Hosting operator id = 20 Hosting Expression = ss_sold_date_sk#34 IN dynamicpruning#35
BroadcastExchange (81)
+- * Filter (80)
   +- * ColumnarToRow (79)
      +- Scan parquet default.date_dim (78)


(78) Scan parquet default.date_dim
Output [2]: [d_date_sk#37, d_year#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(79) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#37, d_year#38]

(80) Filter [codegen id : 1]
Input [2]: [d_date_sk#37, d_year#38]
Condition : ((isnotnull(d_year#38) AND (d_year#38 = 2002)) AND isnotnull(d_date_sk#37))

(81) BroadcastExchange
Input [2]: [d_date_sk#37, d_year#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#94]

Subquery:3 Hosting operator id = 38 Hosting Expression = ws_sold_date_sk#58 IN dynamicpruning#13

Subquery:4 Hosting operator id = 58 Hosting Expression = ws_sold_date_sk#82 IN dynamicpruning#35


