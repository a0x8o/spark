== Physical Plan ==
TakeOrderedAndProject (59)
+- * Project (58)
   +- * BroadcastHashJoin Inner BuildRight (57)
      :- * Project (36)
      :  +- * BroadcastHashJoin Inner BuildLeft (35)
      :     :- BroadcastExchange (11)
      :     :  +- * Project (10)
      :     :     +- * BroadcastHashJoin Inner BuildRight (9)
      :     :        :- * Filter (3)
      :     :        :  +- * ColumnarToRow (2)
      :     :        :     +- Scan parquet default.customer (1)
      :     :        +- BroadcastExchange (8)
      :     :           +- * Project (7)
      :     :              +- * Filter (6)
      :     :                 +- * ColumnarToRow (5)
      :     :                    +- Scan parquet default.customer_address (4)
      :     +- * Filter (34)
      :        +- * HashAggregate (33)
      :           +- Exchange (32)
      :              +- * HashAggregate (31)
      :                 +- * Project (30)
      :                    +- * SortMergeJoin Inner (29)
      :                       :- * Sort (23)
      :                       :  +- Exchange (22)
      :                       :     +- * Project (21)
      :                       :        +- * BroadcastHashJoin Inner BuildRight (20)
      :                       :           :- * Filter (14)
      :                       :           :  +- * ColumnarToRow (13)
      :                       :           :     +- Scan parquet default.web_returns (12)
      :                       :           +- BroadcastExchange (19)
      :                       :              +- * Project (18)
      :                       :                 +- * Filter (17)
      :                       :                    +- * ColumnarToRow (16)
      :                       :                       +- Scan parquet default.date_dim (15)
      :                       +- * Sort (28)
      :                          +- Exchange (27)
      :                             +- * Filter (26)
      :                                +- * ColumnarToRow (25)
      :                                   +- Scan parquet default.customer_address (24)
      +- BroadcastExchange (56)
         +- * Filter (55)
            +- * HashAggregate (54)
               +- Exchange (53)
                  +- * HashAggregate (52)
                     +- * HashAggregate (51)
                        +- Exchange (50)
                           +- * HashAggregate (49)
                              +- * Project (48)
                                 +- * SortMergeJoin Inner (47)
                                    :- * Sort (44)
                                    :  +- Exchange (43)
                                    :     +- * Project (42)
                                    :        +- * BroadcastHashJoin Inner BuildRight (41)
                                    :           :- * Filter (39)
                                    :           :  +- * ColumnarToRow (38)
                                    :           :     +- Scan parquet default.web_returns (37)
                                    :           +- ReusedExchange (40)
                                    +- * Sort (46)
                                       +- ReusedExchange (45)


(1) Scan parquet default.customer
Output [14]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(2) ColumnarToRow [codegen id : 2]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14]

(3) Filter [codegen id : 2]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#3))

(4) Scan parquet default.customer_address
Output [2]: [ca_address_sk#15, ca_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#15, ca_state#16]

(6) Filter [codegen id : 1]
Input [2]: [ca_address_sk#15, ca_state#16]
Condition : ((isnotnull(ca_state#16) AND (ca_state#16 = GA)) AND isnotnull(ca_address_sk#15))

(7) Project [codegen id : 1]
Output [1]: [ca_address_sk#15]
Input [2]: [ca_address_sk#15, ca_state#16]

(8) BroadcastExchange
Input [1]: [ca_address_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#15]
Join condition: None

(10) Project [codegen id : 2]
Output [13]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14]
Input [15]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ca_address_sk#15]

(11) BroadcastExchange
Input [13]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(12) Scan parquet default.web_returns
Output [4]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21, wr_returned_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#22), dynamicpruningexpression(wr_returned_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(13) ColumnarToRow [codegen id : 4]
Input [4]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21, wr_returned_date_sk#22]

(14) Filter [codegen id : 4]
Input [4]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21, wr_returned_date_sk#22]
Condition : (isnotnull(wr_returning_addr_sk#20) AND isnotnull(wr_returning_customer_sk#19))

(15) Scan parquet default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(16) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#24, d_year#25]

(17) Filter [codegen id : 3]
Input [2]: [d_date_sk#24, d_year#25]
Condition : ((isnotnull(d_year#25) AND (d_year#25 = 2002)) AND isnotnull(d_date_sk#24))

(18) Project [codegen id : 3]
Output [1]: [d_date_sk#24]
Input [2]: [d_date_sk#24, d_year#25]

(19) BroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [wr_returned_date_sk#22]
Right keys [1]: [d_date_sk#24]
Join condition: None

(21) Project [codegen id : 4]
Output [3]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21]
Input [5]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21, wr_returned_date_sk#22, d_date_sk#24]

(22) Exchange
Input [3]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21]
Arguments: hashpartitioning(wr_returning_addr_sk#20, 5), ENSURE_REQUIREMENTS, [id=#27]

(23) Sort [codegen id : 5]
Input [3]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21]
Arguments: [wr_returning_addr_sk#20 ASC NULLS FIRST], false, 0

(24) Scan parquet default.customer_address
Output [2]: [ca_address_sk#28, ca_state#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(25) ColumnarToRow [codegen id : 6]
Input [2]: [ca_address_sk#28, ca_state#29]

(26) Filter [codegen id : 6]
Input [2]: [ca_address_sk#28, ca_state#29]
Condition : (isnotnull(ca_address_sk#28) AND isnotnull(ca_state#29))

(27) Exchange
Input [2]: [ca_address_sk#28, ca_state#29]
Arguments: hashpartitioning(ca_address_sk#28, 5), ENSURE_REQUIREMENTS, [id=#30]

(28) Sort [codegen id : 7]
Input [2]: [ca_address_sk#28, ca_state#29]
Arguments: [ca_address_sk#28 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 8]
Left keys [1]: [wr_returning_addr_sk#20]
Right keys [1]: [ca_address_sk#28]
Join condition: None

(30) Project [codegen id : 8]
Output [3]: [wr_returning_customer_sk#19, wr_return_amt#21, ca_state#29]
Input [5]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21, ca_address_sk#28, ca_state#29]

(31) HashAggregate [codegen id : 8]
Input [3]: [wr_returning_customer_sk#19, wr_return_amt#21, ca_state#29]
Keys [2]: [wr_returning_customer_sk#19, ca_state#29]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#21))]
Aggregate Attributes [1]: [sum#31]
Results [3]: [wr_returning_customer_sk#19, ca_state#29, sum#32]

(32) Exchange
Input [3]: [wr_returning_customer_sk#19, ca_state#29, sum#32]
Arguments: hashpartitioning(wr_returning_customer_sk#19, ca_state#29, 5), ENSURE_REQUIREMENTS, [id=#33]

(33) HashAggregate
Input [3]: [wr_returning_customer_sk#19, ca_state#29, sum#32]
Keys [2]: [wr_returning_customer_sk#19, ca_state#29]
Functions [1]: [sum(UnscaledValue(wr_return_amt#21))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#21))#34]
Results [3]: [wr_returning_customer_sk#19 AS ctr_customer_sk#35, ca_state#29 AS ctr_state#36, MakeDecimal(sum(UnscaledValue(wr_return_amt#21))#34,17,2) AS ctr_total_return#37]

(34) Filter
Input [3]: [ctr_customer_sk#35, ctr_state#36, ctr_total_return#37]
Condition : isnotnull(ctr_total_return#37)

(35) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ctr_customer_sk#35]
Join condition: None

(36) Project [codegen id : 17]
Output [14]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_state#36, ctr_total_return#37]
Input [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_customer_sk#35, ctr_state#36, ctr_total_return#37]

(37) Scan parquet default.web_returns
Output [4]: [wr_returning_customer_sk#38, wr_returning_addr_sk#39, wr_return_amt#40, wr_returned_date_sk#41]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#41), dynamicpruningexpression(wr_returned_date_sk#41 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(38) ColumnarToRow [codegen id : 10]
Input [4]: [wr_returning_customer_sk#38, wr_returning_addr_sk#39, wr_return_amt#40, wr_returned_date_sk#41]

(39) Filter [codegen id : 10]
Input [4]: [wr_returning_customer_sk#38, wr_returning_addr_sk#39, wr_return_amt#40, wr_returned_date_sk#41]
Condition : isnotnull(wr_returning_addr_sk#39)

(40) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#42]

(41) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [wr_returned_date_sk#41]
Right keys [1]: [d_date_sk#42]
Join condition: None

(42) Project [codegen id : 10]
Output [3]: [wr_returning_customer_sk#38, wr_returning_addr_sk#39, wr_return_amt#40]
Input [5]: [wr_returning_customer_sk#38, wr_returning_addr_sk#39, wr_return_amt#40, wr_returned_date_sk#41, d_date_sk#42]

(43) Exchange
Input [3]: [wr_returning_customer_sk#38, wr_returning_addr_sk#39, wr_return_amt#40]
Arguments: hashpartitioning(wr_returning_addr_sk#39, 5), ENSURE_REQUIREMENTS, [id=#43]

(44) Sort [codegen id : 11]
Input [3]: [wr_returning_customer_sk#38, wr_returning_addr_sk#39, wr_return_amt#40]
Arguments: [wr_returning_addr_sk#39 ASC NULLS FIRST], false, 0

(45) ReusedExchange [Reuses operator id: 27]
Output [2]: [ca_address_sk#44, ca_state#45]

(46) Sort [codegen id : 13]
Input [2]: [ca_address_sk#44, ca_state#45]
Arguments: [ca_address_sk#44 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 14]
Left keys [1]: [wr_returning_addr_sk#39]
Right keys [1]: [ca_address_sk#44]
Join condition: None

(48) Project [codegen id : 14]
Output [3]: [wr_returning_customer_sk#38, wr_return_amt#40, ca_state#45]
Input [5]: [wr_returning_customer_sk#38, wr_returning_addr_sk#39, wr_return_amt#40, ca_address_sk#44, ca_state#45]

(49) HashAggregate [codegen id : 14]
Input [3]: [wr_returning_customer_sk#38, wr_return_amt#40, ca_state#45]
Keys [2]: [wr_returning_customer_sk#38, ca_state#45]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#40))]
Aggregate Attributes [1]: [sum#46]
Results [3]: [wr_returning_customer_sk#38, ca_state#45, sum#47]

(50) Exchange
Input [3]: [wr_returning_customer_sk#38, ca_state#45, sum#47]
Arguments: hashpartitioning(wr_returning_customer_sk#38, ca_state#45, 5), ENSURE_REQUIREMENTS, [id=#48]

(51) HashAggregate [codegen id : 15]
Input [3]: [wr_returning_customer_sk#38, ca_state#45, sum#47]
Keys [2]: [wr_returning_customer_sk#38, ca_state#45]
Functions [1]: [sum(UnscaledValue(wr_return_amt#40))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#40))#49]
Results [2]: [ca_state#45 AS ctr_state#36, MakeDecimal(sum(UnscaledValue(wr_return_amt#40))#49,17,2) AS ctr_total_return#37]

(52) HashAggregate [codegen id : 15]
Input [2]: [ctr_state#36, ctr_total_return#37]
Keys [1]: [ctr_state#36]
Functions [1]: [partial_avg(ctr_total_return#37)]
Aggregate Attributes [2]: [sum#50, count#51]
Results [3]: [ctr_state#36, sum#52, count#53]

(53) Exchange
Input [3]: [ctr_state#36, sum#52, count#53]
Arguments: hashpartitioning(ctr_state#36, 5), ENSURE_REQUIREMENTS, [id=#54]

(54) HashAggregate [codegen id : 16]
Input [3]: [ctr_state#36, sum#52, count#53]
Keys [1]: [ctr_state#36]
Functions [1]: [avg(ctr_total_return#37)]
Aggregate Attributes [1]: [avg(ctr_total_return#37)#55]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#37)#55) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#56, ctr_state#36 AS ctr_state#36#57]

(55) Filter [codegen id : 16]
Input [2]: [(avg(ctr_total_return) * 1.2)#56, ctr_state#36#57]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#56)

(56) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#56, ctr_state#36#57]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#58]

(57) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ctr_state#36]
Right keys [1]: [ctr_state#36#57]
Join condition: (cast(ctr_total_return#37 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#56)

(58) Project [codegen id : 17]
Output [13]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_total_return#37]
Input [16]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_state#36, ctr_total_return#37, (avg(ctr_total_return) * 1.2)#56, ctr_state#36#57]

(59) TakeOrderedAndProject
Input [13]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_total_return#37]
Arguments: 100, [c_customer_id#2 ASC NULLS FIRST, c_salutation#4 ASC NULLS FIRST, c_first_name#5 ASC NULLS FIRST, c_last_name#6 ASC NULLS FIRST, c_preferred_cust_flag#7 ASC NULLS FIRST, c_birth_day#8 ASC NULLS FIRST, c_birth_month#9 ASC NULLS FIRST, c_birth_year#10 ASC NULLS FIRST, c_birth_country#11 ASC NULLS FIRST, c_login#12 ASC NULLS FIRST, c_email_address#13 ASC NULLS FIRST, c_last_review_date#14 ASC NULLS FIRST, ctr_total_return#37 ASC NULLS FIRST], [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_total_return#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 12 Hosting Expression = wr_returned_date_sk#22 IN dynamicpruning#23
ReusedExchange (60)


(60) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#24]

Subquery:2 Hosting operator id = 37 Hosting Expression = wr_returned_date_sk#41 IN dynamicpruning#23


