== Physical Plan ==
TakeOrderedAndProject (59)
+- * Project (58)
   +- * BroadcastHashJoin Inner BuildRight (57)
      :- * Project (45)
      :  +- * BroadcastHashJoin Inner BuildRight (44)
      :     :- * Filter (23)
      :     :  +- * HashAggregate (22)
      :     :     +- Exchange (21)
      :     :        +- * HashAggregate (20)
      :     :           +- * Project (19)
      :     :              +- * SortMergeJoin Inner (18)
      :     :                 :- * Sort (12)
      :     :                 :  +- Exchange (11)
      :     :                 :     +- * Project (10)
      :     :                 :        +- * BroadcastHashJoin Inner BuildRight (9)
      :     :                 :           :- * Filter (3)
      :     :                 :           :  +- * ColumnarToRow (2)
      :     :                 :           :     +- Scan parquet default.web_returns (1)
      :     :                 :           +- BroadcastExchange (8)
      :     :                 :              +- * Project (7)
      :     :                 :                 +- * Filter (6)
      :     :                 :                    +- * ColumnarToRow (5)
      :     :                 :                       +- Scan parquet default.date_dim (4)
      :     :                 +- * Sort (17)
      :     :                    +- Exchange (16)
      :     :                       +- * Filter (15)
      :     :                          +- * ColumnarToRow (14)
      :     :                             +- Scan parquet default.customer_address (13)
      :     +- BroadcastExchange (43)
      :        +- * Filter (42)
      :           +- * HashAggregate (41)
      :              +- Exchange (40)
      :                 +- * HashAggregate (39)
      :                    +- * HashAggregate (38)
      :                       +- Exchange (37)
      :                          +- * HashAggregate (36)
      :                             +- * Project (35)
      :                                +- * SortMergeJoin Inner (34)
      :                                   :- * Sort (31)
      :                                   :  +- Exchange (30)
      :                                   :     +- * Project (29)
      :                                   :        +- * BroadcastHashJoin Inner BuildRight (28)
      :                                   :           :- * Filter (26)
      :                                   :           :  +- * ColumnarToRow (25)
      :                                   :           :     +- Scan parquet default.web_returns (24)
      :                                   :           +- ReusedExchange (27)
      :                                   +- * Sort (33)
      :                                      +- ReusedExchange (32)
      +- BroadcastExchange (56)
         +- * Project (55)
            +- * BroadcastHashJoin Inner BuildRight (54)
               :- * Filter (48)
               :  +- * ColumnarToRow (47)
               :     +- Scan parquet default.customer (46)
               +- BroadcastExchange (53)
                  +- * Project (52)
                     +- * Filter (51)
                        +- * ColumnarToRow (50)
                           +- Scan parquet default.customer_address (49)


(1) Scan parquet default.web_returns
Output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#4), dynamicpruningexpression(wr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returning_customer_sk:bigint,wr_returning_addr_sk:bigint,wr_return_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Condition : (isnotnull(wr_returning_addr_sk#2) AND isnotnull(wr_returning_customer_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2002)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [wr_returned_date_sk#4]
Right keys [1]: [cast(d_date_sk#6 as bigint)]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4, d_date_sk#6]

(11) Exchange
Input [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Arguments: hashpartitioning(wr_returning_addr_sk#2, 5), ENSURE_REQUIREMENTS, [id=#9]

(12) Sort [codegen id : 3]
Input [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Arguments: [wr_returning_addr_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer_address
Output [2]: [ca_address_sk#10, ca_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(14) ColumnarToRow [codegen id : 4]
Input [2]: [ca_address_sk#10, ca_state#11]

(15) Filter [codegen id : 4]
Input [2]: [ca_address_sk#10, ca_state#11]
Condition : (isnotnull(ca_address_sk#10) AND isnotnull(ca_state#11))

(16) Exchange
Input [2]: [ca_address_sk#10, ca_state#11]
Arguments: hashpartitioning(cast(ca_address_sk#10 as bigint), 5), ENSURE_REQUIREMENTS, [id=#12]

(17) Sort [codegen id : 5]
Input [2]: [ca_address_sk#10, ca_state#11]
Arguments: [cast(ca_address_sk#10 as bigint) ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [wr_returning_addr_sk#2]
Right keys [1]: [cast(ca_address_sk#10 as bigint)]
Join condition: None

(19) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#11]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, ca_address_sk#10, ca_state#11]

(20) HashAggregate [codegen id : 6]
Input [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#11]
Keys [2]: [wr_returning_customer_sk#1, ca_state#11]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum#13]
Results [3]: [wr_returning_customer_sk#1, ca_state#11, sum#14]

(21) Exchange
Input [3]: [wr_returning_customer_sk#1, ca_state#11, sum#14]
Arguments: hashpartitioning(wr_returning_customer_sk#1, ca_state#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(22) HashAggregate [codegen id : 17]
Input [3]: [wr_returning_customer_sk#1, ca_state#11, sum#14]
Keys [2]: [wr_returning_customer_sk#1, ca_state#11]
Functions [1]: [sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#3))#16]
Results [3]: [wr_returning_customer_sk#1 AS ctr_customer_sk#17, ca_state#11 AS ctr_state#18, MakeDecimal(sum(UnscaledValue(wr_return_amt#3))#16,17,2) AS ctr_total_return#19]

(23) Filter [codegen id : 17]
Input [3]: [ctr_customer_sk#17, ctr_state#18, ctr_total_return#19]
Condition : isnotnull(ctr_total_return#19)

(24) Scan parquet default.web_returns
Output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#4), dynamicpruningexpression(wr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returning_customer_sk:bigint,wr_returning_addr_sk:bigint,wr_return_amt:decimal(7,2)>

(25) ColumnarToRow [codegen id : 8]
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]

(26) Filter [codegen id : 8]
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Condition : isnotnull(wr_returning_addr_sk#2)

(27) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#6]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [wr_returned_date_sk#4]
Right keys [1]: [cast(d_date_sk#6 as bigint)]
Join condition: None

(29) Project [codegen id : 8]
Output [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4, d_date_sk#6]

(30) Exchange
Input [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Arguments: hashpartitioning(wr_returning_addr_sk#2, 5), ENSURE_REQUIREMENTS, [id=#20]

(31) Sort [codegen id : 9]
Input [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Arguments: [wr_returning_addr_sk#2 ASC NULLS FIRST], false, 0

(32) ReusedExchange [Reuses operator id: 16]
Output [2]: [ca_address_sk#10, ca_state#11]

(33) Sort [codegen id : 11]
Input [2]: [ca_address_sk#10, ca_state#11]
Arguments: [cast(ca_address_sk#10 as bigint) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 12]
Left keys [1]: [wr_returning_addr_sk#2]
Right keys [1]: [cast(ca_address_sk#10 as bigint)]
Join condition: None

(35) Project [codegen id : 12]
Output [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#11]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, ca_address_sk#10, ca_state#11]

(36) HashAggregate [codegen id : 12]
Input [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#11]
Keys [2]: [wr_returning_customer_sk#1, ca_state#11]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum#21]
Results [3]: [wr_returning_customer_sk#1, ca_state#11, sum#22]

(37) Exchange
Input [3]: [wr_returning_customer_sk#1, ca_state#11, sum#22]
Arguments: hashpartitioning(wr_returning_customer_sk#1, ca_state#11, 5), ENSURE_REQUIREMENTS, [id=#23]

(38) HashAggregate [codegen id : 13]
Input [3]: [wr_returning_customer_sk#1, ca_state#11, sum#22]
Keys [2]: [wr_returning_customer_sk#1, ca_state#11]
Functions [1]: [sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#3))#24]
Results [2]: [ca_state#11 AS ctr_state#18, MakeDecimal(sum(UnscaledValue(wr_return_amt#3))#24,17,2) AS ctr_total_return#19]

(39) HashAggregate [codegen id : 13]
Input [2]: [ctr_state#18, ctr_total_return#19]
Keys [1]: [ctr_state#18]
Functions [1]: [partial_avg(ctr_total_return#19)]
Aggregate Attributes [2]: [sum#25, count#26]
Results [3]: [ctr_state#18, sum#27, count#28]

(40) Exchange
Input [3]: [ctr_state#18, sum#27, count#28]
Arguments: hashpartitioning(ctr_state#18, 5), ENSURE_REQUIREMENTS, [id=#29]

(41) HashAggregate [codegen id : 14]
Input [3]: [ctr_state#18, sum#27, count#28]
Keys [1]: [ctr_state#18]
Functions [1]: [avg(ctr_total_return#19)]
Aggregate Attributes [1]: [avg(ctr_total_return#19)#30]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#19)#30) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#31, ctr_state#18 AS ctr_state#18#32]

(42) Filter [codegen id : 14]
Input [2]: [(avg(ctr_total_return) * 1.2)#31, ctr_state#18#32]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#31)

(43) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#31, ctr_state#18#32]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#33]

(44) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ctr_state#18]
Right keys [1]: [ctr_state#18#32]
Join condition: (cast(ctr_total_return#19 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#31)

(45) Project [codegen id : 17]
Output [2]: [ctr_customer_sk#17, ctr_total_return#19]
Input [5]: [ctr_customer_sk#17, ctr_state#18, ctr_total_return#19, (avg(ctr_total_return) * 1.2)#31, ctr_state#18#32]

(46) Scan parquet default.customer
Output [14]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_day#41, c_birth_month#42, c_birth_year#43, c_birth_country#44, c_login#45, c_email_address#46, c_last_review_date#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(47) ColumnarToRow [codegen id : 16]
Input [14]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_day#41, c_birth_month#42, c_birth_year#43, c_birth_country#44, c_login#45, c_email_address#46, c_last_review_date#47]

(48) Filter [codegen id : 16]
Input [14]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_day#41, c_birth_month#42, c_birth_year#43, c_birth_country#44, c_login#45, c_email_address#46, c_last_review_date#47]
Condition : (isnotnull(c_customer_sk#34) AND isnotnull(c_current_addr_sk#36))

(49) Scan parquet default.customer_address
Output [2]: [ca_address_sk#10, ca_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(50) ColumnarToRow [codegen id : 15]
Input [2]: [ca_address_sk#10, ca_state#11]

(51) Filter [codegen id : 15]
Input [2]: [ca_address_sk#10, ca_state#11]
Condition : ((isnotnull(ca_state#11) AND (ca_state#11 = GA)) AND isnotnull(ca_address_sk#10))

(52) Project [codegen id : 15]
Output [1]: [ca_address_sk#10]
Input [2]: [ca_address_sk#10, ca_state#11]

(53) BroadcastExchange
Input [1]: [ca_address_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#48]

(54) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#36]
Right keys [1]: [ca_address_sk#10]
Join condition: None

(55) Project [codegen id : 16]
Output [13]: [c_customer_sk#34, c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_day#41, c_birth_month#42, c_birth_year#43, c_birth_country#44, c_login#45, c_email_address#46, c_last_review_date#47]
Input [15]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_day#41, c_birth_month#42, c_birth_year#43, c_birth_country#44, c_login#45, c_email_address#46, c_last_review_date#47, ca_address_sk#10]

(56) BroadcastExchange
Input [13]: [c_customer_sk#34, c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_day#41, c_birth_month#42, c_birth_year#43, c_birth_country#44, c_login#45, c_email_address#46, c_last_review_date#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#49]

(57) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ctr_customer_sk#17]
Right keys [1]: [cast(c_customer_sk#34 as bigint)]
Join condition: None

(58) Project [codegen id : 17]
Output [13]: [c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_day#41, c_birth_month#42, c_birth_year#43, c_birth_country#44, c_login#45, c_email_address#46, c_last_review_date#47, ctr_total_return#19]
Input [15]: [ctr_customer_sk#17, ctr_total_return#19, c_customer_sk#34, c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_day#41, c_birth_month#42, c_birth_year#43, c_birth_country#44, c_login#45, c_email_address#46, c_last_review_date#47]

(59) TakeOrderedAndProject
Input [13]: [c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_day#41, c_birth_month#42, c_birth_year#43, c_birth_country#44, c_login#45, c_email_address#46, c_last_review_date#47, ctr_total_return#19]
Arguments: 100, [c_customer_id#35 ASC NULLS FIRST, c_salutation#37 ASC NULLS FIRST, c_first_name#38 ASC NULLS FIRST, c_last_name#39 ASC NULLS FIRST, c_preferred_cust_flag#40 ASC NULLS FIRST, c_birth_day#41 ASC NULLS FIRST, c_birth_month#42 ASC NULLS FIRST, c_birth_year#43 ASC NULLS FIRST, c_birth_country#44 ASC NULLS FIRST, c_login#45 ASC NULLS FIRST, c_email_address#46 ASC NULLS FIRST, c_last_review_date#47 ASC NULLS FIRST, ctr_total_return#19 ASC NULLS FIRST], [c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, c_preferred_cust_flag#40, c_birth_day#41, c_birth_month#42, c_birth_year#43, c_birth_country#44, c_login#45, c_email_address#46, c_last_review_date#47, ctr_total_return#19]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = wr_returned_date_sk#4 IN dynamicpruning#5
ReusedExchange (60)


(60) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#6]

Subquery:2 Hosting operator id = 24 Hosting Expression = wr_returned_date_sk#4 IN dynamicpruning#5


