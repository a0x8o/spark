== Physical Plan ==
TakeOrderedAndProject (51)
+- * Project (50)
   +- * SortMergeJoin Inner (49)
      :- * Sort (14)
      :  +- Exchange (13)
      :     +- * Project (12)
      :        +- * SortMergeJoin Inner (11)
      :           :- * Sort (5)
      :           :  +- Exchange (4)
      :           :     +- * Filter (3)
      :           :        +- * ColumnarToRow (2)
      :           :           +- Scan parquet default.customer (1)
      :           +- * Sort (10)
      :              +- Exchange (9)
      :                 +- * Filter (8)
      :                    +- * ColumnarToRow (7)
      :                       +- Scan parquet default.customer_address (6)
      +- * Sort (48)
         +- Exchange (47)
            +- * HashAggregate (46)
               +- * HashAggregate (45)
                  +- * Project (44)
                     +- * SortMergeJoin Inner (43)
                        :- * Sort (40)
                        :  +- Exchange (39)
                        :     +- * Project (38)
                        :        +- * BroadcastHashJoin Inner BuildRight (37)
                        :           :- * Project (31)
                        :           :  +- * BroadcastHashJoin Inner BuildRight (30)
                        :           :     :- * Project (24)
                        :           :     :  +- * BroadcastHashJoin Inner BuildRight (23)
                        :           :     :     :- * Filter (17)
                        :           :     :     :  +- * ColumnarToRow (16)
                        :           :     :     :     +- Scan parquet default.store_sales (15)
                        :           :     :     +- BroadcastExchange (22)
                        :           :     :        +- * Project (21)
                        :           :     :           +- * Filter (20)
                        :           :     :              +- * ColumnarToRow (19)
                        :           :     :                 +- Scan parquet default.date_dim (18)
                        :           :     +- BroadcastExchange (29)
                        :           :        +- * Project (28)
                        :           :           +- * Filter (27)
                        :           :              +- * ColumnarToRow (26)
                        :           :                 +- Scan parquet default.store (25)
                        :           +- BroadcastExchange (36)
                        :              +- * Project (35)
                        :                 +- * Filter (34)
                        :                    +- * ColumnarToRow (33)
                        :                       +- Scan parquet default.household_demographics (32)
                        +- * Sort (42)
                           +- ReusedExchange (41)


(1) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]

(3) Filter [codegen id : 1]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#2))

(4) Exchange
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Arguments: hashpartitioning(c_current_addr_sk#2, 5), ENSURE_REQUIREMENTS, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Arguments: [c_current_addr_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.customer_address
Output [2]: [ca_address_sk#6, ca_city#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#6, ca_city#7]

(8) Filter [codegen id : 3]
Input [2]: [ca_address_sk#6, ca_city#7]
Condition : (isnotnull(ca_address_sk#6) AND isnotnull(ca_city#7))

(9) Exchange
Input [2]: [ca_address_sk#6, ca_city#7]
Arguments: hashpartitioning(ca_address_sk#6, 5), ENSURE_REQUIREMENTS, [id=#8]

(10) Sort [codegen id : 4]
Input [2]: [ca_address_sk#6, ca_city#7]
Arguments: [ca_address_sk#6 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [1]: [c_current_addr_sk#2]
Right keys [1]: [ca_address_sk#6]
Join condition: None

(12) Project [codegen id : 5]
Output [4]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7]
Input [6]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4, ca_address_sk#6, ca_city#7]

(13) Exchange
Input [4]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(14) Sort [codegen id : 6]
Input [4]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(15) Scan parquet default.store_sales
Output [8]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ss_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#17), dynamicpruningexpression(ss_sold_date_sk#17 IN dynamicpruning#18)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(16) ColumnarToRow [codegen id : 10]
Input [8]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ss_sold_date_sk#17]

(17) Filter [codegen id : 10]
Input [8]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ss_sold_date_sk#17]
Condition : (((isnotnull(ss_store_sk#13) AND isnotnull(ss_hdemo_sk#11)) AND isnotnull(ss_addr_sk#12)) AND isnotnull(ss_customer_sk#10))

(18) Scan parquet default.date_dim
Output [3]: [d_date_sk#19, d_year#20, d_dow#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_dow, [6,0]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(19) ColumnarToRow [codegen id : 7]
Input [3]: [d_date_sk#19, d_year#20, d_dow#21]

(20) Filter [codegen id : 7]
Input [3]: [d_date_sk#19, d_year#20, d_dow#21]
Condition : ((d_dow#21 IN (6,0) AND d_year#20 IN (1999,2000,2001)) AND isnotnull(d_date_sk#19))

(21) Project [codegen id : 7]
Output [1]: [d_date_sk#19]
Input [3]: [d_date_sk#19, d_year#20, d_dow#21]

(22) BroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(23) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#17]
Right keys [1]: [d_date_sk#19]
Join condition: None

(24) Project [codegen id : 10]
Output [7]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16]
Input [9]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ss_sold_date_sk#17, d_date_sk#19]

(25) Scan parquet default.store
Output [2]: [s_store_sk#23, s_city#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Fairview,Midway]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(26) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#23, s_city#24]

(27) Filter [codegen id : 8]
Input [2]: [s_store_sk#23, s_city#24]
Condition : (s_city#24 IN (Fairview,Midway) AND isnotnull(s_store_sk#23))

(28) Project [codegen id : 8]
Output [1]: [s_store_sk#23]
Input [2]: [s_store_sk#23, s_city#24]

(29) BroadcastExchange
Input [1]: [s_store_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(30) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#13]
Right keys [1]: [s_store_sk#23]
Join condition: None

(31) Project [codegen id : 10]
Output [6]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16]
Input [8]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, s_store_sk#23]

(32) Scan parquet default.household_demographics
Output [3]: [hd_demo_sk#26, hd_dep_count#27, hd_vehicle_count#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(33) ColumnarToRow [codegen id : 9]
Input [3]: [hd_demo_sk#26, hd_dep_count#27, hd_vehicle_count#28]

(34) Filter [codegen id : 9]
Input [3]: [hd_demo_sk#26, hd_dep_count#27, hd_vehicle_count#28]
Condition : (((hd_dep_count#27 = 4) OR (hd_vehicle_count#28 = 3)) AND isnotnull(hd_demo_sk#26))

(35) Project [codegen id : 9]
Output [1]: [hd_demo_sk#26]
Input [3]: [hd_demo_sk#26, hd_dep_count#27, hd_vehicle_count#28]

(36) BroadcastExchange
Input [1]: [hd_demo_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(37) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_hdemo_sk#11]
Right keys [1]: [hd_demo_sk#26]
Join condition: None

(38) Project [codegen id : 10]
Output [5]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16]
Input [7]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, hd_demo_sk#26]

(39) Exchange
Input [5]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16]
Arguments: hashpartitioning(ss_addr_sk#12, 5), ENSURE_REQUIREMENTS, [id=#30]

(40) Sort [codegen id : 11]
Input [5]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16]
Arguments: [ss_addr_sk#12 ASC NULLS FIRST], false, 0

(41) ReusedExchange [Reuses operator id: 9]
Output [2]: [ca_address_sk#6, ca_city#7]

(42) Sort [codegen id : 13]
Input [2]: [ca_address_sk#6, ca_city#7]
Arguments: [ca_address_sk#6 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_addr_sk#12]
Right keys [1]: [ca_address_sk#6]
Join condition: None

(44) Project [codegen id : 14]
Output [6]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ca_city#7]
Input [7]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ca_address_sk#6, ca_city#7]

(45) HashAggregate [codegen id : 14]
Input [6]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ca_city#7]
Keys [4]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#7]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#15)), partial_sum(UnscaledValue(ss_net_profit#16))]
Aggregate Attributes [2]: [sum#31, sum#32]
Results [6]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#7, sum#33, sum#34]

(46) HashAggregate [codegen id : 14]
Input [6]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#7, sum#33, sum#34]
Keys [4]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#7]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#15)), sum(UnscaledValue(ss_net_profit#16))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#15))#35, sum(UnscaledValue(ss_net_profit#16))#36]
Results [5]: [ss_ticket_number#14, ss_customer_sk#10, ca_city#7 AS bought_city#37, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#15))#35,17,2) AS amt#38, MakeDecimal(sum(UnscaledValue(ss_net_profit#16))#36,17,2) AS profit#39]

(47) Exchange
Input [5]: [ss_ticket_number#14, ss_customer_sk#10, bought_city#37, amt#38, profit#39]
Arguments: hashpartitioning(ss_customer_sk#10, 5), ENSURE_REQUIREMENTS, [id=#40]

(48) Sort [codegen id : 15]
Input [5]: [ss_ticket_number#14, ss_customer_sk#10, bought_city#37, amt#38, profit#39]
Arguments: [ss_customer_sk#10 ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#10]
Join condition: NOT (ca_city#7 = bought_city#37)

(50) Project [codegen id : 16]
Output [7]: [c_last_name#4, c_first_name#3, ca_city#7, bought_city#37, ss_ticket_number#14, amt#38, profit#39]
Input [9]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7, ss_ticket_number#14, ss_customer_sk#10, bought_city#37, amt#38, profit#39]

(51) TakeOrderedAndProject
Input [7]: [c_last_name#4, c_first_name#3, ca_city#7, bought_city#37, ss_ticket_number#14, amt#38, profit#39]
Arguments: 100, [c_last_name#4 ASC NULLS FIRST, c_first_name#3 ASC NULLS FIRST, ca_city#7 ASC NULLS FIRST, bought_city#37 ASC NULLS FIRST, ss_ticket_number#14 ASC NULLS FIRST], [c_last_name#4, c_first_name#3, ca_city#7, bought_city#37, ss_ticket_number#14, amt#38, profit#39]

===== Subqueries =====

Subquery:1 Hosting operator id = 15 Hosting Expression = ss_sold_date_sk#17 IN dynamicpruning#18
ReusedExchange (52)


(52) ReusedExchange [Reuses operator id: 22]
Output [1]: [d_date_sk#19]


