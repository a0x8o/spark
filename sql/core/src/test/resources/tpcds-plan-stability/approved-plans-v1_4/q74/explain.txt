== Physical Plan ==
TakeOrderedAndProject (78)
+- * Project (77)
   +- * BroadcastHashJoin Inner BuildRight (76)
      :- * Project (59)
      :  +- * BroadcastHashJoin Inner BuildRight (58)
      :     :- * BroadcastHashJoin Inner BuildRight (39)
      :     :  :- * Filter (19)
      :     :  :  +- * HashAggregate (18)
      :     :  :     +- Exchange (17)
      :     :  :        +- * HashAggregate (16)
      :     :  :           +- * Project (15)
      :     :  :              +- * BroadcastHashJoin Inner BuildRight (14)
      :     :  :                 :- * Project (9)
      :     :  :                 :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :  :                 :     :- * Filter (3)
      :     :  :                 :     :  +- * ColumnarToRow (2)
      :     :  :                 :     :     +- Scan parquet default.customer (1)
      :     :  :                 :     +- BroadcastExchange (7)
      :     :  :                 :        +- * Filter (6)
      :     :  :                 :           +- * ColumnarToRow (5)
      :     :  :                 :              +- Scan parquet default.store_sales (4)
      :     :  :                 +- BroadcastExchange (13)
      :     :  :                    +- * Filter (12)
      :     :  :                       +- * ColumnarToRow (11)
      :     :  :                          +- Scan parquet default.date_dim (10)
      :     :  +- BroadcastExchange (38)
      :     :     +- * HashAggregate (37)
      :     :        +- Exchange (36)
      :     :           +- * HashAggregate (35)
      :     :              +- * Project (34)
      :     :                 +- * BroadcastHashJoin Inner BuildRight (33)
      :     :                    :- * Project (28)
      :     :                    :  +- * BroadcastHashJoin Inner BuildRight (27)
      :     :                    :     :- * Filter (22)
      :     :                    :     :  +- * ColumnarToRow (21)
      :     :                    :     :     +- Scan parquet default.customer (20)
      :     :                    :     +- BroadcastExchange (26)
      :     :                    :        +- * Filter (25)
      :     :                    :           +- * ColumnarToRow (24)
      :     :                    :              +- Scan parquet default.store_sales (23)
      :     :                    +- BroadcastExchange (32)
      :     :                       +- * Filter (31)
      :     :                          +- * ColumnarToRow (30)
      :     :                             +- Scan parquet default.date_dim (29)
      :     +- BroadcastExchange (57)
      :        +- * Project (56)
      :           +- * Filter (55)
      :              +- * HashAggregate (54)
      :                 +- Exchange (53)
      :                    +- * HashAggregate (52)
      :                       +- * Project (51)
      :                          +- * BroadcastHashJoin Inner BuildRight (50)
      :                             :- * Project (48)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (47)
      :                             :     :- * Filter (42)
      :                             :     :  +- * ColumnarToRow (41)
      :                             :     :     +- Scan parquet default.customer (40)
      :                             :     +- BroadcastExchange (46)
      :                             :        +- * Filter (45)
      :                             :           +- * ColumnarToRow (44)
      :                             :              +- Scan parquet default.web_sales (43)
      :                             +- ReusedExchange (49)
      +- BroadcastExchange (75)
         +- * HashAggregate (74)
            +- Exchange (73)
               +- * HashAggregate (72)
                  +- * Project (71)
                     +- * BroadcastHashJoin Inner BuildRight (70)
                        :- * Project (68)
                        :  +- * BroadcastHashJoin Inner BuildRight (67)
                        :     :- * Filter (62)
                        :     :  +- * ColumnarToRow (61)
                        :     :     +- Scan parquet default.customer (60)
                        :     +- BroadcastExchange (66)
                        :        +- * Filter (65)
                        :           +- * ColumnarToRow (64)
                        :              +- Scan parquet default.web_sales (63)
                        +- ReusedExchange (69)


(1) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(3) Filter [codegen id : 3]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(6) Filter [codegen id : 1]
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#5)

(7) BroadcastExchange
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#5]
Join condition: None

(9) Project [codegen id : 3]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 = 2001)) AND d_year#11 IN (2001,2002)) AND isnotnull(d_date_sk#10))

(13) BroadcastExchange
Input [2]: [d_date_sk#10, d_year#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#10]
Join condition: None

(15) Project [codegen id : 3]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#11]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7, d_date_sk#10, d_year#11]

(16) HashAggregate [codegen id : 3]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum#13]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#14]

(17) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#14]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(18) HashAggregate [codegen id : 16]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#14]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#6))#16]
Results [2]: [c_customer_id#2 AS customer_id#17, MakeDecimal(sum(UnscaledValue(ss_net_paid#6))#16,17,2) AS year_total#18]

(19) Filter [codegen id : 16]
Input [2]: [customer_id#17, year_total#18]
Condition : (isnotnull(year_total#18) AND (year_total#18 > 0.00))

(20) Scan parquet default.customer
Output [4]: [c_customer_sk#19, c_customer_id#20, c_first_name#21, c_last_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(21) ColumnarToRow [codegen id : 6]
Input [4]: [c_customer_sk#19, c_customer_id#20, c_first_name#21, c_last_name#22]

(22) Filter [codegen id : 6]
Input [4]: [c_customer_sk#19, c_customer_id#20, c_first_name#21, c_last_name#22]
Condition : (isnotnull(c_customer_sk#19) AND isnotnull(c_customer_id#20))

(23) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#23, ss_net_paid#24, ss_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#25), dynamicpruningexpression(ss_sold_date_sk#25 IN dynamicpruning#26)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(24) ColumnarToRow [codegen id : 4]
Input [3]: [ss_customer_sk#23, ss_net_paid#24, ss_sold_date_sk#25]

(25) Filter [codegen id : 4]
Input [3]: [ss_customer_sk#23, ss_net_paid#24, ss_sold_date_sk#25]
Condition : isnotnull(ss_customer_sk#23)

(26) BroadcastExchange
Input [3]: [ss_customer_sk#23, ss_net_paid#24, ss_sold_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#19]
Right keys [1]: [ss_customer_sk#23]
Join condition: None

(28) Project [codegen id : 6]
Output [5]: [c_customer_id#20, c_first_name#21, c_last_name#22, ss_net_paid#24, ss_sold_date_sk#25]
Input [7]: [c_customer_sk#19, c_customer_id#20, c_first_name#21, c_last_name#22, ss_customer_sk#23, ss_net_paid#24, ss_sold_date_sk#25]

(29) Scan parquet default.date_dim
Output [2]: [d_date_sk#28, d_year#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(30) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#28, d_year#29]

(31) Filter [codegen id : 5]
Input [2]: [d_date_sk#28, d_year#29]
Condition : (((isnotnull(d_year#29) AND (d_year#29 = 2002)) AND d_year#29 IN (2001,2002)) AND isnotnull(d_date_sk#28))

(32) BroadcastExchange
Input [2]: [d_date_sk#28, d_year#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#25]
Right keys [1]: [d_date_sk#28]
Join condition: None

(34) Project [codegen id : 6]
Output [5]: [c_customer_id#20, c_first_name#21, c_last_name#22, ss_net_paid#24, d_year#29]
Input [7]: [c_customer_id#20, c_first_name#21, c_last_name#22, ss_net_paid#24, ss_sold_date_sk#25, d_date_sk#28, d_year#29]

(35) HashAggregate [codegen id : 6]
Input [5]: [c_customer_id#20, c_first_name#21, c_last_name#22, ss_net_paid#24, d_year#29]
Keys [4]: [c_customer_id#20, c_first_name#21, c_last_name#22, d_year#29]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#24))]
Aggregate Attributes [1]: [sum#31]
Results [5]: [c_customer_id#20, c_first_name#21, c_last_name#22, d_year#29, sum#32]

(36) Exchange
Input [5]: [c_customer_id#20, c_first_name#21, c_last_name#22, d_year#29, sum#32]
Arguments: hashpartitioning(c_customer_id#20, c_first_name#21, c_last_name#22, d_year#29, 5), ENSURE_REQUIREMENTS, [id=#33]

(37) HashAggregate [codegen id : 7]
Input [5]: [c_customer_id#20, c_first_name#21, c_last_name#22, d_year#29, sum#32]
Keys [4]: [c_customer_id#20, c_first_name#21, c_last_name#22, d_year#29]
Functions [1]: [sum(UnscaledValue(ss_net_paid#24))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#24))#34]
Results [4]: [c_customer_id#20 AS customer_id#35, c_first_name#21 AS customer_first_name#36, c_last_name#22 AS customer_last_name#37, MakeDecimal(sum(UnscaledValue(ss_net_paid#24))#34,17,2) AS year_total#38]

(38) BroadcastExchange
Input [4]: [customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#39]

(39) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#35]
Join condition: None

(40) Scan parquet default.customer
Output [4]: [c_customer_sk#40, c_customer_id#41, c_first_name#42, c_last_name#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(41) ColumnarToRow [codegen id : 10]
Input [4]: [c_customer_sk#40, c_customer_id#41, c_first_name#42, c_last_name#43]

(42) Filter [codegen id : 10]
Input [4]: [c_customer_sk#40, c_customer_id#41, c_first_name#42, c_last_name#43]
Condition : (isnotnull(c_customer_sk#40) AND isnotnull(c_customer_id#41))

(43) Scan parquet default.web_sales
Output [3]: [ws_bill_customer_sk#44, ws_net_paid#45, ws_sold_date_sk#46]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#46), dynamicpruningexpression(ws_sold_date_sk#46 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(44) ColumnarToRow [codegen id : 8]
Input [3]: [ws_bill_customer_sk#44, ws_net_paid#45, ws_sold_date_sk#46]

(45) Filter [codegen id : 8]
Input [3]: [ws_bill_customer_sk#44, ws_net_paid#45, ws_sold_date_sk#46]
Condition : isnotnull(ws_bill_customer_sk#44)

(46) BroadcastExchange
Input [3]: [ws_bill_customer_sk#44, ws_net_paid#45, ws_sold_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47]

(47) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#40]
Right keys [1]: [ws_bill_customer_sk#44]
Join condition: None

(48) Project [codegen id : 10]
Output [5]: [c_customer_id#41, c_first_name#42, c_last_name#43, ws_net_paid#45, ws_sold_date_sk#46]
Input [7]: [c_customer_sk#40, c_customer_id#41, c_first_name#42, c_last_name#43, ws_bill_customer_sk#44, ws_net_paid#45, ws_sold_date_sk#46]

(49) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#48, d_year#49]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#46]
Right keys [1]: [d_date_sk#48]
Join condition: None

(51) Project [codegen id : 10]
Output [5]: [c_customer_id#41, c_first_name#42, c_last_name#43, ws_net_paid#45, d_year#49]
Input [7]: [c_customer_id#41, c_first_name#42, c_last_name#43, ws_net_paid#45, ws_sold_date_sk#46, d_date_sk#48, d_year#49]

(52) HashAggregate [codegen id : 10]
Input [5]: [c_customer_id#41, c_first_name#42, c_last_name#43, ws_net_paid#45, d_year#49]
Keys [4]: [c_customer_id#41, c_first_name#42, c_last_name#43, d_year#49]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#45))]
Aggregate Attributes [1]: [sum#50]
Results [5]: [c_customer_id#41, c_first_name#42, c_last_name#43, d_year#49, sum#51]

(53) Exchange
Input [5]: [c_customer_id#41, c_first_name#42, c_last_name#43, d_year#49, sum#51]
Arguments: hashpartitioning(c_customer_id#41, c_first_name#42, c_last_name#43, d_year#49, 5), ENSURE_REQUIREMENTS, [id=#52]

(54) HashAggregate [codegen id : 11]
Input [5]: [c_customer_id#41, c_first_name#42, c_last_name#43, d_year#49, sum#51]
Keys [4]: [c_customer_id#41, c_first_name#42, c_last_name#43, d_year#49]
Functions [1]: [sum(UnscaledValue(ws_net_paid#45))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#45))#53]
Results [2]: [c_customer_id#41 AS customer_id#54, MakeDecimal(sum(UnscaledValue(ws_net_paid#45))#53,17,2) AS year_total#55]

(55) Filter [codegen id : 11]
Input [2]: [customer_id#54, year_total#55]
Condition : (isnotnull(year_total#55) AND (year_total#55 > 0.00))

(56) Project [codegen id : 11]
Output [2]: [customer_id#54 AS customer_id#56, year_total#55 AS year_total#57]
Input [2]: [customer_id#54, year_total#55]

(57) BroadcastExchange
Input [2]: [customer_id#56, year_total#57]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#58]

(58) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#56]
Join condition: None

(59) Project [codegen id : 16]
Output [7]: [customer_id#17, year_total#18, customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38, year_total#57]
Input [8]: [customer_id#17, year_total#18, customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38, customer_id#56, year_total#57]

(60) Scan parquet default.customer
Output [4]: [c_customer_sk#59, c_customer_id#60, c_first_name#61, c_last_name#62]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(61) ColumnarToRow [codegen id : 14]
Input [4]: [c_customer_sk#59, c_customer_id#60, c_first_name#61, c_last_name#62]

(62) Filter [codegen id : 14]
Input [4]: [c_customer_sk#59, c_customer_id#60, c_first_name#61, c_last_name#62]
Condition : (isnotnull(c_customer_sk#59) AND isnotnull(c_customer_id#60))

(63) Scan parquet default.web_sales
Output [3]: [ws_bill_customer_sk#63, ws_net_paid#64, ws_sold_date_sk#65]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#65), dynamicpruningexpression(ws_sold_date_sk#65 IN dynamicpruning#26)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(64) ColumnarToRow [codegen id : 12]
Input [3]: [ws_bill_customer_sk#63, ws_net_paid#64, ws_sold_date_sk#65]

(65) Filter [codegen id : 12]
Input [3]: [ws_bill_customer_sk#63, ws_net_paid#64, ws_sold_date_sk#65]
Condition : isnotnull(ws_bill_customer_sk#63)

(66) BroadcastExchange
Input [3]: [ws_bill_customer_sk#63, ws_net_paid#64, ws_sold_date_sk#65]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#66]

(67) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#59]
Right keys [1]: [ws_bill_customer_sk#63]
Join condition: None

(68) Project [codegen id : 14]
Output [5]: [c_customer_id#60, c_first_name#61, c_last_name#62, ws_net_paid#64, ws_sold_date_sk#65]
Input [7]: [c_customer_sk#59, c_customer_id#60, c_first_name#61, c_last_name#62, ws_bill_customer_sk#63, ws_net_paid#64, ws_sold_date_sk#65]

(69) ReusedExchange [Reuses operator id: 32]
Output [2]: [d_date_sk#67, d_year#68]

(70) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#65]
Right keys [1]: [d_date_sk#67]
Join condition: None

(71) Project [codegen id : 14]
Output [5]: [c_customer_id#60, c_first_name#61, c_last_name#62, ws_net_paid#64, d_year#68]
Input [7]: [c_customer_id#60, c_first_name#61, c_last_name#62, ws_net_paid#64, ws_sold_date_sk#65, d_date_sk#67, d_year#68]

(72) HashAggregate [codegen id : 14]
Input [5]: [c_customer_id#60, c_first_name#61, c_last_name#62, ws_net_paid#64, d_year#68]
Keys [4]: [c_customer_id#60, c_first_name#61, c_last_name#62, d_year#68]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#64))]
Aggregate Attributes [1]: [sum#69]
Results [5]: [c_customer_id#60, c_first_name#61, c_last_name#62, d_year#68, sum#70]

(73) Exchange
Input [5]: [c_customer_id#60, c_first_name#61, c_last_name#62, d_year#68, sum#70]
Arguments: hashpartitioning(c_customer_id#60, c_first_name#61, c_last_name#62, d_year#68, 5), ENSURE_REQUIREMENTS, [id=#71]

(74) HashAggregate [codegen id : 15]
Input [5]: [c_customer_id#60, c_first_name#61, c_last_name#62, d_year#68, sum#70]
Keys [4]: [c_customer_id#60, c_first_name#61, c_last_name#62, d_year#68]
Functions [1]: [sum(UnscaledValue(ws_net_paid#64))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#64))#72]
Results [2]: [c_customer_id#60 AS customer_id#73, MakeDecimal(sum(UnscaledValue(ws_net_paid#64))#72,17,2) AS year_total#74]

(75) BroadcastExchange
Input [2]: [customer_id#73, year_total#74]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#75]

(76) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#73]
Join condition: (CASE WHEN (year_total#57 > 0.00) THEN CheckOverflow((promote_precision(year_total#74) / promote_precision(year_total#57)), DecimalType(37,20), true) ELSE null END > CASE WHEN (year_total#18 > 0.00) THEN CheckOverflow((promote_precision(year_total#38) / promote_precision(year_total#18)), DecimalType(37,20), true) ELSE null END)

(77) Project [codegen id : 16]
Output [3]: [customer_id#35, customer_first_name#36, customer_last_name#37]
Input [9]: [customer_id#17, year_total#18, customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38, year_total#57, customer_id#73, year_total#74]

(78) TakeOrderedAndProject
Input [3]: [customer_id#35, customer_first_name#36, customer_last_name#37]
Arguments: 100, [customer_id#35 ASC NULLS FIRST, customer_id#35 ASC NULLS FIRST, customer_id#35 ASC NULLS FIRST], [customer_id#35, customer_first_name#36, customer_last_name#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
ReusedExchange (79)


(79) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#10, d_year#11]

Subquery:2 Hosting operator id = 23 Hosting Expression = ss_sold_date_sk#25 IN dynamicpruning#26
ReusedExchange (80)


(80) ReusedExchange [Reuses operator id: 32]
Output [2]: [d_date_sk#28, d_year#29]

Subquery:3 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#46 IN dynamicpruning#8

Subquery:4 Hosting operator id = 63 Hosting Expression = ws_sold_date_sk#65 IN dynamicpruning#26


