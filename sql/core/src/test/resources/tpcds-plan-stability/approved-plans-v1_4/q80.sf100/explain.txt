== Physical Plan ==
TakeOrderedAndProject (107)
+- * HashAggregate (106)
   +- Exchange (105)
      +- * HashAggregate (104)
         +- * Expand (103)
            +- Union (102)
               :- * HashAggregate (39)
               :  +- Exchange (38)
               :     +- * HashAggregate (37)
               :        +- * Project (36)
               :           +- * BroadcastHashJoin Inner BuildRight (35)
               :              :- * Project (30)
               :              :  +- * BroadcastHashJoin Inner BuildRight (29)
               :              :     :- * Project (27)
               :              :     :  +- * BroadcastHashJoin Inner BuildRight (26)
               :              :     :     :- * Project (20)
               :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (19)
               :              :     :     :     :- * Project (13)
               :              :     :     :     :  +- * SortMergeJoin LeftOuter (12)
               :              :     :     :     :     :- * Sort (5)
               :              :     :     :     :     :  +- Exchange (4)
               :              :     :     :     :     :     +- * Filter (3)
               :              :     :     :     :     :        +- * ColumnarToRow (2)
               :              :     :     :     :     :           +- Scan parquet default.store_sales (1)
               :              :     :     :     :     +- * Sort (11)
               :              :     :     :     :        +- Exchange (10)
               :              :     :     :     :           +- * Project (9)
               :              :     :     :     :              +- * Filter (8)
               :              :     :     :     :                 +- * ColumnarToRow (7)
               :              :     :     :     :                    +- Scan parquet default.store_returns (6)
               :              :     :     :     +- BroadcastExchange (18)
               :              :     :     :        +- * Project (17)
               :              :     :     :           +- * Filter (16)
               :              :     :     :              +- * ColumnarToRow (15)
               :              :     :     :                 +- Scan parquet default.item (14)
               :              :     :     +- BroadcastExchange (25)
               :              :     :        +- * Project (24)
               :              :     :           +- * Filter (23)
               :              :     :              +- * ColumnarToRow (22)
               :              :     :                 +- Scan parquet default.promotion (21)
               :              :     +- ReusedExchange (28)
               :              +- BroadcastExchange (34)
               :                 +- * Filter (33)
               :                    +- * ColumnarToRow (32)
               :                       +- Scan parquet default.store (31)
               :- * HashAggregate (70)
               :  +- Exchange (69)
               :     +- * HashAggregate (68)
               :        +- * Project (67)
               :           +- * BroadcastHashJoin Inner BuildRight (66)
               :              :- * Project (61)
               :              :  +- * BroadcastHashJoin Inner BuildRight (60)
               :              :     :- * Project (58)
               :              :     :  +- * BroadcastHashJoin Inner BuildRight (57)
               :              :     :     :- * Project (55)
               :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (54)
               :              :     :     :     :- * Project (52)
               :              :     :     :     :  +- * SortMergeJoin LeftOuter (51)
               :              :     :     :     :     :- * Sort (44)
               :              :     :     :     :     :  +- Exchange (43)
               :              :     :     :     :     :     +- * Filter (42)
               :              :     :     :     :     :        +- * ColumnarToRow (41)
               :              :     :     :     :     :           +- Scan parquet default.catalog_sales (40)
               :              :     :     :     :     +- * Sort (50)
               :              :     :     :     :        +- Exchange (49)
               :              :     :     :     :           +- * Project (48)
               :              :     :     :     :              +- * Filter (47)
               :              :     :     :     :                 +- * ColumnarToRow (46)
               :              :     :     :     :                    +- Scan parquet default.catalog_returns (45)
               :              :     :     :     +- ReusedExchange (53)
               :              :     :     +- ReusedExchange (56)
               :              :     +- ReusedExchange (59)
               :              +- BroadcastExchange (65)
               :                 +- * Filter (64)
               :                    +- * ColumnarToRow (63)
               :                       +- Scan parquet default.catalog_page (62)
               +- * HashAggregate (101)
                  +- Exchange (100)
                     +- * HashAggregate (99)
                        +- * Project (98)
                           +- * BroadcastHashJoin Inner BuildRight (97)
                              :- * Project (92)
                              :  +- * BroadcastHashJoin Inner BuildRight (91)
                              :     :- * Project (89)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (88)
                              :     :     :- * Project (86)
                              :     :     :  +- * BroadcastHashJoin Inner BuildRight (85)
                              :     :     :     :- * Project (83)
                              :     :     :     :  +- * SortMergeJoin LeftOuter (82)
                              :     :     :     :     :- * Sort (75)
                              :     :     :     :     :  +- Exchange (74)
                              :     :     :     :     :     +- * Filter (73)
                              :     :     :     :     :        +- * ColumnarToRow (72)
                              :     :     :     :     :           +- Scan parquet default.web_sales (71)
                              :     :     :     :     +- * Sort (81)
                              :     :     :     :        +- Exchange (80)
                              :     :     :     :           +- * Project (79)
                              :     :     :     :              +- * Filter (78)
                              :     :     :     :                 +- * ColumnarToRow (77)
                              :     :     :     :                    +- Scan parquet default.web_returns (76)
                              :     :     :     +- ReusedExchange (84)
                              :     :     +- ReusedExchange (87)
                              :     +- ReusedExchange (90)
                              +- BroadcastExchange (96)
                                 +- * Filter (95)
                                    +- * ColumnarToRow (94)
                                       +- Scan parquet default.web_site (93)


(1) Scan parquet default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3)) AND might_contain(Subquery scalar-subquery#9, [id=#10], xxhash64(ss_item_sk#1, 42))) AND might_contain(Subquery scalar-subquery#11, [id=#12], xxhash64(ss_promo_sk#3, 42)))

(4) Exchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, [id=#13]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [5]: [sr_item_sk#14, sr_ticket_number#15, sr_return_amt#16, sr_net_loss#17, sr_returned_date_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [5]: [sr_item_sk#14, sr_ticket_number#15, sr_return_amt#16, sr_net_loss#17, sr_returned_date_sk#18]

(8) Filter [codegen id : 3]
Input [5]: [sr_item_sk#14, sr_ticket_number#15, sr_return_amt#16, sr_net_loss#17, sr_returned_date_sk#18]
Condition : (isnotnull(sr_item_sk#14) AND isnotnull(sr_ticket_number#15))

(9) Project [codegen id : 3]
Output [4]: [sr_item_sk#14, sr_ticket_number#15, sr_return_amt#16, sr_net_loss#17]
Input [5]: [sr_item_sk#14, sr_ticket_number#15, sr_return_amt#16, sr_net_loss#17, sr_returned_date_sk#18]

(10) Exchange
Input [4]: [sr_item_sk#14, sr_ticket_number#15, sr_return_amt#16, sr_net_loss#17]
Arguments: hashpartitioning(sr_item_sk#14, sr_ticket_number#15, 5), ENSURE_REQUIREMENTS, [id=#19]

(11) Sort [codegen id : 4]
Input [4]: [sr_item_sk#14, sr_ticket_number#15, sr_return_amt#16, sr_net_loss#17]
Arguments: [sr_item_sk#14 ASC NULLS FIRST, sr_ticket_number#15 ASC NULLS FIRST], false, 0

(12) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#4]
Right keys [2]: [sr_item_sk#14, sr_ticket_number#15]
Join condition: None

(13) Project [codegen id : 9]
Output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#16, sr_net_loss#17]
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#14, sr_ticket_number#15, sr_return_amt#16, sr_net_loss#17]

(14) Scan parquet default.item
Output [2]: [i_item_sk#20, i_current_price#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(15) ColumnarToRow [codegen id : 5]
Input [2]: [i_item_sk#20, i_current_price#21]

(16) Filter [codegen id : 5]
Input [2]: [i_item_sk#20, i_current_price#21]
Condition : ((isnotnull(i_current_price#21) AND (i_current_price#21 > 50.00)) AND isnotnull(i_item_sk#20))

(17) Project [codegen id : 5]
Output [1]: [i_item_sk#20]
Input [2]: [i_item_sk#20, i_current_price#21]

(18) BroadcastExchange
Input [1]: [i_item_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(19) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#20]
Join condition: None

(20) Project [codegen id : 9]
Output [7]: [ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#16, sr_net_loss#17]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#16, sr_net_loss#17, i_item_sk#20]

(21) Scan parquet default.promotion
Output [2]: [p_promo_sk#23, p_channel_tv#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(22) ColumnarToRow [codegen id : 6]
Input [2]: [p_promo_sk#23, p_channel_tv#24]

(23) Filter [codegen id : 6]
Input [2]: [p_promo_sk#23, p_channel_tv#24]
Condition : ((isnotnull(p_channel_tv#24) AND (p_channel_tv#24 = N)) AND isnotnull(p_promo_sk#23))

(24) Project [codegen id : 6]
Output [1]: [p_promo_sk#23]
Input [2]: [p_promo_sk#23, p_channel_tv#24]

(25) BroadcastExchange
Input [1]: [p_promo_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_promo_sk#3]
Right keys [1]: [p_promo_sk#23]
Join condition: None

(27) Project [codegen id : 9]
Output [6]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#16, sr_net_loss#17]
Input [8]: [ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#16, sr_net_loss#17, p_promo_sk#23]

(28) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#26]

(29) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#26]
Join condition: None

(30) Project [codegen id : 9]
Output [5]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#16, sr_net_loss#17]
Input [7]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#16, sr_net_loss#17, d_date_sk#26]

(31) Scan parquet default.store
Output [2]: [s_store_sk#27, s_store_id#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(32) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#27, s_store_id#28]

(33) Filter [codegen id : 8]
Input [2]: [s_store_sk#27, s_store_id#28]
Condition : isnotnull(s_store_sk#27)

(34) BroadcastExchange
Input [2]: [s_store_sk#27, s_store_id#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(35) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#27]
Join condition: None

(36) Project [codegen id : 9]
Output [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#16, sr_net_loss#17, s_store_id#28]
Input [7]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#16, sr_net_loss#17, s_store_sk#27, s_store_id#28]

(37) HashAggregate [codegen id : 9]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#16, sr_net_loss#17, s_store_id#28]
Keys [1]: [s_store_id#28]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#16 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#17 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))]
Aggregate Attributes [5]: [sum#30, sum#31, isEmpty#32, sum#33, isEmpty#34]
Results [6]: [s_store_id#28, sum#35, sum#36, isEmpty#37, sum#38, isEmpty#39]

(38) Exchange
Input [6]: [s_store_id#28, sum#35, sum#36, isEmpty#37, sum#38, isEmpty#39]
Arguments: hashpartitioning(s_store_id#28, 5), ENSURE_REQUIREMENTS, [id=#40]

(39) HashAggregate [codegen id : 10]
Input [6]: [s_store_id#28, sum#35, sum#36, isEmpty#37, sum#38, isEmpty#39]
Keys [1]: [s_store_id#28]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#16 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#17 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#41, sum(coalesce(cast(sr_return_amt#16 as decimal(12,2)), 0.00))#42, sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#17 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))#43]
Results [5]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#41,17,2) AS sales#44, sum(coalesce(cast(sr_return_amt#16 as decimal(12,2)), 0.00))#42 AS returns#45, sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#17 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))#43 AS profit#46, store channel AS channel#47, concat(store, s_store_id#28) AS id#48]

(40) Scan parquet default.catalog_sales
Output [7]: [cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#55), dynamicpruningexpression(cs_sold_date_sk#55 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(41) ColumnarToRow [codegen id : 11]
Input [7]: [cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55]

(42) Filter [codegen id : 11]
Input [7]: [cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55]
Condition : ((((isnotnull(cs_catalog_page_sk#49) AND isnotnull(cs_item_sk#50)) AND isnotnull(cs_promo_sk#51)) AND might_contain(ReusedSubquery Subquery scalar-subquery#9, [id=#10], xxhash64(cs_item_sk#50, 42))) AND might_contain(ReusedSubquery Subquery scalar-subquery#11, [id=#12], xxhash64(cs_promo_sk#51, 42)))

(43) Exchange
Input [7]: [cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55]
Arguments: hashpartitioning(cs_item_sk#50, cs_order_number#52, 5), ENSURE_REQUIREMENTS, [id=#56]

(44) Sort [codegen id : 12]
Input [7]: [cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55]
Arguments: [cs_item_sk#50 ASC NULLS FIRST, cs_order_number#52 ASC NULLS FIRST], false, 0

(45) Scan parquet default.catalog_returns
Output [5]: [cr_item_sk#57, cr_order_number#58, cr_return_amount#59, cr_net_loss#60, cr_returned_date_sk#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(46) ColumnarToRow [codegen id : 13]
Input [5]: [cr_item_sk#57, cr_order_number#58, cr_return_amount#59, cr_net_loss#60, cr_returned_date_sk#61]

(47) Filter [codegen id : 13]
Input [5]: [cr_item_sk#57, cr_order_number#58, cr_return_amount#59, cr_net_loss#60, cr_returned_date_sk#61]
Condition : (isnotnull(cr_item_sk#57) AND isnotnull(cr_order_number#58))

(48) Project [codegen id : 13]
Output [4]: [cr_item_sk#57, cr_order_number#58, cr_return_amount#59, cr_net_loss#60]
Input [5]: [cr_item_sk#57, cr_order_number#58, cr_return_amount#59, cr_net_loss#60, cr_returned_date_sk#61]

(49) Exchange
Input [4]: [cr_item_sk#57, cr_order_number#58, cr_return_amount#59, cr_net_loss#60]
Arguments: hashpartitioning(cr_item_sk#57, cr_order_number#58, 5), ENSURE_REQUIREMENTS, [id=#62]

(50) Sort [codegen id : 14]
Input [4]: [cr_item_sk#57, cr_order_number#58, cr_return_amount#59, cr_net_loss#60]
Arguments: [cr_item_sk#57 ASC NULLS FIRST, cr_order_number#58 ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 19]
Left keys [2]: [cs_item_sk#50, cs_order_number#52]
Right keys [2]: [cr_item_sk#57, cr_order_number#58]
Join condition: None

(52) Project [codegen id : 19]
Output [8]: [cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55, cr_return_amount#59, cr_net_loss#60]
Input [11]: [cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55, cr_item_sk#57, cr_order_number#58, cr_return_amount#59, cr_net_loss#60]

(53) ReusedExchange [Reuses operator id: 18]
Output [1]: [i_item_sk#63]

(54) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_item_sk#50]
Right keys [1]: [i_item_sk#63]
Join condition: None

(55) Project [codegen id : 19]
Output [7]: [cs_catalog_page_sk#49, cs_promo_sk#51, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55, cr_return_amount#59, cr_net_loss#60]
Input [9]: [cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55, cr_return_amount#59, cr_net_loss#60, i_item_sk#63]

(56) ReusedExchange [Reuses operator id: 25]
Output [1]: [p_promo_sk#64]

(57) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_promo_sk#51]
Right keys [1]: [p_promo_sk#64]
Join condition: None

(58) Project [codegen id : 19]
Output [6]: [cs_catalog_page_sk#49, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55, cr_return_amount#59, cr_net_loss#60]
Input [8]: [cs_catalog_page_sk#49, cs_promo_sk#51, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55, cr_return_amount#59, cr_net_loss#60, p_promo_sk#64]

(59) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#65]

(60) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#55]
Right keys [1]: [d_date_sk#65]
Join condition: None

(61) Project [codegen id : 19]
Output [5]: [cs_catalog_page_sk#49, cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#59, cr_net_loss#60]
Input [7]: [cs_catalog_page_sk#49, cs_ext_sales_price#53, cs_net_profit#54, cs_sold_date_sk#55, cr_return_amount#59, cr_net_loss#60, d_date_sk#65]

(62) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(63) ColumnarToRow [codegen id : 18]
Input [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]

(64) Filter [codegen id : 18]
Input [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]
Condition : isnotnull(cp_catalog_page_sk#66)

(65) BroadcastExchange
Input [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#68]

(66) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_catalog_page_sk#49]
Right keys [1]: [cp_catalog_page_sk#66]
Join condition: None

(67) Project [codegen id : 19]
Output [5]: [cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#59, cr_net_loss#60, cp_catalog_page_id#67]
Input [7]: [cs_catalog_page_sk#49, cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#59, cr_net_loss#60, cp_catalog_page_sk#66, cp_catalog_page_id#67]

(68) HashAggregate [codegen id : 19]
Input [5]: [cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#59, cr_net_loss#60, cp_catalog_page_id#67]
Keys [1]: [cp_catalog_page_id#67]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#53)), partial_sum(coalesce(cast(cr_return_amount#59 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#54 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#60 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))]
Aggregate Attributes [5]: [sum#69, sum#70, isEmpty#71, sum#72, isEmpty#73]
Results [6]: [cp_catalog_page_id#67, sum#74, sum#75, isEmpty#76, sum#77, isEmpty#78]

(69) Exchange
Input [6]: [cp_catalog_page_id#67, sum#74, sum#75, isEmpty#76, sum#77, isEmpty#78]
Arguments: hashpartitioning(cp_catalog_page_id#67, 5), ENSURE_REQUIREMENTS, [id=#79]

(70) HashAggregate [codegen id : 20]
Input [6]: [cp_catalog_page_id#67, sum#74, sum#75, isEmpty#76, sum#77, isEmpty#78]
Keys [1]: [cp_catalog_page_id#67]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#53)), sum(coalesce(cast(cr_return_amount#59 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#54 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#60 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#53))#80, sum(coalesce(cast(cr_return_amount#59 as decimal(12,2)), 0.00))#81, sum(CheckOverflow((promote_precision(cast(cs_net_profit#54 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#60 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))#82]
Results [5]: [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#53))#80,17,2) AS sales#83, sum(coalesce(cast(cr_return_amount#59 as decimal(12,2)), 0.00))#81 AS returns#84, sum(CheckOverflow((promote_precision(cast(cs_net_profit#54 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#60 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))#82 AS profit#85, catalog channel AS channel#86, concat(catalog_page, cp_catalog_page_id#67) AS id#87]

(71) Scan parquet default.web_sales
Output [7]: [ws_item_sk#88, ws_web_site_sk#89, ws_promo_sk#90, ws_order_number#91, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#94), dynamicpruningexpression(ws_sold_date_sk#94 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(72) ColumnarToRow [codegen id : 21]
Input [7]: [ws_item_sk#88, ws_web_site_sk#89, ws_promo_sk#90, ws_order_number#91, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94]

(73) Filter [codegen id : 21]
Input [7]: [ws_item_sk#88, ws_web_site_sk#89, ws_promo_sk#90, ws_order_number#91, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94]
Condition : ((((isnotnull(ws_web_site_sk#89) AND isnotnull(ws_item_sk#88)) AND isnotnull(ws_promo_sk#90)) AND might_contain(ReusedSubquery Subquery scalar-subquery#9, [id=#10], xxhash64(ws_item_sk#88, 42))) AND might_contain(ReusedSubquery Subquery scalar-subquery#11, [id=#12], xxhash64(ws_promo_sk#90, 42)))

(74) Exchange
Input [7]: [ws_item_sk#88, ws_web_site_sk#89, ws_promo_sk#90, ws_order_number#91, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94]
Arguments: hashpartitioning(ws_item_sk#88, ws_order_number#91, 5), ENSURE_REQUIREMENTS, [id=#95]

(75) Sort [codegen id : 22]
Input [7]: [ws_item_sk#88, ws_web_site_sk#89, ws_promo_sk#90, ws_order_number#91, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94]
Arguments: [ws_item_sk#88 ASC NULLS FIRST, ws_order_number#91 ASC NULLS FIRST], false, 0

(76) Scan parquet default.web_returns
Output [5]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99, wr_returned_date_sk#100]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(77) ColumnarToRow [codegen id : 23]
Input [5]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99, wr_returned_date_sk#100]

(78) Filter [codegen id : 23]
Input [5]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99, wr_returned_date_sk#100]
Condition : (isnotnull(wr_item_sk#96) AND isnotnull(wr_order_number#97))

(79) Project [codegen id : 23]
Output [4]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99]
Input [5]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99, wr_returned_date_sk#100]

(80) Exchange
Input [4]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99]
Arguments: hashpartitioning(wr_item_sk#96, wr_order_number#97, 5), ENSURE_REQUIREMENTS, [id=#101]

(81) Sort [codegen id : 24]
Input [4]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99]
Arguments: [wr_item_sk#96 ASC NULLS FIRST, wr_order_number#97 ASC NULLS FIRST], false, 0

(82) SortMergeJoin [codegen id : 29]
Left keys [2]: [ws_item_sk#88, ws_order_number#91]
Right keys [2]: [wr_item_sk#96, wr_order_number#97]
Join condition: None

(83) Project [codegen id : 29]
Output [8]: [ws_item_sk#88, ws_web_site_sk#89, ws_promo_sk#90, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94, wr_return_amt#98, wr_net_loss#99]
Input [11]: [ws_item_sk#88, ws_web_site_sk#89, ws_promo_sk#90, ws_order_number#91, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94, wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99]

(84) ReusedExchange [Reuses operator id: 18]
Output [1]: [i_item_sk#102]

(85) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_item_sk#88]
Right keys [1]: [i_item_sk#102]
Join condition: None

(86) Project [codegen id : 29]
Output [7]: [ws_web_site_sk#89, ws_promo_sk#90, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94, wr_return_amt#98, wr_net_loss#99]
Input [9]: [ws_item_sk#88, ws_web_site_sk#89, ws_promo_sk#90, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94, wr_return_amt#98, wr_net_loss#99, i_item_sk#102]

(87) ReusedExchange [Reuses operator id: 25]
Output [1]: [p_promo_sk#103]

(88) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_promo_sk#90]
Right keys [1]: [p_promo_sk#103]
Join condition: None

(89) Project [codegen id : 29]
Output [6]: [ws_web_site_sk#89, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94, wr_return_amt#98, wr_net_loss#99]
Input [8]: [ws_web_site_sk#89, ws_promo_sk#90, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94, wr_return_amt#98, wr_net_loss#99, p_promo_sk#103]

(90) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#104]

(91) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_sold_date_sk#94]
Right keys [1]: [d_date_sk#104]
Join condition: None

(92) Project [codegen id : 29]
Output [5]: [ws_web_site_sk#89, ws_ext_sales_price#92, ws_net_profit#93, wr_return_amt#98, wr_net_loss#99]
Input [7]: [ws_web_site_sk#89, ws_ext_sales_price#92, ws_net_profit#93, ws_sold_date_sk#94, wr_return_amt#98, wr_net_loss#99, d_date_sk#104]

(93) Scan parquet default.web_site
Output [2]: [web_site_sk#105, web_site_id#106]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(94) ColumnarToRow [codegen id : 28]
Input [2]: [web_site_sk#105, web_site_id#106]

(95) Filter [codegen id : 28]
Input [2]: [web_site_sk#105, web_site_id#106]
Condition : isnotnull(web_site_sk#105)

(96) BroadcastExchange
Input [2]: [web_site_sk#105, web_site_id#106]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#107]

(97) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_web_site_sk#89]
Right keys [1]: [web_site_sk#105]
Join condition: None

(98) Project [codegen id : 29]
Output [5]: [ws_ext_sales_price#92, ws_net_profit#93, wr_return_amt#98, wr_net_loss#99, web_site_id#106]
Input [7]: [ws_web_site_sk#89, ws_ext_sales_price#92, ws_net_profit#93, wr_return_amt#98, wr_net_loss#99, web_site_sk#105, web_site_id#106]

(99) HashAggregate [codegen id : 29]
Input [5]: [ws_ext_sales_price#92, ws_net_profit#93, wr_return_amt#98, wr_net_loss#99, web_site_id#106]
Keys [1]: [web_site_id#106]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#92)), partial_sum(coalesce(cast(wr_return_amt#98 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#93 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#99 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))]
Aggregate Attributes [5]: [sum#108, sum#109, isEmpty#110, sum#111, isEmpty#112]
Results [6]: [web_site_id#106, sum#113, sum#114, isEmpty#115, sum#116, isEmpty#117]

(100) Exchange
Input [6]: [web_site_id#106, sum#113, sum#114, isEmpty#115, sum#116, isEmpty#117]
Arguments: hashpartitioning(web_site_id#106, 5), ENSURE_REQUIREMENTS, [id=#118]

(101) HashAggregate [codegen id : 30]
Input [6]: [web_site_id#106, sum#113, sum#114, isEmpty#115, sum#116, isEmpty#117]
Keys [1]: [web_site_id#106]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#92)), sum(coalesce(cast(wr_return_amt#98 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#93 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#99 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#92))#119, sum(coalesce(cast(wr_return_amt#98 as decimal(12,2)), 0.00))#120, sum(CheckOverflow((promote_precision(cast(ws_net_profit#93 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#99 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))#121]
Results [5]: [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#92))#119,17,2) AS sales#122, sum(coalesce(cast(wr_return_amt#98 as decimal(12,2)), 0.00))#120 AS returns#123, sum(CheckOverflow((promote_precision(cast(ws_net_profit#93 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#99 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2)))#121 AS profit#124, web channel AS channel#125, concat(web_site, web_site_id#106) AS id#126]

(102) Union

(103) Expand [codegen id : 31]
Input [5]: [sales#44, returns#45, profit#46, channel#47, id#48]
Arguments: [[sales#44, returns#45, profit#46, channel#47, id#48, 0], [sales#44, returns#45, profit#46, channel#47, null, 1], [sales#44, returns#45, profit#46, null, null, 3]], [sales#44, returns#45, profit#46, channel#127, id#128, spark_grouping_id#129]

(104) HashAggregate [codegen id : 31]
Input [6]: [sales#44, returns#45, profit#46, channel#127, id#128, spark_grouping_id#129]
Keys [3]: [channel#127, id#128, spark_grouping_id#129]
Functions [3]: [partial_sum(sales#44), partial_sum(returns#45), partial_sum(profit#46)]
Aggregate Attributes [6]: [sum#130, isEmpty#131, sum#132, isEmpty#133, sum#134, isEmpty#135]
Results [9]: [channel#127, id#128, spark_grouping_id#129, sum#136, isEmpty#137, sum#138, isEmpty#139, sum#140, isEmpty#141]

(105) Exchange
Input [9]: [channel#127, id#128, spark_grouping_id#129, sum#136, isEmpty#137, sum#138, isEmpty#139, sum#140, isEmpty#141]
Arguments: hashpartitioning(channel#127, id#128, spark_grouping_id#129, 5), ENSURE_REQUIREMENTS, [id=#142]

(106) HashAggregate [codegen id : 32]
Input [9]: [channel#127, id#128, spark_grouping_id#129, sum#136, isEmpty#137, sum#138, isEmpty#139, sum#140, isEmpty#141]
Keys [3]: [channel#127, id#128, spark_grouping_id#129]
Functions [3]: [sum(sales#44), sum(returns#45), sum(profit#46)]
Aggregate Attributes [3]: [sum(sales#44)#143, sum(returns#45)#144, sum(profit#46)#145]
Results [5]: [channel#127, id#128, sum(sales#44)#143 AS sales#146, sum(returns#45)#144 AS returns#147, sum(profit#46)#145 AS profit#148]

(107) TakeOrderedAndProject
Input [5]: [channel#127, id#128, sales#146, returns#147, profit#148]
Arguments: 100, [channel#127 ASC NULLS FIRST, id#128 ASC NULLS FIRST], [channel#127, id#128, sales#146, returns#147, profit#148]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#9, [id=#10]
ObjectHashAggregate (114)
+- Exchange (113)
   +- ObjectHashAggregate (112)
      +- * Project (111)
         +- * Filter (110)
            +- * ColumnarToRow (109)
               +- Scan parquet default.item (108)


(108) Scan parquet default.item
Output [2]: [i_item_sk#20, i_current_price#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(109) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#20, i_current_price#21]

(110) Filter [codegen id : 1]
Input [2]: [i_item_sk#20, i_current_price#21]
Condition : ((isnotnull(i_current_price#21) AND (i_current_price#21 > 50.00)) AND isnotnull(i_item_sk#20))

(111) Project [codegen id : 1]
Output [1]: [i_item_sk#20]
Input [2]: [i_item_sk#20, i_current_price#21]

(112) ObjectHashAggregate
Input [1]: [i_item_sk#20]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#20, 42), 101823, 814584, 0, 0)]
Aggregate Attributes [1]: [buf#149]
Results [1]: [buf#150]

(113) Exchange
Input [1]: [buf#150]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#151]

(114) ObjectHashAggregate
Input [1]: [buf#150]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#20, 42), 101823, 814584, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#20, 42), 101823, 814584, 0, 0)#152]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#20, 42), 101823, 814584, 0, 0)#152 AS bloomFilter#153]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
ObjectHashAggregate (121)
+- Exchange (120)
   +- ObjectHashAggregate (119)
      +- * Project (118)
         +- * Filter (117)
            +- * ColumnarToRow (116)
               +- Scan parquet default.promotion (115)


(115) Scan parquet default.promotion
Output [2]: [p_promo_sk#23, p_channel_tv#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(116) ColumnarToRow [codegen id : 1]
Input [2]: [p_promo_sk#23, p_channel_tv#24]

(117) Filter [codegen id : 1]
Input [2]: [p_promo_sk#23, p_channel_tv#24]
Condition : ((isnotnull(p_channel_tv#24) AND (p_channel_tv#24 = N)) AND isnotnull(p_promo_sk#23))

(118) Project [codegen id : 1]
Output [1]: [p_promo_sk#23]
Input [2]: [p_promo_sk#23, p_channel_tv#24]

(119) ObjectHashAggregate
Input [1]: [p_promo_sk#23]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(p_promo_sk#23, 42), 986, 7888, 0, 0)]
Aggregate Attributes [1]: [buf#154]
Results [1]: [buf#155]

(120) Exchange
Input [1]: [buf#155]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#156]

(121) ObjectHashAggregate
Input [1]: [buf#155]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(p_promo_sk#23, 42), 986, 7888, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(p_promo_sk#23, 42), 986, 7888, 0, 0)#157]
Results [1]: [bloom_filter_agg(xxhash64(p_promo_sk#23, 42), 986, 7888, 0, 0)#157 AS bloomFilter#158]

Subquery:3 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (126)
+- * Project (125)
   +- * Filter (124)
      +- * ColumnarToRow (123)
         +- Scan parquet default.date_dim (122)


(122) Scan parquet default.date_dim
Output [2]: [d_date_sk#26, d_date#159]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-23), LessThanOrEqual(d_date,2000-09-22), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(123) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#26, d_date#159]

(124) Filter [codegen id : 1]
Input [2]: [d_date_sk#26, d_date#159]
Condition : (((isnotnull(d_date#159) AND (d_date#159 >= 2000-08-23)) AND (d_date#159 <= 2000-09-22)) AND isnotnull(d_date_sk#26))

(125) Project [codegen id : 1]
Output [1]: [d_date_sk#26]
Input [2]: [d_date_sk#26, d_date#159]

(126) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#160]

Subquery:4 Hosting operator id = 42 Hosting Expression = ReusedSubquery Subquery scalar-subquery#9, [id=#10]

Subquery:5 Hosting operator id = 42 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:6 Hosting operator id = 40 Hosting Expression = cs_sold_date_sk#55 IN dynamicpruning#8

Subquery:7 Hosting operator id = 73 Hosting Expression = ReusedSubquery Subquery scalar-subquery#9, [id=#10]

Subquery:8 Hosting operator id = 73 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:9 Hosting operator id = 71 Hosting Expression = ws_sold_date_sk#94 IN dynamicpruning#8


