== Physical Plan ==
TakeOrderedAndProject (126)
+- * Project (125)
   +- * SortMergeJoin Inner (124)
      :- * Project (106)
      :  +- * SortMergeJoin Inner (105)
      :     :- * Project (85)
      :     :  +- * SortMergeJoin Inner (84)
      :     :     :- * Project (66)
      :     :     :  +- * SortMergeJoin Inner (65)
      :     :     :     :- * SortMergeJoin Inner (45)
      :     :     :     :  :- * Sort (24)
      :     :     :     :  :  +- Exchange (23)
      :     :     :     :  :     +- * Filter (22)
      :     :     :     :  :        +- * HashAggregate (21)
      :     :     :     :  :           +- Exchange (20)
      :     :     :     :  :              +- * HashAggregate (19)
      :     :     :     :  :                 +- * Project (18)
      :     :     :     :  :                    +- * SortMergeJoin Inner (17)
      :     :     :     :  :                       :- * Sort (11)
      :     :     :     :  :                       :  +- Exchange (10)
      :     :     :     :  :                       :     +- * Project (9)
      :     :     :     :  :                       :        +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :     :  :                       :           :- * Filter (3)
      :     :     :     :  :                       :           :  +- * ColumnarToRow (2)
      :     :     :     :  :                       :           :     +- Scan parquet default.store_sales (1)
      :     :     :     :  :                       :           +- BroadcastExchange (7)
      :     :     :     :  :                       :              +- * Filter (6)
      :     :     :     :  :                       :                 +- * ColumnarToRow (5)
      :     :     :     :  :                       :                    +- Scan parquet default.date_dim (4)
      :     :     :     :  :                       +- * Sort (16)
      :     :     :     :  :                          +- Exchange (15)
      :     :     :     :  :                             +- * Filter (14)
      :     :     :     :  :                                +- * ColumnarToRow (13)
      :     :     :     :  :                                   +- Scan parquet default.customer (12)
      :     :     :     :  +- * Sort (44)
      :     :     :     :     +- Exchange (43)
      :     :     :     :        +- * HashAggregate (42)
      :     :     :     :           +- Exchange (41)
      :     :     :     :              +- * HashAggregate (40)
      :     :     :     :                 +- * Project (39)
      :     :     :     :                    +- * SortMergeJoin Inner (38)
      :     :     :     :                       :- * Sort (35)
      :     :     :     :                       :  +- Exchange (34)
      :     :     :     :                       :     +- * Project (33)
      :     :     :     :                       :        +- * BroadcastHashJoin Inner BuildRight (32)
      :     :     :     :                       :           :- * Filter (27)
      :     :     :     :                       :           :  +- * ColumnarToRow (26)
      :     :     :     :                       :           :     +- Scan parquet default.store_sales (25)
      :     :     :     :                       :           +- BroadcastExchange (31)
      :     :     :     :                       :              +- * Filter (30)
      :     :     :     :                       :                 +- * ColumnarToRow (29)
      :     :     :     :                       :                    +- Scan parquet default.date_dim (28)
      :     :     :     :                       +- * Sort (37)
      :     :     :     :                          +- ReusedExchange (36)
      :     :     :     +- * Sort (64)
      :     :     :        +- Exchange (63)
      :     :     :           +- * Project (62)
      :     :     :              +- * Filter (61)
      :     :     :                 +- * HashAggregate (60)
      :     :     :                    +- Exchange (59)
      :     :     :                       +- * HashAggregate (58)
      :     :     :                          +- * Project (57)
      :     :     :                             +- * SortMergeJoin Inner (56)
      :     :     :                                :- * Sort (53)
      :     :     :                                :  +- Exchange (52)
      :     :     :                                :     +- * Project (51)
      :     :     :                                :        +- * BroadcastHashJoin Inner BuildRight (50)
      :     :     :                                :           :- * Filter (48)
      :     :     :                                :           :  +- * ColumnarToRow (47)
      :     :     :                                :           :     +- Scan parquet default.catalog_sales (46)
      :     :     :                                :           +- ReusedExchange (49)
      :     :     :                                +- * Sort (55)
      :     :     :                                   +- ReusedExchange (54)
      :     :     +- * Sort (83)
      :     :        +- Exchange (82)
      :     :           +- * HashAggregate (81)
      :     :              +- Exchange (80)
      :     :                 +- * HashAggregate (79)
      :     :                    +- * Project (78)
      :     :                       +- * SortMergeJoin Inner (77)
      :     :                          :- * Sort (74)
      :     :                          :  +- Exchange (73)
      :     :                          :     +- * Project (72)
      :     :                          :        +- * BroadcastHashJoin Inner BuildRight (71)
      :     :                          :           :- * Filter (69)
      :     :                          :           :  +- * ColumnarToRow (68)
      :     :                          :           :     +- Scan parquet default.catalog_sales (67)
      :     :                          :           +- ReusedExchange (70)
      :     :                          +- * Sort (76)
      :     :                             +- ReusedExchange (75)
      :     +- * Sort (104)
      :        +- Exchange (103)
      :           +- * Project (102)
      :              +- * Filter (101)
      :                 +- * HashAggregate (100)
      :                    +- Exchange (99)
      :                       +- * HashAggregate (98)
      :                          +- * Project (97)
      :                             +- * SortMergeJoin Inner (96)
      :                                :- * Sort (93)
      :                                :  +- Exchange (92)
      :                                :     +- * Project (91)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (90)
      :                                :           :- * Filter (88)
      :                                :           :  +- * ColumnarToRow (87)
      :                                :           :     +- Scan parquet default.web_sales (86)
      :                                :           +- ReusedExchange (89)
      :                                +- * Sort (95)
      :                                   +- ReusedExchange (94)
      +- * Sort (123)
         +- Exchange (122)
            +- * HashAggregate (121)
               +- Exchange (120)
                  +- * HashAggregate (119)
                     +- * Project (118)
                        +- * SortMergeJoin Inner (117)
                           :- * Sort (114)
                           :  +- Exchange (113)
                           :     +- * Project (112)
                           :        +- * BroadcastHashJoin Inner BuildRight (111)
                           :           :- * Filter (109)
                           :           :  +- * ColumnarToRow (108)
                           :           :     +- Scan parquet default.web_sales (107)
                           :           +- ReusedExchange (110)
                           +- * Sort (116)
                              +- ReusedExchange (115)


(1) Scan parquet default.store_sales
Output [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 2]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]
Condition : isnotnull(ss_customer_sk#1)

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_year#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]
Condition : ((isnotnull(d_year#9) AND (d_year#9 = 2001)) AND isnotnull(d_date_sk#8))

(7) BroadcastExchange
Input [2]: [d_date_sk#8, d_year#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(9) Project [codegen id : 2]
Output [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Input [8]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6, d_date_sk#8, d_year#9]

(10) Exchange
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#11]

(11) Sort [codegen id : 3]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(13) ColumnarToRow [codegen id : 4]
Input [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]

(14) Filter [codegen id : 4]
Input [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]
Condition : (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))

(15) Exchange
Input [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]
Arguments: hashpartitioning(c_customer_sk#12, 5), ENSURE_REQUIREMENTS, [id=#20]

(16) Sort [codegen id : 5]
Input [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]
Arguments: [c_customer_sk#12 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#12]
Join condition: None

(18) Project [codegen id : 6]
Output [12]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Input [14]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9, c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]

(19) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Keys [8]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#9]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#5 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#4 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#3 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#21, isEmpty#22]
Results [10]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#9, sum#23, isEmpty#24]

(20) Exchange
Input [10]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#9, sum#23, isEmpty#24]
Arguments: hashpartitioning(c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#9, 5), ENSURE_REQUIREMENTS, [id=#25]

(21) HashAggregate [codegen id : 7]
Input [10]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#9, sum#23, isEmpty#24]
Keys [8]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#9]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#5 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#4 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#3 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#5 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#4 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#3 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#26]
Results [2]: [c_customer_id#13 AS customer_id#27, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#5 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#4 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#3 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#26 AS year_total#28]

(22) Filter [codegen id : 7]
Input [2]: [customer_id#27, year_total#28]
Condition : (isnotnull(year_total#28) AND (year_total#28 > 0.000000))

(23) Exchange
Input [2]: [customer_id#27, year_total#28]
Arguments: hashpartitioning(customer_id#27, 5), ENSURE_REQUIREMENTS, [id=#29]

(24) Sort [codegen id : 8]
Input [2]: [customer_id#27, year_total#28]
Arguments: [customer_id#27 ASC NULLS FIRST], false, 0

(25) Scan parquet default.store_sales
Output [6]: [ss_customer_sk#30, ss_ext_discount_amt#31, ss_ext_sales_price#32, ss_ext_wholesale_cost#33, ss_ext_list_price#34, ss_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#35), dynamicpruningexpression(ss_sold_date_sk#35 IN dynamicpruning#36)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(26) ColumnarToRow [codegen id : 10]
Input [6]: [ss_customer_sk#30, ss_ext_discount_amt#31, ss_ext_sales_price#32, ss_ext_wholesale_cost#33, ss_ext_list_price#34, ss_sold_date_sk#35]

(27) Filter [codegen id : 10]
Input [6]: [ss_customer_sk#30, ss_ext_discount_amt#31, ss_ext_sales_price#32, ss_ext_wholesale_cost#33, ss_ext_list_price#34, ss_sold_date_sk#35]
Condition : isnotnull(ss_customer_sk#30)

(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#37, d_year#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(29) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#37, d_year#38]

(30) Filter [codegen id : 9]
Input [2]: [d_date_sk#37, d_year#38]
Condition : ((isnotnull(d_year#38) AND (d_year#38 = 2002)) AND isnotnull(d_date_sk#37))

(31) BroadcastExchange
Input [2]: [d_date_sk#37, d_year#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#39]

(32) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#35]
Right keys [1]: [d_date_sk#37]
Join condition: None

(33) Project [codegen id : 10]
Output [6]: [ss_customer_sk#30, ss_ext_discount_amt#31, ss_ext_sales_price#32, ss_ext_wholesale_cost#33, ss_ext_list_price#34, d_year#38]
Input [8]: [ss_customer_sk#30, ss_ext_discount_amt#31, ss_ext_sales_price#32, ss_ext_wholesale_cost#33, ss_ext_list_price#34, ss_sold_date_sk#35, d_date_sk#37, d_year#38]

(34) Exchange
Input [6]: [ss_customer_sk#30, ss_ext_discount_amt#31, ss_ext_sales_price#32, ss_ext_wholesale_cost#33, ss_ext_list_price#34, d_year#38]
Arguments: hashpartitioning(ss_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#40]

(35) Sort [codegen id : 11]
Input [6]: [ss_customer_sk#30, ss_ext_discount_amt#31, ss_ext_sales_price#32, ss_ext_wholesale_cost#33, ss_ext_list_price#34, d_year#38]
Arguments: [ss_customer_sk#30 ASC NULLS FIRST], false, 0

(36) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#41, c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48]

(37) Sort [codegen id : 13]
Input [8]: [c_customer_sk#41, c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48]
Arguments: [c_customer_sk#41 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#30]
Right keys [1]: [c_customer_sk#41]
Join condition: None

(39) Project [codegen id : 14]
Output [12]: [c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48, ss_ext_discount_amt#31, ss_ext_sales_price#32, ss_ext_wholesale_cost#33, ss_ext_list_price#34, d_year#38]
Input [14]: [ss_customer_sk#30, ss_ext_discount_amt#31, ss_ext_sales_price#32, ss_ext_wholesale_cost#33, ss_ext_list_price#34, d_year#38, c_customer_sk#41, c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48]

(40) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48, ss_ext_discount_amt#31, ss_ext_sales_price#32, ss_ext_wholesale_cost#33, ss_ext_list_price#34, d_year#38]
Keys [8]: [c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48, d_year#38]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#34 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#33 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#31 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#32 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#49, isEmpty#50]
Results [10]: [c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48, d_year#38, sum#51, isEmpty#52]

(41) Exchange
Input [10]: [c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48, d_year#38, sum#51, isEmpty#52]
Arguments: hashpartitioning(c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48, d_year#38, 5), ENSURE_REQUIREMENTS, [id=#53]

(42) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48, d_year#38, sum#51, isEmpty#52]
Keys [8]: [c_customer_id#42, c_first_name#43, c_last_name#44, c_preferred_cust_flag#45, c_birth_country#46, c_login#47, c_email_address#48, d_year#38]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#34 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#33 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#31 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#32 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#34 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#33 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#31 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#32 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#54]
Results [8]: [c_customer_id#42 AS customer_id#55, c_first_name#43 AS customer_first_name#56, c_last_name#44 AS customer_last_name#57, c_preferred_cust_flag#45 AS customer_preferred_cust_flag#58, c_birth_country#46 AS customer_birth_country#59, c_login#47 AS customer_login#60, c_email_address#48 AS customer_email_address#61, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#34 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#33 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#31 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#32 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#54 AS year_total#62]

(43) Exchange
Input [8]: [customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61, year_total#62]
Arguments: hashpartitioning(customer_id#55, 5), ENSURE_REQUIREMENTS, [id=#63]

(44) Sort [codegen id : 16]
Input [8]: [customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61, year_total#62]
Arguments: [customer_id#55 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#27]
Right keys [1]: [customer_id#55]
Join condition: None

(46) Scan parquet default.catalog_sales
Output [6]: [cs_bill_customer_sk#64, cs_ext_discount_amt#65, cs_ext_sales_price#66, cs_ext_wholesale_cost#67, cs_ext_list_price#68, cs_sold_date_sk#69]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#69), dynamicpruningexpression(cs_sold_date_sk#69 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(47) ColumnarToRow [codegen id : 19]
Input [6]: [cs_bill_customer_sk#64, cs_ext_discount_amt#65, cs_ext_sales_price#66, cs_ext_wholesale_cost#67, cs_ext_list_price#68, cs_sold_date_sk#69]

(48) Filter [codegen id : 19]
Input [6]: [cs_bill_customer_sk#64, cs_ext_discount_amt#65, cs_ext_sales_price#66, cs_ext_wholesale_cost#67, cs_ext_list_price#68, cs_sold_date_sk#69]
Condition : isnotnull(cs_bill_customer_sk#64)

(49) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#70, d_year#71]

(50) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#69]
Right keys [1]: [d_date_sk#70]
Join condition: None

(51) Project [codegen id : 19]
Output [6]: [cs_bill_customer_sk#64, cs_ext_discount_amt#65, cs_ext_sales_price#66, cs_ext_wholesale_cost#67, cs_ext_list_price#68, d_year#71]
Input [8]: [cs_bill_customer_sk#64, cs_ext_discount_amt#65, cs_ext_sales_price#66, cs_ext_wholesale_cost#67, cs_ext_list_price#68, cs_sold_date_sk#69, d_date_sk#70, d_year#71]

(52) Exchange
Input [6]: [cs_bill_customer_sk#64, cs_ext_discount_amt#65, cs_ext_sales_price#66, cs_ext_wholesale_cost#67, cs_ext_list_price#68, d_year#71]
Arguments: hashpartitioning(cs_bill_customer_sk#64, 5), ENSURE_REQUIREMENTS, [id=#72]

(53) Sort [codegen id : 20]
Input [6]: [cs_bill_customer_sk#64, cs_ext_discount_amt#65, cs_ext_sales_price#66, cs_ext_wholesale_cost#67, cs_ext_list_price#68, d_year#71]
Arguments: [cs_bill_customer_sk#64 ASC NULLS FIRST], false, 0

(54) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#73, c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80]

(55) Sort [codegen id : 22]
Input [8]: [c_customer_sk#73, c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80]
Arguments: [c_customer_sk#73 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 23]
Left keys [1]: [cs_bill_customer_sk#64]
Right keys [1]: [c_customer_sk#73]
Join condition: None

(57) Project [codegen id : 23]
Output [12]: [c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80, cs_ext_discount_amt#65, cs_ext_sales_price#66, cs_ext_wholesale_cost#67, cs_ext_list_price#68, d_year#71]
Input [14]: [cs_bill_customer_sk#64, cs_ext_discount_amt#65, cs_ext_sales_price#66, cs_ext_wholesale_cost#67, cs_ext_list_price#68, d_year#71, c_customer_sk#73, c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80]

(58) HashAggregate [codegen id : 23]
Input [12]: [c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80, cs_ext_discount_amt#65, cs_ext_sales_price#66, cs_ext_wholesale_cost#67, cs_ext_list_price#68, d_year#71]
Keys [8]: [c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80, d_year#71]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#68 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#67 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#65 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#66 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#81, isEmpty#82]
Results [10]: [c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80, d_year#71, sum#83, isEmpty#84]

(59) Exchange
Input [10]: [c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80, d_year#71, sum#83, isEmpty#84]
Arguments: hashpartitioning(c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80, d_year#71, 5), ENSURE_REQUIREMENTS, [id=#85]

(60) HashAggregate [codegen id : 24]
Input [10]: [c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80, d_year#71, sum#83, isEmpty#84]
Keys [8]: [c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80, d_year#71]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#68 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#67 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#65 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#66 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#68 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#67 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#65 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#66 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#86]
Results [2]: [c_customer_id#74 AS customer_id#87, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#68 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#67 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#65 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#66 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#86 AS year_total#88]

(61) Filter [codegen id : 24]
Input [2]: [customer_id#87, year_total#88]
Condition : (isnotnull(year_total#88) AND (year_total#88 > 0.000000))

(62) Project [codegen id : 24]
Output [2]: [customer_id#87 AS customer_id#89, year_total#88 AS year_total#90]
Input [2]: [customer_id#87, year_total#88]

(63) Exchange
Input [2]: [customer_id#89, year_total#90]
Arguments: hashpartitioning(customer_id#89, 5), ENSURE_REQUIREMENTS, [id=#91]

(64) Sort [codegen id : 25]
Input [2]: [customer_id#89, year_total#90]
Arguments: [customer_id#89 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#27]
Right keys [1]: [customer_id#89]
Join condition: None

(66) Project [codegen id : 26]
Output [11]: [customer_id#27, year_total#28, customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61, year_total#62, year_total#90]
Input [12]: [customer_id#27, year_total#28, customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61, year_total#62, customer_id#89, year_total#90]

(67) Scan parquet default.catalog_sales
Output [6]: [cs_bill_customer_sk#92, cs_ext_discount_amt#93, cs_ext_sales_price#94, cs_ext_wholesale_cost#95, cs_ext_list_price#96, cs_sold_date_sk#97]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#97), dynamicpruningexpression(cs_sold_date_sk#97 IN dynamicpruning#36)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(68) ColumnarToRow [codegen id : 28]
Input [6]: [cs_bill_customer_sk#92, cs_ext_discount_amt#93, cs_ext_sales_price#94, cs_ext_wholesale_cost#95, cs_ext_list_price#96, cs_sold_date_sk#97]

(69) Filter [codegen id : 28]
Input [6]: [cs_bill_customer_sk#92, cs_ext_discount_amt#93, cs_ext_sales_price#94, cs_ext_wholesale_cost#95, cs_ext_list_price#96, cs_sold_date_sk#97]
Condition : isnotnull(cs_bill_customer_sk#92)

(70) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#98, d_year#99]

(71) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [cs_sold_date_sk#97]
Right keys [1]: [d_date_sk#98]
Join condition: None

(72) Project [codegen id : 28]
Output [6]: [cs_bill_customer_sk#92, cs_ext_discount_amt#93, cs_ext_sales_price#94, cs_ext_wholesale_cost#95, cs_ext_list_price#96, d_year#99]
Input [8]: [cs_bill_customer_sk#92, cs_ext_discount_amt#93, cs_ext_sales_price#94, cs_ext_wholesale_cost#95, cs_ext_list_price#96, cs_sold_date_sk#97, d_date_sk#98, d_year#99]

(73) Exchange
Input [6]: [cs_bill_customer_sk#92, cs_ext_discount_amt#93, cs_ext_sales_price#94, cs_ext_wholesale_cost#95, cs_ext_list_price#96, d_year#99]
Arguments: hashpartitioning(cs_bill_customer_sk#92, 5), ENSURE_REQUIREMENTS, [id=#100]

(74) Sort [codegen id : 29]
Input [6]: [cs_bill_customer_sk#92, cs_ext_discount_amt#93, cs_ext_sales_price#94, cs_ext_wholesale_cost#95, cs_ext_list_price#96, d_year#99]
Arguments: [cs_bill_customer_sk#92 ASC NULLS FIRST], false, 0

(75) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#101, c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108]

(76) Sort [codegen id : 31]
Input [8]: [c_customer_sk#101, c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108]
Arguments: [c_customer_sk#101 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 32]
Left keys [1]: [cs_bill_customer_sk#92]
Right keys [1]: [c_customer_sk#101]
Join condition: None

(78) Project [codegen id : 32]
Output [12]: [c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108, cs_ext_discount_amt#93, cs_ext_sales_price#94, cs_ext_wholesale_cost#95, cs_ext_list_price#96, d_year#99]
Input [14]: [cs_bill_customer_sk#92, cs_ext_discount_amt#93, cs_ext_sales_price#94, cs_ext_wholesale_cost#95, cs_ext_list_price#96, d_year#99, c_customer_sk#101, c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108]

(79) HashAggregate [codegen id : 32]
Input [12]: [c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108, cs_ext_discount_amt#93, cs_ext_sales_price#94, cs_ext_wholesale_cost#95, cs_ext_list_price#96, d_year#99]
Keys [8]: [c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108, d_year#99]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#96 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#95 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#93 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#94 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#109, isEmpty#110]
Results [10]: [c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108, d_year#99, sum#111, isEmpty#112]

(80) Exchange
Input [10]: [c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108, d_year#99, sum#111, isEmpty#112]
Arguments: hashpartitioning(c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108, d_year#99, 5), ENSURE_REQUIREMENTS, [id=#113]

(81) HashAggregate [codegen id : 33]
Input [10]: [c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108, d_year#99, sum#111, isEmpty#112]
Keys [8]: [c_customer_id#102, c_first_name#103, c_last_name#104, c_preferred_cust_flag#105, c_birth_country#106, c_login#107, c_email_address#108, d_year#99]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#96 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#95 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#93 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#94 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#96 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#95 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#93 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#94 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#114]
Results [2]: [c_customer_id#102 AS customer_id#115, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#96 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#95 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#93 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#94 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#114 AS year_total#116]

(82) Exchange
Input [2]: [customer_id#115, year_total#116]
Arguments: hashpartitioning(customer_id#115, 5), ENSURE_REQUIREMENTS, [id=#117]

(83) Sort [codegen id : 34]
Input [2]: [customer_id#115, year_total#116]
Arguments: [customer_id#115 ASC NULLS FIRST], false, 0

(84) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#27]
Right keys [1]: [customer_id#115]
Join condition: (CASE WHEN (year_total#90 > 0.000000) THEN CheckOverflow((promote_precision(year_total#116) / promote_precision(year_total#90)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#28 > 0.000000) THEN CheckOverflow((promote_precision(year_total#62) / promote_precision(year_total#28)), DecimalType(38,14), true) ELSE null END)

(85) Project [codegen id : 35]
Output [10]: [customer_id#27, customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61, year_total#90, year_total#116]
Input [13]: [customer_id#27, year_total#28, customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61, year_total#62, year_total#90, customer_id#115, year_total#116]

(86) Scan parquet default.web_sales
Output [6]: [ws_bill_customer_sk#118, ws_ext_discount_amt#119, ws_ext_sales_price#120, ws_ext_wholesale_cost#121, ws_ext_list_price#122, ws_sold_date_sk#123]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#123), dynamicpruningexpression(ws_sold_date_sk#123 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(87) ColumnarToRow [codegen id : 37]
Input [6]: [ws_bill_customer_sk#118, ws_ext_discount_amt#119, ws_ext_sales_price#120, ws_ext_wholesale_cost#121, ws_ext_list_price#122, ws_sold_date_sk#123]

(88) Filter [codegen id : 37]
Input [6]: [ws_bill_customer_sk#118, ws_ext_discount_amt#119, ws_ext_sales_price#120, ws_ext_wholesale_cost#121, ws_ext_list_price#122, ws_sold_date_sk#123]
Condition : isnotnull(ws_bill_customer_sk#118)

(89) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#124, d_year#125]

(90) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ws_sold_date_sk#123]
Right keys [1]: [d_date_sk#124]
Join condition: None

(91) Project [codegen id : 37]
Output [6]: [ws_bill_customer_sk#118, ws_ext_discount_amt#119, ws_ext_sales_price#120, ws_ext_wholesale_cost#121, ws_ext_list_price#122, d_year#125]
Input [8]: [ws_bill_customer_sk#118, ws_ext_discount_amt#119, ws_ext_sales_price#120, ws_ext_wholesale_cost#121, ws_ext_list_price#122, ws_sold_date_sk#123, d_date_sk#124, d_year#125]

(92) Exchange
Input [6]: [ws_bill_customer_sk#118, ws_ext_discount_amt#119, ws_ext_sales_price#120, ws_ext_wholesale_cost#121, ws_ext_list_price#122, d_year#125]
Arguments: hashpartitioning(ws_bill_customer_sk#118, 5), ENSURE_REQUIREMENTS, [id=#126]

(93) Sort [codegen id : 38]
Input [6]: [ws_bill_customer_sk#118, ws_ext_discount_amt#119, ws_ext_sales_price#120, ws_ext_wholesale_cost#121, ws_ext_list_price#122, d_year#125]
Arguments: [ws_bill_customer_sk#118 ASC NULLS FIRST], false, 0

(94) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#127, c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134]

(95) Sort [codegen id : 40]
Input [8]: [c_customer_sk#127, c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134]
Arguments: [c_customer_sk#127 ASC NULLS FIRST], false, 0

(96) SortMergeJoin [codegen id : 41]
Left keys [1]: [ws_bill_customer_sk#118]
Right keys [1]: [c_customer_sk#127]
Join condition: None

(97) Project [codegen id : 41]
Output [12]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, ws_ext_discount_amt#119, ws_ext_sales_price#120, ws_ext_wholesale_cost#121, ws_ext_list_price#122, d_year#125]
Input [14]: [ws_bill_customer_sk#118, ws_ext_discount_amt#119, ws_ext_sales_price#120, ws_ext_wholesale_cost#121, ws_ext_list_price#122, d_year#125, c_customer_sk#127, c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134]

(98) HashAggregate [codegen id : 41]
Input [12]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, ws_ext_discount_amt#119, ws_ext_sales_price#120, ws_ext_wholesale_cost#121, ws_ext_list_price#122, d_year#125]
Keys [8]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#125]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#121 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#119 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#120 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#135, isEmpty#136]
Results [10]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#125, sum#137, isEmpty#138]

(99) Exchange
Input [10]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#125, sum#137, isEmpty#138]
Arguments: hashpartitioning(c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#125, 5), ENSURE_REQUIREMENTS, [id=#139]

(100) HashAggregate [codegen id : 42]
Input [10]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#125, sum#137, isEmpty#138]
Keys [8]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#125]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#121 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#119 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#120 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#121 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#119 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#120 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#140]
Results [2]: [c_customer_id#128 AS customer_id#141, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#122 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#121 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#119 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#120 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#140 AS year_total#142]

(101) Filter [codegen id : 42]
Input [2]: [customer_id#141, year_total#142]
Condition : (isnotnull(year_total#142) AND (year_total#142 > 0.000000))

(102) Project [codegen id : 42]
Output [2]: [customer_id#141 AS customer_id#143, year_total#142 AS year_total#144]
Input [2]: [customer_id#141, year_total#142]

(103) Exchange
Input [2]: [customer_id#143, year_total#144]
Arguments: hashpartitioning(customer_id#143, 5), ENSURE_REQUIREMENTS, [id=#145]

(104) Sort [codegen id : 43]
Input [2]: [customer_id#143, year_total#144]
Arguments: [customer_id#143 ASC NULLS FIRST], false, 0

(105) SortMergeJoin [codegen id : 44]
Left keys [1]: [customer_id#27]
Right keys [1]: [customer_id#143]
Join condition: None

(106) Project [codegen id : 44]
Output [11]: [customer_id#27, customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61, year_total#90, year_total#116, year_total#144]
Input [12]: [customer_id#27, customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61, year_total#90, year_total#116, customer_id#143, year_total#144]

(107) Scan parquet default.web_sales
Output [6]: [ws_bill_customer_sk#146, ws_ext_discount_amt#147, ws_ext_sales_price#148, ws_ext_wholesale_cost#149, ws_ext_list_price#150, ws_sold_date_sk#151]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#151), dynamicpruningexpression(ws_sold_date_sk#151 IN dynamicpruning#36)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(108) ColumnarToRow [codegen id : 46]
Input [6]: [ws_bill_customer_sk#146, ws_ext_discount_amt#147, ws_ext_sales_price#148, ws_ext_wholesale_cost#149, ws_ext_list_price#150, ws_sold_date_sk#151]

(109) Filter [codegen id : 46]
Input [6]: [ws_bill_customer_sk#146, ws_ext_discount_amt#147, ws_ext_sales_price#148, ws_ext_wholesale_cost#149, ws_ext_list_price#150, ws_sold_date_sk#151]
Condition : isnotnull(ws_bill_customer_sk#146)

(110) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#152, d_year#153]

(111) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [ws_sold_date_sk#151]
Right keys [1]: [d_date_sk#152]
Join condition: None

(112) Project [codegen id : 46]
Output [6]: [ws_bill_customer_sk#146, ws_ext_discount_amt#147, ws_ext_sales_price#148, ws_ext_wholesale_cost#149, ws_ext_list_price#150, d_year#153]
Input [8]: [ws_bill_customer_sk#146, ws_ext_discount_amt#147, ws_ext_sales_price#148, ws_ext_wholesale_cost#149, ws_ext_list_price#150, ws_sold_date_sk#151, d_date_sk#152, d_year#153]

(113) Exchange
Input [6]: [ws_bill_customer_sk#146, ws_ext_discount_amt#147, ws_ext_sales_price#148, ws_ext_wholesale_cost#149, ws_ext_list_price#150, d_year#153]
Arguments: hashpartitioning(ws_bill_customer_sk#146, 5), ENSURE_REQUIREMENTS, [id=#154]

(114) Sort [codegen id : 47]
Input [6]: [ws_bill_customer_sk#146, ws_ext_discount_amt#147, ws_ext_sales_price#148, ws_ext_wholesale_cost#149, ws_ext_list_price#150, d_year#153]
Arguments: [ws_bill_customer_sk#146 ASC NULLS FIRST], false, 0

(115) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#155, c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162]

(116) Sort [codegen id : 49]
Input [8]: [c_customer_sk#155, c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162]
Arguments: [c_customer_sk#155 ASC NULLS FIRST], false, 0

(117) SortMergeJoin [codegen id : 50]
Left keys [1]: [ws_bill_customer_sk#146]
Right keys [1]: [c_customer_sk#155]
Join condition: None

(118) Project [codegen id : 50]
Output [12]: [c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162, ws_ext_discount_amt#147, ws_ext_sales_price#148, ws_ext_wholesale_cost#149, ws_ext_list_price#150, d_year#153]
Input [14]: [ws_bill_customer_sk#146, ws_ext_discount_amt#147, ws_ext_sales_price#148, ws_ext_wholesale_cost#149, ws_ext_list_price#150, d_year#153, c_customer_sk#155, c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162]

(119) HashAggregate [codegen id : 50]
Input [12]: [c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162, ws_ext_discount_amt#147, ws_ext_sales_price#148, ws_ext_wholesale_cost#149, ws_ext_list_price#150, d_year#153]
Keys [8]: [c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162, d_year#153]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#150 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#147 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#148 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#163, isEmpty#164]
Results [10]: [c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162, d_year#153, sum#165, isEmpty#166]

(120) Exchange
Input [10]: [c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162, d_year#153, sum#165, isEmpty#166]
Arguments: hashpartitioning(c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162, d_year#153, 5), ENSURE_REQUIREMENTS, [id=#167]

(121) HashAggregate [codegen id : 51]
Input [10]: [c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162, d_year#153, sum#165, isEmpty#166]
Keys [8]: [c_customer_id#156, c_first_name#157, c_last_name#158, c_preferred_cust_flag#159, c_birth_country#160, c_login#161, c_email_address#162, d_year#153]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#150 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#147 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#148 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#150 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#147 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#148 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#168]
Results [2]: [c_customer_id#156 AS customer_id#169, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#150 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#149 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#147 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#148 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#168 AS year_total#170]

(122) Exchange
Input [2]: [customer_id#169, year_total#170]
Arguments: hashpartitioning(customer_id#169, 5), ENSURE_REQUIREMENTS, [id=#171]

(123) Sort [codegen id : 52]
Input [2]: [customer_id#169, year_total#170]
Arguments: [customer_id#169 ASC NULLS FIRST], false, 0

(124) SortMergeJoin [codegen id : 53]
Left keys [1]: [customer_id#27]
Right keys [1]: [customer_id#169]
Join condition: (CASE WHEN (year_total#90 > 0.000000) THEN CheckOverflow((promote_precision(year_total#116) / promote_precision(year_total#90)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#144 > 0.000000) THEN CheckOverflow((promote_precision(year_total#170) / promote_precision(year_total#144)), DecimalType(38,14), true) ELSE null END)

(125) Project [codegen id : 53]
Output [7]: [customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61]
Input [13]: [customer_id#27, customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61, year_total#90, year_total#116, year_total#144, customer_id#169, year_total#170]

(126) TakeOrderedAndProject
Input [7]: [customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61]
Arguments: 100, [customer_id#55 ASC NULLS FIRST, customer_first_name#56 ASC NULLS FIRST, customer_last_name#57 ASC NULLS FIRST, customer_preferred_cust_flag#58 ASC NULLS FIRST, customer_birth_country#59 ASC NULLS FIRST, customer_login#60 ASC NULLS FIRST, customer_email_address#61 ASC NULLS FIRST], [customer_id#55, customer_first_name#56, customer_last_name#57, customer_preferred_cust_flag#58, customer_birth_country#59, customer_login#60, customer_email_address#61]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
ReusedExchange (127)


(127) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#8, d_year#9]

Subquery:2 Hosting operator id = 25 Hosting Expression = ss_sold_date_sk#35 IN dynamicpruning#36
ReusedExchange (128)


(128) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#37, d_year#38]

Subquery:3 Hosting operator id = 46 Hosting Expression = cs_sold_date_sk#69 IN dynamicpruning#7

Subquery:4 Hosting operator id = 67 Hosting Expression = cs_sold_date_sk#97 IN dynamicpruning#36

Subquery:5 Hosting operator id = 86 Hosting Expression = ws_sold_date_sk#123 IN dynamicpruning#7

Subquery:6 Hosting operator id = 107 Hosting Expression = ws_sold_date_sk#151 IN dynamicpruning#36


