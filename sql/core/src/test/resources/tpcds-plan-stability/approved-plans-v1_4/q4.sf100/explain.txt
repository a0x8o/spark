== Physical Plan ==
TakeOrderedAndProject (118)
+- * Project (117)
   +- * SortMergeJoin Inner (116)
      :- * Project (98)
      :  +- * SortMergeJoin Inner (97)
      :     :- * Project (78)
      :     :  +- * SortMergeJoin Inner (77)
      :     :     :- * Project (59)
      :     :     :  +- * SortMergeJoin Inner (58)
      :     :     :     :- * SortMergeJoin Inner (39)
      :     :     :     :  :- * Sort (21)
      :     :     :     :  :  +- Exchange (20)
      :     :     :     :  :     +- * Filter (19)
      :     :     :     :  :        +- * HashAggregate (18)
      :     :     :     :  :           +- Exchange (17)
      :     :     :     :  :              +- * HashAggregate (16)
      :     :     :     :  :                 +- * Project (15)
      :     :     :     :  :                    +- * SortMergeJoin Inner (14)
      :     :     :     :  :                       :- * Sort (8)
      :     :     :     :  :                       :  +- Exchange (7)
      :     :     :     :  :                       :     +- * Project (6)
      :     :     :     :  :                       :        +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :     :  :                       :           :- * Filter (3)
      :     :     :     :  :                       :           :  +- * ColumnarToRow (2)
      :     :     :     :  :                       :           :     +- Scan parquet default.store_sales (1)
      :     :     :     :  :                       :           +- ReusedExchange (4)
      :     :     :     :  :                       +- * Sort (13)
      :     :     :     :  :                          +- Exchange (12)
      :     :     :     :  :                             +- * Filter (11)
      :     :     :     :  :                                +- * ColumnarToRow (10)
      :     :     :     :  :                                   +- Scan parquet default.customer (9)
      :     :     :     :  +- * Sort (38)
      :     :     :     :     +- Exchange (37)
      :     :     :     :        +- * HashAggregate (36)
      :     :     :     :           +- Exchange (35)
      :     :     :     :              +- * HashAggregate (34)
      :     :     :     :                 +- * Project (33)
      :     :     :     :                    +- * SortMergeJoin Inner (32)
      :     :     :     :                       :- * Sort (29)
      :     :     :     :                       :  +- Exchange (28)
      :     :     :     :                       :     +- * Project (27)
      :     :     :     :                       :        +- * BroadcastHashJoin Inner BuildRight (26)
      :     :     :     :                       :           :- * Filter (24)
      :     :     :     :                       :           :  +- * ColumnarToRow (23)
      :     :     :     :                       :           :     +- Scan parquet default.store_sales (22)
      :     :     :     :                       :           +- ReusedExchange (25)
      :     :     :     :                       +- * Sort (31)
      :     :     :     :                          +- ReusedExchange (30)
      :     :     :     +- * Sort (57)
      :     :     :        +- Exchange (56)
      :     :     :           +- * Filter (55)
      :     :     :              +- * HashAggregate (54)
      :     :     :                 +- Exchange (53)
      :     :     :                    +- * HashAggregate (52)
      :     :     :                       +- * Project (51)
      :     :     :                          +- * SortMergeJoin Inner (50)
      :     :     :                             :- * Sort (47)
      :     :     :                             :  +- Exchange (46)
      :     :     :                             :     +- * Project (45)
      :     :     :                             :        +- * BroadcastHashJoin Inner BuildRight (44)
      :     :     :                             :           :- * Filter (42)
      :     :     :                             :           :  +- * ColumnarToRow (41)
      :     :     :                             :           :     +- Scan parquet default.catalog_sales (40)
      :     :     :                             :           +- ReusedExchange (43)
      :     :     :                             +- * Sort (49)
      :     :     :                                +- ReusedExchange (48)
      :     :     +- * Sort (76)
      :     :        +- Exchange (75)
      :     :           +- * HashAggregate (74)
      :     :              +- Exchange (73)
      :     :                 +- * HashAggregate (72)
      :     :                    +- * Project (71)
      :     :                       +- * SortMergeJoin Inner (70)
      :     :                          :- * Sort (67)
      :     :                          :  +- Exchange (66)
      :     :                          :     +- * Project (65)
      :     :                          :        +- * BroadcastHashJoin Inner BuildRight (64)
      :     :                          :           :- * Filter (62)
      :     :                          :           :  +- * ColumnarToRow (61)
      :     :                          :           :     +- Scan parquet default.catalog_sales (60)
      :     :                          :           +- ReusedExchange (63)
      :     :                          +- * Sort (69)
      :     :                             +- ReusedExchange (68)
      :     +- * Sort (96)
      :        +- Exchange (95)
      :           +- * Filter (94)
      :              +- * HashAggregate (93)
      :                 +- Exchange (92)
      :                    +- * HashAggregate (91)
      :                       +- * Project (90)
      :                          +- * SortMergeJoin Inner (89)
      :                             :- * Sort (86)
      :                             :  +- Exchange (85)
      :                             :     +- * Project (84)
      :                             :        +- * BroadcastHashJoin Inner BuildRight (83)
      :                             :           :- * Filter (81)
      :                             :           :  +- * ColumnarToRow (80)
      :                             :           :     +- Scan parquet default.web_sales (79)
      :                             :           +- ReusedExchange (82)
      :                             +- * Sort (88)
      :                                +- ReusedExchange (87)
      +- * Sort (115)
         +- Exchange (114)
            +- * HashAggregate (113)
               +- Exchange (112)
                  +- * HashAggregate (111)
                     +- * Project (110)
                        +- * SortMergeJoin Inner (109)
                           :- * Sort (106)
                           :  +- Exchange (105)
                           :     +- * Project (104)
                           :        +- * BroadcastHashJoin Inner BuildRight (103)
                           :           :- * Filter (101)
                           :           :  +- * ColumnarToRow (100)
                           :           :     +- Scan parquet default.web_sales (99)
                           :           +- ReusedExchange (102)
                           +- * Sort (108)
                              +- ReusedExchange (107)


(1) Scan parquet default.store_sales
Output [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 2]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]
Condition : isnotnull(ss_customer_sk#1)

(4) ReusedExchange [Reuses operator id: 122]
Output [2]: [d_date_sk#8, d_year#9]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(6) Project [codegen id : 2]
Output [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Input [8]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6, d_date_sk#8, d_year#9]

(7) Exchange
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#10]

(8) Sort [codegen id : 3]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet default.customer
Output [8]: [c_customer_sk#11, c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(10) ColumnarToRow [codegen id : 4]
Input [8]: [c_customer_sk#11, c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18]

(11) Filter [codegen id : 4]
Input [8]: [c_customer_sk#11, c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18]
Condition : (isnotnull(c_customer_sk#11) AND isnotnull(c_customer_id#12))

(12) Exchange
Input [8]: [c_customer_sk#11, c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18]
Arguments: hashpartitioning(c_customer_sk#11, 5), ENSURE_REQUIREMENTS, [id=#19]

(13) Sort [codegen id : 5]
Input [8]: [c_customer_sk#11, c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18]
Arguments: [c_customer_sk#11 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#11]
Join condition: None

(15) Project [codegen id : 6]
Output [12]: [c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Input [14]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9, c_customer_sk#11, c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18]

(16) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Keys [8]: [c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18, d_year#9]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#5 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#4 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#3 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#20, isEmpty#21]
Results [10]: [c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18, d_year#9, sum#22, isEmpty#23]

(17) Exchange
Input [10]: [c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18, d_year#9, sum#22, isEmpty#23]
Arguments: hashpartitioning(c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18, d_year#9, 5), ENSURE_REQUIREMENTS, [id=#24]

(18) HashAggregate [codegen id : 7]
Input [10]: [c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18, d_year#9, sum#22, isEmpty#23]
Keys [8]: [c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18, d_year#9]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#5 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#4 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#3 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#5 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#4 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#3 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#25]
Results [2]: [c_customer_id#12 AS customer_id#26, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#5 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#4 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#3 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#25 AS year_total#27]

(19) Filter [codegen id : 7]
Input [2]: [customer_id#26, year_total#27]
Condition : (isnotnull(year_total#27) AND (year_total#27 > 0.000000))

(20) Exchange
Input [2]: [customer_id#26, year_total#27]
Arguments: hashpartitioning(customer_id#26, 5), ENSURE_REQUIREMENTS, [id=#28]

(21) Sort [codegen id : 8]
Input [2]: [customer_id#26, year_total#27]
Arguments: [customer_id#26 ASC NULLS FIRST], false, 0

(22) Scan parquet default.store_sales
Output [6]: [ss_customer_sk#29, ss_ext_discount_amt#30, ss_ext_sales_price#31, ss_ext_wholesale_cost#32, ss_ext_list_price#33, ss_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#34), dynamicpruningexpression(ss_sold_date_sk#34 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(23) ColumnarToRow [codegen id : 10]
Input [6]: [ss_customer_sk#29, ss_ext_discount_amt#30, ss_ext_sales_price#31, ss_ext_wholesale_cost#32, ss_ext_list_price#33, ss_sold_date_sk#34]

(24) Filter [codegen id : 10]
Input [6]: [ss_customer_sk#29, ss_ext_discount_amt#30, ss_ext_sales_price#31, ss_ext_wholesale_cost#32, ss_ext_list_price#33, ss_sold_date_sk#34]
Condition : isnotnull(ss_customer_sk#29)

(25) ReusedExchange [Reuses operator id: 126]
Output [2]: [d_date_sk#36, d_year#37]

(26) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#34]
Right keys [1]: [d_date_sk#36]
Join condition: None

(27) Project [codegen id : 10]
Output [6]: [ss_customer_sk#29, ss_ext_discount_amt#30, ss_ext_sales_price#31, ss_ext_wholesale_cost#32, ss_ext_list_price#33, d_year#37]
Input [8]: [ss_customer_sk#29, ss_ext_discount_amt#30, ss_ext_sales_price#31, ss_ext_wholesale_cost#32, ss_ext_list_price#33, ss_sold_date_sk#34, d_date_sk#36, d_year#37]

(28) Exchange
Input [6]: [ss_customer_sk#29, ss_ext_discount_amt#30, ss_ext_sales_price#31, ss_ext_wholesale_cost#32, ss_ext_list_price#33, d_year#37]
Arguments: hashpartitioning(ss_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#38]

(29) Sort [codegen id : 11]
Input [6]: [ss_customer_sk#29, ss_ext_discount_amt#30, ss_ext_sales_price#31, ss_ext_wholesale_cost#32, ss_ext_list_price#33, d_year#37]
Arguments: [ss_customer_sk#29 ASC NULLS FIRST], false, 0

(30) ReusedExchange [Reuses operator id: 12]
Output [8]: [c_customer_sk#39, c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46]

(31) Sort [codegen id : 13]
Input [8]: [c_customer_sk#39, c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46]
Arguments: [c_customer_sk#39 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#29]
Right keys [1]: [c_customer_sk#39]
Join condition: None

(33) Project [codegen id : 14]
Output [12]: [c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46, ss_ext_discount_amt#30, ss_ext_sales_price#31, ss_ext_wholesale_cost#32, ss_ext_list_price#33, d_year#37]
Input [14]: [ss_customer_sk#29, ss_ext_discount_amt#30, ss_ext_sales_price#31, ss_ext_wholesale_cost#32, ss_ext_list_price#33, d_year#37, c_customer_sk#39, c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46]

(34) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46, ss_ext_discount_amt#30, ss_ext_sales_price#31, ss_ext_wholesale_cost#32, ss_ext_list_price#33, d_year#37]
Keys [8]: [c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46, d_year#37]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#33 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#32 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#30 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#31 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#47, isEmpty#48]
Results [10]: [c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46, d_year#37, sum#49, isEmpty#50]

(35) Exchange
Input [10]: [c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46, d_year#37, sum#49, isEmpty#50]
Arguments: hashpartitioning(c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46, d_year#37, 5), ENSURE_REQUIREMENTS, [id=#51]

(36) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46, d_year#37, sum#49, isEmpty#50]
Keys [8]: [c_customer_id#40, c_first_name#41, c_last_name#42, c_preferred_cust_flag#43, c_birth_country#44, c_login#45, c_email_address#46, d_year#37]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#33 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#32 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#30 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#31 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#33 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#32 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#30 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#31 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#52]
Results [8]: [c_customer_id#40 AS customer_id#53, c_first_name#41 AS customer_first_name#54, c_last_name#42 AS customer_last_name#55, c_preferred_cust_flag#43 AS customer_preferred_cust_flag#56, c_birth_country#44 AS customer_birth_country#57, c_login#45 AS customer_login#58, c_email_address#46 AS customer_email_address#59, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#33 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#32 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#30 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#31 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#52 AS year_total#60]

(37) Exchange
Input [8]: [customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59, year_total#60]
Arguments: hashpartitioning(customer_id#53, 5), ENSURE_REQUIREMENTS, [id=#61]

(38) Sort [codegen id : 16]
Input [8]: [customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59, year_total#60]
Arguments: [customer_id#53 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#26]
Right keys [1]: [customer_id#53]
Join condition: None

(40) Scan parquet default.catalog_sales
Output [6]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#67), dynamicpruningexpression(cs_sold_date_sk#67 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(41) ColumnarToRow [codegen id : 19]
Input [6]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67]

(42) Filter [codegen id : 19]
Input [6]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67]
Condition : isnotnull(cs_bill_customer_sk#62)

(43) ReusedExchange [Reuses operator id: 122]
Output [2]: [d_date_sk#68, d_year#69]

(44) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#67]
Right keys [1]: [d_date_sk#68]
Join condition: None

(45) Project [codegen id : 19]
Output [6]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, d_year#69]
Input [8]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67, d_date_sk#68, d_year#69]

(46) Exchange
Input [6]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, d_year#69]
Arguments: hashpartitioning(cs_bill_customer_sk#62, 5), ENSURE_REQUIREMENTS, [id=#70]

(47) Sort [codegen id : 20]
Input [6]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, d_year#69]
Arguments: [cs_bill_customer_sk#62 ASC NULLS FIRST], false, 0

(48) ReusedExchange [Reuses operator id: 12]
Output [8]: [c_customer_sk#71, c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78]

(49) Sort [codegen id : 22]
Input [8]: [c_customer_sk#71, c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78]
Arguments: [c_customer_sk#71 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 23]
Left keys [1]: [cs_bill_customer_sk#62]
Right keys [1]: [c_customer_sk#71]
Join condition: None

(51) Project [codegen id : 23]
Output [12]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, d_year#69]
Input [14]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, d_year#69, c_customer_sk#71, c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78]

(52) HashAggregate [codegen id : 23]
Input [12]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, d_year#69]
Keys [8]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#69]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#66 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#65 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#63 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#64 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#79, isEmpty#80]
Results [10]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#69, sum#81, isEmpty#82]

(53) Exchange
Input [10]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#69, sum#81, isEmpty#82]
Arguments: hashpartitioning(c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#69, 5), ENSURE_REQUIREMENTS, [id=#83]

(54) HashAggregate [codegen id : 24]
Input [10]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#69, sum#81, isEmpty#82]
Keys [8]: [c_customer_id#72, c_first_name#73, c_last_name#74, c_preferred_cust_flag#75, c_birth_country#76, c_login#77, c_email_address#78, d_year#69]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#66 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#65 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#63 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#64 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#66 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#65 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#63 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#64 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#84]
Results [2]: [c_customer_id#72 AS customer_id#85, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#66 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#65 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#63 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#64 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#84 AS year_total#86]

(55) Filter [codegen id : 24]
Input [2]: [customer_id#85, year_total#86]
Condition : (isnotnull(year_total#86) AND (year_total#86 > 0.000000))

(56) Exchange
Input [2]: [customer_id#85, year_total#86]
Arguments: hashpartitioning(customer_id#85, 5), ENSURE_REQUIREMENTS, [id=#87]

(57) Sort [codegen id : 25]
Input [2]: [customer_id#85, year_total#86]
Arguments: [customer_id#85 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#26]
Right keys [1]: [customer_id#85]
Join condition: None

(59) Project [codegen id : 26]
Output [11]: [customer_id#26, year_total#27, customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59, year_total#60, year_total#86]
Input [12]: [customer_id#26, year_total#27, customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59, year_total#60, customer_id#85, year_total#86]

(60) Scan parquet default.catalog_sales
Output [6]: [cs_bill_customer_sk#88, cs_ext_discount_amt#89, cs_ext_sales_price#90, cs_ext_wholesale_cost#91, cs_ext_list_price#92, cs_sold_date_sk#93]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#93), dynamicpruningexpression(cs_sold_date_sk#93 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(61) ColumnarToRow [codegen id : 28]
Input [6]: [cs_bill_customer_sk#88, cs_ext_discount_amt#89, cs_ext_sales_price#90, cs_ext_wholesale_cost#91, cs_ext_list_price#92, cs_sold_date_sk#93]

(62) Filter [codegen id : 28]
Input [6]: [cs_bill_customer_sk#88, cs_ext_discount_amt#89, cs_ext_sales_price#90, cs_ext_wholesale_cost#91, cs_ext_list_price#92, cs_sold_date_sk#93]
Condition : isnotnull(cs_bill_customer_sk#88)

(63) ReusedExchange [Reuses operator id: 126]
Output [2]: [d_date_sk#94, d_year#95]

(64) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [cs_sold_date_sk#93]
Right keys [1]: [d_date_sk#94]
Join condition: None

(65) Project [codegen id : 28]
Output [6]: [cs_bill_customer_sk#88, cs_ext_discount_amt#89, cs_ext_sales_price#90, cs_ext_wholesale_cost#91, cs_ext_list_price#92, d_year#95]
Input [8]: [cs_bill_customer_sk#88, cs_ext_discount_amt#89, cs_ext_sales_price#90, cs_ext_wholesale_cost#91, cs_ext_list_price#92, cs_sold_date_sk#93, d_date_sk#94, d_year#95]

(66) Exchange
Input [6]: [cs_bill_customer_sk#88, cs_ext_discount_amt#89, cs_ext_sales_price#90, cs_ext_wholesale_cost#91, cs_ext_list_price#92, d_year#95]
Arguments: hashpartitioning(cs_bill_customer_sk#88, 5), ENSURE_REQUIREMENTS, [id=#96]

(67) Sort [codegen id : 29]
Input [6]: [cs_bill_customer_sk#88, cs_ext_discount_amt#89, cs_ext_sales_price#90, cs_ext_wholesale_cost#91, cs_ext_list_price#92, d_year#95]
Arguments: [cs_bill_customer_sk#88 ASC NULLS FIRST], false, 0

(68) ReusedExchange [Reuses operator id: 12]
Output [8]: [c_customer_sk#97, c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104]

(69) Sort [codegen id : 31]
Input [8]: [c_customer_sk#97, c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104]
Arguments: [c_customer_sk#97 ASC NULLS FIRST], false, 0

(70) SortMergeJoin [codegen id : 32]
Left keys [1]: [cs_bill_customer_sk#88]
Right keys [1]: [c_customer_sk#97]
Join condition: None

(71) Project [codegen id : 32]
Output [12]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, cs_ext_discount_amt#89, cs_ext_sales_price#90, cs_ext_wholesale_cost#91, cs_ext_list_price#92, d_year#95]
Input [14]: [cs_bill_customer_sk#88, cs_ext_discount_amt#89, cs_ext_sales_price#90, cs_ext_wholesale_cost#91, cs_ext_list_price#92, d_year#95, c_customer_sk#97, c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104]

(72) HashAggregate [codegen id : 32]
Input [12]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, cs_ext_discount_amt#89, cs_ext_sales_price#90, cs_ext_wholesale_cost#91, cs_ext_list_price#92, d_year#95]
Keys [8]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#95]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#92 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#91 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#89 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#90 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#105, isEmpty#106]
Results [10]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#95, sum#107, isEmpty#108]

(73) Exchange
Input [10]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#95, sum#107, isEmpty#108]
Arguments: hashpartitioning(c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#95, 5), ENSURE_REQUIREMENTS, [id=#109]

(74) HashAggregate [codegen id : 33]
Input [10]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#95, sum#107, isEmpty#108]
Keys [8]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#95]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#92 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#91 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#89 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#90 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#92 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#91 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#89 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#90 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#110]
Results [2]: [c_customer_id#98 AS customer_id#111, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#92 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#91 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#89 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#90 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#110 AS year_total#112]

(75) Exchange
Input [2]: [customer_id#111, year_total#112]
Arguments: hashpartitioning(customer_id#111, 5), ENSURE_REQUIREMENTS, [id=#113]

(76) Sort [codegen id : 34]
Input [2]: [customer_id#111, year_total#112]
Arguments: [customer_id#111 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#26]
Right keys [1]: [customer_id#111]
Join condition: (CASE WHEN (year_total#86 > 0.000000) THEN CheckOverflow((promote_precision(year_total#112) / promote_precision(year_total#86)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#27 > 0.000000) THEN CheckOverflow((promote_precision(year_total#60) / promote_precision(year_total#27)), DecimalType(38,14), true) ELSE null END)

(78) Project [codegen id : 35]
Output [10]: [customer_id#26, customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59, year_total#86, year_total#112]
Input [13]: [customer_id#26, year_total#27, customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59, year_total#60, year_total#86, customer_id#111, year_total#112]

(79) Scan parquet default.web_sales
Output [6]: [ws_bill_customer_sk#114, ws_ext_discount_amt#115, ws_ext_sales_price#116, ws_ext_wholesale_cost#117, ws_ext_list_price#118, ws_sold_date_sk#119]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#119), dynamicpruningexpression(ws_sold_date_sk#119 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(80) ColumnarToRow [codegen id : 37]
Input [6]: [ws_bill_customer_sk#114, ws_ext_discount_amt#115, ws_ext_sales_price#116, ws_ext_wholesale_cost#117, ws_ext_list_price#118, ws_sold_date_sk#119]

(81) Filter [codegen id : 37]
Input [6]: [ws_bill_customer_sk#114, ws_ext_discount_amt#115, ws_ext_sales_price#116, ws_ext_wholesale_cost#117, ws_ext_list_price#118, ws_sold_date_sk#119]
Condition : isnotnull(ws_bill_customer_sk#114)

(82) ReusedExchange [Reuses operator id: 122]
Output [2]: [d_date_sk#120, d_year#121]

(83) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ws_sold_date_sk#119]
Right keys [1]: [d_date_sk#120]
Join condition: None

(84) Project [codegen id : 37]
Output [6]: [ws_bill_customer_sk#114, ws_ext_discount_amt#115, ws_ext_sales_price#116, ws_ext_wholesale_cost#117, ws_ext_list_price#118, d_year#121]
Input [8]: [ws_bill_customer_sk#114, ws_ext_discount_amt#115, ws_ext_sales_price#116, ws_ext_wholesale_cost#117, ws_ext_list_price#118, ws_sold_date_sk#119, d_date_sk#120, d_year#121]

(85) Exchange
Input [6]: [ws_bill_customer_sk#114, ws_ext_discount_amt#115, ws_ext_sales_price#116, ws_ext_wholesale_cost#117, ws_ext_list_price#118, d_year#121]
Arguments: hashpartitioning(ws_bill_customer_sk#114, 5), ENSURE_REQUIREMENTS, [id=#122]

(86) Sort [codegen id : 38]
Input [6]: [ws_bill_customer_sk#114, ws_ext_discount_amt#115, ws_ext_sales_price#116, ws_ext_wholesale_cost#117, ws_ext_list_price#118, d_year#121]
Arguments: [ws_bill_customer_sk#114 ASC NULLS FIRST], false, 0

(87) ReusedExchange [Reuses operator id: 12]
Output [8]: [c_customer_sk#123, c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130]

(88) Sort [codegen id : 40]
Input [8]: [c_customer_sk#123, c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130]
Arguments: [c_customer_sk#123 ASC NULLS FIRST], false, 0

(89) SortMergeJoin [codegen id : 41]
Left keys [1]: [ws_bill_customer_sk#114]
Right keys [1]: [c_customer_sk#123]
Join condition: None

(90) Project [codegen id : 41]
Output [12]: [c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130, ws_ext_discount_amt#115, ws_ext_sales_price#116, ws_ext_wholesale_cost#117, ws_ext_list_price#118, d_year#121]
Input [14]: [ws_bill_customer_sk#114, ws_ext_discount_amt#115, ws_ext_sales_price#116, ws_ext_wholesale_cost#117, ws_ext_list_price#118, d_year#121, c_customer_sk#123, c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130]

(91) HashAggregate [codegen id : 41]
Input [12]: [c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130, ws_ext_discount_amt#115, ws_ext_sales_price#116, ws_ext_wholesale_cost#117, ws_ext_list_price#118, d_year#121]
Keys [8]: [c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130, d_year#121]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#118 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#117 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#115 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#116 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#131, isEmpty#132]
Results [10]: [c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130, d_year#121, sum#133, isEmpty#134]

(92) Exchange
Input [10]: [c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130, d_year#121, sum#133, isEmpty#134]
Arguments: hashpartitioning(c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130, d_year#121, 5), ENSURE_REQUIREMENTS, [id=#135]

(93) HashAggregate [codegen id : 42]
Input [10]: [c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130, d_year#121, sum#133, isEmpty#134]
Keys [8]: [c_customer_id#124, c_first_name#125, c_last_name#126, c_preferred_cust_flag#127, c_birth_country#128, c_login#129, c_email_address#130, d_year#121]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#118 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#117 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#115 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#116 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#118 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#117 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#115 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#116 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#136]
Results [2]: [c_customer_id#124 AS customer_id#137, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#118 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#117 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#115 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#116 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#136 AS year_total#138]

(94) Filter [codegen id : 42]
Input [2]: [customer_id#137, year_total#138]
Condition : (isnotnull(year_total#138) AND (year_total#138 > 0.000000))

(95) Exchange
Input [2]: [customer_id#137, year_total#138]
Arguments: hashpartitioning(customer_id#137, 5), ENSURE_REQUIREMENTS, [id=#139]

(96) Sort [codegen id : 43]
Input [2]: [customer_id#137, year_total#138]
Arguments: [customer_id#137 ASC NULLS FIRST], false, 0

(97) SortMergeJoin [codegen id : 44]
Left keys [1]: [customer_id#26]
Right keys [1]: [customer_id#137]
Join condition: None

(98) Project [codegen id : 44]
Output [11]: [customer_id#26, customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59, year_total#86, year_total#112, year_total#138]
Input [12]: [customer_id#26, customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59, year_total#86, year_total#112, customer_id#137, year_total#138]

(99) Scan parquet default.web_sales
Output [6]: [ws_bill_customer_sk#140, ws_ext_discount_amt#141, ws_ext_sales_price#142, ws_ext_wholesale_cost#143, ws_ext_list_price#144, ws_sold_date_sk#145]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#145), dynamicpruningexpression(ws_sold_date_sk#145 IN dynamicpruning#35)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(100) ColumnarToRow [codegen id : 46]
Input [6]: [ws_bill_customer_sk#140, ws_ext_discount_amt#141, ws_ext_sales_price#142, ws_ext_wholesale_cost#143, ws_ext_list_price#144, ws_sold_date_sk#145]

(101) Filter [codegen id : 46]
Input [6]: [ws_bill_customer_sk#140, ws_ext_discount_amt#141, ws_ext_sales_price#142, ws_ext_wholesale_cost#143, ws_ext_list_price#144, ws_sold_date_sk#145]
Condition : isnotnull(ws_bill_customer_sk#140)

(102) ReusedExchange [Reuses operator id: 126]
Output [2]: [d_date_sk#146, d_year#147]

(103) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [ws_sold_date_sk#145]
Right keys [1]: [d_date_sk#146]
Join condition: None

(104) Project [codegen id : 46]
Output [6]: [ws_bill_customer_sk#140, ws_ext_discount_amt#141, ws_ext_sales_price#142, ws_ext_wholesale_cost#143, ws_ext_list_price#144, d_year#147]
Input [8]: [ws_bill_customer_sk#140, ws_ext_discount_amt#141, ws_ext_sales_price#142, ws_ext_wholesale_cost#143, ws_ext_list_price#144, ws_sold_date_sk#145, d_date_sk#146, d_year#147]

(105) Exchange
Input [6]: [ws_bill_customer_sk#140, ws_ext_discount_amt#141, ws_ext_sales_price#142, ws_ext_wholesale_cost#143, ws_ext_list_price#144, d_year#147]
Arguments: hashpartitioning(ws_bill_customer_sk#140, 5), ENSURE_REQUIREMENTS, [id=#148]

(106) Sort [codegen id : 47]
Input [6]: [ws_bill_customer_sk#140, ws_ext_discount_amt#141, ws_ext_sales_price#142, ws_ext_wholesale_cost#143, ws_ext_list_price#144, d_year#147]
Arguments: [ws_bill_customer_sk#140 ASC NULLS FIRST], false, 0

(107) ReusedExchange [Reuses operator id: 12]
Output [8]: [c_customer_sk#149, c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156]

(108) Sort [codegen id : 49]
Input [8]: [c_customer_sk#149, c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156]
Arguments: [c_customer_sk#149 ASC NULLS FIRST], false, 0

(109) SortMergeJoin [codegen id : 50]
Left keys [1]: [ws_bill_customer_sk#140]
Right keys [1]: [c_customer_sk#149]
Join condition: None

(110) Project [codegen id : 50]
Output [12]: [c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156, ws_ext_discount_amt#141, ws_ext_sales_price#142, ws_ext_wholesale_cost#143, ws_ext_list_price#144, d_year#147]
Input [14]: [ws_bill_customer_sk#140, ws_ext_discount_amt#141, ws_ext_sales_price#142, ws_ext_wholesale_cost#143, ws_ext_list_price#144, d_year#147, c_customer_sk#149, c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156]

(111) HashAggregate [codegen id : 50]
Input [12]: [c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156, ws_ext_discount_amt#141, ws_ext_sales_price#142, ws_ext_wholesale_cost#143, ws_ext_list_price#144, d_year#147]
Keys [8]: [c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156, d_year#147]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#144 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#143 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#141 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#142 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#157, isEmpty#158]
Results [10]: [c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156, d_year#147, sum#159, isEmpty#160]

(112) Exchange
Input [10]: [c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156, d_year#147, sum#159, isEmpty#160]
Arguments: hashpartitioning(c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156, d_year#147, 5), ENSURE_REQUIREMENTS, [id=#161]

(113) HashAggregate [codegen id : 51]
Input [10]: [c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156, d_year#147, sum#159, isEmpty#160]
Keys [8]: [c_customer_id#150, c_first_name#151, c_last_name#152, c_preferred_cust_flag#153, c_birth_country#154, c_login#155, c_email_address#156, d_year#147]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#144 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#143 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#141 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#142 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#144 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#143 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#141 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#142 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#162]
Results [2]: [c_customer_id#150 AS customer_id#163, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#144 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#143 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#141 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#142 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#162 AS year_total#164]

(114) Exchange
Input [2]: [customer_id#163, year_total#164]
Arguments: hashpartitioning(customer_id#163, 5), ENSURE_REQUIREMENTS, [id=#165]

(115) Sort [codegen id : 52]
Input [2]: [customer_id#163, year_total#164]
Arguments: [customer_id#163 ASC NULLS FIRST], false, 0

(116) SortMergeJoin [codegen id : 53]
Left keys [1]: [customer_id#26]
Right keys [1]: [customer_id#163]
Join condition: (CASE WHEN (year_total#86 > 0.000000) THEN CheckOverflow((promote_precision(year_total#112) / promote_precision(year_total#86)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#138 > 0.000000) THEN CheckOverflow((promote_precision(year_total#164) / promote_precision(year_total#138)), DecimalType(38,14), true) ELSE null END)

(117) Project [codegen id : 53]
Output [7]: [customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59]
Input [13]: [customer_id#26, customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59, year_total#86, year_total#112, year_total#138, customer_id#163, year_total#164]

(118) TakeOrderedAndProject
Input [7]: [customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59]
Arguments: 100, [customer_id#53 ASC NULLS FIRST, customer_first_name#54 ASC NULLS FIRST, customer_last_name#55 ASC NULLS FIRST, customer_preferred_cust_flag#56 ASC NULLS FIRST, customer_birth_country#57 ASC NULLS FIRST, customer_login#58 ASC NULLS FIRST, customer_email_address#59 ASC NULLS FIRST], [customer_id#53, customer_first_name#54, customer_last_name#55, customer_preferred_cust_flag#56, customer_birth_country#57, customer_login#58, customer_email_address#59]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (122)
+- * Filter (121)
   +- * ColumnarToRow (120)
      +- Scan parquet default.date_dim (119)


(119) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_year#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(120) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]

(121) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]
Condition : ((isnotnull(d_year#9) AND (d_year#9 = 2001)) AND isnotnull(d_date_sk#8))

(122) BroadcastExchange
Input [2]: [d_date_sk#8, d_year#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#166]

Subquery:2 Hosting operator id = 22 Hosting Expression = ss_sold_date_sk#34 IN dynamicpruning#35
BroadcastExchange (126)
+- * Filter (125)
   +- * ColumnarToRow (124)
      +- Scan parquet default.date_dim (123)


(123) Scan parquet default.date_dim
Output [2]: [d_date_sk#36, d_year#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(124) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#36, d_year#37]

(125) Filter [codegen id : 1]
Input [2]: [d_date_sk#36, d_year#37]
Condition : ((isnotnull(d_year#37) AND (d_year#37 = 2002)) AND isnotnull(d_date_sk#36))

(126) BroadcastExchange
Input [2]: [d_date_sk#36, d_year#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#167]

Subquery:3 Hosting operator id = 40 Hosting Expression = cs_sold_date_sk#67 IN dynamicpruning#7

Subquery:4 Hosting operator id = 60 Hosting Expression = cs_sold_date_sk#93 IN dynamicpruning#35

Subquery:5 Hosting operator id = 79 Hosting Expression = ws_sold_date_sk#119 IN dynamicpruning#7

Subquery:6 Hosting operator id = 99 Hosting Expression = ws_sold_date_sk#145 IN dynamicpruning#35


