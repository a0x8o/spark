== Physical Plan ==
TakeOrderedAndProject (58)
+- * Project (57)
   +- * SortMergeJoin Inner (56)
      :- * Project (48)
      :  +- * SortMergeJoin Inner (47)
      :     :- * Sort (37)
      :     :  +- Exchange (36)
      :     :     +- * Filter (35)
      :     :        +- Window (34)
      :     :           +- * Sort (33)
      :     :              +- Exchange (32)
      :     :                 +- * Project (31)
      :     :                    +- Window (30)
      :     :                       +- * Sort (29)
      :     :                          +- Exchange (28)
      :     :                             +- * HashAggregate (27)
      :     :                                +- Exchange (26)
      :     :                                   +- * HashAggregate (25)
      :     :                                      +- * Project (24)
      :     :                                         +- * SortMergeJoin Inner (23)
      :     :                                            :- * Sort (17)
      :     :                                            :  +- Exchange (16)
      :     :                                            :     +- * Project (15)
      :     :                                            :        +- * BroadcastHashJoin Inner BuildRight (14)
      :     :                                            :           :- * Project (9)
      :     :                                            :           :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                                            :           :     :- * Filter (3)
      :     :                                            :           :     :  +- * ColumnarToRow (2)
      :     :                                            :           :     :     +- Scan parquet default.store_sales (1)
      :     :                                            :           :     +- BroadcastExchange (7)
      :     :                                            :           :        +- * Filter (6)
      :     :                                            :           :           +- * ColumnarToRow (5)
      :     :                                            :           :              +- Scan parquet default.date_dim (4)
      :     :                                            :           +- BroadcastExchange (13)
      :     :                                            :              +- * Filter (12)
      :     :                                            :                 +- * ColumnarToRow (11)
      :     :                                            :                    +- Scan parquet default.store (10)
      :     :                                            +- * Sort (22)
      :     :                                               +- Exchange (21)
      :     :                                                  +- * Filter (20)
      :     :                                                     +- * ColumnarToRow (19)
      :     :                                                        +- Scan parquet default.item (18)
      :     +- * Sort (46)
      :        +- Exchange (45)
      :           +- * Project (44)
      :              +- * Filter (43)
      :                 +- Window (42)
      :                    +- * Sort (41)
      :                       +- Exchange (40)
      :                          +- * HashAggregate (39)
      :                             +- ReusedExchange (38)
      +- * Sort (55)
         +- Exchange (54)
            +- * Project (53)
               +- * Filter (52)
                  +- Window (51)
                     +- * Sort (50)
                        +- ReusedExchange (49)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((d_year#7 = 1999) OR ((d_year#7 = 1998) AND (d_moy#8 = 12))) OR ((d_year#7 = 2000) AND (d_moy#8 = 1))) AND isnotnull(d_date_sk#6))

(7) BroadcastExchange
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(9) Project [codegen id : 3]
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, d_year#7, d_moy#8]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4, d_date_sk#6, d_year#7, d_moy#8]

(10) Scan parquet default.store
Output [3]: [s_store_sk#10, s_store_name#11, s_company_name#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_name), IsNotNull(s_company_name)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>

(11) ColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#10, s_store_name#11, s_company_name#12]

(12) Filter [codegen id : 2]
Input [3]: [s_store_sk#10, s_store_name#11, s_company_name#12]
Condition : ((isnotnull(s_store_sk#10) AND isnotnull(s_store_name#11)) AND isnotnull(s_company_name#12))

(13) BroadcastExchange
Input [3]: [s_store_sk#10, s_store_name#11, s_company_name#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#10]
Join condition: None

(15) Project [codegen id : 3]
Output [6]: [ss_item_sk#1, ss_sales_price#3, d_year#7, d_moy#8, s_store_name#11, s_company_name#12]
Input [8]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, d_year#7, d_moy#8, s_store_sk#10, s_store_name#11, s_company_name#12]

(16) Exchange
Input [6]: [ss_item_sk#1, ss_sales_price#3, d_year#7, d_moy#8, s_store_name#11, s_company_name#12]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#14]

(17) Sort [codegen id : 4]
Input [6]: [ss_item_sk#1, ss_sales_price#3, d_year#7, d_moy#8, s_store_name#11, s_company_name#12]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(18) Scan parquet default.item
Output [3]: [i_item_sk#15, i_brand#16, i_category#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(19) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#15, i_brand#16, i_category#17]

(20) Filter [codegen id : 5]
Input [3]: [i_item_sk#15, i_brand#16, i_category#17]
Condition : ((isnotnull(i_item_sk#15) AND isnotnull(i_category#17)) AND isnotnull(i_brand#16))

(21) Exchange
Input [3]: [i_item_sk#15, i_brand#16, i_category#17]
Arguments: hashpartitioning(i_item_sk#15, 5), ENSURE_REQUIREMENTS, [id=#18]

(22) Sort [codegen id : 6]
Input [3]: [i_item_sk#15, i_brand#16, i_category#17]
Arguments: [i_item_sk#15 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#15]
Join condition: None

(24) Project [codegen id : 7]
Output [7]: [i_brand#16, i_category#17, ss_sales_price#3, d_year#7, d_moy#8, s_store_name#11, s_company_name#12]
Input [9]: [ss_item_sk#1, ss_sales_price#3, d_year#7, d_moy#8, s_store_name#11, s_company_name#12, i_item_sk#15, i_brand#16, i_category#17]

(25) HashAggregate [codegen id : 7]
Input [7]: [i_brand#16, i_category#17, ss_sales_price#3, d_year#7, d_moy#8, s_store_name#11, s_company_name#12]
Keys [6]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum#19]
Results [7]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum#20]

(26) Exchange
Input [7]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum#20]
Arguments: hashpartitioning(i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, 5), ENSURE_REQUIREMENTS, [id=#21]

(27) HashAggregate [codegen id : 8]
Input [7]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum#20]
Keys [6]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8]
Functions [1]: [sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#3))#22]
Results [8]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#22,17,2) AS sum_sales#23, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#22,17,2) AS _w0#24]

(28) Exchange
Input [8]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, _w0#24]
Arguments: hashpartitioning(i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, 5), ENSURE_REQUIREMENTS, [id=#25]

(29) Sort [codegen id : 9]
Input [8]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, _w0#24]
Arguments: [i_category#17 ASC NULLS FIRST, i_brand#16 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST, s_company_name#12 ASC NULLS FIRST, d_year#7 ASC NULLS FIRST], false, 0

(30) Window
Input [8]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, _w0#24]
Arguments: [avg(_w0#24) windowspecdefinition(i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#26], [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7]

(31) Project [codegen id : 10]
Output [8]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, avg_monthly_sales#26]
Input [9]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, _w0#24, avg_monthly_sales#26]

(32) Exchange
Input [8]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, avg_monthly_sales#26]
Arguments: hashpartitioning(i_category#17, i_brand#16, s_store_name#11, s_company_name#12, 5), ENSURE_REQUIREMENTS, [id=#27]

(33) Sort [codegen id : 11]
Input [8]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, avg_monthly_sales#26]
Arguments: [i_category#17 ASC NULLS FIRST, i_brand#16 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST, s_company_name#12 ASC NULLS FIRST, d_year#7 ASC NULLS FIRST, d_moy#8 ASC NULLS FIRST], false, 0

(34) Window
Input [8]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, avg_monthly_sales#26]
Arguments: [rank(d_year#7, d_moy#8) windowspecdefinition(i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7 ASC NULLS FIRST, d_moy#8 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#28], [i_category#17, i_brand#16, s_store_name#11, s_company_name#12], [d_year#7 ASC NULLS FIRST, d_moy#8 ASC NULLS FIRST]

(35) Filter [codegen id : 12]
Input [9]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, avg_monthly_sales#26, rn#28]
Condition : ((((((isnotnull(d_year#7) AND isnotnull(avg_monthly_sales#26)) AND (d_year#7 = 1999)) AND (avg_monthly_sales#26 > 0.000000)) AND (avg_monthly_sales#26 > 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#23 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#26 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#26 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000)) AND isnotnull(rn#28))

(36) Exchange
Input [9]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, avg_monthly_sales#26, rn#28]
Arguments: hashpartitioning(i_category#17, i_brand#16, s_store_name#11, s_company_name#12, rn#28, 5), ENSURE_REQUIREMENTS, [id=#29]

(37) Sort [codegen id : 13]
Input [9]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, avg_monthly_sales#26, rn#28]
Arguments: [i_category#17 ASC NULLS FIRST, i_brand#16 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST, s_company_name#12 ASC NULLS FIRST, rn#28 ASC NULLS FIRST], false, 0

(38) ReusedExchange [Reuses operator id: unknown]
Output [7]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, d_year#34, d_moy#35, sum#36]

(39) HashAggregate [codegen id : 21]
Input [7]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, d_year#34, d_moy#35, sum#36]
Keys [6]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, d_year#34, d_moy#35]
Functions [1]: [sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#3))#37]
Results [7]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, d_year#34, d_moy#35, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#37,17,2) AS sum_sales#38]

(40) Exchange
Input [7]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, d_year#34, d_moy#35, sum_sales#38]
Arguments: hashpartitioning(i_category#30, i_brand#31, s_store_name#32, s_company_name#33, 5), ENSURE_REQUIREMENTS, [id=#39]

(41) Sort [codegen id : 22]
Input [7]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, d_year#34, d_moy#35, sum_sales#38]
Arguments: [i_category#30 ASC NULLS FIRST, i_brand#31 ASC NULLS FIRST, s_store_name#32 ASC NULLS FIRST, s_company_name#33 ASC NULLS FIRST, d_year#34 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST], false, 0

(42) Window
Input [7]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, d_year#34, d_moy#35, sum_sales#38]
Arguments: [rank(d_year#34, d_moy#35) windowspecdefinition(i_category#30, i_brand#31, s_store_name#32, s_company_name#33, d_year#34 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#40], [i_category#30, i_brand#31, s_store_name#32, s_company_name#33], [d_year#34 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST]

(43) Filter [codegen id : 23]
Input [8]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, d_year#34, d_moy#35, sum_sales#38, rn#40]
Condition : isnotnull(rn#40)

(44) Project [codegen id : 23]
Output [6]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, sum_sales#38, rn#40]
Input [8]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, d_year#34, d_moy#35, sum_sales#38, rn#40]

(45) Exchange
Input [6]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, sum_sales#38, rn#40]
Arguments: hashpartitioning(i_category#30, i_brand#31, s_store_name#32, s_company_name#33, (rn#40 + 1), 5), ENSURE_REQUIREMENTS, [id=#41]

(46) Sort [codegen id : 24]
Input [6]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, sum_sales#38, rn#40]
Arguments: [i_category#30 ASC NULLS FIRST, i_brand#31 ASC NULLS FIRST, s_store_name#32 ASC NULLS FIRST, s_company_name#33 ASC NULLS FIRST, (rn#40 + 1) ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 25]
Left keys [5]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, rn#28]
Right keys [5]: [i_category#30, i_brand#31, s_store_name#32, s_company_name#33, (rn#40 + 1)]
Join condition: None

(48) Project [codegen id : 25]
Output [10]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, avg_monthly_sales#26, rn#28, sum_sales#38]
Input [15]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, avg_monthly_sales#26, rn#28, i_category#30, i_brand#31, s_store_name#32, s_company_name#33, sum_sales#38, rn#40]

(49) ReusedExchange [Reuses operator id: 40]
Output [7]: [i_category#42, i_brand#43, s_store_name#44, s_company_name#45, d_year#46, d_moy#47, sum_sales#48]

(50) Sort [codegen id : 34]
Input [7]: [i_category#42, i_brand#43, s_store_name#44, s_company_name#45, d_year#46, d_moy#47, sum_sales#48]
Arguments: [i_category#42 ASC NULLS FIRST, i_brand#43 ASC NULLS FIRST, s_store_name#44 ASC NULLS FIRST, s_company_name#45 ASC NULLS FIRST, d_year#46 ASC NULLS FIRST, d_moy#47 ASC NULLS FIRST], false, 0

(51) Window
Input [7]: [i_category#42, i_brand#43, s_store_name#44, s_company_name#45, d_year#46, d_moy#47, sum_sales#48]
Arguments: [rank(d_year#46, d_moy#47) windowspecdefinition(i_category#42, i_brand#43, s_store_name#44, s_company_name#45, d_year#46 ASC NULLS FIRST, d_moy#47 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#49], [i_category#42, i_brand#43, s_store_name#44, s_company_name#45], [d_year#46 ASC NULLS FIRST, d_moy#47 ASC NULLS FIRST]

(52) Filter [codegen id : 35]
Input [8]: [i_category#42, i_brand#43, s_store_name#44, s_company_name#45, d_year#46, d_moy#47, sum_sales#48, rn#49]
Condition : isnotnull(rn#49)

(53) Project [codegen id : 35]
Output [6]: [i_category#42, i_brand#43, s_store_name#44, s_company_name#45, sum_sales#48, rn#49]
Input [8]: [i_category#42, i_brand#43, s_store_name#44, s_company_name#45, d_year#46, d_moy#47, sum_sales#48, rn#49]

(54) Exchange
Input [6]: [i_category#42, i_brand#43, s_store_name#44, s_company_name#45, sum_sales#48, rn#49]
Arguments: hashpartitioning(i_category#42, i_brand#43, s_store_name#44, s_company_name#45, (rn#49 - 1), 5), ENSURE_REQUIREMENTS, [id=#50]

(55) Sort [codegen id : 36]
Input [6]: [i_category#42, i_brand#43, s_store_name#44, s_company_name#45, sum_sales#48, rn#49]
Arguments: [i_category#42 ASC NULLS FIRST, i_brand#43 ASC NULLS FIRST, s_store_name#44 ASC NULLS FIRST, s_company_name#45 ASC NULLS FIRST, (rn#49 - 1) ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 37]
Left keys [5]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, rn#28]
Right keys [5]: [i_category#42, i_brand#43, s_store_name#44, s_company_name#45, (rn#49 - 1)]
Join condition: None

(57) Project [codegen id : 37]
Output [10]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, avg_monthly_sales#26, sum_sales#23, sum_sales#38 AS psum#51, sum_sales#48 AS nsum#52]
Input [16]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, sum_sales#23, avg_monthly_sales#26, rn#28, sum_sales#38, i_category#42, i_brand#43, s_store_name#44, s_company_name#45, sum_sales#48, rn#49]

(58) TakeOrderedAndProject
Input [10]: [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, avg_monthly_sales#26, sum_sales#23, psum#51, nsum#52]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#23 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#26 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST], [i_category#17, i_brand#16, s_store_name#11, s_company_name#12, d_year#7, d_moy#8, avg_monthly_sales#26, sum_sales#23, psum#51, nsum#52]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (59)


(59) ReusedExchange [Reuses operator id: 7]
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]


