== Physical Plan ==
TakeOrderedAndProject (35)
+- * HashAggregate (34)
   +- Exchange (33)
      +- * HashAggregate (32)
         +- * Project (31)
            +- * BroadcastHashJoin Inner BuildRight (30)
               :- * Project (25)
               :  +- * BroadcastHashJoin Inner BuildRight (24)
               :     :- * Project (19)
               :     :  +- * SortMergeJoin Inner (18)
               :     :     :- * Sort (12)
               :     :     :  +- Exchange (11)
               :     :     :     +- * Project (10)
               :     :     :        +- * BroadcastHashJoin Inner BuildRight (9)
               :     :     :           :- * Filter (3)
               :     :     :           :  +- * ColumnarToRow (2)
               :     :     :           :     +- Scan parquet default.store_returns (1)
               :     :     :           +- BroadcastExchange (8)
               :     :     :              +- * Project (7)
               :     :     :                 +- * Filter (6)
               :     :     :                    +- * ColumnarToRow (5)
               :     :     :                       +- Scan parquet default.date_dim (4)
               :     :     +- * Sort (17)
               :     :        +- Exchange (16)
               :     :           +- * Filter (15)
               :     :              +- * ColumnarToRow (14)
               :     :                 +- Scan parquet default.store_sales (13)
               :     +- BroadcastExchange (23)
               :        +- * Filter (22)
               :           +- * ColumnarToRow (21)
               :              +- Scan parquet default.date_dim (20)
               +- BroadcastExchange (29)
                  +- * Filter (28)
                     +- * ColumnarToRow (27)
                        +- Scan parquet default.store (26)


(1) Scan parquet default.store_returns
Output [4]: [sr_item_sk#1, sr_customer_sk#2, sr_ticket_number#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(sr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [sr_item_sk#1, sr_customer_sk#2, sr_ticket_number#3, sr_returned_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [sr_item_sk#1, sr_customer_sk#2, sr_ticket_number#3, sr_returned_date_sk#4]
Condition : ((isnotnull(sr_ticket_number#3) AND isnotnull(sr_item_sk#1)) AND isnotnull(sr_customer_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,8), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((isnotnull(d_year#7) AND isnotnull(d_moy#8)) AND (d_year#7 = 2001)) AND (d_moy#8 = 8)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [4]: [sr_item_sk#1, sr_customer_sk#2, sr_ticket_number#3, sr_returned_date_sk#4]
Input [5]: [sr_item_sk#1, sr_customer_sk#2, sr_ticket_number#3, sr_returned_date_sk#4, d_date_sk#6]

(11) Exchange
Input [4]: [sr_item_sk#1, sr_customer_sk#2, sr_ticket_number#3, sr_returned_date_sk#4]
Arguments: hashpartitioning(sr_ticket_number#3, sr_item_sk#1, sr_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#10]

(12) Sort [codegen id : 3]
Input [4]: [sr_item_sk#1, sr_customer_sk#2, sr_ticket_number#3, sr_returned_date_sk#4]
Arguments: [sr_ticket_number#3 ASC NULLS FIRST, sr_item_sk#1 ASC NULLS FIRST, sr_customer_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.store_sales
Output [5]: [ss_item_sk#11, ss_customer_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#15)]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int>

(14) ColumnarToRow [codegen id : 4]
Input [5]: [ss_item_sk#11, ss_customer_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_sold_date_sk#15]

(15) Filter [codegen id : 4]
Input [5]: [ss_item_sk#11, ss_customer_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_sold_date_sk#15]
Condition : (((isnotnull(ss_ticket_number#14) AND isnotnull(ss_item_sk#11)) AND isnotnull(ss_customer_sk#12)) AND isnotnull(ss_store_sk#13))

(16) Exchange
Input [5]: [ss_item_sk#11, ss_customer_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_sold_date_sk#15]
Arguments: hashpartitioning(ss_ticket_number#14, ss_item_sk#11, ss_customer_sk#12, 5), ENSURE_REQUIREMENTS, [id=#16]

(17) Sort [codegen id : 5]
Input [5]: [ss_item_sk#11, ss_customer_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_sold_date_sk#15]
Arguments: [ss_ticket_number#14 ASC NULLS FIRST, ss_item_sk#11 ASC NULLS FIRST, ss_customer_sk#12 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 8]
Left keys [3]: [sr_ticket_number#3, sr_item_sk#1, sr_customer_sk#2]
Right keys [3]: [ss_ticket_number#14, ss_item_sk#11, ss_customer_sk#12]
Join condition: None

(19) Project [codegen id : 8]
Output [3]: [sr_returned_date_sk#4, ss_store_sk#13, ss_sold_date_sk#15]
Input [9]: [sr_item_sk#1, sr_customer_sk#2, sr_ticket_number#3, sr_returned_date_sk#4, ss_item_sk#11, ss_customer_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_sold_date_sk#15]

(20) Scan parquet default.date_dim
Output [1]: [d_date_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int>

(21) ColumnarToRow [codegen id : 6]
Input [1]: [d_date_sk#17]

(22) Filter [codegen id : 6]
Input [1]: [d_date_sk#17]
Condition : isnotnull(d_date_sk#17)

(23) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#15]
Right keys [1]: [d_date_sk#17]
Join condition: None

(25) Project [codegen id : 8]
Output [3]: [sr_returned_date_sk#4, ss_store_sk#13, ss_sold_date_sk#15]
Input [4]: [sr_returned_date_sk#4, ss_store_sk#13, ss_sold_date_sk#15, d_date_sk#17]

(26) Scan parquet default.store
Output [11]: [s_store_sk#19, s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_id:int,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string>

(27) ColumnarToRow [codegen id : 7]
Input [11]: [s_store_sk#19, s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29]

(28) Filter [codegen id : 7]
Input [11]: [s_store_sk#19, s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29]
Condition : isnotnull(s_store_sk#19)

(29) BroadcastExchange
Input [11]: [s_store_sk#19, s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#13]
Right keys [1]: [s_store_sk#19]
Join condition: None

(31) Project [codegen id : 8]
Output [12]: [ss_sold_date_sk#15, sr_returned_date_sk#4, s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29]
Input [14]: [sr_returned_date_sk#4, ss_store_sk#13, ss_sold_date_sk#15, s_store_sk#19, s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29]

(32) HashAggregate [codegen id : 8]
Input [12]: [ss_sold_date_sk#15, sr_returned_date_sk#4, s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29]
Keys [10]: [s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29]
Functions [5]: [partial_sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 30) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 30) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 60)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 60) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 90)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 90) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 120)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 120) THEN 1 ELSE 0 END)]
Aggregate Attributes [5]: [sum#31, sum#32, sum#33, sum#34, sum#35]
Results [15]: [s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29, sum#36, sum#37, sum#38, sum#39, sum#40]

(33) Exchange
Input [15]: [s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29, sum#36, sum#37, sum#38, sum#39, sum#40]
Arguments: hashpartitioning(s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29, 5), ENSURE_REQUIREMENTS, [id=#41]

(34) HashAggregate [codegen id : 9]
Input [15]: [s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29, sum#36, sum#37, sum#38, sum#39, sum#40]
Keys [10]: [s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29]
Functions [5]: [sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 30) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 30) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 60)) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 60) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 90)) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 90) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 120)) THEN 1 ELSE 0 END), sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 120) THEN 1 ELSE 0 END)]
Aggregate Attributes [5]: [sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 30) THEN 1 ELSE 0 END)#42, sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 30) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 60)) THEN 1 ELSE 0 END)#43, sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 60) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 90)) THEN 1 ELSE 0 END)#44, sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 90) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 120)) THEN 1 ELSE 0 END)#45, sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 120) THEN 1 ELSE 0 END)#46]
Results [15]: [s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29, sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 30) THEN 1 ELSE 0 END)#42 AS 30 days #47, sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 30) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 60)) THEN 1 ELSE 0 END)#43 AS 31 - 60 days #48, sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 60) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 90)) THEN 1 ELSE 0 END)#44 AS 61 - 90 days #49, sum(CASE WHEN (((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 90) AND ((sr_returned_date_sk#4 - ss_sold_date_sk#15) <= 120)) THEN 1 ELSE 0 END)#45 AS 91 - 120 days #50, sum(CASE WHEN ((sr_returned_date_sk#4 - ss_sold_date_sk#15) > 120) THEN 1 ELSE 0 END)#46 AS >120 days #51]

(35) TakeOrderedAndProject
Input [15]: [s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29, 30 days #47, 31 - 60 days #48, 61 - 90 days #49, 91 - 120 days #50, >120 days #51]
Arguments: 100, [s_store_name#20 ASC NULLS FIRST, s_company_id#21 ASC NULLS FIRST, s_street_number#22 ASC NULLS FIRST, s_street_name#23 ASC NULLS FIRST, s_street_type#24 ASC NULLS FIRST, s_suite_number#25 ASC NULLS FIRST, s_city#26 ASC NULLS FIRST, s_county#27 ASC NULLS FIRST, s_state#28 ASC NULLS FIRST, s_zip#29 ASC NULLS FIRST], [s_store_name#20, s_company_id#21, s_street_number#22, s_street_name#23, s_street_type#24, s_suite_number#25, s_city#26, s_county#27, s_state#28, s_zip#29, 30 days #47, 31 - 60 days #48, 61 - 90 days #49, 91 - 120 days #50, >120 days #51]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = sr_returned_date_sk#4 IN dynamicpruning#5
ReusedExchange (36)


(36) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#6]


