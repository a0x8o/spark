== Physical Plan ==
TakeOrderedAndProject (20)
+- * Project (19)
   +- Window (18)
      +- * Sort (17)
         +- Exchange (16)
            +- * HashAggregate (15)
               +- Exchange (14)
                  +- * HashAggregate (13)
                     +- * Project (12)
                        +- * BroadcastHashJoin Inner BuildRight (11)
                           :- * Project (9)
                           :  +- * BroadcastHashJoin Inner BuildRight (8)
                           :     :- * Filter (3)
                           :     :  +- * ColumnarToRow (2)
                           :     :     +- Scan parquet default.catalog_sales (1)
                           :     +- BroadcastExchange (7)
                           :        +- * Filter (6)
                           :           +- * ColumnarToRow (5)
                           :              +- Scan parquet default.item (4)
                           +- ReusedExchange (10)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#1, cs_ext_sales_price#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [3]: [cs_item_sk#1, cs_ext_sales_price#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 3]
Input [3]: [cs_item_sk#1, cs_ext_sales_price#2, cs_sold_date_sk#3]
Condition : isnotnull(cs_item_sk#1)

(4) Scan parquet default.item
Output [6]: [i_item_sk#5, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_category, [Books                                             ,Home                                              ,Sports                                            ]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:string,i_category:string>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#5, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]

(6) Filter [codegen id : 1]
Input [6]: [i_item_sk#5, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]
Condition : (i_category#10 IN (Sports                                            ,Books                                             ,Home                                              ) AND isnotnull(i_item_sk#5))

(7) BroadcastExchange
Input [6]: [i_item_sk#5, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#1]
Right keys [1]: [i_item_sk#5]
Join condition: None

(9) Project [codegen id : 3]
Output [7]: [cs_ext_sales_price#2, cs_sold_date_sk#3, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]
Input [9]: [cs_item_sk#1, cs_ext_sales_price#2, cs_sold_date_sk#3, i_item_sk#5, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]

(10) ReusedExchange [Reuses operator id: 25]
Output [1]: [d_date_sk#12]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#12]
Join condition: None

(12) Project [codegen id : 3]
Output [6]: [cs_ext_sales_price#2, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]
Input [8]: [cs_ext_sales_price#2, cs_sold_date_sk#3, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10, d_date_sk#12]

(13) HashAggregate [codegen id : 3]
Input [6]: [cs_ext_sales_price#2, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]
Keys [5]: [i_item_id#6, i_item_desc#7, i_category#10, i_class#9, i_current_price#8]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#13]
Results [6]: [i_item_id#6, i_item_desc#7, i_category#10, i_class#9, i_current_price#8, sum#14]

(14) Exchange
Input [6]: [i_item_id#6, i_item_desc#7, i_category#10, i_class#9, i_current_price#8, sum#14]
Arguments: hashpartitioning(i_item_id#6, i_item_desc#7, i_category#10, i_class#9, i_current_price#8, 5), ENSURE_REQUIREMENTS, [id=#15]

(15) HashAggregate [codegen id : 4]
Input [6]: [i_item_id#6, i_item_desc#7, i_category#10, i_class#9, i_current_price#8, sum#14]
Keys [5]: [i_item_id#6, i_item_desc#7, i_category#10, i_class#9, i_current_price#8]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#2))#16]
Results [8]: [i_item_desc#7, i_category#10, i_class#9, i_current_price#8, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#2))#16,17,2) AS itemrevenue#17, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#2))#16,17,2) AS _w0#18, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#2))#16,17,2) AS _w1#19, i_item_id#6]

(16) Exchange
Input [8]: [i_item_desc#7, i_category#10, i_class#9, i_current_price#8, itemrevenue#17, _w0#18, _w1#19, i_item_id#6]
Arguments: hashpartitioning(i_class#9, 5), ENSURE_REQUIREMENTS, [id=#20]

(17) Sort [codegen id : 5]
Input [8]: [i_item_desc#7, i_category#10, i_class#9, i_current_price#8, itemrevenue#17, _w0#18, _w1#19, i_item_id#6]
Arguments: [i_class#9 ASC NULLS FIRST], false, 0

(18) Window
Input [8]: [i_item_desc#7, i_category#10, i_class#9, i_current_price#8, itemrevenue#17, _w0#18, _w1#19, i_item_id#6]
Arguments: [sum(_w1#19) windowspecdefinition(i_class#9, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#21], [i_class#9]

(19) Project [codegen id : 6]
Output [7]: [i_item_desc#7, i_category#10, i_class#9, i_current_price#8, itemrevenue#17, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#18) * 100.00), DecimalType(21,2), true) as decimal(27,2))) / promote_precision(_we0#21)), DecimalType(38,17), true) AS revenueratio#22, i_item_id#6]
Input [9]: [i_item_desc#7, i_category#10, i_class#9, i_current_price#8, itemrevenue#17, _w0#18, _w1#19, i_item_id#6, _we0#21]

(20) TakeOrderedAndProject
Input [7]: [i_item_desc#7, i_category#10, i_class#9, i_current_price#8, itemrevenue#17, revenueratio#22, i_item_id#6]
Arguments: 100, [i_category#10 ASC NULLS FIRST, i_class#9 ASC NULLS FIRST, i_item_id#6 ASC NULLS FIRST, i_item_desc#7 ASC NULLS FIRST, revenueratio#22 ASC NULLS FIRST], [i_item_desc#7, i_category#10, i_class#9, i_current_price#8, itemrevenue#17, revenueratio#22]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (25)
+- * Project (24)
   +- * Filter (23)
      +- * ColumnarToRow (22)
         +- Scan parquet default.date_dim (21)


(21) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_date#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(22) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_date#23]

(23) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_date#23]
Condition : (((isnotnull(d_date#23) AND (d_date#23 >= 1999-02-22)) AND (d_date#23 <= 1999-03-24)) AND isnotnull(d_date_sk#12))

(24) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_date#23]

(25) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]


