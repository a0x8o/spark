== Physical Plan ==
* Sort (42)
+- Exchange (41)
   +- * HashAggregate (40)
      +- Exchange (39)
         +- * HashAggregate (38)
            +- * Project (37)
               +- * BroadcastHashJoin Inner BuildRight (36)
                  :- * Project (30)
                  :  +- * BroadcastHashJoin Inner BuildLeft (29)
                  :     :- BroadcastExchange (5)
                  :     :  +- * Project (4)
                  :     :     +- * Filter (3)
                  :     :        +- * ColumnarToRow (2)
                  :     :           +- Scan parquet default.item (1)
                  :     +- Union (28)
                  :        :- * Project (15)
                  :        :  +- * BroadcastHashJoin Inner BuildRight (14)
                  :        :     :- * Filter (8)
                  :        :     :  +- * ColumnarToRow (7)
                  :        :     :     +- Scan parquet default.web_sales (6)
                  :        :     +- BroadcastExchange (13)
                  :        :        +- * Project (12)
                  :        :           +- * Filter (11)
                  :        :              +- * ColumnarToRow (10)
                  :        :                 +- Scan parquet default.date_dim (9)
                  :        :- * Project (21)
                  :        :  +- * BroadcastHashJoin Inner BuildRight (20)
                  :        :     :- * Filter (18)
                  :        :     :  +- * ColumnarToRow (17)
                  :        :     :     +- Scan parquet default.catalog_sales (16)
                  :        :     +- ReusedExchange (19)
                  :        +- * Project (27)
                  :           +- * BroadcastHashJoin Inner BuildRight (26)
                  :              :- * Filter (24)
                  :              :  +- * ColumnarToRow (23)
                  :              :     +- Scan parquet default.store_sales (22)
                  :              +- ReusedExchange (25)
                  +- BroadcastExchange (35)
                     +- * Project (34)
                        +- * Filter (33)
                           +- * ColumnarToRow (32)
                              +- Scan parquet default.time_dim (31)


(1) Scan parquet default.item
Output [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]

(3) Filter [codegen id : 1]
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]
Condition : ((isnotnull(i_manager_id#4) AND (i_manager_id#4 = 1)) AND isnotnull(i_item_sk#1))

(4) Project [codegen id : 1]
Output [3]: [i_item_sk#1, i_brand_id#2, i_brand#3]
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]

(5) BroadcastExchange
Input [3]: [i_item_sk#1, i_brand_id#2, i_brand#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#5]

(6) Scan parquet default.web_sales
Output [4]: [ws_sold_time_sk#6, ws_item_sk#7, ws_ext_sales_price#8, ws_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#9), dynamicpruningexpression(ws_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_time_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [ws_sold_time_sk#6, ws_item_sk#7, ws_ext_sales_price#8, ws_sold_date_sk#9]

(8) Filter [codegen id : 3]
Input [4]: [ws_sold_time_sk#6, ws_item_sk#7, ws_ext_sales_price#8, ws_sold_date_sk#9]
Condition : (isnotnull(ws_item_sk#7) AND isnotnull(ws_sold_time_sk#6))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_moy#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(11) Filter [codegen id : 2]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Condition : ((((isnotnull(d_moy#13) AND isnotnull(d_year#12)) AND (d_moy#13 = 11)) AND (d_year#12 = 1999)) AND isnotnull(d_date_sk#11))

(12) Project [codegen id : 2]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(13) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(15) Project [codegen id : 3]
Output [3]: [ws_ext_sales_price#8 AS ext_price#15, ws_item_sk#7 AS sold_item_sk#16, ws_sold_time_sk#6 AS time_sk#17]
Input [5]: [ws_sold_time_sk#6, ws_item_sk#7, ws_ext_sales_price#8, ws_sold_date_sk#9, d_date_sk#11]

(16) Scan parquet default.catalog_sales
Output [4]: [cs_sold_time_sk#18, cs_item_sk#19, cs_ext_sales_price#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_time_sk)]
ReadSchema: struct<cs_sold_time_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(17) ColumnarToRow [codegen id : 5]
Input [4]: [cs_sold_time_sk#18, cs_item_sk#19, cs_ext_sales_price#20, cs_sold_date_sk#21]

(18) Filter [codegen id : 5]
Input [4]: [cs_sold_time_sk#18, cs_item_sk#19, cs_ext_sales_price#20, cs_sold_date_sk#21]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_time_sk#18))

(19) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#11]

(20) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#11]
Join condition: None

(21) Project [codegen id : 5]
Output [3]: [cs_ext_sales_price#20 AS ext_price#22, cs_item_sk#19 AS sold_item_sk#23, cs_sold_time_sk#18 AS time_sk#24]
Input [5]: [cs_sold_time_sk#18, cs_item_sk#19, cs_ext_sales_price#20, cs_sold_date_sk#21, d_date_sk#11]

(22) Scan parquet default.store_sales
Output [4]: [ss_sold_time_sk#25, ss_item_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#28), dynamicpruningexpression(ss_sold_date_sk#28 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_time_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(23) ColumnarToRow [codegen id : 7]
Input [4]: [ss_sold_time_sk#25, ss_item_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]

(24) Filter [codegen id : 7]
Input [4]: [ss_sold_time_sk#25, ss_item_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]
Condition : (isnotnull(ss_item_sk#26) AND isnotnull(ss_sold_time_sk#25))

(25) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#11]

(26) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#28]
Right keys [1]: [d_date_sk#11]
Join condition: None

(27) Project [codegen id : 7]
Output [3]: [ss_ext_sales_price#27 AS ext_price#29, ss_item_sk#26 AS sold_item_sk#30, ss_sold_time_sk#25 AS time_sk#31]
Input [5]: [ss_sold_time_sk#25, ss_item_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28, d_date_sk#11]

(28) Union

(29) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [sold_item_sk#16]
Join condition: None

(30) Project [codegen id : 9]
Output [4]: [i_brand_id#2, i_brand#3, ext_price#15, time_sk#17]
Input [6]: [i_item_sk#1, i_brand_id#2, i_brand#3, ext_price#15, sold_item_sk#16, time_sk#17]

(31) Scan parquet default.time_dim
Output [4]: [t_time_sk#32, t_hour#33, t_minute#34, t_meal_time#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [Or(EqualTo(t_meal_time,breakfast),EqualTo(t_meal_time,dinner)), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int,t_meal_time:string>

(32) ColumnarToRow [codegen id : 8]
Input [4]: [t_time_sk#32, t_hour#33, t_minute#34, t_meal_time#35]

(33) Filter [codegen id : 8]
Input [4]: [t_time_sk#32, t_hour#33, t_minute#34, t_meal_time#35]
Condition : (((t_meal_time#35 = breakfast) OR (t_meal_time#35 = dinner)) AND isnotnull(t_time_sk#32))

(34) Project [codegen id : 8]
Output [3]: [t_time_sk#32, t_hour#33, t_minute#34]
Input [4]: [t_time_sk#32, t_hour#33, t_minute#34, t_meal_time#35]

(35) BroadcastExchange
Input [3]: [t_time_sk#32, t_hour#33, t_minute#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#36]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [time_sk#17]
Right keys [1]: [t_time_sk#32]
Join condition: None

(37) Project [codegen id : 9]
Output [5]: [i_brand_id#2, i_brand#3, ext_price#15, t_hour#33, t_minute#34]
Input [7]: [i_brand_id#2, i_brand#3, ext_price#15, time_sk#17, t_time_sk#32, t_hour#33, t_minute#34]

(38) HashAggregate [codegen id : 9]
Input [5]: [i_brand_id#2, i_brand#3, ext_price#15, t_hour#33, t_minute#34]
Keys [4]: [i_brand#3, i_brand_id#2, t_hour#33, t_minute#34]
Functions [1]: [partial_sum(UnscaledValue(ext_price#15))]
Aggregate Attributes [1]: [sum#37]
Results [5]: [i_brand#3, i_brand_id#2, t_hour#33, t_minute#34, sum#38]

(39) Exchange
Input [5]: [i_brand#3, i_brand_id#2, t_hour#33, t_minute#34, sum#38]
Arguments: hashpartitioning(i_brand#3, i_brand_id#2, t_hour#33, t_minute#34, 5), ENSURE_REQUIREMENTS, [id=#39]

(40) HashAggregate [codegen id : 10]
Input [5]: [i_brand#3, i_brand_id#2, t_hour#33, t_minute#34, sum#38]
Keys [4]: [i_brand#3, i_brand_id#2, t_hour#33, t_minute#34]
Functions [1]: [sum(UnscaledValue(ext_price#15))]
Aggregate Attributes [1]: [sum(UnscaledValue(ext_price#15))#40]
Results [5]: [i_brand_id#2 AS brand_id#41, i_brand#3 AS brand#42, t_hour#33, t_minute#34, MakeDecimal(sum(UnscaledValue(ext_price#15))#40,17,2) AS ext_price#43]

(41) Exchange
Input [5]: [brand_id#41, brand#42, t_hour#33, t_minute#34, ext_price#43]
Arguments: rangepartitioning(ext_price#43 DESC NULLS LAST, brand_id#41 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#44]

(42) Sort [codegen id : 11]
Input [5]: [brand_id#41, brand#42, t_hour#33, t_minute#34, ext_price#43]
Arguments: [ext_price#43 DESC NULLS LAST, brand_id#41 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = ws_sold_date_sk#9 IN dynamicpruning#10
ReusedExchange (43)


(43) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#11]

Subquery:2 Hosting operator id = 16 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#10

Subquery:3 Hosting operator id = 22 Hosting Expression = ss_sold_date_sk#28 IN dynamicpruning#10


