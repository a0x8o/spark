== Physical Plan ==
* Sort (55)
+- Exchange (54)
   +- * SortMergeJoin Inner (53)
      :- * Sort (29)
      :  +- Exchange (28)
      :     +- * Project (27)
      :        +- * Filter (26)
      :           +- * HashAggregate (25)
      :              +- Exchange (24)
      :                 +- * HashAggregate (23)
      :                    +- * Project (22)
      :                       +- * BroadcastHashJoin Inner BuildRight (21)
      :                          :- * Project (16)
      :                          :  +- * BroadcastHashJoin Inner BuildRight (15)
      :                          :     :- * Project (10)
      :                          :     :  +- * BroadcastHashJoin Inner BuildRight (9)
      :                          :     :     :- * Filter (3)
      :                          :     :     :  +- * ColumnarToRow (2)
      :                          :     :     :     +- Scan parquet default.inventory (1)
      :                          :     :     +- BroadcastExchange (8)
      :                          :     :        +- * Project (7)
      :                          :     :           +- * Filter (6)
      :                          :     :              +- * ColumnarToRow (5)
      :                          :     :                 +- Scan parquet default.date_dim (4)
      :                          :     +- BroadcastExchange (14)
      :                          :        +- * Filter (13)
      :                          :           +- * ColumnarToRow (12)
      :                          :              +- Scan parquet default.item (11)
      :                          +- BroadcastExchange (20)
      :                             +- * Filter (19)
      :                                +- * ColumnarToRow (18)
      :                                   +- Scan parquet default.warehouse (17)
      +- * Sort (52)
         +- Exchange (51)
            +- * Project (50)
               +- * Filter (49)
                  +- * HashAggregate (48)
                     +- Exchange (47)
                        +- * HashAggregate (46)
                           +- * Project (45)
                              +- * BroadcastHashJoin Inner BuildRight (44)
                                 :- * Project (42)
                                 :  +- * BroadcastHashJoin Inner BuildRight (41)
                                 :     :- * Project (39)
                                 :     :  +- * BroadcastHashJoin Inner BuildRight (38)
                                 :     :     :- * Filter (32)
                                 :     :     :  +- * ColumnarToRow (31)
                                 :     :     :     +- Scan parquet default.inventory (30)
                                 :     :     +- BroadcastExchange (37)
                                 :     :        +- * Project (36)
                                 :     :           +- * Filter (35)
                                 :     :              +- * ColumnarToRow (34)
                                 :     :                 +- Scan parquet default.date_dim (33)
                                 :     +- ReusedExchange (40)
                                 +- ReusedExchange (43)


(1) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(3) Filter [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((isnotnull(d_year#7) AND isnotnull(d_moy#8)) AND (d_year#7 = 2001)) AND (d_moy#8 = 1)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#6, d_moy#8]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(8) BroadcastExchange
Input [2]: [d_date_sk#6, d_moy#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 4]
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#8]
Input [6]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#6, d_moy#8]

(11) Scan parquet default.item
Output [1]: [i_item_sk#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(12) ColumnarToRow [codegen id : 2]
Input [1]: [i_item_sk#10]

(13) Filter [codegen id : 2]
Input [1]: [i_item_sk#10]
Condition : isnotnull(i_item_sk#10)

(14) BroadcastExchange
Input [1]: [i_item_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#10]
Join condition: None

(16) Project [codegen id : 4]
Output [4]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#8, i_item_sk#10]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#8, i_item_sk#10]

(17) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#12, w_warehouse_name#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(18) ColumnarToRow [codegen id : 3]
Input [2]: [w_warehouse_sk#12, w_warehouse_name#13]

(19) Filter [codegen id : 3]
Input [2]: [w_warehouse_sk#12, w_warehouse_name#13]
Condition : isnotnull(w_warehouse_sk#12)

(20) BroadcastExchange
Input [2]: [w_warehouse_sk#12, w_warehouse_name#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#12]
Join condition: None

(22) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#3, i_item_sk#10, w_warehouse_sk#12, w_warehouse_name#13, d_moy#8]
Input [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#8, i_item_sk#10, w_warehouse_sk#12, w_warehouse_name#13]

(23) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#3, i_item_sk#10, w_warehouse_sk#12, w_warehouse_name#13, d_moy#8]
Keys [4]: [w_warehouse_name#13, w_warehouse_sk#12, i_item_sk#10, d_moy#8]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#3 as double)), partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [5]: [n#15, avg#16, m2#17, sum#18, count#19]
Results [9]: [w_warehouse_name#13, w_warehouse_sk#12, i_item_sk#10, d_moy#8, n#20, avg#21, m2#22, sum#23, count#24]

(24) Exchange
Input [9]: [w_warehouse_name#13, w_warehouse_sk#12, i_item_sk#10, d_moy#8, n#20, avg#21, m2#22, sum#23, count#24]
Arguments: hashpartitioning(w_warehouse_name#13, w_warehouse_sk#12, i_item_sk#10, d_moy#8, 5), ENSURE_REQUIREMENTS, [id=#25]

(25) HashAggregate [codegen id : 5]
Input [9]: [w_warehouse_name#13, w_warehouse_sk#12, i_item_sk#10, d_moy#8, n#20, avg#21, m2#22, sum#23, count#24]
Keys [4]: [w_warehouse_name#13, w_warehouse_sk#12, i_item_sk#10, d_moy#8]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double)), avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double))#26, avg(inv_quantity_on_hand#3)#27]
Results [5]: [w_warehouse_sk#12, i_item_sk#10, d_moy#8, stddev_samp(cast(inv_quantity_on_hand#3 as double))#26 AS stdev#28, avg(inv_quantity_on_hand#3)#27 AS mean#29]

(26) Filter [codegen id : 5]
Input [5]: [w_warehouse_sk#12, i_item_sk#10, d_moy#8, stdev#28, mean#29]
Condition : (((isnotnull(mean#29) AND isnotnull(stdev#28)) AND NOT (mean#29 = 0.0)) AND ((stdev#28 / mean#29) > 1.0))

(27) Project [codegen id : 5]
Output [5]: [w_warehouse_sk#12, i_item_sk#10, d_moy#8, mean#29, CASE WHEN (mean#29 = 0.0) THEN null ELSE (stdev#28 / mean#29) END AS cov#30]
Input [5]: [w_warehouse_sk#12, i_item_sk#10, d_moy#8, stdev#28, mean#29]

(28) Exchange
Input [5]: [w_warehouse_sk#12, i_item_sk#10, d_moy#8, mean#29, cov#30]
Arguments: hashpartitioning(i_item_sk#10, w_warehouse_sk#12, 5), ENSURE_REQUIREMENTS, [id=#31]

(29) Sort [codegen id : 6]
Input [5]: [w_warehouse_sk#12, i_item_sk#10, d_moy#8, mean#29, cov#30]
Arguments: [i_item_sk#10 ASC NULLS FIRST, w_warehouse_sk#12 ASC NULLS FIRST], false, 0

(30) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#32)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(31) ColumnarToRow [codegen id : 10]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(32) Filter [codegen id : 10]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(33) Scan parquet default.date_dim
Output [3]: [d_date_sk#33, d_year#34, d_moy#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(34) ColumnarToRow [codegen id : 7]
Input [3]: [d_date_sk#33, d_year#34, d_moy#35]

(35) Filter [codegen id : 7]
Input [3]: [d_date_sk#33, d_year#34, d_moy#35]
Condition : ((((isnotnull(d_year#34) AND isnotnull(d_moy#35)) AND (d_year#34 = 2001)) AND (d_moy#35 = 2)) AND isnotnull(d_date_sk#33))

(36) Project [codegen id : 7]
Output [2]: [d_date_sk#33, d_moy#35]
Input [3]: [d_date_sk#33, d_year#34, d_moy#35]

(37) BroadcastExchange
Input [2]: [d_date_sk#33, d_moy#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#36]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#33]
Join condition: None

(39) Project [codegen id : 10]
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#35]
Input [6]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#33, d_moy#35]

(40) ReusedExchange [Reuses operator id: 14]
Output [1]: [i_item_sk#37]

(41) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#37]
Join condition: None

(42) Project [codegen id : 10]
Output [4]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#35, i_item_sk#37]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#35, i_item_sk#37]

(43) ReusedExchange [Reuses operator id: 20]
Output [2]: [w_warehouse_sk#38, w_warehouse_name#39]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#38]
Join condition: None

(45) Project [codegen id : 10]
Output [5]: [inv_quantity_on_hand#3, i_item_sk#37, w_warehouse_sk#38, w_warehouse_name#39, d_moy#35]
Input [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#35, i_item_sk#37, w_warehouse_sk#38, w_warehouse_name#39]

(46) HashAggregate [codegen id : 10]
Input [5]: [inv_quantity_on_hand#3, i_item_sk#37, w_warehouse_sk#38, w_warehouse_name#39, d_moy#35]
Keys [4]: [w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#35]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#3 as double)), partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [5]: [n#40, avg#41, m2#42, sum#43, count#44]
Results [9]: [w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#35, n#45, avg#46, m2#47, sum#48, count#49]

(47) Exchange
Input [9]: [w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#35, n#45, avg#46, m2#47, sum#48, count#49]
Arguments: hashpartitioning(w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#35, 5), ENSURE_REQUIREMENTS, [id=#50]

(48) HashAggregate [codegen id : 11]
Input [9]: [w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#35, n#45, avg#46, m2#47, sum#48, count#49]
Keys [4]: [w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#35]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double)), avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double))#51, avg(inv_quantity_on_hand#3)#52]
Results [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#35, stddev_samp(cast(inv_quantity_on_hand#3 as double))#51 AS stdev#53, avg(inv_quantity_on_hand#3)#52 AS mean#54]

(49) Filter [codegen id : 11]
Input [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#35, stdev#53, mean#54]
Condition : (((isnotnull(mean#54) AND isnotnull(stdev#53)) AND NOT (mean#54 = 0.0)) AND ((stdev#53 / mean#54) > 1.0))

(50) Project [codegen id : 11]
Output [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#35, mean#54, CASE WHEN (mean#54 = 0.0) THEN null ELSE (stdev#53 / mean#54) END AS cov#55]
Input [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#35, stdev#53, mean#54]

(51) Exchange
Input [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#35, mean#54, cov#55]
Arguments: hashpartitioning(i_item_sk#37, w_warehouse_sk#38, 5), ENSURE_REQUIREMENTS, [id=#56]

(52) Sort [codegen id : 12]
Input [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#35, mean#54, cov#55]
Arguments: [i_item_sk#37 ASC NULLS FIRST, w_warehouse_sk#38 ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 13]
Left keys [2]: [i_item_sk#10, w_warehouse_sk#12]
Right keys [2]: [i_item_sk#37, w_warehouse_sk#38]
Join condition: None

(54) Exchange
Input [10]: [w_warehouse_sk#12, i_item_sk#10, d_moy#8, mean#29, cov#30, w_warehouse_sk#38, i_item_sk#37, d_moy#35, mean#54, cov#55]
Arguments: rangepartitioning(w_warehouse_sk#12 ASC NULLS FIRST, i_item_sk#10 ASC NULLS FIRST, d_moy#8 ASC NULLS FIRST, mean#29 ASC NULLS FIRST, cov#30 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST, mean#54 ASC NULLS FIRST, cov#55 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#57]

(55) Sort [codegen id : 14]
Input [10]: [w_warehouse_sk#12, i_item_sk#10, d_moy#8, mean#29, cov#30, w_warehouse_sk#38, i_item_sk#37, d_moy#35, mean#54, cov#55]
Arguments: [w_warehouse_sk#12 ASC NULLS FIRST, i_item_sk#10 ASC NULLS FIRST, d_moy#8 ASC NULLS FIRST, mean#29 ASC NULLS FIRST, cov#30 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST, mean#54 ASC NULLS FIRST, cov#55 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
ReusedExchange (56)


(56) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#6, d_moy#8]

Subquery:2 Hosting operator id = 30 Hosting Expression = inv_date_sk#4 IN dynamicpruning#32
ReusedExchange (57)


(57) ReusedExchange [Reuses operator id: 37]
Output [2]: [d_date_sk#33, d_moy#35]


