== Physical Plan ==
TakeOrderedAndProject (47)
+- * HashAggregate (46)
   +- Exchange (45)
      +- * HashAggregate (44)
         +- * Project (43)
            +- * BroadcastHashJoin Inner BuildLeft (42)
               :- BroadcastExchange (38)
               :  +- * Project (37)
               :     +- * BroadcastHashJoin Inner BuildRight (36)
               :        :- * Project (30)
               :        :  +- * SortMergeJoin LeftAnti (29)
               :        :     :- * SortMergeJoin LeftAnti (21)
               :        :     :  :- * SortMergeJoin LeftSemi (13)
               :        :     :  :  :- * Sort (5)
               :        :     :  :  :  +- Exchange (4)
               :        :     :  :  :     +- * Filter (3)
               :        :     :  :  :        +- * ColumnarToRow (2)
               :        :     :  :  :           +- Scan parquet default.customer (1)
               :        :     :  :  +- * Sort (12)
               :        :     :  :     +- Exchange (11)
               :        :     :  :        +- * Project (10)
               :        :     :  :           +- * BroadcastHashJoin Inner BuildRight (9)
               :        :     :  :              :- * ColumnarToRow (7)
               :        :     :  :              :  +- Scan parquet default.store_sales (6)
               :        :     :  :              +- ReusedExchange (8)
               :        :     :  +- * Sort (20)
               :        :     :     +- Exchange (19)
               :        :     :        +- * Project (18)
               :        :     :           +- * BroadcastHashJoin Inner BuildRight (17)
               :        :     :              :- * ColumnarToRow (15)
               :        :     :              :  +- Scan parquet default.web_sales (14)
               :        :     :              +- ReusedExchange (16)
               :        :     +- * Sort (28)
               :        :        +- Exchange (27)
               :        :           +- * Project (26)
               :        :              +- * BroadcastHashJoin Inner BuildRight (25)
               :        :                 :- * ColumnarToRow (23)
               :        :                 :  +- Scan parquet default.catalog_sales (22)
               :        :                 +- ReusedExchange (24)
               :        +- BroadcastExchange (35)
               :           +- * Project (34)
               :              +- * Filter (33)
               :                 +- * ColumnarToRow (32)
               :                    +- Scan parquet default.customer_address (31)
               +- * Filter (41)
                  +- * ColumnarToRow (40)
                     +- Scan parquet default.customer_demographics (39)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#4]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
ReadSchema: struct<ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_customer_sk#5, ss_sold_date_sk#6]

(8) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#8]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(10) Project [codegen id : 4]
Output [1]: [ss_customer_sk#5]
Input [3]: [ss_customer_sk#5, ss_sold_date_sk#6, d_date_sk#8]

(11) Exchange
Input [1]: [ss_customer_sk#5]
Arguments: hashpartitioning(ss_customer_sk#5, 5), ENSURE_REQUIREMENTS, [id=#9]

(12) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#5]
Arguments: [ss_customer_sk#5 ASC NULLS FIRST], false, 0

(13) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#5]
Join condition: None

(14) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#10, ws_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#11), dynamicpruningexpression(ws_sold_date_sk#11 IN dynamicpruning#7)]
ReadSchema: struct<ws_bill_customer_sk:int>

(15) ColumnarToRow [codegen id : 8]
Input [2]: [ws_bill_customer_sk#10, ws_sold_date_sk#11]

(16) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#12]

(17) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#11]
Right keys [1]: [d_date_sk#12]
Join condition: None

(18) Project [codegen id : 8]
Output [1]: [ws_bill_customer_sk#10]
Input [3]: [ws_bill_customer_sk#10, ws_sold_date_sk#11, d_date_sk#12]

(19) Exchange
Input [1]: [ws_bill_customer_sk#10]
Arguments: hashpartitioning(ws_bill_customer_sk#10, 5), ENSURE_REQUIREMENTS, [id=#13]

(20) Sort [codegen id : 9]
Input [1]: [ws_bill_customer_sk#10]
Arguments: [ws_bill_customer_sk#10 ASC NULLS FIRST], false, 0

(21) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#10]
Join condition: None

(22) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#14, cs_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#15), dynamicpruningexpression(cs_sold_date_sk#15 IN dynamicpruning#7)]
ReadSchema: struct<cs_ship_customer_sk:int>

(23) ColumnarToRow [codegen id : 12]
Input [2]: [cs_ship_customer_sk#14, cs_sold_date_sk#15]

(24) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#16]

(25) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#15]
Right keys [1]: [d_date_sk#16]
Join condition: None

(26) Project [codegen id : 12]
Output [1]: [cs_ship_customer_sk#14]
Input [3]: [cs_ship_customer_sk#14, cs_sold_date_sk#15, d_date_sk#16]

(27) Exchange
Input [1]: [cs_ship_customer_sk#14]
Arguments: hashpartitioning(cs_ship_customer_sk#14, 5), ENSURE_REQUIREMENTS, [id=#17]

(28) Sort [codegen id : 13]
Input [1]: [cs_ship_customer_sk#14]
Arguments: [cs_ship_customer_sk#14 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_ship_customer_sk#14]
Join condition: None

(30) Project [codegen id : 15]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(31) Scan parquet default.customer_address
Output [2]: [ca_address_sk#18, ca_state#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [GA,KY,NM]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(32) ColumnarToRow [codegen id : 14]
Input [2]: [ca_address_sk#18, ca_state#19]

(33) Filter [codegen id : 14]
Input [2]: [ca_address_sk#18, ca_state#19]
Condition : (ca_state#19 IN (KY,GA,NM) AND isnotnull(ca_address_sk#18))

(34) Project [codegen id : 14]
Output [1]: [ca_address_sk#18]
Input [2]: [ca_address_sk#18, ca_state#19]

(35) BroadcastExchange
Input [1]: [ca_address_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(36) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#18]
Join condition: None

(37) Project [codegen id : 15]
Output [1]: [c_current_cdemo_sk#2]
Input [3]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#18]

(38) BroadcastExchange
Input [1]: [c_current_cdemo_sk#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(39) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string>

(40) ColumnarToRow
Input [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]

(41) Filter
Input [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Condition : isnotnull(cd_demo_sk#22)

(42) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#22]
Join condition: None

(43) Project [codegen id : 16]
Output [5]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Input [7]: [c_current_cdemo_sk#2, cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]

(44) HashAggregate [codegen id : 16]
Input [5]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Keys [5]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#28]
Results [6]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, count#29]

(45) Exchange
Input [6]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, count#29]
Arguments: hashpartitioning(cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, 5), ENSURE_REQUIREMENTS, [id=#30]

(46) HashAggregate [codegen id : 17]
Input [6]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, count#29]
Keys [5]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#31]
Results [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, count(1)#31 AS cnt1#32, cd_purchase_estimate#26, count(1)#31 AS cnt2#33, cd_credit_rating#27, count(1)#31 AS cnt3#34]

(47) TakeOrderedAndProject
Input [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cnt1#32, cd_purchase_estimate#26, cnt2#33, cd_credit_rating#27, cnt3#34]
Arguments: 100, [cd_gender#23 ASC NULLS FIRST, cd_marital_status#24 ASC NULLS FIRST, cd_education_status#25 ASC NULLS FIRST, cd_purchase_estimate#26 ASC NULLS FIRST, cd_credit_rating#27 ASC NULLS FIRST], [cd_gender#23, cd_marital_status#24, cd_education_status#25, cnt1#32, cd_purchase_estimate#26, cnt2#33, cd_credit_rating#27, cnt3#34]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (52)
+- * Project (51)
   +- * Filter (50)
      +- * ColumnarToRow (49)
         +- Scan parquet default.date_dim (48)


(48) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_year#35, d_moy#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,6), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(49) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#35, d_moy#36]

(50) Filter [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#35, d_moy#36]
Condition : (((((isnotnull(d_year#35) AND isnotnull(d_moy#36)) AND (d_year#35 = 2001)) AND (d_moy#36 >= 4)) AND (d_moy#36 <= 6)) AND isnotnull(d_date_sk#8))

(51) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [3]: [d_date_sk#8, d_year#35, d_moy#36]

(52) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#37]

Subquery:2 Hosting operator id = 14 Hosting Expression = ws_sold_date_sk#11 IN dynamicpruning#7

Subquery:3 Hosting operator id = 22 Hosting Expression = cs_sold_date_sk#15 IN dynamicpruning#7


