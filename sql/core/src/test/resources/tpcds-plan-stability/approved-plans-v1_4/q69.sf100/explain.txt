== Physical Plan ==
TakeOrderedAndProject (51)
+- * HashAggregate (50)
   +- Exchange (49)
      +- * HashAggregate (48)
         +- * Project (47)
            +- * BroadcastHashJoin Inner BuildLeft (46)
               :- BroadcastExchange (42)
               :  +- * Project (41)
               :     +- * BroadcastHashJoin Inner BuildRight (40)
               :        :- * Project (34)
               :        :  +- SortMergeJoin LeftAnti (33)
               :        :     :- SortMergeJoin LeftAnti (25)
               :        :     :  :- SortMergeJoin LeftSemi (17)
               :        :     :  :  :- * Sort (5)
               :        :     :  :  :  +- Exchange (4)
               :        :     :  :  :     +- * Filter (3)
               :        :     :  :  :        +- * ColumnarToRow (2)
               :        :     :  :  :           +- Scan parquet default.customer (1)
               :        :     :  :  +- * Sort (16)
               :        :     :  :     +- Exchange (15)
               :        :     :  :        +- * Project (14)
               :        :     :  :           +- * BroadcastHashJoin Inner BuildRight (13)
               :        :     :  :              :- * ColumnarToRow (7)
               :        :     :  :              :  +- Scan parquet default.store_sales (6)
               :        :     :  :              +- BroadcastExchange (12)
               :        :     :  :                 +- * Project (11)
               :        :     :  :                    +- * Filter (10)
               :        :     :  :                       +- * ColumnarToRow (9)
               :        :     :  :                          +- Scan parquet default.date_dim (8)
               :        :     :  +- * Sort (24)
               :        :     :     +- Exchange (23)
               :        :     :        +- * Project (22)
               :        :     :           +- * BroadcastHashJoin Inner BuildRight (21)
               :        :     :              :- * ColumnarToRow (19)
               :        :     :              :  +- Scan parquet default.web_sales (18)
               :        :     :              +- ReusedExchange (20)
               :        :     +- * Sort (32)
               :        :        +- Exchange (31)
               :        :           +- * Project (30)
               :        :              +- * BroadcastHashJoin Inner BuildRight (29)
               :        :                 :- * ColumnarToRow (27)
               :        :                 :  +- Scan parquet default.catalog_sales (26)
               :        :                 +- ReusedExchange (28)
               :        +- BroadcastExchange (39)
               :           +- * Project (38)
               :              +- * Filter (37)
               :                 +- * ColumnarToRow (36)
               :                    +- Scan parquet default.customer_address (35)
               +- * Filter (45)
                  +- * ColumnarToRow (44)
                     +- Scan parquet default.customer_demographics (43)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#4]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
ReadSchema: struct<ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_customer_sk#5, ss_sold_date_sk#6]

(8) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_year#9, d_moy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,6), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(9) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#8, d_year#9, d_moy#10]

(10) Filter [codegen id : 3]
Input [3]: [d_date_sk#8, d_year#9, d_moy#10]
Condition : (((((isnotnull(d_year#9) AND isnotnull(d_moy#10)) AND (d_year#9 = 2001)) AND (d_moy#10 >= 4)) AND (d_moy#10 <= 6)) AND isnotnull(d_date_sk#8))

(11) Project [codegen id : 3]
Output [1]: [d_date_sk#8]
Input [3]: [d_date_sk#8, d_year#9, d_moy#10]

(12) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(13) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(14) Project [codegen id : 4]
Output [1]: [ss_customer_sk#5]
Input [3]: [ss_customer_sk#5, ss_sold_date_sk#6, d_date_sk#8]

(15) Exchange
Input [1]: [ss_customer_sk#5]
Arguments: hashpartitioning(ss_customer_sk#5, 5), ENSURE_REQUIREMENTS, [id=#12]

(16) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#5]
Arguments: [ss_customer_sk#5 ASC NULLS FIRST], false, 0

(17) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#5]
Join condition: None

(18) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#13, ws_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#14), dynamicpruningexpression(ws_sold_date_sk#14 IN dynamicpruning#7)]
ReadSchema: struct<ws_bill_customer_sk:int>

(19) ColumnarToRow [codegen id : 7]
Input [2]: [ws_bill_customer_sk#13, ws_sold_date_sk#14]

(20) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#15]

(21) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ws_sold_date_sk#14]
Right keys [1]: [d_date_sk#15]
Join condition: None

(22) Project [codegen id : 7]
Output [1]: [ws_bill_customer_sk#13]
Input [3]: [ws_bill_customer_sk#13, ws_sold_date_sk#14, d_date_sk#15]

(23) Exchange
Input [1]: [ws_bill_customer_sk#13]
Arguments: hashpartitioning(ws_bill_customer_sk#13, 5), ENSURE_REQUIREMENTS, [id=#16]

(24) Sort [codegen id : 8]
Input [1]: [ws_bill_customer_sk#13]
Arguments: [ws_bill_customer_sk#13 ASC NULLS FIRST], false, 0

(25) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#13]
Join condition: None

(26) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#7)]
ReadSchema: struct<cs_ship_customer_sk:int>

(27) ColumnarToRow [codegen id : 10]
Input [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]

(28) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#19]

(29) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#19]
Join condition: None

(30) Project [codegen id : 10]
Output [1]: [cs_ship_customer_sk#17]
Input [3]: [cs_ship_customer_sk#17, cs_sold_date_sk#18, d_date_sk#19]

(31) Exchange
Input [1]: [cs_ship_customer_sk#17]
Arguments: hashpartitioning(cs_ship_customer_sk#17, 5), ENSURE_REQUIREMENTS, [id=#20]

(32) Sort [codegen id : 11]
Input [1]: [cs_ship_customer_sk#17]
Arguments: [cs_ship_customer_sk#17 ASC NULLS FIRST], false, 0

(33) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_ship_customer_sk#17]
Join condition: None

(34) Project [codegen id : 13]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(35) Scan parquet default.customer_address
Output [2]: [ca_address_sk#21, ca_state#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [KY,GA,NM]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(36) ColumnarToRow [codegen id : 12]
Input [2]: [ca_address_sk#21, ca_state#22]

(37) Filter [codegen id : 12]
Input [2]: [ca_address_sk#21, ca_state#22]
Condition : (ca_state#22 IN (KY,GA,NM) AND isnotnull(ca_address_sk#21))

(38) Project [codegen id : 12]
Output [1]: [ca_address_sk#21]
Input [2]: [ca_address_sk#21, ca_state#22]

(39) BroadcastExchange
Input [1]: [ca_address_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(40) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#21]
Join condition: None

(41) Project [codegen id : 13]
Output [1]: [c_current_cdemo_sk#2]
Input [3]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#21]

(42) BroadcastExchange
Input [1]: [c_current_cdemo_sk#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(43) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string>

(44) ColumnarToRow
Input [6]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30]

(45) Filter
Input [6]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30]
Condition : isnotnull(cd_demo_sk#25)

(46) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#25]
Join condition: None

(47) Project [codegen id : 14]
Output [5]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30]
Input [7]: [c_current_cdemo_sk#2, cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30]

(48) HashAggregate [codegen id : 14]
Input [5]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30]
Keys [5]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#31]
Results [6]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, count#32]

(49) Exchange
Input [6]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, count#32]
Arguments: hashpartitioning(cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, 5), ENSURE_REQUIREMENTS, [id=#33]

(50) HashAggregate [codegen id : 15]
Input [6]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, count#32]
Keys [5]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#34]
Results [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, count(1)#34 AS cnt1#35, cd_purchase_estimate#29, count(1)#34 AS cnt2#36, cd_credit_rating#30, count(1)#34 AS cnt3#37]

(51) TakeOrderedAndProject
Input [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cnt1#35, cd_purchase_estimate#29, cnt2#36, cd_credit_rating#30, cnt3#37]
Arguments: 100, [cd_gender#26 ASC NULLS FIRST, cd_marital_status#27 ASC NULLS FIRST, cd_education_status#28 ASC NULLS FIRST, cd_purchase_estimate#29 ASC NULLS FIRST, cd_credit_rating#30 ASC NULLS FIRST], [cd_gender#26, cd_marital_status#27, cd_education_status#28, cnt1#35, cd_purchase_estimate#29, cnt2#36, cd_credit_rating#30, cnt3#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
ReusedExchange (52)


(52) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#8]

Subquery:2 Hosting operator id = 18 Hosting Expression = ws_sold_date_sk#14 IN dynamicpruning#7

Subquery:3 Hosting operator id = 26 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#7


