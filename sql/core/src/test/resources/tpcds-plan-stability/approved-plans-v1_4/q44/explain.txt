== Physical Plan ==
TakeOrderedAndProject (37)
+- * Project (36)
   +- * BroadcastHashJoin Inner BuildRight (35)
      :- * Project (33)
      :  +- * BroadcastHashJoin Inner BuildRight (32)
      :     :- * Project (27)
      :     :  +- * SortMergeJoin Inner (26)
      :     :     :- * Sort (15)
      :     :     :  +- * Project (14)
      :     :     :     +- * Filter (13)
      :     :     :        +- Window (12)
      :     :     :           +- * Sort (11)
      :     :     :              +- Exchange (10)
      :     :     :                 +- * Project (9)
      :     :     :                    +- * Filter (8)
      :     :     :                       +- * HashAggregate (7)
      :     :     :                          +- Exchange (6)
      :     :     :                             +- * HashAggregate (5)
      :     :     :                                +- * Project (4)
      :     :     :                                   +- * Filter (3)
      :     :     :                                      +- * ColumnarToRow (2)
      :     :     :                                         +- Scan parquet default.store_sales (1)
      :     :     +- * Sort (25)
      :     :        +- * Project (24)
      :     :           +- * Filter (23)
      :     :              +- Window (22)
      :     :                 +- * Sort (21)
      :     :                    +- Exchange (20)
      :     :                       +- * Project (19)
      :     :                          +- * Filter (18)
      :     :                             +- * HashAggregate (17)
      :     :                                +- ReusedExchange (16)
      :     +- BroadcastExchange (31)
      :        +- * Filter (30)
      :           +- * ColumnarToRow (29)
      :              +- Scan parquet default.item (28)
      +- ReusedExchange (34)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_store_sk#2) AND (ss_store_sk#2 = 4))

(4) Project [codegen id : 1]
Output [2]: [ss_item_sk#1, ss_net_profit#3]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) HashAggregate [codegen id : 1]
Input [2]: [ss_item_sk#1, ss_net_profit#3]
Keys [1]: [ss_item_sk#1]
Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#5, count#6]
Results [3]: [ss_item_sk#1, sum#7, count#8]

(6) Exchange
Input [3]: [ss_item_sk#1, sum#7, count#8]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(7) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#1, sum#7, count#8]
Keys [1]: [ss_item_sk#1]
Functions [1]: [avg(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#3))#10]
Results [3]: [ss_item_sk#1 AS item_sk#11, cast((avg(UnscaledValue(ss_net_profit#3))#10 / 100.0) as decimal(11,6)) AS rank_col#12, cast((avg(UnscaledValue(ss_net_profit#3))#10 / 100.0) as decimal(11,6)) AS avg(ss_net_profit#3)#13]

(8) Filter [codegen id : 2]
Input [3]: [item_sk#11, rank_col#12, avg(ss_net_profit#3)#13]
Condition : (isnotnull(avg(ss_net_profit#3)#13) AND (cast(avg(ss_net_profit#3)#13 as decimal(13,7)) > CheckOverflow((0.900000 * promote_precision(Subquery scalar-subquery#14, [id=#15])), DecimalType(13,7), true)))

(9) Project [codegen id : 2]
Output [2]: [item_sk#11, rank_col#12]
Input [3]: [item_sk#11, rank_col#12, avg(ss_net_profit#3)#13]

(10) Exchange
Input [2]: [item_sk#11, rank_col#12]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#16]

(11) Sort [codegen id : 3]
Input [2]: [item_sk#11, rank_col#12]
Arguments: [rank_col#12 ASC NULLS FIRST], false, 0

(12) Window
Input [2]: [item_sk#11, rank_col#12]
Arguments: [rank(rank_col#12) windowspecdefinition(rank_col#12 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#17], [rank_col#12 ASC NULLS FIRST]

(13) Filter [codegen id : 4]
Input [3]: [item_sk#11, rank_col#12, rnk#17]
Condition : ((isnotnull(rnk#17) AND (rnk#17 < 11)) AND isnotnull(item_sk#11))

(14) Project [codegen id : 4]
Output [2]: [item_sk#11, rnk#17]
Input [3]: [item_sk#11, rank_col#12, rnk#17]

(15) Sort [codegen id : 4]
Input [2]: [item_sk#11, rnk#17]
Arguments: [rnk#17 ASC NULLS FIRST], false, 0

(16) ReusedExchange [Reuses operator id: 6]
Output [3]: [ss_item_sk#1, sum#18, count#19]

(17) HashAggregate [codegen id : 6]
Input [3]: [ss_item_sk#1, sum#18, count#19]
Keys [1]: [ss_item_sk#1]
Functions [1]: [avg(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#3))#20]
Results [3]: [ss_item_sk#1 AS item_sk#21, cast((avg(UnscaledValue(ss_net_profit#3))#20 / 100.0) as decimal(11,6)) AS rank_col#22, cast((avg(UnscaledValue(ss_net_profit#3))#20 / 100.0) as decimal(11,6)) AS avg(ss_net_profit#3)#23]

(18) Filter [codegen id : 6]
Input [3]: [item_sk#21, rank_col#22, avg(ss_net_profit#3)#23]
Condition : (isnotnull(avg(ss_net_profit#3)#23) AND (cast(avg(ss_net_profit#3)#23 as decimal(13,7)) > CheckOverflow((0.900000 * promote_precision(ReusedSubquery Subquery scalar-subquery#14, [id=#15])), DecimalType(13,7), true)))

(19) Project [codegen id : 6]
Output [2]: [item_sk#21, rank_col#22]
Input [3]: [item_sk#21, rank_col#22, avg(ss_net_profit#3)#23]

(20) Exchange
Input [2]: [item_sk#21, rank_col#22]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#24]

(21) Sort [codegen id : 7]
Input [2]: [item_sk#21, rank_col#22]
Arguments: [rank_col#22 DESC NULLS LAST], false, 0

(22) Window
Input [2]: [item_sk#21, rank_col#22]
Arguments: [rank(rank_col#22) windowspecdefinition(rank_col#22 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#25], [rank_col#22 DESC NULLS LAST]

(23) Filter [codegen id : 8]
Input [3]: [item_sk#21, rank_col#22, rnk#25]
Condition : ((isnotnull(rnk#25) AND (rnk#25 < 11)) AND isnotnull(item_sk#21))

(24) Project [codegen id : 8]
Output [2]: [item_sk#21, rnk#25]
Input [3]: [item_sk#21, rank_col#22, rnk#25]

(25) Sort [codegen id : 8]
Input [2]: [item_sk#21, rnk#25]
Arguments: [rnk#25 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 11]
Left keys [1]: [rnk#17]
Right keys [1]: [rnk#25]
Join condition: None

(27) Project [codegen id : 11]
Output [3]: [item_sk#11, rnk#17, item_sk#21]
Input [4]: [item_sk#11, rnk#17, item_sk#21, rnk#25]

(28) Scan parquet default.item
Output [2]: [i_item_sk#26, i_product_name#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_product_name:string>

(29) ColumnarToRow [codegen id : 9]
Input [2]: [i_item_sk#26, i_product_name#27]

(30) Filter [codegen id : 9]
Input [2]: [i_item_sk#26, i_product_name#27]
Condition : isnotnull(i_item_sk#26)

(31) BroadcastExchange
Input [2]: [i_item_sk#26, i_product_name#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(32) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [item_sk#11]
Right keys [1]: [i_item_sk#26]
Join condition: None

(33) Project [codegen id : 11]
Output [3]: [rnk#17, item_sk#21, i_product_name#27]
Input [5]: [item_sk#11, rnk#17, item_sk#21, i_item_sk#26, i_product_name#27]

(34) ReusedExchange [Reuses operator id: 31]
Output [2]: [i_item_sk#29, i_product_name#30]

(35) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [item_sk#21]
Right keys [1]: [i_item_sk#29]
Join condition: None

(36) Project [codegen id : 11]
Output [3]: [rnk#17, i_product_name#27 AS best_performing#31, i_product_name#30 AS worst_performing#32]
Input [5]: [rnk#17, item_sk#21, i_product_name#27, i_item_sk#29, i_product_name#30]

(37) TakeOrderedAndProject
Input [3]: [rnk#17, best_performing#31, worst_performing#32]
Arguments: 100, [rnk#17 ASC NULLS FIRST], [rnk#17, best_performing#31, worst_performing#32]

===== Subqueries =====

Subquery:1 Hosting operator id = 8 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
* HashAggregate (44)
+- Exchange (43)
   +- * HashAggregate (42)
      +- * Project (41)
         +- * Filter (40)
            +- * ColumnarToRow (39)
               +- Scan parquet default.store_sales (38)


(38) Scan parquet default.store_sales
Output [4]: [ss_addr_sk#33, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4), IsNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(39) ColumnarToRow [codegen id : 1]
Input [4]: [ss_addr_sk#33, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]

(40) Filter [codegen id : 1]
Input [4]: [ss_addr_sk#33, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : ((isnotnull(ss_store_sk#2) AND (ss_store_sk#2 = 4)) AND isnull(ss_addr_sk#33))

(41) Project [codegen id : 1]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_addr_sk#33, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]

(42) HashAggregate [codegen id : 1]
Input [2]: [ss_store_sk#2, ss_net_profit#3]
Keys [1]: [ss_store_sk#2]
Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#34, count#35]
Results [3]: [ss_store_sk#2, sum#36, count#37]

(43) Exchange
Input [3]: [ss_store_sk#2, sum#36, count#37]
Arguments: hashpartitioning(ss_store_sk#2, 5), ENSURE_REQUIREMENTS, [id=#38]

(44) HashAggregate [codegen id : 2]
Input [3]: [ss_store_sk#2, sum#36, count#37]
Keys [1]: [ss_store_sk#2]
Functions [1]: [avg(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#3))#39]
Results [1]: [cast((avg(UnscaledValue(ss_net_profit#3))#39 / 100.0) as decimal(11,6)) AS rank_col#40]

Subquery:2 Hosting operator id = 18 Hosting Expression = ReusedSubquery Subquery scalar-subquery#14, [id=#15]


