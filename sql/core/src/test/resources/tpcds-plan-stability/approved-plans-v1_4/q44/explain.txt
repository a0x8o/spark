== Physical Plan ==
TakeOrderedAndProject (33)
+- * Project (32)
   +- * BroadcastHashJoin Inner BuildRight (31)
      :- * Project (29)
      :  +- * BroadcastHashJoin Inner BuildRight (28)
      :     :- * Project (23)
      :     :  +- * SortMergeJoin Inner (22)
      :     :     :- * Sort (15)
      :     :     :  +- * Project (14)
      :     :     :     +- * Filter (13)
      :     :     :        +- Window (12)
      :     :     :           +- * Sort (11)
      :     :     :              +- Exchange (10)
      :     :     :                 +- * Project (9)
      :     :     :                    +- * Filter (8)
      :     :     :                       +- * HashAggregate (7)
      :     :     :                          +- Exchange (6)
      :     :     :                             +- * HashAggregate (5)
      :     :     :                                +- * Project (4)
      :     :     :                                   +- * Filter (3)
      :     :     :                                      +- * ColumnarToRow (2)
      :     :     :                                         +- Scan parquet default.store_sales (1)
      :     :     +- * Sort (21)
      :     :        +- * Project (20)
      :     :           +- * Filter (19)
      :     :              +- Window (18)
      :     :                 +- * Sort (17)
      :     :                    +- ReusedExchange (16)
      :     +- BroadcastExchange (27)
      :        +- * Filter (26)
      :           +- * ColumnarToRow (25)
      :              +- Scan parquet default.item (24)
      +- ReusedExchange (30)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_store_sk#2) AND (ss_store_sk#2 = 4))

(4) Project [codegen id : 1]
Output [2]: [ss_item_sk#1, ss_net_profit#3]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) HashAggregate [codegen id : 1]
Input [2]: [ss_item_sk#1, ss_net_profit#3]
Keys [1]: [ss_item_sk#1]
Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#5, count#6]
Results [3]: [ss_item_sk#1, sum#7, count#8]

(6) Exchange
Input [3]: [ss_item_sk#1, sum#7, count#8]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(7) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#1, sum#7, count#8]
Keys [1]: [ss_item_sk#1]
Functions [1]: [avg(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#3))#10]
Results [3]: [ss_item_sk#1 AS item_sk#11, cast((avg(UnscaledValue(ss_net_profit#3))#10 / 100.0) as decimal(11,6)) AS rank_col#12, cast((avg(UnscaledValue(ss_net_profit#3))#10 / 100.0) as decimal(11,6)) AS avg(ss_net_profit#3)#13]

(8) Filter [codegen id : 2]
Input [3]: [item_sk#11, rank_col#12, avg(ss_net_profit#3)#13]
Condition : (isnotnull(avg(ss_net_profit#3)#13) AND (cast(avg(ss_net_profit#3)#13 as decimal(13,7)) > CheckOverflow((0.900000 * promote_precision(Subquery scalar-subquery#14, [id=#15])), DecimalType(13,7), true)))

(9) Project [codegen id : 2]
Output [2]: [item_sk#11, rank_col#12]
Input [3]: [item_sk#11, rank_col#12, avg(ss_net_profit#3)#13]

(10) Exchange
Input [2]: [item_sk#11, rank_col#12]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#16]

(11) Sort [codegen id : 3]
Input [2]: [item_sk#11, rank_col#12]
Arguments: [rank_col#12 ASC NULLS FIRST], false, 0

(12) Window
Input [2]: [item_sk#11, rank_col#12]
Arguments: [rank(rank_col#12) windowspecdefinition(rank_col#12 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#17], [rank_col#12 ASC NULLS FIRST]

(13) Filter [codegen id : 4]
Input [3]: [item_sk#11, rank_col#12, rnk#17]
Condition : ((rnk#17 < 11) AND isnotnull(item_sk#11))

(14) Project [codegen id : 4]
Output [2]: [item_sk#11, rnk#17]
Input [3]: [item_sk#11, rank_col#12, rnk#17]

(15) Sort [codegen id : 4]
Input [2]: [item_sk#11, rnk#17]
Arguments: [rnk#17 ASC NULLS FIRST], false, 0

(16) ReusedExchange [Reuses operator id: 10]
Output [2]: [item_sk#18, rank_col#19]

(17) Sort [codegen id : 7]
Input [2]: [item_sk#18, rank_col#19]
Arguments: [rank_col#19 DESC NULLS LAST], false, 0

(18) Window
Input [2]: [item_sk#18, rank_col#19]
Arguments: [rank(rank_col#19) windowspecdefinition(rank_col#19 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#20], [rank_col#19 DESC NULLS LAST]

(19) Filter [codegen id : 8]
Input [3]: [item_sk#18, rank_col#19, rnk#20]
Condition : ((rnk#20 < 11) AND isnotnull(item_sk#18))

(20) Project [codegen id : 8]
Output [2]: [item_sk#18, rnk#20]
Input [3]: [item_sk#18, rank_col#19, rnk#20]

(21) Sort [codegen id : 8]
Input [2]: [item_sk#18, rnk#20]
Arguments: [rnk#20 ASC NULLS FIRST], false, 0

(22) SortMergeJoin [codegen id : 11]
Left keys [1]: [rnk#17]
Right keys [1]: [rnk#20]
Join condition: None

(23) Project [codegen id : 11]
Output [3]: [item_sk#11, rnk#17, item_sk#18]
Input [4]: [item_sk#11, rnk#17, item_sk#18, rnk#20]

(24) Scan parquet default.item
Output [2]: [i_item_sk#21, i_product_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_product_name:string>

(25) ColumnarToRow [codegen id : 9]
Input [2]: [i_item_sk#21, i_product_name#22]

(26) Filter [codegen id : 9]
Input [2]: [i_item_sk#21, i_product_name#22]
Condition : isnotnull(i_item_sk#21)

(27) BroadcastExchange
Input [2]: [i_item_sk#21, i_product_name#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(28) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [item_sk#11]
Right keys [1]: [i_item_sk#21]
Join condition: None

(29) Project [codegen id : 11]
Output [3]: [rnk#17, item_sk#18, i_product_name#22]
Input [5]: [item_sk#11, rnk#17, item_sk#18, i_item_sk#21, i_product_name#22]

(30) ReusedExchange [Reuses operator id: 27]
Output [2]: [i_item_sk#24, i_product_name#25]

(31) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [item_sk#18]
Right keys [1]: [i_item_sk#24]
Join condition: None

(32) Project [codegen id : 11]
Output [3]: [rnk#17, i_product_name#22 AS best_performing#26, i_product_name#25 AS worst_performing#27]
Input [5]: [rnk#17, item_sk#18, i_product_name#22, i_item_sk#24, i_product_name#25]

(33) TakeOrderedAndProject
Input [3]: [rnk#17, best_performing#26, worst_performing#27]
Arguments: 100, [rnk#17 ASC NULLS FIRST], [rnk#17, best_performing#26, worst_performing#27]

===== Subqueries =====

Subquery:1 Hosting operator id = 8 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
* HashAggregate (40)
+- Exchange (39)
   +- * HashAggregate (38)
      +- * Project (37)
         +- * Filter (36)
            +- * ColumnarToRow (35)
               +- Scan parquet default.store_sales (34)


(34) Scan parquet default.store_sales
Output [4]: [ss_addr_sk#28, ss_store_sk#29, ss_net_profit#30, ss_sold_date_sk#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,4), IsNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(35) ColumnarToRow [codegen id : 1]
Input [4]: [ss_addr_sk#28, ss_store_sk#29, ss_net_profit#30, ss_sold_date_sk#31]

(36) Filter [codegen id : 1]
Input [4]: [ss_addr_sk#28, ss_store_sk#29, ss_net_profit#30, ss_sold_date_sk#31]
Condition : ((isnotnull(ss_store_sk#29) AND (ss_store_sk#29 = 4)) AND isnull(ss_addr_sk#28))

(37) Project [codegen id : 1]
Output [2]: [ss_store_sk#29, ss_net_profit#30]
Input [4]: [ss_addr_sk#28, ss_store_sk#29, ss_net_profit#30, ss_sold_date_sk#31]

(38) HashAggregate [codegen id : 1]
Input [2]: [ss_store_sk#29, ss_net_profit#30]
Keys [1]: [ss_store_sk#29]
Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#30))]
Aggregate Attributes [2]: [sum#32, count#33]
Results [3]: [ss_store_sk#29, sum#34, count#35]

(39) Exchange
Input [3]: [ss_store_sk#29, sum#34, count#35]
Arguments: hashpartitioning(ss_store_sk#29, 5), ENSURE_REQUIREMENTS, [id=#36]

(40) HashAggregate [codegen id : 2]
Input [3]: [ss_store_sk#29, sum#34, count#35]
Keys [1]: [ss_store_sk#29]
Functions [1]: [avg(UnscaledValue(ss_net_profit#30))]
Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#30))#37]
Results [1]: [cast((avg(UnscaledValue(ss_net_profit#30))#37 / 100.0) as decimal(11,6)) AS rank_col#38]


