== Physical Plan ==
TakeOrderedAndProject (134)
+- * HashAggregate (133)
   +- Exchange (132)
      +- * HashAggregate (131)
         +- * Expand (130)
            +- Union (129)
               :- * Project (90)
               :  +- * Filter (89)
               :     +- * HashAggregate (88)
               :        +- Exchange (87)
               :           +- * HashAggregate (86)
               :              +- * Project (85)
               :                 +- * BroadcastHashJoin Inner BuildRight (84)
               :                    :- * Project (74)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (73)
               :                    :     :- SortMergeJoin LeftSemi (67)
               :                    :     :  :- * Sort (5)
               :                    :     :  :  +- Exchange (4)
               :                    :     :  :     +- * Filter (3)
               :                    :     :  :        +- * ColumnarToRow (2)
               :                    :     :  :           +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (66)
               :                    :     :     +- Exchange (65)
               :                    :     :        +- * Project (64)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (63)
               :                    :     :              :- * Filter (8)
               :                    :     :              :  +- * ColumnarToRow (7)
               :                    :     :              :     +- Scan parquet default.item (6)
               :                    :     :              +- BroadcastExchange (62)
               :                    :     :                 +- * HashAggregate (61)
               :                    :     :                    +- Exchange (60)
               :                    :     :                       +- * HashAggregate (59)
               :                    :     :                          +- SortMergeJoin LeftSemi (58)
               :                    :     :                             :- * Sort (46)
               :                    :     :                             :  +- Exchange (45)
               :                    :     :                             :     +- * HashAggregate (44)
               :                    :     :                             :        +- Exchange (43)
               :                    :     :                             :           +- * HashAggregate (42)
               :                    :     :                             :              +- SortMergeJoin LeftSemi (41)
               :                    :     :                             :                 :- * Sort (26)
               :                    :     :                             :                 :  +- Exchange (25)
               :                    :     :                             :                 :     +- * Project (24)
               :                    :     :                             :                 :        +- * BroadcastHashJoin Inner BuildRight (23)
               :                    :     :                             :                 :           :- * Project (18)
               :                    :     :                             :                 :           :  +- * BroadcastHashJoin Inner BuildRight (17)
               :                    :     :                             :                 :           :     :- * Filter (11)
               :                    :     :                             :                 :           :     :  +- * ColumnarToRow (10)
               :                    :     :                             :                 :           :     :     +- Scan parquet default.store_sales (9)
               :                    :     :                             :                 :           :     +- BroadcastExchange (16)
               :                    :     :                             :                 :           :        +- * Project (15)
               :                    :     :                             :                 :           :           +- * Filter (14)
               :                    :     :                             :                 :           :              +- * ColumnarToRow (13)
               :                    :     :                             :                 :           :                 +- Scan parquet default.date_dim (12)
               :                    :     :                             :                 :           +- BroadcastExchange (22)
               :                    :     :                             :                 :              +- * Filter (21)
               :                    :     :                             :                 :                 +- * ColumnarToRow (20)
               :                    :     :                             :                 :                    +- Scan parquet default.item (19)
               :                    :     :                             :                 +- * Sort (40)
               :                    :     :                             :                    +- Exchange (39)
               :                    :     :                             :                       +- * Project (38)
               :                    :     :                             :                          +- * BroadcastHashJoin Inner BuildRight (37)
               :                    :     :                             :                             :- * Project (32)
               :                    :     :                             :                             :  +- * BroadcastHashJoin Inner BuildRight (31)
               :                    :     :                             :                             :     :- * Filter (29)
               :                    :     :                             :                             :     :  +- * ColumnarToRow (28)
               :                    :     :                             :                             :     :     +- Scan parquet default.catalog_sales (27)
               :                    :     :                             :                             :     +- ReusedExchange (30)
               :                    :     :                             :                             +- BroadcastExchange (36)
               :                    :     :                             :                                +- * Filter (35)
               :                    :     :                             :                                   +- * ColumnarToRow (34)
               :                    :     :                             :                                      +- Scan parquet default.item (33)
               :                    :     :                             +- * Sort (57)
               :                    :     :                                +- Exchange (56)
               :                    :     :                                   +- * Project (55)
               :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (54)
               :                    :     :                                         :- * Project (52)
               :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (51)
               :                    :     :                                         :     :- * Filter (49)
               :                    :     :                                         :     :  +- * ColumnarToRow (48)
               :                    :     :                                         :     :     +- Scan parquet default.web_sales (47)
               :                    :     :                                         :     +- ReusedExchange (50)
               :                    :     :                                         +- ReusedExchange (53)
               :                    :     +- BroadcastExchange (72)
               :                    :        +- * Project (71)
               :                    :           +- * Filter (70)
               :                    :              +- * ColumnarToRow (69)
               :                    :                 +- Scan parquet default.date_dim (68)
               :                    +- BroadcastExchange (83)
               :                       +- SortMergeJoin LeftSemi (82)
               :                          :- * Sort (79)
               :                          :  +- Exchange (78)
               :                          :     +- * Filter (77)
               :                          :        +- * ColumnarToRow (76)
               :                          :           +- Scan parquet default.item (75)
               :                          +- * Sort (81)
               :                             +- ReusedExchange (80)
               :- * Project (109)
               :  +- * Filter (108)
               :     +- * HashAggregate (107)
               :        +- Exchange (106)
               :           +- * HashAggregate (105)
               :              +- * Project (104)
               :                 +- * BroadcastHashJoin Inner BuildRight (103)
               :                    :- * Project (101)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (100)
               :                    :     :- SortMergeJoin LeftSemi (98)
               :                    :     :  :- * Sort (95)
               :                    :     :  :  +- Exchange (94)
               :                    :     :  :     +- * Filter (93)
               :                    :     :  :        +- * ColumnarToRow (92)
               :                    :     :  :           +- Scan parquet default.catalog_sales (91)
               :                    :     :  +- * Sort (97)
               :                    :     :     +- ReusedExchange (96)
               :                    :     +- ReusedExchange (99)
               :                    +- ReusedExchange (102)
               +- * Project (128)
                  +- * Filter (127)
                     +- * HashAggregate (126)
                        +- Exchange (125)
                           +- * HashAggregate (124)
                              +- * Project (123)
                                 +- * BroadcastHashJoin Inner BuildRight (122)
                                    :- * Project (120)
                                    :  +- * BroadcastHashJoin Inner BuildRight (119)
                                    :     :- SortMergeJoin LeftSemi (117)
                                    :     :  :- * Sort (114)
                                    :     :  :  +- Exchange (113)
                                    :     :  :     +- * Filter (112)
                                    :     :  :        +- * ColumnarToRow (111)
                                    :     :  :           +- Scan parquet default.web_sales (110)
                                    :     :  +- * Sort (116)
                                    :     :     +- ReusedExchange (115)
                                    :     +- ReusedExchange (118)
                                    +- ReusedExchange (121)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(11) Filter [codegen id : 5]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(16) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#1]
Input [3]: [ss_item_sk#1, ss_sold_date_sk#4, d_date_sk#12]

(19) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(22) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#8 AS brand_id#16, i_class_id#9 AS class_id#17, i_category_id#10 AS category_id#18]
Input [5]: [ss_item_sk#1, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(25) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(26) Sort [codegen id : 6]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: [coalesce(brand_id#16, 0) ASC NULLS FIRST, isnull(brand_id#16) ASC NULLS FIRST, coalesce(class_id#17, 0) ASC NULLS FIRST, isnull(class_id#17) ASC NULLS FIRST, coalesce(category_id#18, 0) ASC NULLS FIRST, isnull(category_id#18) ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(28) ColumnarToRow [codegen id : 9]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(29) Filter [codegen id : 9]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(30) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#12]
Join condition: None

(32) Project [codegen id : 9]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#12]

(33) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(34) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(35) Filter [codegen id : 8]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(36) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#7]
Join condition: None

(38) Project [codegen id : 9]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [cs_item_sk#20, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(39) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), ENSURE_REQUIREMENTS, [id=#23]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(42) HashAggregate [codegen id : 11]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(43) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(brand_id#16, class_id#17, category_id#18, 5), ENSURE_REQUIREMENTS, [id=#24]

(44) HashAggregate [codegen id : 12]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(45) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18), 5), ENSURE_REQUIREMENTS, [id=#25]

(46) Sort [codegen id : 13]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: [coalesce(brand_id#16, 0) ASC NULLS FIRST, isnull(brand_id#16) ASC NULLS FIRST, coalesce(class_id#17, 0) ASC NULLS FIRST, isnull(class_id#17) ASC NULLS FIRST, coalesce(category_id#18, 0) ASC NULLS FIRST, isnull(category_id#18) ASC NULLS FIRST], false, 0

(47) Scan parquet default.web_sales
Output [2]: [ws_item_sk#26, ws_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#27), dynamicpruningexpression(ws_sold_date_sk#27 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(48) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#26, ws_sold_date_sk#27]

(49) Filter [codegen id : 16]
Input [2]: [ws_item_sk#26, ws_sold_date_sk#27]
Condition : isnotnull(ws_item_sk#26)

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#27]
Right keys [1]: [d_date_sk#12]
Join condition: None

(52) Project [codegen id : 16]
Output [1]: [ws_item_sk#26]
Input [3]: [ws_item_sk#26, ws_sold_date_sk#27, d_date_sk#12]

(53) ReusedExchange [Reuses operator id: 36]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(54) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#26]
Right keys [1]: [i_item_sk#7]
Join condition: None

(55) Project [codegen id : 16]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [ws_item_sk#26, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(56) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), ENSURE_REQUIREMENTS, [id=#28]

(57) Sort [codegen id : 17]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(58) SortMergeJoin
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(59) HashAggregate [codegen id : 18]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(60) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(brand_id#16, class_id#17, category_id#18, 5), ENSURE_REQUIREMENTS, [id=#29]

(61) HashAggregate [codegen id : 19]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(62) BroadcastExchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#30]

(63) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#16, class_id#17, category_id#18]
Join condition: None

(64) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#31]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#16, class_id#17, category_id#18]

(65) Exchange
Input [1]: [ss_item_sk#31]
Arguments: hashpartitioning(ss_item_sk#31, 5), ENSURE_REQUIREMENTS, [id=#32]

(66) Sort [codegen id : 21]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(67) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(68) Scan parquet default.date_dim
Output [3]: [d_date_sk#12, d_year#13, d_moy#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(69) ColumnarToRow [codegen id : 22]
Input [3]: [d_date_sk#12, d_year#13, d_moy#33]

(70) Filter [codegen id : 22]
Input [3]: [d_date_sk#12, d_year#13, d_moy#33]
Condition : ((((isnotnull(d_year#13) AND isnotnull(d_moy#33)) AND (d_year#13 = 2001)) AND (d_moy#33 = 11)) AND isnotnull(d_date_sk#12))

(71) Project [codegen id : 22]
Output [1]: [d_date_sk#12]
Input [3]: [d_date_sk#12, d_year#13, d_moy#33]

(72) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34]

(73) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(74) Project [codegen id : 44]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(75) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(76) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(77) Filter [codegen id : 23]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(78) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#35]

(79) Sort [codegen id : 24]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(80) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#31]

(81) Sort [codegen id : 43]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(82) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(83) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36]

(84) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(85) Project [codegen id : 44]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(86) HashAggregate [codegen id : 44]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#37, isEmpty#38, count#39]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#40, isEmpty#41, count#42]

(87) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#40, isEmpty#41, count#42]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#43]

(88) HashAggregate [codegen id : 45]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#40, isEmpty#41, count#42]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#44, count(1)#45]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#44 AS sales#46, count(1)#45 AS number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#44 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#48]

(89) Filter [codegen id : 45]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#48]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#48) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#48 as decimal(32,6)) > cast(Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(90) Project [codegen id : 45]
Output [6]: [sales#46, number_sales#47, store AS channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#48]

(91) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 46]
Input [4]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]

(93) Filter [codegen id : 46]
Input [4]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(94) Exchange
Input [4]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]
Arguments: hashpartitioning(cs_item_sk#20, 5), ENSURE_REQUIREMENTS, [id=#54]

(95) Sort [codegen id : 47]
Input [4]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]
Arguments: [cs_item_sk#20 ASC NULLS FIRST], false, 0

(96) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#31]

(97) Sort [codegen id : 66]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(98) SortMergeJoin
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(99) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#12]

(100) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#12]
Join condition: None

(101) Project [codegen id : 89]
Output [3]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53]
Input [5]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21, d_date_sk#12]

(102) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(103) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#7]
Join condition: None

(104) Project [codegen id : 89]
Output [5]: [cs_quantity#52, cs_list_price#53, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(105) HashAggregate [codegen id : 89]
Input [5]: [cs_quantity#52, cs_list_price#53, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#55, isEmpty#56, count#57]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#58, isEmpty#59, count#60]

(106) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#58, isEmpty#59, count#60]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#61]

(107) HashAggregate [codegen id : 90]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#58, isEmpty#59, count#60]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#62, count(1)#63]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#62 AS sales#64, count(1)#63 AS number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#62 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#66]

(108) Filter [codegen id : 90]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#66]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#66) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#66 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(109) Project [codegen id : 90]
Output [6]: [sales#64, number_sales#65, catalog AS channel#67, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#66]

(110) Scan parquet default.web_sales
Output [4]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#27), dynamicpruningexpression(ws_sold_date_sk#27 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(111) ColumnarToRow [codegen id : 91]
Input [4]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]

(112) Filter [codegen id : 91]
Input [4]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]
Condition : isnotnull(ws_item_sk#26)

(113) Exchange
Input [4]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]
Arguments: hashpartitioning(ws_item_sk#26, 5), ENSURE_REQUIREMENTS, [id=#70]

(114) Sort [codegen id : 92]
Input [4]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]
Arguments: [ws_item_sk#26 ASC NULLS FIRST], false, 0

(115) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#31]

(116) Sort [codegen id : 111]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(117) SortMergeJoin
Left keys [1]: [ws_item_sk#26]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(118) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#12]

(119) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_sold_date_sk#27]
Right keys [1]: [d_date_sk#12]
Join condition: None

(120) Project [codegen id : 134]
Output [3]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69]
Input [5]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27, d_date_sk#12]

(121) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(122) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_item_sk#26]
Right keys [1]: [i_item_sk#7]
Join condition: None

(123) Project [codegen id : 134]
Output [5]: [ws_quantity#68, ws_list_price#69, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(124) HashAggregate [codegen id : 134]
Input [5]: [ws_quantity#68, ws_list_price#69, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#71, isEmpty#72, count#73]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#74, isEmpty#75, count#76]

(125) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#74, isEmpty#75, count#76]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#77]

(126) HashAggregate [codegen id : 135]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#74, isEmpty#75, count#76]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#78, count(1)#79]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#78 AS sales#80, count(1)#79 AS number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#78 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82]

(127) Filter [codegen id : 135]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(128) Project [codegen id : 135]
Output [6]: [sales#80, number_sales#81, web AS channel#83, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82]

(129) Union

(130) Expand [codegen id : 136]
Input [6]: [sales#46, number_sales#47, channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [List(sales#46, number_sales#47, channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, 0), List(sales#46, number_sales#47, channel#51, i_brand_id#8, i_class_id#9, null, 1), List(sales#46, number_sales#47, channel#51, i_brand_id#8, null, null, 3), List(sales#46, number_sales#47, channel#51, null, null, null, 7), List(sales#46, number_sales#47, null, null, null, null, 15)], [sales#46, number_sales#47, channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, spark_grouping_id#88]

(131) HashAggregate [codegen id : 136]
Input [7]: [sales#46, number_sales#47, channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, spark_grouping_id#88]
Keys [5]: [channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, spark_grouping_id#88]
Functions [2]: [partial_sum(sales#46), partial_sum(number_sales#47)]
Aggregate Attributes [3]: [sum#89, isEmpty#90, sum#91]
Results [8]: [channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, spark_grouping_id#88, sum#92, isEmpty#93, sum#94]

(132) Exchange
Input [8]: [channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, spark_grouping_id#88, sum#92, isEmpty#93, sum#94]
Arguments: hashpartitioning(channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, spark_grouping_id#88, 5), ENSURE_REQUIREMENTS, [id=#95]

(133) HashAggregate [codegen id : 137]
Input [8]: [channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, spark_grouping_id#88, sum#92, isEmpty#93, sum#94]
Keys [5]: [channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, spark_grouping_id#88]
Functions [2]: [sum(sales#46), sum(number_sales#47)]
Aggregate Attributes [2]: [sum(sales#46)#96, sum(number_sales#47)#97]
Results [6]: [channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, sum(sales#46)#96 AS sum(sales)#98, sum(number_sales#47)#97 AS sum(number_sales)#99]

(134) TakeOrderedAndProject
Input [6]: [channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, sum(sales)#98, sum(number_sales)#99]
Arguments: 100, [channel#84 ASC NULLS FIRST, i_brand_id#85 ASC NULLS FIRST, i_class_id#86 ASC NULLS FIRST, i_category_id#87 ASC NULLS FIRST], [channel#84, i_brand_id#85, i_class_id#86, i_category_id#87, sum(sales)#98, sum(number_sales)#99]

===== Subqueries =====

Subquery:1 Hosting operator id = 89 Hosting Expression = Subquery scalar-subquery#49, [id=#50]
* HashAggregate (157)
+- Exchange (156)
   +- * HashAggregate (155)
      +- Union (154)
         :- * Project (143)
         :  +- * BroadcastHashJoin Inner BuildRight (142)
         :     :- * ColumnarToRow (136)
         :     :  +- Scan parquet default.store_sales (135)
         :     +- BroadcastExchange (141)
         :        +- * Project (140)
         :           +- * Filter (139)
         :              +- * ColumnarToRow (138)
         :                 +- Scan parquet default.date_dim (137)
         :- * Project (148)
         :  +- * BroadcastHashJoin Inner BuildRight (147)
         :     :- * ColumnarToRow (145)
         :     :  +- Scan parquet default.catalog_sales (144)
         :     +- ReusedExchange (146)
         +- * Project (153)
            +- * BroadcastHashJoin Inner BuildRight (152)
               :- * ColumnarToRow (150)
               :  +- Scan parquet default.web_sales (149)
               +- ReusedExchange (151)


(135) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#100)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(136) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(137) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(138) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]

(139) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(140) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(141) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#101]

(142) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(143) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#102, ss_list_price#3 AS list_price#103]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(144) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#100)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(145) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]

(146) ReusedExchange [Reuses operator id: 141]
Output [1]: [d_date_sk#12]

(147) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#12]
Join condition: None

(148) Project [codegen id : 4]
Output [2]: [cs_quantity#52 AS quantity#104, cs_list_price#53 AS list_price#105]
Input [4]: [cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21, d_date_sk#12]

(149) Scan parquet default.web_sales
Output [3]: [ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#27), dynamicpruningexpression(ws_sold_date_sk#27 IN dynamicpruning#100)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(150) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]

(151) ReusedExchange [Reuses operator id: 141]
Output [1]: [d_date_sk#12]

(152) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#27]
Right keys [1]: [d_date_sk#12]
Join condition: None

(153) Project [codegen id : 6]
Output [2]: [ws_quantity#68 AS quantity#106, ws_list_price#69 AS list_price#107]
Input [4]: [ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27, d_date_sk#12]

(154) Union

(155) HashAggregate [codegen id : 7]
Input [2]: [quantity#102, list_price#103]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#102 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#103 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#108, count#109]
Results [2]: [sum#110, count#111]

(156) Exchange
Input [2]: [sum#110, count#111]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#112]

(157) HashAggregate [codegen id : 8]
Input [2]: [sum#110, count#111]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#102 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#103 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#102 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#103 as decimal(12,2)))), DecimalType(18,2), true))#113]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#102 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#103 as decimal(12,2)))), DecimalType(18,2), true))#113 AS average_sales#114]

Subquery:2 Hosting operator id = 135 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#100
ReusedExchange (158)


(158) ReusedExchange [Reuses operator id: 141]
Output [1]: [d_date_sk#12]

Subquery:3 Hosting operator id = 144 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#100

Subquery:4 Hosting operator id = 149 Hosting Expression = ws_sold_date_sk#27 IN dynamicpruning#100

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (159)


(159) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#12]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#11
ReusedExchange (160)


(160) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

Subquery:7 Hosting operator id = 27 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#11

Subquery:8 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#27 IN dynamicpruning#11

Subquery:9 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:10 Hosting operator id = 91 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#5

Subquery:11 Hosting operator id = 127 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:12 Hosting operator id = 110 Hosting Expression = ws_sold_date_sk#27 IN dynamicpruning#5


