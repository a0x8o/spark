== Physical Plan ==
TakeOrderedAndProject (123)
+- * HashAggregate (122)
   +- Exchange (121)
      +- * HashAggregate (120)
         +- * Expand (119)
            +- Union (118)
               :- * Project (79)
               :  +- * Filter (78)
               :     +- * HashAggregate (77)
               :        +- Exchange (76)
               :           +- * HashAggregate (75)
               :              +- * Project (74)
               :                 +- * BroadcastHashJoin Inner BuildRight (73)
               :                    :- * Project (63)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (62)
               :                    :     :- * SortMergeJoin LeftSemi (60)
               :                    :     :  :- * Sort (5)
               :                    :     :  :  +- Exchange (4)
               :                    :     :  :     +- * Filter (3)
               :                    :     :  :        +- * ColumnarToRow (2)
               :                    :     :  :           +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (59)
               :                    :     :     +- Exchange (58)
               :                    :     :        +- * Project (57)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (56)
               :                    :     :              :- * Filter (8)
               :                    :     :              :  +- * ColumnarToRow (7)
               :                    :     :              :     +- Scan parquet default.item (6)
               :                    :     :              +- BroadcastExchange (55)
               :                    :     :                 +- * SortMergeJoin LeftSemi (54)
               :                    :     :                    :- * Sort (42)
               :                    :     :                    :  +- Exchange (41)
               :                    :     :                    :     +- * HashAggregate (40)
               :                    :     :                    :        +- Exchange (39)
               :                    :     :                    :           +- * HashAggregate (38)
               :                    :     :                    :              +- * Project (37)
               :                    :     :                    :                 +- * BroadcastHashJoin Inner BuildRight (36)
               :                    :     :                    :                    :- * Project (14)
               :                    :     :                    :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
               :                    :     :                    :                    :     :- * Filter (11)
               :                    :     :                    :                    :     :  +- * ColumnarToRow (10)
               :                    :     :                    :                    :     :     +- Scan parquet default.store_sales (9)
               :                    :     :                    :                    :     +- ReusedExchange (12)
               :                    :     :                    :                    +- BroadcastExchange (35)
               :                    :     :                    :                       +- * SortMergeJoin LeftSemi (34)
               :                    :     :                    :                          :- * Sort (19)
               :                    :     :                    :                          :  +- Exchange (18)
               :                    :     :                    :                          :     +- * Filter (17)
               :                    :     :                    :                          :        +- * ColumnarToRow (16)
               :                    :     :                    :                          :           +- Scan parquet default.item (15)
               :                    :     :                    :                          +- * Sort (33)
               :                    :     :                    :                             +- Exchange (32)
               :                    :     :                    :                                +- * Project (31)
               :                    :     :                    :                                   +- * BroadcastHashJoin Inner BuildRight (30)
               :                    :     :                    :                                      :- * Project (25)
               :                    :     :                    :                                      :  +- * BroadcastHashJoin Inner BuildRight (24)
               :                    :     :                    :                                      :     :- * Filter (22)
               :                    :     :                    :                                      :     :  +- * ColumnarToRow (21)
               :                    :     :                    :                                      :     :     +- Scan parquet default.catalog_sales (20)
               :                    :     :                    :                                      :     +- ReusedExchange (23)
               :                    :     :                    :                                      +- BroadcastExchange (29)
               :                    :     :                    :                                         +- * Filter (28)
               :                    :     :                    :                                            +- * ColumnarToRow (27)
               :                    :     :                    :                                               +- Scan parquet default.item (26)
               :                    :     :                    +- * Sort (53)
               :                    :     :                       +- Exchange (52)
               :                    :     :                          +- * Project (51)
               :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (50)
               :                    :     :                                :- * Project (48)
               :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (47)
               :                    :     :                                :     :- * Filter (45)
               :                    :     :                                :     :  +- * ColumnarToRow (44)
               :                    :     :                                :     :     +- Scan parquet default.web_sales (43)
               :                    :     :                                :     +- ReusedExchange (46)
               :                    :     :                                +- ReusedExchange (49)
               :                    :     +- ReusedExchange (61)
               :                    +- BroadcastExchange (72)
               :                       +- * SortMergeJoin LeftSemi (71)
               :                          :- * Sort (68)
               :                          :  +- Exchange (67)
               :                          :     +- * Filter (66)
               :                          :        +- * ColumnarToRow (65)
               :                          :           +- Scan parquet default.item (64)
               :                          +- * Sort (70)
               :                             +- ReusedExchange (69)
               :- * Project (98)
               :  +- * Filter (97)
               :     +- * HashAggregate (96)
               :        +- Exchange (95)
               :           +- * HashAggregate (94)
               :              +- * Project (93)
               :                 +- * BroadcastHashJoin Inner BuildRight (92)
               :                    :- * Project (90)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (89)
               :                    :     :- * SortMergeJoin LeftSemi (87)
               :                    :     :  :- * Sort (84)
               :                    :     :  :  +- Exchange (83)
               :                    :     :  :     +- * Filter (82)
               :                    :     :  :        +- * ColumnarToRow (81)
               :                    :     :  :           +- Scan parquet default.catalog_sales (80)
               :                    :     :  +- * Sort (86)
               :                    :     :     +- ReusedExchange (85)
               :                    :     +- ReusedExchange (88)
               :                    +- ReusedExchange (91)
               +- * Project (117)
                  +- * Filter (116)
                     +- * HashAggregate (115)
                        +- Exchange (114)
                           +- * HashAggregate (113)
                              +- * Project (112)
                                 +- * BroadcastHashJoin Inner BuildRight (111)
                                    :- * Project (109)
                                    :  +- * BroadcastHashJoin Inner BuildRight (108)
                                    :     :- * SortMergeJoin LeftSemi (106)
                                    :     :  :- * Sort (103)
                                    :     :  :  +- Exchange (102)
                                    :     :  :     +- * Filter (101)
                                    :     :  :        +- * ColumnarToRow (100)
                                    :     :  :           +- Scan parquet default.web_sales (99)
                                    :     :  +- * Sort (105)
                                    :     :     +- ReusedExchange (104)
                                    :     +- ReusedExchange (107)
                                    +- ReusedExchange (110)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 19]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 19]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(12) ReusedExchange [Reuses operator id: 152]
Output [1]: [d_date_sk#13]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join condition: None

(14) Project [codegen id : 11]
Output [1]: [ss_item_sk#10]
Input [3]: [ss_item_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(15) Scan parquet default.item
Output [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Condition : (((isnotnull(i_item_sk#14) AND isnotnull(i_brand_id#15)) AND isnotnull(i_class_id#16)) AND isnotnull(i_category_id#17))

(18) Exchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: hashpartitioning(coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17), 5), ENSURE_REQUIREMENTS, [plan_id=2]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: [coalesce(i_brand_id#15, 0) ASC NULLS FIRST, isnull(i_brand_id#15) ASC NULLS FIRST, coalesce(i_class_id#16, 0) ASC NULLS FIRST, isnull(i_class_id#16) ASC NULLS FIRST, coalesce(i_category_id#17, 0) ASC NULLS FIRST, isnull(i_category_id#17) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]

(22) Filter [codegen id : 8]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(23) ReusedExchange [Reuses operator id: 152]
Output [1]: [d_date_sk#20]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join condition: None

(25) Project [codegen id : 8]
Output [1]: [cs_item_sk#18]
Input [3]: [cs_item_sk#18, cs_sold_date_sk#19, d_date_sk#20]

(26) Scan parquet default.item
Output [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Condition : isnotnull(i_item_sk#21)

(29) BroadcastExchange
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#21]
Join condition: None

(31) Project [codegen id : 8]
Output [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Input [5]: [cs_item_sk#18, i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(32) Exchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: hashpartitioning(coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24), 5), ENSURE_REQUIREMENTS, [plan_id=4]

(33) Sort [codegen id : 9]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: [coalesce(i_brand_id#22, 0) ASC NULLS FIRST, isnull(i_brand_id#22) ASC NULLS FIRST, coalesce(i_class_id#23, 0) ASC NULLS FIRST, isnull(i_class_id#23) ASC NULLS FIRST, coalesce(i_category_id#24, 0) ASC NULLS FIRST, isnull(i_category_id#24) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17)]
Right keys [6]: [coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24)]
Join condition: None

(35) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#14]
Join condition: None

(37) Project [codegen id : 11]
Output [3]: [i_brand_id#15 AS brand_id#25, i_class_id#16 AS class_id#26, i_category_id#17 AS category_id#27]
Input [5]: [ss_item_sk#10, i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(38) HashAggregate [codegen id : 11]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(39) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(brand_id#25, class_id#26, category_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) HashAggregate [codegen id : 12]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(41) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27), 5), ENSURE_REQUIREMENTS, [plan_id=7]

(42) Sort [codegen id : 13]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: [coalesce(brand_id#25, 0) ASC NULLS FIRST, isnull(brand_id#25) ASC NULLS FIRST, coalesce(class_id#26, 0) ASC NULLS FIRST, isnull(class_id#26) ASC NULLS FIRST, coalesce(category_id#27, 0) ASC NULLS FIRST, isnull(category_id#27) ASC NULLS FIRST], false, 0

(43) Scan parquet default.web_sales
Output [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]

(45) Filter [codegen id : 16]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#28)

(46) ReusedExchange [Reuses operator id: 152]
Output [1]: [d_date_sk#30]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#29]
Right keys [1]: [d_date_sk#30]
Join condition: None

(48) Project [codegen id : 16]
Output [1]: [ws_item_sk#28]
Input [3]: [ws_item_sk#28, ws_sold_date_sk#29, d_date_sk#30]

(49) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(50) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#28]
Right keys [1]: [i_item_sk#31]
Join condition: None

(51) Project [codegen id : 16]
Output [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Input [5]: [ws_item_sk#28, i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(52) Exchange
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: hashpartitioning(coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34), 5), ENSURE_REQUIREMENTS, [plan_id=8]

(53) Sort [codegen id : 17]
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: [coalesce(i_brand_id#32, 0) ASC NULLS FIRST, isnull(i_brand_id#32) ASC NULLS FIRST, coalesce(i_class_id#33, 0) ASC NULLS FIRST, isnull(i_class_id#33) ASC NULLS FIRST, coalesce(i_category_id#34, 0) ASC NULLS FIRST, isnull(i_category_id#34) ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27)]
Right keys [6]: [coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34)]
Join condition: None

(55) BroadcastExchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=9]

(56) BroadcastHashJoin [codegen id : 19]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#25, class_id#26, category_id#27]
Join condition: None

(57) Project [codegen id : 19]
Output [1]: [i_item_sk#6 AS ss_item_sk#35]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#25, class_id#26, category_id#27]

(58) Exchange
Input [1]: [ss_item_sk#35]
Arguments: hashpartitioning(ss_item_sk#35, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(59) Sort [codegen id : 20]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 43]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(61) ReusedExchange [Reuses operator id: 147]
Output [1]: [d_date_sk#36]

(62) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#36]
Join condition: None

(63) Project [codegen id : 43]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#36]

(64) Scan parquet default.item
Output [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(65) ColumnarToRow [codegen id : 22]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(66) Filter [codegen id : 22]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Condition : isnotnull(i_item_sk#37)

(67) Exchange
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: hashpartitioning(i_item_sk#37, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(68) Sort [codegen id : 23]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: [i_item_sk#37 ASC NULLS FIRST], false, 0

(69) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#35]

(70) Sort [codegen id : 41]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 42]
Left keys [1]: [i_item_sk#37]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(72) BroadcastExchange
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=12]

(73) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#37]
Join condition: None

(74) Project [codegen id : 43]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(75) HashAggregate [codegen id : 43]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#41, isEmpty#42, count#43]
Results [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]

(76) Exchange
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Arguments: hashpartitioning(i_brand_id#38, i_class_id#39, i_category_id#40, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(77) HashAggregate [codegen id : 44]
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47, count(1)#48]
Results [5]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47 AS sales#49, count(1)#48 AS number_sales#50]

(78) Filter [codegen id : 44]
Input [5]: [i_brand_id#38, i_class_id#39, i_category_id#40, sales#49, number_sales#50]
Condition : (isnotnull(sales#49) AND (cast(sales#49 as decimal(32,6)) > cast(Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(79) Project [codegen id : 44]
Output [6]: [sales#49, number_sales#50, store AS channel#53, i_brand_id#38, i_class_id#39, i_category_id#40]
Input [5]: [i_brand_id#38, i_class_id#39, i_category_id#40, sales#49, number_sales#50]

(80) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#57), dynamicpruningexpression(cs_sold_date_sk#57 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(81) ColumnarToRow [codegen id : 45]
Input [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]

(82) Filter [codegen id : 45]
Input [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]
Condition : isnotnull(cs_item_sk#54)

(83) Exchange
Input [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]
Arguments: hashpartitioning(cs_item_sk#54, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(84) Sort [codegen id : 46]
Input [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]
Arguments: [cs_item_sk#54 ASC NULLS FIRST], false, 0

(85) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#35]

(86) Sort [codegen id : 64]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(87) SortMergeJoin [codegen id : 87]
Left keys [1]: [cs_item_sk#54]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(88) ReusedExchange [Reuses operator id: 147]
Output [1]: [d_date_sk#58]

(89) BroadcastHashJoin [codegen id : 87]
Left keys [1]: [cs_sold_date_sk#57]
Right keys [1]: [d_date_sk#58]
Join condition: None

(90) Project [codegen id : 87]
Output [3]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56]
Input [5]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57, d_date_sk#58]

(91) ReusedExchange [Reuses operator id: 72]
Output [4]: [i_item_sk#59, i_brand_id#60, i_class_id#61, i_category_id#62]

(92) BroadcastHashJoin [codegen id : 87]
Left keys [1]: [cs_item_sk#54]
Right keys [1]: [i_item_sk#59]
Join condition: None

(93) Project [codegen id : 87]
Output [5]: [cs_quantity#55, cs_list_price#56, i_brand_id#60, i_class_id#61, i_category_id#62]
Input [7]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, i_item_sk#59, i_brand_id#60, i_class_id#61, i_category_id#62]

(94) HashAggregate [codegen id : 87]
Input [5]: [cs_quantity#55, cs_list_price#56, i_brand_id#60, i_class_id#61, i_category_id#62]
Keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Functions [2]: [partial_sum((cast(cs_quantity#55 as decimal(10,0)) * cs_list_price#56)), partial_count(1)]
Aggregate Attributes [3]: [sum#63, isEmpty#64, count#65]
Results [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#66, isEmpty#67, count#68]

(95) Exchange
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#66, isEmpty#67, count#68]
Arguments: hashpartitioning(i_brand_id#60, i_class_id#61, i_category_id#62, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(96) HashAggregate [codegen id : 88]
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#66, isEmpty#67, count#68]
Keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Functions [2]: [sum((cast(cs_quantity#55 as decimal(10,0)) * cs_list_price#56)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#55 as decimal(10,0)) * cs_list_price#56))#69, count(1)#70]
Results [5]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum((cast(cs_quantity#55 as decimal(10,0)) * cs_list_price#56))#69 AS sales#71, count(1)#70 AS number_sales#72]

(97) Filter [codegen id : 88]
Input [5]: [i_brand_id#60, i_class_id#61, i_category_id#62, sales#71, number_sales#72]
Condition : (isnotnull(sales#71) AND (cast(sales#71 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(98) Project [codegen id : 88]
Output [6]: [sales#71, number_sales#72, catalog AS channel#73, i_brand_id#60, i_class_id#61, i_category_id#62]
Input [5]: [i_brand_id#60, i_class_id#61, i_category_id#62, sales#71, number_sales#72]

(99) Scan parquet default.web_sales
Output [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#77), dynamicpruningexpression(ws_sold_date_sk#77 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(100) ColumnarToRow [codegen id : 89]
Input [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]

(101) Filter [codegen id : 89]
Input [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]
Condition : isnotnull(ws_item_sk#74)

(102) Exchange
Input [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]
Arguments: hashpartitioning(ws_item_sk#74, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(103) Sort [codegen id : 90]
Input [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]
Arguments: [ws_item_sk#74 ASC NULLS FIRST], false, 0

(104) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#35]

(105) Sort [codegen id : 108]
Input [1]: [ss_item_sk#35]
Arguments: [ss_item_sk#35 ASC NULLS FIRST], false, 0

(106) SortMergeJoin [codegen id : 131]
Left keys [1]: [ws_item_sk#74]
Right keys [1]: [ss_item_sk#35]
Join condition: None

(107) ReusedExchange [Reuses operator id: 147]
Output [1]: [d_date_sk#78]

(108) BroadcastHashJoin [codegen id : 131]
Left keys [1]: [ws_sold_date_sk#77]
Right keys [1]: [d_date_sk#78]
Join condition: None

(109) Project [codegen id : 131]
Output [3]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76]
Input [5]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77, d_date_sk#78]

(110) ReusedExchange [Reuses operator id: 72]
Output [4]: [i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(111) BroadcastHashJoin [codegen id : 131]
Left keys [1]: [ws_item_sk#74]
Right keys [1]: [i_item_sk#79]
Join condition: None

(112) Project [codegen id : 131]
Output [5]: [ws_quantity#75, ws_list_price#76, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [7]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(113) HashAggregate [codegen id : 131]
Input [5]: [ws_quantity#75, ws_list_price#76, i_brand_id#80, i_class_id#81, i_category_id#82]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [partial_sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76)), partial_count(1)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, count#85]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]

(114) Exchange
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Arguments: hashpartitioning(i_brand_id#80, i_class_id#81, i_category_id#82, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(115) HashAggregate [codegen id : 132]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76))#89, count(1)#90]
Results [5]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76))#89 AS sales#91, count(1)#90 AS number_sales#92]

(116) Filter [codegen id : 132]
Input [5]: [i_brand_id#80, i_class_id#81, i_category_id#82, sales#91, number_sales#92]
Condition : (isnotnull(sales#91) AND (cast(sales#91 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(117) Project [codegen id : 132]
Output [6]: [sales#91, number_sales#92, web AS channel#93, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [5]: [i_brand_id#80, i_class_id#81, i_category_id#82, sales#91, number_sales#92]

(118) Union

(119) Expand [codegen id : 133]
Input [6]: [sales#49, number_sales#50, channel#53, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: [[sales#49, number_sales#50, channel#53, i_brand_id#38, i_class_id#39, i_category_id#40, 0], [sales#49, number_sales#50, channel#53, i_brand_id#38, i_class_id#39, null, 1], [sales#49, number_sales#50, channel#53, i_brand_id#38, null, null, 3], [sales#49, number_sales#50, channel#53, null, null, null, 7], [sales#49, number_sales#50, null, null, null, null, 15]], [sales#49, number_sales#50, channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, spark_grouping_id#98]

(120) HashAggregate [codegen id : 133]
Input [7]: [sales#49, number_sales#50, channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, spark_grouping_id#98]
Keys [5]: [channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, spark_grouping_id#98]
Functions [2]: [partial_sum(sales#49), partial_sum(number_sales#50)]
Aggregate Attributes [3]: [sum#99, isEmpty#100, sum#101]
Results [8]: [channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, spark_grouping_id#98, sum#102, isEmpty#103, sum#104]

(121) Exchange
Input [8]: [channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, spark_grouping_id#98, sum#102, isEmpty#103, sum#104]
Arguments: hashpartitioning(channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, spark_grouping_id#98, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(122) HashAggregate [codegen id : 134]
Input [8]: [channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, spark_grouping_id#98, sum#102, isEmpty#103, sum#104]
Keys [5]: [channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, spark_grouping_id#98]
Functions [2]: [sum(sales#49), sum(number_sales#50)]
Aggregate Attributes [2]: [sum(sales#49)#105, sum(number_sales#50)#106]
Results [6]: [channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, sum(sales#49)#105 AS sum(sales)#107, sum(number_sales#50)#106 AS sum(number_sales)#108]

(123) TakeOrderedAndProject
Input [6]: [channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, sum(sales)#107, sum(number_sales)#108]
Arguments: 100, [channel#94 ASC NULLS FIRST, i_brand_id#95 ASC NULLS FIRST, i_class_id#96 ASC NULLS FIRST, i_category_id#97 ASC NULLS FIRST], [channel#94, i_brand_id#95, i_class_id#96, i_category_id#97, sum(sales)#107, sum(number_sales)#108]

===== Subqueries =====

Subquery:1 Hosting operator id = 78 Hosting Expression = Subquery scalar-subquery#51, [id=#52]
* HashAggregate (142)
+- Exchange (141)
   +- * HashAggregate (140)
      +- Union (139)
         :- * Project (128)
         :  +- * BroadcastHashJoin Inner BuildRight (127)
         :     :- * ColumnarToRow (125)
         :     :  +- Scan parquet default.store_sales (124)
         :     +- ReusedExchange (126)
         :- * Project (133)
         :  +- * BroadcastHashJoin Inner BuildRight (132)
         :     :- * ColumnarToRow (130)
         :     :  +- Scan parquet default.catalog_sales (129)
         :     +- ReusedExchange (131)
         +- * Project (138)
            +- * BroadcastHashJoin Inner BuildRight (137)
               :- * ColumnarToRow (135)
               :  +- Scan parquet default.web_sales (134)
               +- ReusedExchange (136)


(124) Scan parquet default.store_sales
Output [3]: [ss_quantity#109, ss_list_price#110, ss_sold_date_sk#111]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#111), dynamicpruningexpression(ss_sold_date_sk#111 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(125) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#109, ss_list_price#110, ss_sold_date_sk#111]

(126) ReusedExchange [Reuses operator id: 152]
Output [1]: [d_date_sk#112]

(127) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#111]
Right keys [1]: [d_date_sk#112]
Join condition: None

(128) Project [codegen id : 2]
Output [2]: [ss_quantity#109 AS quantity#113, ss_list_price#110 AS list_price#114]
Input [4]: [ss_quantity#109, ss_list_price#110, ss_sold_date_sk#111, d_date_sk#112]

(129) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#115, cs_list_price#116, cs_sold_date_sk#117]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#117), dynamicpruningexpression(cs_sold_date_sk#117 IN dynamicpruning#12)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(130) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#115, cs_list_price#116, cs_sold_date_sk#117]

(131) ReusedExchange [Reuses operator id: 152]
Output [1]: [d_date_sk#118]

(132) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#117]
Right keys [1]: [d_date_sk#118]
Join condition: None

(133) Project [codegen id : 4]
Output [2]: [cs_quantity#115 AS quantity#119, cs_list_price#116 AS list_price#120]
Input [4]: [cs_quantity#115, cs_list_price#116, cs_sold_date_sk#117, d_date_sk#118]

(134) Scan parquet default.web_sales
Output [3]: [ws_quantity#121, ws_list_price#122, ws_sold_date_sk#123]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#123), dynamicpruningexpression(ws_sold_date_sk#123 IN dynamicpruning#12)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(135) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#121, ws_list_price#122, ws_sold_date_sk#123]

(136) ReusedExchange [Reuses operator id: 152]
Output [1]: [d_date_sk#124]

(137) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#123]
Right keys [1]: [d_date_sk#124]
Join condition: None

(138) Project [codegen id : 6]
Output [2]: [ws_quantity#121 AS quantity#125, ws_list_price#122 AS list_price#126]
Input [4]: [ws_quantity#121, ws_list_price#122, ws_sold_date_sk#123, d_date_sk#124]

(139) Union

(140) HashAggregate [codegen id : 7]
Input [2]: [quantity#113, list_price#114]
Keys: []
Functions [1]: [partial_avg((cast(quantity#113 as decimal(10,0)) * list_price#114))]
Aggregate Attributes [2]: [sum#127, count#128]
Results [2]: [sum#129, count#130]

(141) Exchange
Input [2]: [sum#129, count#130]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=19]

(142) HashAggregate [codegen id : 8]
Input [2]: [sum#129, count#130]
Keys: []
Functions [1]: [avg((cast(quantity#113 as decimal(10,0)) * list_price#114))]
Aggregate Attributes [1]: [avg((cast(quantity#113 as decimal(10,0)) * list_price#114))#131]
Results [1]: [avg((cast(quantity#113 as decimal(10,0)) * list_price#114))#131 AS average_sales#132]

Subquery:2 Hosting operator id = 124 Hosting Expression = ss_sold_date_sk#111 IN dynamicpruning#12

Subquery:3 Hosting operator id = 129 Hosting Expression = cs_sold_date_sk#117 IN dynamicpruning#12

Subquery:4 Hosting operator id = 134 Hosting Expression = ws_sold_date_sk#123 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (147)
+- * Project (146)
   +- * Filter (145)
      +- * ColumnarToRow (144)
         +- Scan parquet default.date_dim (143)


(143) Scan parquet default.date_dim
Output [3]: [d_date_sk#36, d_year#133, d_moy#134]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(144) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#36, d_year#133, d_moy#134]

(145) Filter [codegen id : 1]
Input [3]: [d_date_sk#36, d_year#133, d_moy#134]
Condition : ((((isnotnull(d_year#133) AND isnotnull(d_moy#134)) AND (d_year#133 = 2001)) AND (d_moy#134 = 11)) AND isnotnull(d_date_sk#36))

(146) Project [codegen id : 1]
Output [1]: [d_date_sk#36]
Input [3]: [d_date_sk#36, d_year#133, d_moy#134]

(147) BroadcastExchange
Input [1]: [d_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (152)
+- * Project (151)
   +- * Filter (150)
      +- * ColumnarToRow (149)
         +- Scan parquet default.date_dim (148)


(148) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_year#135]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(149) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#135]

(150) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#135]
Condition : (((isnotnull(d_year#135) AND (d_year#135 >= 1999)) AND (d_year#135 <= 2001)) AND isnotnull(d_date_sk#13))

(151) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#135]

(152) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=21]

Subquery:7 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#12

Subquery:8 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#12

Subquery:9 Hosting operator id = 97 Hosting Expression = ReusedSubquery Subquery scalar-subquery#51, [id=#52]

Subquery:10 Hosting operator id = 80 Hosting Expression = cs_sold_date_sk#57 IN dynamicpruning#5

Subquery:11 Hosting operator id = 116 Hosting Expression = ReusedSubquery Subquery scalar-subquery#51, [id=#52]

Subquery:12 Hosting operator id = 99 Hosting Expression = ws_sold_date_sk#77 IN dynamicpruning#5


