== Physical Plan ==
TakeOrderedAndProject (134)
+- * HashAggregate (133)
   +- Exchange (132)
      +- * HashAggregate (131)
         +- * Expand (130)
            +- Union (129)
               :- * Project (90)
               :  +- * Filter (89)
               :     +- * HashAggregate (88)
               :        +- Exchange (87)
               :           +- * HashAggregate (86)
               :              +- * Project (85)
               :                 +- * BroadcastHashJoin Inner BuildRight (84)
               :                    :- * Project (74)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (73)
               :                    :     :- SortMergeJoin LeftSemi (67)
               :                    :     :  :- * Sort (5)
               :                    :     :  :  +- Exchange (4)
               :                    :     :  :     +- * Filter (3)
               :                    :     :  :        +- * ColumnarToRow (2)
               :                    :     :  :           +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (66)
               :                    :     :     +- Exchange (65)
               :                    :     :        +- * Project (64)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (63)
               :                    :     :              :- * Filter (8)
               :                    :     :              :  +- * ColumnarToRow (7)
               :                    :     :              :     +- Scan parquet default.item (6)
               :                    :     :              +- BroadcastExchange (62)
               :                    :     :                 +- * HashAggregate (61)
               :                    :     :                    +- Exchange (60)
               :                    :     :                       +- * HashAggregate (59)
               :                    :     :                          +- SortMergeJoin LeftSemi (58)
               :                    :     :                             :- * Sort (46)
               :                    :     :                             :  +- Exchange (45)
               :                    :     :                             :     +- * HashAggregate (44)
               :                    :     :                             :        +- Exchange (43)
               :                    :     :                             :           +- * HashAggregate (42)
               :                    :     :                             :              +- SortMergeJoin LeftSemi (41)
               :                    :     :                             :                 :- * Sort (26)
               :                    :     :                             :                 :  +- Exchange (25)
               :                    :     :                             :                 :     +- * Project (24)
               :                    :     :                             :                 :        +- * BroadcastHashJoin Inner BuildRight (23)
               :                    :     :                             :                 :           :- * Project (18)
               :                    :     :                             :                 :           :  +- * BroadcastHashJoin Inner BuildRight (17)
               :                    :     :                             :                 :           :     :- * Filter (11)
               :                    :     :                             :                 :           :     :  +- * ColumnarToRow (10)
               :                    :     :                             :                 :           :     :     +- Scan parquet default.store_sales (9)
               :                    :     :                             :                 :           :     +- BroadcastExchange (16)
               :                    :     :                             :                 :           :        +- * Project (15)
               :                    :     :                             :                 :           :           +- * Filter (14)
               :                    :     :                             :                 :           :              +- * ColumnarToRow (13)
               :                    :     :                             :                 :           :                 +- Scan parquet default.date_dim (12)
               :                    :     :                             :                 :           +- BroadcastExchange (22)
               :                    :     :                             :                 :              +- * Filter (21)
               :                    :     :                             :                 :                 +- * ColumnarToRow (20)
               :                    :     :                             :                 :                    +- Scan parquet default.item (19)
               :                    :     :                             :                 +- * Sort (40)
               :                    :     :                             :                    +- Exchange (39)
               :                    :     :                             :                       +- * Project (38)
               :                    :     :                             :                          +- * BroadcastHashJoin Inner BuildRight (37)
               :                    :     :                             :                             :- * Project (32)
               :                    :     :                             :                             :  +- * BroadcastHashJoin Inner BuildRight (31)
               :                    :     :                             :                             :     :- * Filter (29)
               :                    :     :                             :                             :     :  +- * ColumnarToRow (28)
               :                    :     :                             :                             :     :     +- Scan parquet default.catalog_sales (27)
               :                    :     :                             :                             :     +- ReusedExchange (30)
               :                    :     :                             :                             +- BroadcastExchange (36)
               :                    :     :                             :                                +- * Filter (35)
               :                    :     :                             :                                   +- * ColumnarToRow (34)
               :                    :     :                             :                                      +- Scan parquet default.item (33)
               :                    :     :                             +- * Sort (57)
               :                    :     :                                +- Exchange (56)
               :                    :     :                                   +- * Project (55)
               :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (54)
               :                    :     :                                         :- * Project (52)
               :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (51)
               :                    :     :                                         :     :- * Filter (49)
               :                    :     :                                         :     :  +- * ColumnarToRow (48)
               :                    :     :                                         :     :     +- Scan parquet default.web_sales (47)
               :                    :     :                                         :     +- ReusedExchange (50)
               :                    :     :                                         +- ReusedExchange (53)
               :                    :     +- BroadcastExchange (72)
               :                    :        +- * Project (71)
               :                    :           +- * Filter (70)
               :                    :              +- * ColumnarToRow (69)
               :                    :                 +- Scan parquet default.date_dim (68)
               :                    +- BroadcastExchange (83)
               :                       +- SortMergeJoin LeftSemi (82)
               :                          :- * Sort (79)
               :                          :  +- Exchange (78)
               :                          :     +- * Filter (77)
               :                          :        +- * ColumnarToRow (76)
               :                          :           +- Scan parquet default.item (75)
               :                          +- * Sort (81)
               :                             +- ReusedExchange (80)
               :- * Project (109)
               :  +- * Filter (108)
               :     +- * HashAggregate (107)
               :        +- Exchange (106)
               :           +- * HashAggregate (105)
               :              +- * Project (104)
               :                 +- * BroadcastHashJoin Inner BuildRight (103)
               :                    :- * Project (101)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (100)
               :                    :     :- SortMergeJoin LeftSemi (98)
               :                    :     :  :- * Sort (95)
               :                    :     :  :  +- Exchange (94)
               :                    :     :  :     +- * Filter (93)
               :                    :     :  :        +- * ColumnarToRow (92)
               :                    :     :  :           +- Scan parquet default.catalog_sales (91)
               :                    :     :  +- * Sort (97)
               :                    :     :     +- ReusedExchange (96)
               :                    :     +- ReusedExchange (99)
               :                    +- ReusedExchange (102)
               +- * Project (128)
                  +- * Filter (127)
                     +- * HashAggregate (126)
                        +- Exchange (125)
                           +- * HashAggregate (124)
                              +- * Project (123)
                                 +- * BroadcastHashJoin Inner BuildRight (122)
                                    :- * Project (120)
                                    :  +- * BroadcastHashJoin Inner BuildRight (119)
                                    :     :- SortMergeJoin LeftSemi (117)
                                    :     :  :- * Sort (114)
                                    :     :  :  +- Exchange (113)
                                    :     :  :     +- * Filter (112)
                                    :     :  :        +- * ColumnarToRow (111)
                                    :     :  :           +- Scan parquet default.web_sales (110)
                                    :     :  +- * Sort (116)
                                    :     :     +- ReusedExchange (115)
                                    :     +- ReusedExchange (118)
                                    +- ReusedExchange (121)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(11) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(16) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#2]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, d_date_sk#10]

(19) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(22) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#7 AS brand_id#14, i_class_id#8 AS class_id#15, i_category_id#9 AS category_id#16]
Input [5]: [ss_item_sk#2, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(25) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16), 5), ENSURE_REQUIREMENTS, [id=#17]

(26) Sort [codegen id : 6]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: [coalesce(brand_id#14, 0) ASC NULLS FIRST, isnull(brand_id#14) ASC NULLS FIRST, coalesce(class_id#15, 0) ASC NULLS FIRST, isnull(class_id#15) ASC NULLS FIRST, coalesce(category_id#16, 0) ASC NULLS FIRST, isnull(category_id#16) ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(28) ColumnarToRow [codegen id : 9]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]

(29) Filter [codegen id : 9]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(30) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(32) Project [codegen id : 9]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_sold_date_sk#18, cs_item_sk#19, d_date_sk#10]

(33) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(34) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(35) Filter [codegen id : 8]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(36) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(38) Project [codegen id : 9]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_item_sk#19, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(39) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [id=#21]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(42) HashAggregate [codegen id : 11]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(43) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(brand_id#14, class_id#15, category_id#16, 5), ENSURE_REQUIREMENTS, [id=#22]

(44) HashAggregate [codegen id : 12]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(45) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16), 5), ENSURE_REQUIREMENTS, [id=#23]

(46) Sort [codegen id : 13]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: [coalesce(brand_id#14, 0) ASC NULLS FIRST, isnull(brand_id#14) ASC NULLS FIRST, coalesce(class_id#15, 0) ASC NULLS FIRST, isnull(class_id#15) ASC NULLS FIRST, coalesce(category_id#16, 0) ASC NULLS FIRST, isnull(category_id#16) ASC NULLS FIRST], false, 0

(47) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#24, ws_item_sk#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(48) ColumnarToRow [codegen id : 16]
Input [2]: [ws_sold_date_sk#24, ws_item_sk#25]

(49) Filter [codegen id : 16]
Input [2]: [ws_sold_date_sk#24, ws_item_sk#25]
Condition : (isnotnull(ws_item_sk#25) AND isnotnull(ws_sold_date_sk#24))

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#10]
Join condition: None

(52) Project [codegen id : 16]
Output [1]: [ws_item_sk#25]
Input [3]: [ws_sold_date_sk#24, ws_item_sk#25, d_date_sk#10]

(53) ReusedExchange [Reuses operator id: 36]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(54) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#25]
Right keys [1]: [i_item_sk#6]
Join condition: None

(55) Project [codegen id : 16]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_item_sk#25, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(56) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [id=#26]

(57) Sort [codegen id : 17]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(58) SortMergeJoin
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(59) HashAggregate [codegen id : 18]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(60) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(brand_id#14, class_id#15, category_id#16, 5), ENSURE_REQUIREMENTS, [id=#27]

(61) HashAggregate [codegen id : 19]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(62) BroadcastExchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#28]

(63) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#14, class_id#15, category_id#16]
Join condition: None

(64) Project [codegen id : 20]
Output [1]: [i_item_sk#6 AS ss_item_sk#29]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#14, class_id#15, category_id#16]

(65) Exchange
Input [1]: [ss_item_sk#29]
Arguments: hashpartitioning(ss_item_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(66) Sort [codegen id : 21]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(67) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(68) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(69) ColumnarToRow [codegen id : 22]
Input [3]: [d_date_sk#10, d_year#11, d_moy#31]

(70) Filter [codegen id : 22]
Input [3]: [d_date_sk#10, d_year#11, d_moy#31]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#31)) AND (d_year#11 = 2001)) AND (d_moy#31 = 11)) AND isnotnull(d_date_sk#10))

(71) Project [codegen id : 22]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#31]

(72) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#32]

(73) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(74) Project [codegen id : 44]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(75) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(76) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(77) Filter [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(78) Exchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_item_sk#6, 5), ENSURE_REQUIREMENTS, [id=#33]

(79) Sort [codegen id : 24]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(80) ReusedExchange [Reuses operator id: 65]
Output [1]: [ss_item_sk#29]

(81) Sort [codegen id : 43]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(82) SortMergeJoin
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(83) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34]

(84) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(85) Project [codegen id : 44]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(86) HashAggregate [codegen id : 44]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#35, isEmpty#36, count#37]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]

(87) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#41]

(88) HashAggregate [codegen id : 45]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42, count(1)#43]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42 AS sales#44, count(1)#43 AS number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46]

(89) Filter [codegen id : 45]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46 as decimal(32,6)) > cast(Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(90) Project [codegen id : 45]
Output [6]: [sales#44, number_sales#45, store AS channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46]

(91) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 46]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51]

(93) Filter [codegen id : 46]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(94) Exchange
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51]
Arguments: hashpartitioning(cs_item_sk#19, 5), ENSURE_REQUIREMENTS, [id=#52]

(95) Sort [codegen id : 47]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51]
Arguments: [cs_item_sk#19 ASC NULLS FIRST], false, 0

(96) ReusedExchange [Reuses operator id: 65]
Output [1]: [ss_item_sk#29]

(97) Sort [codegen id : 66]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(98) SortMergeJoin
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(99) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#10]

(100) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(101) Project [codegen id : 89]
Output [3]: [cs_item_sk#19, cs_quantity#50, cs_list_price#51]
Input [5]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51, d_date_sk#10]

(102) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(103) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(104) Project [codegen id : 89]
Output [5]: [cs_quantity#50, cs_list_price#51, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_item_sk#19, cs_quantity#50, cs_list_price#51, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(105) HashAggregate [codegen id : 89]
Input [5]: [cs_quantity#50, cs_list_price#51, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#53, isEmpty#54, count#55]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#56, isEmpty#57, count#58]

(106) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#56, isEmpty#57, count#58]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#59]

(107) HashAggregate [codegen id : 90]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#56, isEmpty#57, count#58]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#60, count(1)#61]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#60 AS sales#62, count(1)#61 AS number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#60 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#64]

(108) Filter [codegen id : 90]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#64]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#64) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#64 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(109) Project [codegen id : 90]
Output [6]: [sales#62, number_sales#63, catalog AS channel#65, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#64]

(110) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(111) ColumnarToRow [codegen id : 91]
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67]

(112) Filter [codegen id : 91]
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67]
Condition : (isnotnull(ws_item_sk#25) AND isnotnull(ws_sold_date_sk#24))

(113) Exchange
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67]
Arguments: hashpartitioning(ws_item_sk#25, 5), ENSURE_REQUIREMENTS, [id=#68]

(114) Sort [codegen id : 92]
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67]
Arguments: [ws_item_sk#25 ASC NULLS FIRST], false, 0

(115) ReusedExchange [Reuses operator id: 65]
Output [1]: [ss_item_sk#29]

(116) Sort [codegen id : 111]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(117) SortMergeJoin
Left keys [1]: [ws_item_sk#25]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(118) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#10]

(119) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#10]
Join condition: None

(120) Project [codegen id : 134]
Output [3]: [ws_item_sk#25, ws_quantity#66, ws_list_price#67]
Input [5]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67, d_date_sk#10]

(121) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(122) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_item_sk#25]
Right keys [1]: [i_item_sk#6]
Join condition: None

(123) Project [codegen id : 134]
Output [5]: [ws_quantity#66, ws_list_price#67, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_item_sk#25, ws_quantity#66, ws_list_price#67, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(124) HashAggregate [codegen id : 134]
Input [5]: [ws_quantity#66, ws_list_price#67, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#69, isEmpty#70, count#71]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#72, isEmpty#73, count#74]

(125) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#72, isEmpty#73, count#74]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#75]

(126) HashAggregate [codegen id : 135]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#72, isEmpty#73, count#74]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#76, count(1)#77]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#76 AS sales#78, count(1)#77 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#76 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#80]

(127) Filter [codegen id : 135]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#80]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#80) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#80 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(128) Project [codegen id : 135]
Output [6]: [sales#78, number_sales#79, web AS channel#81, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#80]

(129) Union

(130) Expand [codegen id : 136]
Input [6]: [sales#44, number_sales#45, channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [List(sales#44, number_sales#45, channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, 0), List(sales#44, number_sales#45, channel#49, i_brand_id#7, i_class_id#8, null, 1), List(sales#44, number_sales#45, channel#49, i_brand_id#7, null, null, 3), List(sales#44, number_sales#45, channel#49, null, null, null, 7), List(sales#44, number_sales#45, null, null, null, null, 15)], [sales#44, number_sales#45, channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, spark_grouping_id#86]

(131) HashAggregate [codegen id : 136]
Input [7]: [sales#44, number_sales#45, channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, spark_grouping_id#86]
Keys [5]: [channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, spark_grouping_id#86]
Functions [2]: [partial_sum(sales#44), partial_sum(number_sales#45)]
Aggregate Attributes [3]: [sum#87, isEmpty#88, sum#89]
Results [8]: [channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, spark_grouping_id#86, sum#90, isEmpty#91, sum#92]

(132) Exchange
Input [8]: [channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, spark_grouping_id#86, sum#90, isEmpty#91, sum#92]
Arguments: hashpartitioning(channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, spark_grouping_id#86, 5), ENSURE_REQUIREMENTS, [id=#93]

(133) HashAggregate [codegen id : 137]
Input [8]: [channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, spark_grouping_id#86, sum#90, isEmpty#91, sum#92]
Keys [5]: [channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, spark_grouping_id#86]
Functions [2]: [sum(sales#44), sum(number_sales#45)]
Aggregate Attributes [2]: [sum(sales#44)#94, sum(number_sales#45)#95]
Results [6]: [channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, sum(sales#44)#94 AS sum(sales)#96, sum(number_sales#45)#95 AS sum(number_sales)#97]

(134) TakeOrderedAndProject
Input [6]: [channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, sum(sales)#96, sum(number_sales)#97]
Arguments: 100, [channel#82 ASC NULLS FIRST, i_brand_id#83 ASC NULLS FIRST, i_class_id#84 ASC NULLS FIRST, i_category_id#85 ASC NULLS FIRST], [channel#82, i_brand_id#83, i_class_id#84, i_category_id#85, sum(sales)#96, sum(number_sales)#97]

===== Subqueries =====

Subquery:1 Hosting operator id = 89 Hosting Expression = Subquery scalar-subquery#47, [id=#48]
* HashAggregate (160)
+- Exchange (159)
   +- * HashAggregate (158)
      +- Union (157)
         :- * Project (144)
         :  +- * BroadcastHashJoin Inner BuildRight (143)
         :     :- * Filter (137)
         :     :  +- * ColumnarToRow (136)
         :     :     +- Scan parquet default.store_sales (135)
         :     +- BroadcastExchange (142)
         :        +- * Project (141)
         :           +- * Filter (140)
         :              +- * ColumnarToRow (139)
         :                 +- Scan parquet default.date_dim (138)
         :- * Project (150)
         :  +- * BroadcastHashJoin Inner BuildRight (149)
         :     :- * Filter (147)
         :     :  +- * ColumnarToRow (146)
         :     :     +- Scan parquet default.catalog_sales (145)
         :     +- ReusedExchange (148)
         +- * Project (156)
            +- * BroadcastHashJoin Inner BuildRight (155)
               :- * Filter (153)
               :  +- * ColumnarToRow (152)
               :     +- Scan parquet default.web_sales (151)
               +- ReusedExchange (154)


(135) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(136) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(137) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(138) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(139) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(140) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(141) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(142) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98]

(143) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(144) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#99, ss_list_price#4 AS list_price#100]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(145) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#18, cs_quantity#50, cs_list_price#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(146) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#50, cs_list_price#51]

(147) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#50, cs_list_price#51]
Condition : isnotnull(cs_sold_date_sk#18)

(148) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#10]

(149) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(150) Project [codegen id : 4]
Output [2]: [cs_quantity#50 AS quantity#101, cs_list_price#51 AS list_price#102]
Input [4]: [cs_sold_date_sk#18, cs_quantity#50, cs_list_price#51, d_date_sk#10]

(151) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#24, ws_quantity#66, ws_list_price#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(152) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#24, ws_quantity#66, ws_list_price#67]

(153) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#24, ws_quantity#66, ws_list_price#67]
Condition : isnotnull(ws_sold_date_sk#24)

(154) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#10]

(155) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#10]
Join condition: None

(156) Project [codegen id : 6]
Output [2]: [ws_quantity#66 AS quantity#103, ws_list_price#67 AS list_price#104]
Input [4]: [ws_sold_date_sk#24, ws_quantity#66, ws_list_price#67, d_date_sk#10]

(157) Union

(158) HashAggregate [codegen id : 7]
Input [2]: [quantity#99, list_price#100]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#99 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#100 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#105, count#106]
Results [2]: [sum#107, count#108]

(159) Exchange
Input [2]: [sum#107, count#108]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#109]

(160) HashAggregate [codegen id : 8]
Input [2]: [sum#107, count#108]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#99 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#100 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#99 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#100 as decimal(12,2)))), DecimalType(18,2), true))#110]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#99 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#100 as decimal(12,2)))), DecimalType(18,2), true))#110 AS average_sales#111]

Subquery:2 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:3 Hosting operator id = 127 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]


