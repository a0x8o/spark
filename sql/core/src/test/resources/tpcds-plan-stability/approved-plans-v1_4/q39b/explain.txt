== Physical Plan ==
* Sort (52)
+- Exchange (51)
   +- * BroadcastHashJoin Inner BuildRight (50)
      :- * Project (27)
      :  +- * Filter (26)
      :     +- * HashAggregate (25)
      :        +- Exchange (24)
      :           +- * HashAggregate (23)
      :              +- * Project (22)
      :                 +- * BroadcastHashJoin Inner BuildRight (21)
      :                    :- * Project (15)
      :                    :  +- * BroadcastHashJoin Inner BuildRight (14)
      :                    :     :- * Project (9)
      :                    :     :  +- * BroadcastHashJoin Inner BuildRight (8)
      :                    :     :     :- * Filter (3)
      :                    :     :     :  +- * ColumnarToRow (2)
      :                    :     :     :     +- Scan parquet default.inventory (1)
      :                    :     :     +- BroadcastExchange (7)
      :                    :     :        +- * Filter (6)
      :                    :     :           +- * ColumnarToRow (5)
      :                    :     :              +- Scan parquet default.item (4)
      :                    :     +- BroadcastExchange (13)
      :                    :        +- * Filter (12)
      :                    :           +- * ColumnarToRow (11)
      :                    :              +- Scan parquet default.warehouse (10)
      :                    +- BroadcastExchange (20)
      :                       +- * Project (19)
      :                          +- * Filter (18)
      :                             +- * ColumnarToRow (17)
      :                                +- Scan parquet default.date_dim (16)
      +- BroadcastExchange (49)
         +- * Project (48)
            +- * Filter (47)
               +- * HashAggregate (46)
                  +- Exchange (45)
                     +- * HashAggregate (44)
                        +- * Project (43)
                           +- * BroadcastHashJoin Inner BuildRight (42)
                              :- * Project (36)
                              :  +- * BroadcastHashJoin Inner BuildRight (35)
                              :     :- * Project (33)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (32)
                              :     :     :- * Filter (30)
                              :     :     :  +- * ColumnarToRow (29)
                              :     :     :     +- Scan parquet default.inventory (28)
                              :     :     +- ReusedExchange (31)
                              :     +- ReusedExchange (34)
                              +- BroadcastExchange (41)
                                 +- * Project (40)
                                    +- * Filter (39)
                                       +- * ColumnarToRow (38)
                                          +- Scan parquet default.date_dim (37)


(1) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(3) Filter [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(4) Scan parquet default.item
Output [1]: [i_item_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [i_item_sk#6]

(6) Filter [codegen id : 1]
Input [1]: [i_item_sk#6]
Condition : isnotnull(i_item_sk#6)

(7) BroadcastExchange
Input [1]: [i_item_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#7]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(9) Project [codegen id : 4]
Output [4]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#6]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#6]

(10) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#8, w_warehouse_name#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [w_warehouse_sk#8, w_warehouse_name#9]

(12) Filter [codegen id : 2]
Input [2]: [w_warehouse_sk#8, w_warehouse_name#9]
Condition : isnotnull(w_warehouse_sk#8)

(13) BroadcastExchange
Input [2]: [w_warehouse_sk#8, w_warehouse_name#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#8]
Join condition: None

(15) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#6, w_warehouse_sk#8, w_warehouse_name#9]
Input [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#6, w_warehouse_sk#8, w_warehouse_name#9]

(16) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_moy#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(17) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(18) Filter [codegen id : 3]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Condition : ((((isnotnull(d_year#12) AND isnotnull(d_moy#13)) AND (d_year#12 = 2001)) AND (d_moy#13 = 1)) AND isnotnull(d_date_sk#11))

(19) Project [codegen id : 3]
Output [2]: [d_date_sk#11, d_moy#13]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(20) BroadcastExchange
Input [2]: [d_date_sk#11, d_moy#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join condition: None

(22) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#3, i_item_sk#6, w_warehouse_sk#8, w_warehouse_name#9, d_moy#13]
Input [7]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#6, w_warehouse_sk#8, w_warehouse_name#9, d_date_sk#11, d_moy#13]

(23) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#3, i_item_sk#6, w_warehouse_sk#8, w_warehouse_name#9, d_moy#13]
Keys [4]: [w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#6, d_moy#13]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#3 as double)), partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [5]: [n#15, avg#16, m2#17, sum#18, count#19]
Results [9]: [w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#6, d_moy#13, n#20, avg#21, m2#22, sum#23, count#24]

(24) Exchange
Input [9]: [w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#6, d_moy#13, n#20, avg#21, m2#22, sum#23, count#24]
Arguments: hashpartitioning(w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#6, d_moy#13, 5), ENSURE_REQUIREMENTS, [id=#25]

(25) HashAggregate [codegen id : 10]
Input [9]: [w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#6, d_moy#13, n#20, avg#21, m2#22, sum#23, count#24]
Keys [4]: [w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#6, d_moy#13]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double)), avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double))#26, avg(inv_quantity_on_hand#3)#27]
Results [5]: [w_warehouse_sk#8, i_item_sk#6, d_moy#13, stddev_samp(cast(inv_quantity_on_hand#3 as double))#26 AS stdev#28, avg(inv_quantity_on_hand#3)#27 AS mean#29]

(26) Filter [codegen id : 10]
Input [5]: [w_warehouse_sk#8, i_item_sk#6, d_moy#13, stdev#28, mean#29]
Condition : (((((isnotnull(mean#29) AND isnotnull(stdev#28)) AND NOT (mean#29 = 0.0)) AND ((stdev#28 / mean#29) > 1.0)) AND NOT (mean#29 = 0.0)) AND ((stdev#28 / mean#29) > 1.5))

(27) Project [codegen id : 10]
Output [5]: [w_warehouse_sk#8, i_item_sk#6, d_moy#13, mean#29, CASE WHEN (mean#29 = 0.0) THEN null ELSE (stdev#28 / mean#29) END AS cov#30]
Input [5]: [w_warehouse_sk#8, i_item_sk#6, d_moy#13, stdev#28, mean#29]

(28) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#31)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(29) ColumnarToRow [codegen id : 8]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(30) Filter [codegen id : 8]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(31) ReusedExchange [Reuses operator id: 7]
Output [1]: [i_item_sk#32]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#32]
Join condition: None

(33) Project [codegen id : 8]
Output [4]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#32]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#32]

(34) ReusedExchange [Reuses operator id: 13]
Output [2]: [w_warehouse_sk#33, w_warehouse_name#34]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#33]
Join condition: None

(36) Project [codegen id : 8]
Output [5]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#32, w_warehouse_sk#33, w_warehouse_name#34]
Input [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#32, w_warehouse_sk#33, w_warehouse_name#34]

(37) Scan parquet default.date_dim
Output [3]: [d_date_sk#35, d_year#36, d_moy#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(38) ColumnarToRow [codegen id : 7]
Input [3]: [d_date_sk#35, d_year#36, d_moy#37]

(39) Filter [codegen id : 7]
Input [3]: [d_date_sk#35, d_year#36, d_moy#37]
Condition : ((((isnotnull(d_year#36) AND isnotnull(d_moy#37)) AND (d_year#36 = 2001)) AND (d_moy#37 = 2)) AND isnotnull(d_date_sk#35))

(40) Project [codegen id : 7]
Output [2]: [d_date_sk#35, d_moy#37]
Input [3]: [d_date_sk#35, d_year#36, d_moy#37]

(41) BroadcastExchange
Input [2]: [d_date_sk#35, d_moy#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38]

(42) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#35]
Join condition: None

(43) Project [codegen id : 8]
Output [5]: [inv_quantity_on_hand#3, i_item_sk#32, w_warehouse_sk#33, w_warehouse_name#34, d_moy#37]
Input [7]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#32, w_warehouse_sk#33, w_warehouse_name#34, d_date_sk#35, d_moy#37]

(44) HashAggregate [codegen id : 8]
Input [5]: [inv_quantity_on_hand#3, i_item_sk#32, w_warehouse_sk#33, w_warehouse_name#34, d_moy#37]
Keys [4]: [w_warehouse_name#34, w_warehouse_sk#33, i_item_sk#32, d_moy#37]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#3 as double)), partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [5]: [n#39, avg#40, m2#41, sum#42, count#43]
Results [9]: [w_warehouse_name#34, w_warehouse_sk#33, i_item_sk#32, d_moy#37, n#44, avg#45, m2#46, sum#47, count#48]

(45) Exchange
Input [9]: [w_warehouse_name#34, w_warehouse_sk#33, i_item_sk#32, d_moy#37, n#44, avg#45, m2#46, sum#47, count#48]
Arguments: hashpartitioning(w_warehouse_name#34, w_warehouse_sk#33, i_item_sk#32, d_moy#37, 5), ENSURE_REQUIREMENTS, [id=#49]

(46) HashAggregate [codegen id : 9]
Input [9]: [w_warehouse_name#34, w_warehouse_sk#33, i_item_sk#32, d_moy#37, n#44, avg#45, m2#46, sum#47, count#48]
Keys [4]: [w_warehouse_name#34, w_warehouse_sk#33, i_item_sk#32, d_moy#37]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double)), avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double))#50, avg(inv_quantity_on_hand#3)#51]
Results [5]: [w_warehouse_sk#33, i_item_sk#32, d_moy#37, stddev_samp(cast(inv_quantity_on_hand#3 as double))#50 AS stdev#52, avg(inv_quantity_on_hand#3)#51 AS mean#53]

(47) Filter [codegen id : 9]
Input [5]: [w_warehouse_sk#33, i_item_sk#32, d_moy#37, stdev#52, mean#53]
Condition : (((isnotnull(mean#53) AND isnotnull(stdev#52)) AND NOT (mean#53 = 0.0)) AND ((stdev#52 / mean#53) > 1.0))

(48) Project [codegen id : 9]
Output [5]: [w_warehouse_sk#33, i_item_sk#32, d_moy#37, mean#53, CASE WHEN (mean#53 = 0.0) THEN null ELSE (stdev#52 / mean#53) END AS cov#54]
Input [5]: [w_warehouse_sk#33, i_item_sk#32, d_moy#37, stdev#52, mean#53]

(49) BroadcastExchange
Input [5]: [w_warehouse_sk#33, i_item_sk#32, d_moy#37, mean#53, cov#54]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#55]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [i_item_sk#6, w_warehouse_sk#8]
Right keys [2]: [i_item_sk#32, w_warehouse_sk#33]
Join condition: None

(51) Exchange
Input [10]: [w_warehouse_sk#8, i_item_sk#6, d_moy#13, mean#29, cov#30, w_warehouse_sk#33, i_item_sk#32, d_moy#37, mean#53, cov#54]
Arguments: rangepartitioning(w_warehouse_sk#8 ASC NULLS FIRST, i_item_sk#6 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST, mean#29 ASC NULLS FIRST, cov#30 ASC NULLS FIRST, d_moy#37 ASC NULLS FIRST, mean#53 ASC NULLS FIRST, cov#54 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#56]

(52) Sort [codegen id : 11]
Input [10]: [w_warehouse_sk#8, i_item_sk#6, d_moy#13, mean#29, cov#30, w_warehouse_sk#33, i_item_sk#32, d_moy#37, mean#53, cov#54]
Arguments: [w_warehouse_sk#8 ASC NULLS FIRST, i_item_sk#6 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST, mean#29 ASC NULLS FIRST, cov#30 ASC NULLS FIRST, d_moy#37 ASC NULLS FIRST, mean#53 ASC NULLS FIRST, cov#54 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
ReusedExchange (53)


(53) ReusedExchange [Reuses operator id: 20]
Output [2]: [d_date_sk#11, d_moy#13]

Subquery:2 Hosting operator id = 28 Hosting Expression = inv_date_sk#4 IN dynamicpruning#31
ReusedExchange (54)


(54) ReusedExchange [Reuses operator id: 41]
Output [2]: [d_date_sk#35, d_moy#37]


