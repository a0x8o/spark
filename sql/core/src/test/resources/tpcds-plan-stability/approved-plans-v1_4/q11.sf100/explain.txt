== Physical Plan ==
TakeOrderedAndProject (87)
+- * Project (86)
   +- * SortMergeJoin Inner (85)
      :- * Project (67)
      :  +- * SortMergeJoin Inner (66)
      :     :- * Project (46)
      :     :  +- * SortMergeJoin Inner (45)
      :     :     :- * Sort (24)
      :     :     :  +- Exchange (23)
      :     :     :     +- * Filter (22)
      :     :     :        +- * HashAggregate (21)
      :     :     :           +- Exchange (20)
      :     :     :              +- * HashAggregate (19)
      :     :     :                 +- * Project (18)
      :     :     :                    +- * SortMergeJoin Inner (17)
      :     :     :                       :- * Sort (11)
      :     :     :                       :  +- Exchange (10)
      :     :     :                       :     +- * Project (9)
      :     :     :                       :        +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :                       :           :- * Filter (3)
      :     :     :                       :           :  +- * ColumnarToRow (2)
      :     :     :                       :           :     +- Scan parquet default.store_sales (1)
      :     :     :                       :           +- BroadcastExchange (7)
      :     :     :                       :              +- * Filter (6)
      :     :     :                       :                 +- * ColumnarToRow (5)
      :     :     :                       :                    +- Scan parquet default.date_dim (4)
      :     :     :                       +- * Sort (16)
      :     :     :                          +- Exchange (15)
      :     :     :                             +- * Filter (14)
      :     :     :                                +- * ColumnarToRow (13)
      :     :     :                                   +- Scan parquet default.customer (12)
      :     :     +- * Sort (44)
      :     :        +- Exchange (43)
      :     :           +- * HashAggregate (42)
      :     :              +- Exchange (41)
      :     :                 +- * HashAggregate (40)
      :     :                    +- * Project (39)
      :     :                       +- * SortMergeJoin Inner (38)
      :     :                          :- * Sort (35)
      :     :                          :  +- Exchange (34)
      :     :                          :     +- * Project (33)
      :     :                          :        +- * BroadcastHashJoin Inner BuildRight (32)
      :     :                          :           :- * Filter (27)
      :     :                          :           :  +- * ColumnarToRow (26)
      :     :                          :           :     +- Scan parquet default.store_sales (25)
      :     :                          :           +- BroadcastExchange (31)
      :     :                          :              +- * Filter (30)
      :     :                          :                 +- * ColumnarToRow (29)
      :     :                          :                    +- Scan parquet default.date_dim (28)
      :     :                          +- * Sort (37)
      :     :                             +- ReusedExchange (36)
      :     +- * Sort (65)
      :        +- Exchange (64)
      :           +- * Project (63)
      :              +- * Filter (62)
      :                 +- * HashAggregate (61)
      :                    +- Exchange (60)
      :                       +- * HashAggregate (59)
      :                          +- * Project (58)
      :                             +- * SortMergeJoin Inner (57)
      :                                :- * Sort (54)
      :                                :  +- Exchange (53)
      :                                :     +- * Project (52)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (51)
      :                                :           :- * Filter (49)
      :                                :           :  +- * ColumnarToRow (48)
      :                                :           :     +- Scan parquet default.web_sales (47)
      :                                :           +- ReusedExchange (50)
      :                                +- * Sort (56)
      :                                   +- ReusedExchange (55)
      +- * Sort (84)
         +- Exchange (83)
            +- * HashAggregate (82)
               +- Exchange (81)
                  +- * HashAggregate (80)
                     +- * Project (79)
                        +- * SortMergeJoin Inner (78)
                           :- * Sort (75)
                           :  +- Exchange (74)
                           :     +- * Project (73)
                           :        +- * BroadcastHashJoin Inner BuildRight (72)
                           :           :- * Filter (70)
                           :           :  +- * ColumnarToRow (69)
                           :           :     +- Scan parquet default.web_sales (68)
                           :           +- ReusedExchange (71)
                           +- * Sort (77)
                              +- ReusedExchange (76)


(1) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_customer_sk#1)

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2001)) AND isnotnull(d_date_sk#6))

(7) BroadcastExchange
Input [2]: [d_date_sk#6, d_year#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(9) Project [codegen id : 2]
Output [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4, d_date_sk#6, d_year#7]

(10) Exchange
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(11) Sort [codegen id : 3]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(13) ColumnarToRow [codegen id : 4]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(14) Filter [codegen id : 4]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Condition : (isnotnull(c_customer_sk#10) AND isnotnull(c_customer_id#11))

(15) Exchange
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: hashpartitioning(c_customer_sk#10, 5), ENSURE_REQUIREMENTS, [id=#18]

(16) Sort [codegen id : 5]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#10]
Join condition: None

(18) Project [codegen id : 6]
Output [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Input [12]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(19) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#19]
Results [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#20]

(20) Exchange
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#20]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, 5), ENSURE_REQUIREMENTS, [id=#21]

(21) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#20]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))#22]
Results [2]: [c_customer_id#11 AS customer_id#23, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))#22,18,2) AS year_total#24]

(22) Filter [codegen id : 7]
Input [2]: [customer_id#23, year_total#24]
Condition : (isnotnull(year_total#24) AND (year_total#24 > 0.00))

(23) Exchange
Input [2]: [customer_id#23, year_total#24]
Arguments: hashpartitioning(customer_id#23, 5), ENSURE_REQUIREMENTS, [id=#25]

(24) Sort [codegen id : 8]
Input [2]: [customer_id#23, year_total#24]
Arguments: [customer_id#23 ASC NULLS FIRST], false, 0

(25) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#26, ss_ext_discount_amt#27, ss_ext_list_price#28, ss_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#29), dynamicpruningexpression(ss_sold_date_sk#29 IN dynamicpruning#30)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(26) ColumnarToRow [codegen id : 10]
Input [4]: [ss_customer_sk#26, ss_ext_discount_amt#27, ss_ext_list_price#28, ss_sold_date_sk#29]

(27) Filter [codegen id : 10]
Input [4]: [ss_customer_sk#26, ss_ext_discount_amt#27, ss_ext_list_price#28, ss_sold_date_sk#29]
Condition : isnotnull(ss_customer_sk#26)

(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#31, d_year#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(29) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#31, d_year#32]

(30) Filter [codegen id : 9]
Input [2]: [d_date_sk#31, d_year#32]
Condition : ((isnotnull(d_year#32) AND (d_year#32 = 2002)) AND isnotnull(d_date_sk#31))

(31) BroadcastExchange
Input [2]: [d_date_sk#31, d_year#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33]

(32) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#29]
Right keys [1]: [d_date_sk#31]
Join condition: None

(33) Project [codegen id : 10]
Output [4]: [ss_customer_sk#26, ss_ext_discount_amt#27, ss_ext_list_price#28, d_year#32]
Input [6]: [ss_customer_sk#26, ss_ext_discount_amt#27, ss_ext_list_price#28, ss_sold_date_sk#29, d_date_sk#31, d_year#32]

(34) Exchange
Input [4]: [ss_customer_sk#26, ss_ext_discount_amt#27, ss_ext_list_price#28, d_year#32]
Arguments: hashpartitioning(ss_customer_sk#26, 5), ENSURE_REQUIREMENTS, [id=#34]

(35) Sort [codegen id : 11]
Input [4]: [ss_customer_sk#26, ss_ext_discount_amt#27, ss_ext_list_price#28, d_year#32]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(36) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#35, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42]

(37) Sort [codegen id : 13]
Input [8]: [c_customer_sk#35, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42]
Arguments: [c_customer_sk#35 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#35]
Join condition: None

(39) Project [codegen id : 14]
Output [10]: [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42, ss_ext_discount_amt#27, ss_ext_list_price#28, d_year#32]
Input [12]: [ss_customer_sk#26, ss_ext_discount_amt#27, ss_ext_list_price#28, d_year#32, c_customer_sk#35, c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42]

(40) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#36, c_first_name#37, c_last_name#38, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42, ss_ext_discount_amt#27, ss_ext_list_price#28, d_year#32]
Keys [8]: [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#32, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#28 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#27 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#43]
Results [9]: [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#32, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42, sum#44]

(41) Exchange
Input [9]: [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#32, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42, sum#44]
Arguments: hashpartitioning(c_customer_id#36, c_first_name#37, c_last_name#38, d_year#32, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42, 5), ENSURE_REQUIREMENTS, [id=#45]

(42) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#32, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42, sum#44]
Keys [8]: [c_customer_id#36, c_first_name#37, c_last_name#38, d_year#32, c_preferred_cust_flag#39, c_birth_country#40, c_login#41, c_email_address#42]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#28 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#27 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#28 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#27 as decimal(8,2)))), DecimalType(8,2), true)))#46]
Results [3]: [c_customer_id#36 AS customer_id#47, c_preferred_cust_flag#39 AS customer_preferred_cust_flag#48, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#28 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#27 as decimal(8,2)))), DecimalType(8,2), true)))#46,18,2) AS year_total#49]

(43) Exchange
Input [3]: [customer_id#47, customer_preferred_cust_flag#48, year_total#49]
Arguments: hashpartitioning(customer_id#47, 5), ENSURE_REQUIREMENTS, [id=#50]

(44) Sort [codegen id : 16]
Input [3]: [customer_id#47, customer_preferred_cust_flag#48, year_total#49]
Arguments: [customer_id#47 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#47]
Join condition: None

(46) Project [codegen id : 17]
Output [4]: [customer_id#23, year_total#24, customer_preferred_cust_flag#48, year_total#49]
Input [5]: [customer_id#23, year_total#24, customer_id#47, customer_preferred_cust_flag#48, year_total#49]

(47) Scan parquet default.web_sales
Output [4]: [ws_bill_customer_sk#51, ws_ext_discount_amt#52, ws_ext_list_price#53, ws_sold_date_sk#54]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#54), dynamicpruningexpression(ws_sold_date_sk#54 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(48) ColumnarToRow [codegen id : 19]
Input [4]: [ws_bill_customer_sk#51, ws_ext_discount_amt#52, ws_ext_list_price#53, ws_sold_date_sk#54]

(49) Filter [codegen id : 19]
Input [4]: [ws_bill_customer_sk#51, ws_ext_discount_amt#52, ws_ext_list_price#53, ws_sold_date_sk#54]
Condition : isnotnull(ws_bill_customer_sk#51)

(50) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#55, d_year#56]

(51) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#54]
Right keys [1]: [d_date_sk#55]
Join condition: None

(52) Project [codegen id : 19]
Output [4]: [ws_bill_customer_sk#51, ws_ext_discount_amt#52, ws_ext_list_price#53, d_year#56]
Input [6]: [ws_bill_customer_sk#51, ws_ext_discount_amt#52, ws_ext_list_price#53, ws_sold_date_sk#54, d_date_sk#55, d_year#56]

(53) Exchange
Input [4]: [ws_bill_customer_sk#51, ws_ext_discount_amt#52, ws_ext_list_price#53, d_year#56]
Arguments: hashpartitioning(ws_bill_customer_sk#51, 5), ENSURE_REQUIREMENTS, [id=#57]

(54) Sort [codegen id : 20]
Input [4]: [ws_bill_customer_sk#51, ws_ext_discount_amt#52, ws_ext_list_price#53, d_year#56]
Arguments: [ws_bill_customer_sk#51 ASC NULLS FIRST], false, 0

(55) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#58, c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65]

(56) Sort [codegen id : 22]
Input [8]: [c_customer_sk#58, c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65]
Arguments: [c_customer_sk#58 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#51]
Right keys [1]: [c_customer_sk#58]
Join condition: None

(58) Project [codegen id : 23]
Output [10]: [c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65, ws_ext_discount_amt#52, ws_ext_list_price#53, d_year#56]
Input [12]: [ws_bill_customer_sk#51, ws_ext_discount_amt#52, ws_ext_list_price#53, d_year#56, c_customer_sk#58, c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65]

(59) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65, ws_ext_discount_amt#52, ws_ext_list_price#53, d_year#56]
Keys [8]: [c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65, d_year#56]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#53 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#52 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#66]
Results [9]: [c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65, d_year#56, sum#67]

(60) Exchange
Input [9]: [c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65, d_year#56, sum#67]
Arguments: hashpartitioning(c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65, d_year#56, 5), ENSURE_REQUIREMENTS, [id=#68]

(61) HashAggregate [codegen id : 24]
Input [9]: [c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65, d_year#56, sum#67]
Keys [8]: [c_customer_id#59, c_first_name#60, c_last_name#61, c_preferred_cust_flag#62, c_birth_country#63, c_login#64, c_email_address#65, d_year#56]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#53 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#52 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#53 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#52 as decimal(8,2)))), DecimalType(8,2), true)))#69]
Results [2]: [c_customer_id#59 AS customer_id#70, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#53 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#52 as decimal(8,2)))), DecimalType(8,2), true)))#69,18,2) AS year_total#71]

(62) Filter [codegen id : 24]
Input [2]: [customer_id#70, year_total#71]
Condition : (isnotnull(year_total#71) AND (year_total#71 > 0.00))

(63) Project [codegen id : 24]
Output [2]: [customer_id#70 AS customer_id#72, year_total#71 AS year_total#73]
Input [2]: [customer_id#70, year_total#71]

(64) Exchange
Input [2]: [customer_id#72, year_total#73]
Arguments: hashpartitioning(customer_id#72, 5), ENSURE_REQUIREMENTS, [id=#74]

(65) Sort [codegen id : 25]
Input [2]: [customer_id#72, year_total#73]
Arguments: [customer_id#72 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#72]
Join condition: None

(67) Project [codegen id : 26]
Output [5]: [customer_id#23, year_total#24, customer_preferred_cust_flag#48, year_total#49, year_total#73]
Input [6]: [customer_id#23, year_total#24, customer_preferred_cust_flag#48, year_total#49, customer_id#72, year_total#73]

(68) Scan parquet default.web_sales
Output [4]: [ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#78), dynamicpruningexpression(ws_sold_date_sk#78 IN dynamicpruning#30)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(69) ColumnarToRow [codegen id : 28]
Input [4]: [ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78]

(70) Filter [codegen id : 28]
Input [4]: [ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78]
Condition : isnotnull(ws_bill_customer_sk#75)

(71) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#79, d_year#80]

(72) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#78]
Right keys [1]: [d_date_sk#79]
Join condition: None

(73) Project [codegen id : 28]
Output [4]: [ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, d_year#80]
Input [6]: [ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78, d_date_sk#79, d_year#80]

(74) Exchange
Input [4]: [ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, d_year#80]
Arguments: hashpartitioning(ws_bill_customer_sk#75, 5), ENSURE_REQUIREMENTS, [id=#81]

(75) Sort [codegen id : 29]
Input [4]: [ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, d_year#80]
Arguments: [ws_bill_customer_sk#75 ASC NULLS FIRST], false, 0

(76) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#82, c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89]

(77) Sort [codegen id : 31]
Input [8]: [c_customer_sk#82, c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89]
Arguments: [c_customer_sk#82 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#75]
Right keys [1]: [c_customer_sk#82]
Join condition: None

(79) Project [codegen id : 32]
Output [10]: [c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89, ws_ext_discount_amt#76, ws_ext_list_price#77, d_year#80]
Input [12]: [ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, d_year#80, c_customer_sk#82, c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89]

(80) HashAggregate [codegen id : 32]
Input [10]: [c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89, ws_ext_discount_amt#76, ws_ext_list_price#77, d_year#80]
Keys [8]: [c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89, d_year#80]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#76 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#90]
Results [9]: [c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89, d_year#80, sum#91]

(81) Exchange
Input [9]: [c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89, d_year#80, sum#91]
Arguments: hashpartitioning(c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89, d_year#80, 5), ENSURE_REQUIREMENTS, [id=#92]

(82) HashAggregate [codegen id : 33]
Input [9]: [c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89, d_year#80, sum#91]
Keys [8]: [c_customer_id#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_country#87, c_login#88, c_email_address#89, d_year#80]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#76 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#76 as decimal(8,2)))), DecimalType(8,2), true)))#93]
Results [2]: [c_customer_id#83 AS customer_id#94, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#76 as decimal(8,2)))), DecimalType(8,2), true)))#93,18,2) AS year_total#95]

(83) Exchange
Input [2]: [customer_id#94, year_total#95]
Arguments: hashpartitioning(customer_id#94, 5), ENSURE_REQUIREMENTS, [id=#96]

(84) Sort [codegen id : 34]
Input [2]: [customer_id#94, year_total#95]
Arguments: [customer_id#94 ASC NULLS FIRST], false, 0

(85) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#94]
Join condition: (CASE WHEN (year_total#73 > 0.00) THEN CheckOverflow((promote_precision(year_total#95) / promote_precision(year_total#73)), DecimalType(38,20), true) ELSE null END > CASE WHEN (year_total#24 > 0.00) THEN CheckOverflow((promote_precision(year_total#49) / promote_precision(year_total#24)), DecimalType(38,20), true) ELSE null END)

(86) Project [codegen id : 35]
Output [1]: [customer_preferred_cust_flag#48]
Input [7]: [customer_id#23, year_total#24, customer_preferred_cust_flag#48, year_total#49, year_total#73, customer_id#94, year_total#95]

(87) TakeOrderedAndProject
Input [1]: [customer_preferred_cust_flag#48]
Arguments: 100, [customer_preferred_cust_flag#48 ASC NULLS FIRST], [customer_preferred_cust_flag#48]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (88)


(88) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#6, d_year#7]

Subquery:2 Hosting operator id = 25 Hosting Expression = ss_sold_date_sk#29 IN dynamicpruning#30
ReusedExchange (89)


(89) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#31, d_year#32]

Subquery:3 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#54 IN dynamicpruning#5

Subquery:4 Hosting operator id = 68 Hosting Expression = ws_sold_date_sk#78 IN dynamicpruning#30


