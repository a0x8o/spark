== Physical Plan ==
TakeOrderedAndProject (98)
+- * BroadcastHashJoin Inner BuildRight (97)
   :- * Filter (76)
   :  +- * HashAggregate (75)
   :     +- Exchange (74)
   :        +- * HashAggregate (73)
   :           +- * Project (72)
   :              +- * BroadcastHashJoin Inner BuildRight (71)
   :                 :- * Project (65)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (64)
   :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
   :                 :     :  :- * Filter (3)
   :                 :     :  :  +- * ColumnarToRow (2)
   :                 :     :  :     +- Scan parquet default.store_sales (1)
   :                 :     :  +- BroadcastExchange (56)
   :                 :     :     +- * Project (55)
   :                 :     :        +- * BroadcastHashJoin Inner BuildRight (54)
   :                 :     :           :- * Filter (6)
   :                 :     :           :  +- * ColumnarToRow (5)
   :                 :     :           :     +- Scan parquet default.item (4)
   :                 :     :           +- BroadcastExchange (53)
   :                 :     :              +- * HashAggregate (52)
   :                 :     :                 +- * HashAggregate (51)
   :                 :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (50)
   :                 :     :                       :- * HashAggregate (39)
   :                 :     :                       :  +- Exchange (38)
   :                 :     :                       :     +- * HashAggregate (37)
   :                 :     :                       :        +- * Project (36)
   :                 :     :                       :           +- * BroadcastHashJoin Inner BuildRight (35)
   :                 :     :                       :              :- * Project (33)
   :                 :     :                       :              :  +- * BroadcastHashJoin Inner BuildRight (32)
   :                 :     :                       :              :     :- * Filter (9)
   :                 :     :                       :              :     :  +- * ColumnarToRow (8)
   :                 :     :                       :              :     :     +- Scan parquet default.store_sales (7)
   :                 :     :                       :              :     +- BroadcastExchange (31)
   :                 :     :                       :              :        +- * BroadcastHashJoin LeftSemi BuildRight (30)
   :                 :     :                       :              :           :- * Filter (12)
   :                 :     :                       :              :           :  +- * ColumnarToRow (11)
   :                 :     :                       :              :           :     +- Scan parquet default.item (10)
   :                 :     :                       :              :           +- BroadcastExchange (29)
   :                 :     :                       :              :              +- * Project (28)
   :                 :     :                       :              :                 +- * BroadcastHashJoin Inner BuildRight (27)
   :                 :     :                       :              :                    :- * Project (21)
   :                 :     :                       :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
   :                 :     :                       :              :                    :     :- * Filter (15)
   :                 :     :                       :              :                    :     :  +- * ColumnarToRow (14)
   :                 :     :                       :              :                    :     :     +- Scan parquet default.catalog_sales (13)
   :                 :     :                       :              :                    :     +- BroadcastExchange (19)
   :                 :     :                       :              :                    :        +- * Filter (18)
   :                 :     :                       :              :                    :           +- * ColumnarToRow (17)
   :                 :     :                       :              :                    :              +- Scan parquet default.item (16)
   :                 :     :                       :              :                    +- BroadcastExchange (26)
   :                 :     :                       :              :                       +- * Project (25)
   :                 :     :                       :              :                          +- * Filter (24)
   :                 :     :                       :              :                             +- * ColumnarToRow (23)
   :                 :     :                       :              :                                +- Scan parquet default.date_dim (22)
   :                 :     :                       :              +- ReusedExchange (34)
   :                 :     :                       +- BroadcastExchange (49)
   :                 :     :                          +- * Project (48)
   :                 :     :                             +- * BroadcastHashJoin Inner BuildRight (47)
   :                 :     :                                :- * Project (45)
   :                 :     :                                :  +- * BroadcastHashJoin Inner BuildRight (44)
   :                 :     :                                :     :- * Filter (42)
   :                 :     :                                :     :  +- * ColumnarToRow (41)
   :                 :     :                                :     :     +- Scan parquet default.web_sales (40)
   :                 :     :                                :     +- ReusedExchange (43)
   :                 :     :                                +- ReusedExchange (46)
   :                 :     +- BroadcastExchange (63)
   :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (62)
   :                 :           :- * Filter (60)
   :                 :           :  +- * ColumnarToRow (59)
   :                 :           :     +- Scan parquet default.item (58)
   :                 :           +- ReusedExchange (61)
   :                 +- BroadcastExchange (70)
   :                    +- * Project (69)
   :                       +- * Filter (68)
   :                          +- * ColumnarToRow (67)
   :                             +- Scan parquet default.date_dim (66)
   +- BroadcastExchange (96)
      +- * Filter (95)
         +- * HashAggregate (94)
            +- Exchange (93)
               +- * HashAggregate (92)
                  +- * Project (91)
                     +- * BroadcastHashJoin Inner BuildRight (90)
                        :- * Project (84)
                        :  +- * BroadcastHashJoin Inner BuildRight (83)
                        :     :- * BroadcastHashJoin LeftSemi BuildRight (81)
                        :     :  :- * Filter (79)
                        :     :  :  +- * ColumnarToRow (78)
                        :     :  :     +- Scan parquet default.store_sales (77)
                        :     :  +- ReusedExchange (80)
                        :     +- ReusedExchange (82)
                        +- BroadcastExchange (89)
                           +- * Project (88)
                              +- * Filter (87)
                                 +- * ColumnarToRow (86)
                                    +- Scan parquet default.date_dim (85)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet default.item
Output [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Condition : isnotnull(i_item_sk#19)

(19) BroadcastExchange
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#19]
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(22) Scan parquet default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(23) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#24, d_year#25]

(24) Filter [codegen id : 2]
Input [2]: [d_date_sk#24, d_year#25]
Condition : (((isnotnull(d_year#25) AND (d_year#25 >= 1999)) AND (d_year#25 <= 2001)) AND isnotnull(d_date_sk#24))

(25) Project [codegen id : 2]
Output [1]: [d_date_sk#24]
Input [2]: [d_date_sk#24, d_year#25]

(26) BroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(27) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join condition: None

(28) Project [codegen id : 3]
Output [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Input [5]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22, d_date_sk#24]

(29) BroadcastExchange
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#20, 0), isnull(i_brand_id#20), coalesce(i_class_id#21, 0), isnull(i_class_id#21), coalesce(i_category_id#22, 0), isnull(i_category_id#22)]
Join condition: None

(31) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join condition: None

(33) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(34) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#29]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#29]
Join condition: None

(36) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#30, i_class_id#15 AS class_id#31, i_category_id#16 AS category_id#32]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#29]

(37) HashAggregate [codegen id : 6]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(38) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(39) HashAggregate [codegen id : 10]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(40) Scan parquet default.web_sales
Output [2]: [ws_item_sk#34, ws_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#35), dynamicpruningexpression(ws_sold_date_sk#35 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(41) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#34, ws_sold_date_sk#35]

(42) Filter [codegen id : 9]
Input [2]: [ws_item_sk#34, ws_sold_date_sk#35]
Condition : isnotnull(ws_item_sk#34)

(43) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(44) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#34]
Right keys [1]: [i_item_sk#36]
Join condition: None

(45) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#35, i_brand_id#37, i_class_id#38, i_category_id#39]
Input [6]: [ws_item_sk#34, ws_sold_date_sk#35, i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(46) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#40]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#35]
Right keys [1]: [d_date_sk#40]
Join condition: None

(48) Project [codegen id : 9]
Output [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Input [5]: [ws_sold_date_sk#35, i_brand_id#37, i_class_id#38, i_category_id#39, d_date_sk#40]

(49) BroadcastExchange
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#41]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#37, 0), isnull(i_brand_id#37), coalesce(i_class_id#38, 0), isnull(i_class_id#38), coalesce(i_category_id#39, 0), isnull(i_category_id#39)]
Join condition: None

(51) HashAggregate [codegen id : 10]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(52) HashAggregate [codegen id : 10]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(53) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#42]

(54) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(55) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#43]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#30, class_id#31, category_id#32]

(56) BroadcastExchange
Input [1]: [ss_item_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#44]

(57) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(58) Scan parquet default.item
Output [4]: [i_item_sk#45, i_brand_id#46, i_class_id#47, i_category_id#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(59) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#45, i_brand_id#46, i_class_id#47, i_category_id#48]

(60) Filter [codegen id : 23]
Input [4]: [i_item_sk#45, i_brand_id#46, i_class_id#47, i_category_id#48]
Condition : (((isnotnull(i_item_sk#45) AND isnotnull(i_brand_id#46)) AND isnotnull(i_class_id#47)) AND isnotnull(i_category_id#48))

(61) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#43]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#45]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(63) BroadcastExchange
Input [4]: [i_item_sk#45, i_brand_id#46, i_class_id#47, i_category_id#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#49]

(64) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#45]
Join condition: None

(65) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#46, i_class_id#47, i_category_id#48]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#45, i_brand_id#46, i_class_id#47, i_category_id#48]

(66) Scan parquet default.date_dim
Output [2]: [d_date_sk#50, d_week_seq#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(67) ColumnarToRow [codegen id : 24]
Input [2]: [d_date_sk#50, d_week_seq#51]

(68) Filter [codegen id : 24]
Input [2]: [d_date_sk#50, d_week_seq#51]
Condition : ((isnotnull(d_week_seq#51) AND (d_week_seq#51 = Subquery scalar-subquery#52, [id=#53])) AND isnotnull(d_date_sk#50))

(69) Project [codegen id : 24]
Output [1]: [d_date_sk#50]
Input [2]: [d_date_sk#50, d_week_seq#51]

(70) BroadcastExchange
Input [1]: [d_date_sk#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54]

(71) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#50]
Join condition: None

(72) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#46, i_class_id#47, i_category_id#48]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#46, i_class_id#47, i_category_id#48, d_date_sk#50]

(73) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#46, i_class_id#47, i_category_id#48]
Keys [3]: [i_brand_id#46, i_class_id#47, i_category_id#48]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#55, isEmpty#56, count#57]
Results [6]: [i_brand_id#46, i_class_id#47, i_category_id#48, sum#58, isEmpty#59, count#60]

(74) Exchange
Input [6]: [i_brand_id#46, i_class_id#47, i_category_id#48, sum#58, isEmpty#59, count#60]
Arguments: hashpartitioning(i_brand_id#46, i_class_id#47, i_category_id#48, 5), ENSURE_REQUIREMENTS, [id=#61]

(75) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#46, i_class_id#47, i_category_id#48, sum#58, isEmpty#59, count#60]
Keys [3]: [i_brand_id#46, i_class_id#47, i_category_id#48]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#62, count(1)#63]
Results [6]: [store AS channel#64, i_brand_id#46, i_class_id#47, i_category_id#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#62 AS sales#65, count(1)#63 AS number_sales#66]

(76) Filter [codegen id : 52]
Input [6]: [channel#64, i_brand_id#46, i_class_id#47, i_category_id#48, sales#65, number_sales#66]
Condition : (isnotnull(sales#65) AND (cast(sales#65 as decimal(32,6)) > cast(Subquery scalar-subquery#67, [id=#68] as decimal(32,6))))

(77) Scan parquet default.store_sales
Output [4]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#72), dynamicpruningexpression(ss_sold_date_sk#72 IN dynamicpruning#73)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(78) ColumnarToRow [codegen id : 50]
Input [4]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72]

(79) Filter [codegen id : 50]
Input [4]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72]
Condition : isnotnull(ss_item_sk#69)

(80) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#43]

(81) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#69]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(82) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#74, i_brand_id#75, i_class_id#76, i_category_id#77]

(83) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#69]
Right keys [1]: [i_item_sk#74]
Join condition: None

(84) Project [codegen id : 50]
Output [6]: [ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72, i_brand_id#75, i_class_id#76, i_category_id#77]
Input [8]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72, i_item_sk#74, i_brand_id#75, i_class_id#76, i_category_id#77]

(85) Scan parquet default.date_dim
Output [2]: [d_date_sk#78, d_week_seq#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(86) ColumnarToRow [codegen id : 49]
Input [2]: [d_date_sk#78, d_week_seq#79]

(87) Filter [codegen id : 49]
Input [2]: [d_date_sk#78, d_week_seq#79]
Condition : ((isnotnull(d_week_seq#79) AND (d_week_seq#79 = Subquery scalar-subquery#80, [id=#81])) AND isnotnull(d_date_sk#78))

(88) Project [codegen id : 49]
Output [1]: [d_date_sk#78]
Input [2]: [d_date_sk#78, d_week_seq#79]

(89) BroadcastExchange
Input [1]: [d_date_sk#78]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#82]

(90) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_sold_date_sk#72]
Right keys [1]: [d_date_sk#78]
Join condition: None

(91) Project [codegen id : 50]
Output [5]: [ss_quantity#70, ss_list_price#71, i_brand_id#75, i_class_id#76, i_category_id#77]
Input [7]: [ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72, i_brand_id#75, i_class_id#76, i_category_id#77, d_date_sk#78]

(92) HashAggregate [codegen id : 50]
Input [5]: [ss_quantity#70, ss_list_price#71, i_brand_id#75, i_class_id#76, i_category_id#77]
Keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, count#85]
Results [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#86, isEmpty#87, count#88]

(93) Exchange
Input [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#86, isEmpty#87, count#88]
Arguments: hashpartitioning(i_brand_id#75, i_class_id#76, i_category_id#77, 5), ENSURE_REQUIREMENTS, [id=#89]

(94) HashAggregate [codegen id : 51]
Input [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#90, count(1)#91]
Results [6]: [store AS channel#92, i_brand_id#75, i_class_id#76, i_category_id#77, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#90 AS sales#93, count(1)#91 AS number_sales#94]

(95) Filter [codegen id : 51]
Input [6]: [channel#92, i_brand_id#75, i_class_id#76, i_category_id#77, sales#93, number_sales#94]
Condition : (isnotnull(sales#93) AND (cast(sales#93 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#67, [id=#68] as decimal(32,6))))

(96) BroadcastExchange
Input [6]: [channel#92, i_brand_id#75, i_class_id#76, i_category_id#77, sales#93, number_sales#94]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#95]

(97) BroadcastHashJoin [codegen id : 52]
Left keys [3]: [i_brand_id#46, i_class_id#47, i_category_id#48]
Right keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Join condition: None

(98) TakeOrderedAndProject
Input [12]: [channel#64, i_brand_id#46, i_class_id#47, i_category_id#48, sales#65, number_sales#66, channel#92, i_brand_id#75, i_class_id#76, i_category_id#77, sales#93, number_sales#94]
Arguments: 100, [i_brand_id#46 ASC NULLS FIRST, i_class_id#47 ASC NULLS FIRST, i_category_id#48 ASC NULLS FIRST], [channel#64, i_brand_id#46, i_class_id#47, i_category_id#48, sales#65, number_sales#66, channel#92, i_brand_id#75, i_class_id#76, i_category_id#77, sales#93, number_sales#94]

===== Subqueries =====

Subquery:1 Hosting operator id = 76 Hosting Expression = Subquery scalar-subquery#67, [id=#68]
* HashAggregate (121)
+- Exchange (120)
   +- * HashAggregate (119)
      +- Union (118)
         :- * Project (107)
         :  +- * BroadcastHashJoin Inner BuildRight (106)
         :     :- * ColumnarToRow (100)
         :     :  +- Scan parquet default.store_sales (99)
         :     +- BroadcastExchange (105)
         :        +- * Project (104)
         :           +- * Filter (103)
         :              +- * ColumnarToRow (102)
         :                 +- Scan parquet default.date_dim (101)
         :- * Project (112)
         :  +- * BroadcastHashJoin Inner BuildRight (111)
         :     :- * ColumnarToRow (109)
         :     :  +- Scan parquet default.catalog_sales (108)
         :     +- ReusedExchange (110)
         +- * Project (117)
            +- * BroadcastHashJoin Inner BuildRight (116)
               :- * ColumnarToRow (114)
               :  +- Scan parquet default.web_sales (113)
               +- ReusedExchange (115)


(99) Scan parquet default.store_sales
Output [3]: [ss_quantity#96, ss_list_price#97, ss_sold_date_sk#98]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#98), dynamicpruningexpression(ss_sold_date_sk#98 IN dynamicpruning#99)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(100) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#96, ss_list_price#97, ss_sold_date_sk#98]

(101) Scan parquet default.date_dim
Output [2]: [d_date_sk#100, d_year#101]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(102) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#100, d_year#101]

(103) Filter [codegen id : 1]
Input [2]: [d_date_sk#100, d_year#101]
Condition : (((isnotnull(d_year#101) AND (d_year#101 >= 1999)) AND (d_year#101 <= 2001)) AND isnotnull(d_date_sk#100))

(104) Project [codegen id : 1]
Output [1]: [d_date_sk#100]
Input [2]: [d_date_sk#100, d_year#101]

(105) BroadcastExchange
Input [1]: [d_date_sk#100]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#102]

(106) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#98]
Right keys [1]: [d_date_sk#100]
Join condition: None

(107) Project [codegen id : 2]
Output [2]: [ss_quantity#96 AS quantity#103, ss_list_price#97 AS list_price#104]
Input [4]: [ss_quantity#96, ss_list_price#97, ss_sold_date_sk#98, d_date_sk#100]

(108) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#105, cs_list_price#106, cs_sold_date_sk#107]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#107), dynamicpruningexpression(cs_sold_date_sk#107 IN dynamicpruning#99)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(109) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#105, cs_list_price#106, cs_sold_date_sk#107]

(110) ReusedExchange [Reuses operator id: 105]
Output [1]: [d_date_sk#108]

(111) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#107]
Right keys [1]: [d_date_sk#108]
Join condition: None

(112) Project [codegen id : 4]
Output [2]: [cs_quantity#105 AS quantity#109, cs_list_price#106 AS list_price#110]
Input [4]: [cs_quantity#105, cs_list_price#106, cs_sold_date_sk#107, d_date_sk#108]

(113) Scan parquet default.web_sales
Output [3]: [ws_quantity#111, ws_list_price#112, ws_sold_date_sk#113]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#113), dynamicpruningexpression(ws_sold_date_sk#113 IN dynamicpruning#99)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(114) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#111, ws_list_price#112, ws_sold_date_sk#113]

(115) ReusedExchange [Reuses operator id: 105]
Output [1]: [d_date_sk#114]

(116) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#113]
Right keys [1]: [d_date_sk#114]
Join condition: None

(117) Project [codegen id : 6]
Output [2]: [ws_quantity#111 AS quantity#115, ws_list_price#112 AS list_price#116]
Input [4]: [ws_quantity#111, ws_list_price#112, ws_sold_date_sk#113, d_date_sk#114]

(118) Union

(119) HashAggregate [codegen id : 7]
Input [2]: [quantity#103, list_price#104]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#103 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#104 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#117, count#118]
Results [2]: [sum#119, count#120]

(120) Exchange
Input [2]: [sum#119, count#120]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#121]

(121) HashAggregate [codegen id : 8]
Input [2]: [sum#119, count#120]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#103 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#104 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#103 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#104 as decimal(12,2)))), DecimalType(18,2), true))#122]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#103 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#104 as decimal(12,2)))), DecimalType(18,2), true))#122 AS average_sales#123]

Subquery:2 Hosting operator id = 99 Hosting Expression = ss_sold_date_sk#98 IN dynamicpruning#99
ReusedExchange (122)


(122) ReusedExchange [Reuses operator id: 105]
Output [1]: [d_date_sk#100]

Subquery:3 Hosting operator id = 108 Hosting Expression = cs_sold_date_sk#107 IN dynamicpruning#99

Subquery:4 Hosting operator id = 113 Hosting Expression = ws_sold_date_sk#113 IN dynamicpruning#99

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (123)


(123) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#50]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
ReusedExchange (124)


(124) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#29]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 40 Hosting Expression = ws_sold_date_sk#35 IN dynamicpruning#12

Subquery:9 Hosting operator id = 68 Hosting Expression = Subquery scalar-subquery#52, [id=#53]
* Project (128)
+- * Filter (127)
   +- * ColumnarToRow (126)
      +- Scan parquet default.date_dim (125)


(125) Scan parquet default.date_dim
Output [4]: [d_week_seq#124, d_year#125, d_moy#126, d_dom#127]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(126) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#124, d_year#125, d_moy#126, d_dom#127]

(127) Filter [codegen id : 1]
Input [4]: [d_week_seq#124, d_year#125, d_moy#126, d_dom#127]
Condition : (((((isnotnull(d_year#125) AND isnotnull(d_moy#126)) AND isnotnull(d_dom#127)) AND (d_year#125 = 2000)) AND (d_moy#126 = 12)) AND (d_dom#127 = 11))

(128) Project [codegen id : 1]
Output [1]: [d_week_seq#124]
Input [4]: [d_week_seq#124, d_year#125, d_moy#126, d_dom#127]

Subquery:10 Hosting operator id = 95 Hosting Expression = ReusedSubquery Subquery scalar-subquery#67, [id=#68]

Subquery:11 Hosting operator id = 77 Hosting Expression = ss_sold_date_sk#72 IN dynamicpruning#73
ReusedExchange (129)


(129) ReusedExchange [Reuses operator id: 89]
Output [1]: [d_date_sk#78]

Subquery:12 Hosting operator id = 87 Hosting Expression = Subquery scalar-subquery#80, [id=#81]
* Project (133)
+- * Filter (132)
   +- * ColumnarToRow (131)
      +- Scan parquet default.date_dim (130)


(130) Scan parquet default.date_dim
Output [4]: [d_week_seq#128, d_year#129, d_moy#130, d_dom#131]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(131) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#128, d_year#129, d_moy#130, d_dom#131]

(132) Filter [codegen id : 1]
Input [4]: [d_week_seq#128, d_year#129, d_moy#130, d_dom#131]
Condition : (((((isnotnull(d_year#129) AND isnotnull(d_moy#130)) AND isnotnull(d_dom#131)) AND (d_year#129 = 1999)) AND (d_moy#130 = 12)) AND (d_dom#131 = 11))

(133) Project [codegen id : 1]
Output [1]: [d_week_seq#128]
Input [4]: [d_week_seq#128, d_year#129, d_moy#130, d_dom#131]


