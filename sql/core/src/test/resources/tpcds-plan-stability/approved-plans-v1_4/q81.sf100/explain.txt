== Physical Plan ==
TakeOrderedAndProject (61)
+- * Project (60)
   +- * SortMergeJoin Inner (59)
      :- * Sort (47)
      :  +- Exchange (46)
      :     +- * Project (45)
      :        +- * BroadcastHashJoin Inner BuildRight (44)
      :           :- * Filter (23)
      :           :  +- * HashAggregate (22)
      :           :     +- Exchange (21)
      :           :        +- * HashAggregate (20)
      :           :           +- * Project (19)
      :           :              +- * SortMergeJoin Inner (18)
      :           :                 :- * Sort (12)
      :           :                 :  +- Exchange (11)
      :           :                 :     +- * Project (10)
      :           :                 :        +- * BroadcastHashJoin Inner BuildRight (9)
      :           :                 :           :- * Filter (3)
      :           :                 :           :  +- * ColumnarToRow (2)
      :           :                 :           :     +- Scan parquet default.catalog_returns (1)
      :           :                 :           +- BroadcastExchange (8)
      :           :                 :              +- * Project (7)
      :           :                 :                 +- * Filter (6)
      :           :                 :                    +- * ColumnarToRow (5)
      :           :                 :                       +- Scan parquet default.date_dim (4)
      :           :                 +- * Sort (17)
      :           :                    +- Exchange (16)
      :           :                       +- * Filter (15)
      :           :                          +- * ColumnarToRow (14)
      :           :                             +- Scan parquet default.customer_address (13)
      :           +- BroadcastExchange (43)
      :              +- * Filter (42)
      :                 +- * HashAggregate (41)
      :                    +- Exchange (40)
      :                       +- * HashAggregate (39)
      :                          +- * HashAggregate (38)
      :                             +- Exchange (37)
      :                                +- * HashAggregate (36)
      :                                   +- * Project (35)
      :                                      +- * SortMergeJoin Inner (34)
      :                                         :- * Sort (31)
      :                                         :  +- Exchange (30)
      :                                         :     +- * Project (29)
      :                                         :        +- * BroadcastHashJoin Inner BuildRight (28)
      :                                         :           :- * Filter (26)
      :                                         :           :  +- * ColumnarToRow (25)
      :                                         :           :     +- Scan parquet default.catalog_returns (24)
      :                                         :           +- ReusedExchange (27)
      :                                         +- * Sort (33)
      :                                            +- ReusedExchange (32)
      +- * Sort (58)
         +- Exchange (57)
            +- * Project (56)
               +- * BroadcastHashJoin Inner BuildRight (55)
                  :- * Filter (50)
                  :  +- * ColumnarToRow (49)
                  :     +- Scan parquet default.customer (48)
                  +- BroadcastExchange (54)
                     +- * Filter (53)
                        +- * ColumnarToRow (52)
                           +- Scan parquet default.customer_address (51)


(1) Scan parquet default.catalog_returns
Output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#4), dynamicpruningexpression(cr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Condition : (isnotnull(cr_returning_addr_sk#2) AND isnotnull(cr_returning_customer_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4, d_date_sk#6]

(11) Exchange
Input [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Arguments: hashpartitioning(cr_returning_addr_sk#2, 5), ENSURE_REQUIREMENTS, [id=#9]

(12) Sort [codegen id : 3]
Input [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Arguments: [cr_returning_addr_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer_address
Output [2]: [ca_address_sk#10, ca_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(14) ColumnarToRow [codegen id : 4]
Input [2]: [ca_address_sk#10, ca_state#11]

(15) Filter [codegen id : 4]
Input [2]: [ca_address_sk#10, ca_state#11]
Condition : (isnotnull(ca_address_sk#10) AND isnotnull(ca_state#11))

(16) Exchange
Input [2]: [ca_address_sk#10, ca_state#11]
Arguments: hashpartitioning(ca_address_sk#10, 5), ENSURE_REQUIREMENTS, [id=#12]

(17) Sort [codegen id : 5]
Input [2]: [ca_address_sk#10, ca_state#11]
Arguments: [ca_address_sk#10 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [cr_returning_addr_sk#2]
Right keys [1]: [ca_address_sk#10]
Join condition: None

(19) Project [codegen id : 6]
Output [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#11]
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, ca_address_sk#10, ca_state#11]

(20) HashAggregate [codegen id : 6]
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#11]
Keys [2]: [cr_returning_customer_sk#1, ca_state#11]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum#13]
Results [3]: [cr_returning_customer_sk#1, ca_state#11, sum#14]

(21) Exchange
Input [3]: [cr_returning_customer_sk#1, ca_state#11, sum#14]
Arguments: hashpartitioning(cr_returning_customer_sk#1, ca_state#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(22) HashAggregate [codegen id : 15]
Input [3]: [cr_returning_customer_sk#1, ca_state#11, sum#14]
Keys [2]: [cr_returning_customer_sk#1, ca_state#11]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))#16]
Results [3]: [cr_returning_customer_sk#1 AS ctr_customer_sk#17, ca_state#11 AS ctr_state#18, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#3))#16,17,2) AS ctr_total_return#19]

(23) Filter [codegen id : 15]
Input [3]: [ctr_customer_sk#17, ctr_state#18, ctr_total_return#19]
Condition : isnotnull(ctr_total_return#19)

(24) Scan parquet default.catalog_returns
Output [4]: [cr_returning_customer_sk#20, cr_returning_addr_sk#21, cr_return_amt_inc_tax#22, cr_returned_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#23), dynamicpruningexpression(cr_returned_date_sk#23 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(25) ColumnarToRow [codegen id : 8]
Input [4]: [cr_returning_customer_sk#20, cr_returning_addr_sk#21, cr_return_amt_inc_tax#22, cr_returned_date_sk#23]

(26) Filter [codegen id : 8]
Input [4]: [cr_returning_customer_sk#20, cr_returning_addr_sk#21, cr_return_amt_inc_tax#22, cr_returned_date_sk#23]
Condition : isnotnull(cr_returning_addr_sk#21)

(27) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#24]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cr_returned_date_sk#23]
Right keys [1]: [d_date_sk#24]
Join condition: None

(29) Project [codegen id : 8]
Output [3]: [cr_returning_customer_sk#20, cr_returning_addr_sk#21, cr_return_amt_inc_tax#22]
Input [5]: [cr_returning_customer_sk#20, cr_returning_addr_sk#21, cr_return_amt_inc_tax#22, cr_returned_date_sk#23, d_date_sk#24]

(30) Exchange
Input [3]: [cr_returning_customer_sk#20, cr_returning_addr_sk#21, cr_return_amt_inc_tax#22]
Arguments: hashpartitioning(cr_returning_addr_sk#21, 5), ENSURE_REQUIREMENTS, [id=#25]

(31) Sort [codegen id : 9]
Input [3]: [cr_returning_customer_sk#20, cr_returning_addr_sk#21, cr_return_amt_inc_tax#22]
Arguments: [cr_returning_addr_sk#21 ASC NULLS FIRST], false, 0

(32) ReusedExchange [Reuses operator id: 16]
Output [2]: [ca_address_sk#26, ca_state#27]

(33) Sort [codegen id : 11]
Input [2]: [ca_address_sk#26, ca_state#27]
Arguments: [ca_address_sk#26 ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 12]
Left keys [1]: [cr_returning_addr_sk#21]
Right keys [1]: [ca_address_sk#26]
Join condition: None

(35) Project [codegen id : 12]
Output [3]: [cr_returning_customer_sk#20, cr_return_amt_inc_tax#22, ca_state#27]
Input [5]: [cr_returning_customer_sk#20, cr_returning_addr_sk#21, cr_return_amt_inc_tax#22, ca_address_sk#26, ca_state#27]

(36) HashAggregate [codegen id : 12]
Input [3]: [cr_returning_customer_sk#20, cr_return_amt_inc_tax#22, ca_state#27]
Keys [2]: [cr_returning_customer_sk#20, ca_state#27]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#22))]
Aggregate Attributes [1]: [sum#28]
Results [3]: [cr_returning_customer_sk#20, ca_state#27, sum#29]

(37) Exchange
Input [3]: [cr_returning_customer_sk#20, ca_state#27, sum#29]
Arguments: hashpartitioning(cr_returning_customer_sk#20, ca_state#27, 5), ENSURE_REQUIREMENTS, [id=#30]

(38) HashAggregate [codegen id : 13]
Input [3]: [cr_returning_customer_sk#20, ca_state#27, sum#29]
Keys [2]: [cr_returning_customer_sk#20, ca_state#27]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#22))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#22))#31]
Results [2]: [ca_state#27 AS ctr_state#18, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#22))#31,17,2) AS ctr_total_return#19]

(39) HashAggregate [codegen id : 13]
Input [2]: [ctr_state#18, ctr_total_return#19]
Keys [1]: [ctr_state#18]
Functions [1]: [partial_avg(ctr_total_return#19)]
Aggregate Attributes [2]: [sum#32, count#33]
Results [3]: [ctr_state#18, sum#34, count#35]

(40) Exchange
Input [3]: [ctr_state#18, sum#34, count#35]
Arguments: hashpartitioning(ctr_state#18, 5), ENSURE_REQUIREMENTS, [id=#36]

(41) HashAggregate [codegen id : 14]
Input [3]: [ctr_state#18, sum#34, count#35]
Keys [1]: [ctr_state#18]
Functions [1]: [avg(ctr_total_return#19)]
Aggregate Attributes [1]: [avg(ctr_total_return#19)#37]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#19)#37) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#38, ctr_state#18 AS ctr_state#18#39]

(42) Filter [codegen id : 14]
Input [2]: [(avg(ctr_total_return) * 1.2)#38, ctr_state#18#39]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#38)

(43) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#38, ctr_state#18#39]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#40]

(44) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ctr_state#18]
Right keys [1]: [ctr_state#18#39]
Join condition: (cast(ctr_total_return#19 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#38)

(45) Project [codegen id : 15]
Output [2]: [ctr_customer_sk#17, ctr_total_return#19]
Input [5]: [ctr_customer_sk#17, ctr_state#18, ctr_total_return#19, (avg(ctr_total_return) * 1.2)#38, ctr_state#18#39]

(46) Exchange
Input [2]: [ctr_customer_sk#17, ctr_total_return#19]
Arguments: hashpartitioning(ctr_customer_sk#17, 5), ENSURE_REQUIREMENTS, [id=#41]

(47) Sort [codegen id : 16]
Input [2]: [ctr_customer_sk#17, ctr_total_return#19]
Arguments: [ctr_customer_sk#17 ASC NULLS FIRST], false, 0

(48) Scan parquet default.customer
Output [6]: [c_customer_sk#42, c_customer_id#43, c_current_addr_sk#44, c_salutation#45, c_first_name#46, c_last_name#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(49) ColumnarToRow [codegen id : 18]
Input [6]: [c_customer_sk#42, c_customer_id#43, c_current_addr_sk#44, c_salutation#45, c_first_name#46, c_last_name#47]

(50) Filter [codegen id : 18]
Input [6]: [c_customer_sk#42, c_customer_id#43, c_current_addr_sk#44, c_salutation#45, c_first_name#46, c_last_name#47]
Condition : (isnotnull(c_customer_sk#42) AND isnotnull(c_current_addr_sk#44))

(51) Scan parquet default.customer_address
Output [12]: [ca_address_sk#48, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(52) ColumnarToRow [codegen id : 17]
Input [12]: [ca_address_sk#48, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59]

(53) Filter [codegen id : 17]
Input [12]: [ca_address_sk#48, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59]
Condition : ((isnotnull(ca_state#55) AND (ca_state#55 = GA)) AND isnotnull(ca_address_sk#48))

(54) BroadcastExchange
Input [12]: [ca_address_sk#48, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#60]

(55) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [c_current_addr_sk#44]
Right keys [1]: [ca_address_sk#48]
Join condition: None

(56) Project [codegen id : 18]
Output [16]: [c_customer_sk#42, c_customer_id#43, c_salutation#45, c_first_name#46, c_last_name#47, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59]
Input [18]: [c_customer_sk#42, c_customer_id#43, c_current_addr_sk#44, c_salutation#45, c_first_name#46, c_last_name#47, ca_address_sk#48, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59]

(57) Exchange
Input [16]: [c_customer_sk#42, c_customer_id#43, c_salutation#45, c_first_name#46, c_last_name#47, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59]
Arguments: hashpartitioning(c_customer_sk#42, 5), ENSURE_REQUIREMENTS, [id=#61]

(58) Sort [codegen id : 19]
Input [16]: [c_customer_sk#42, c_customer_id#43, c_salutation#45, c_first_name#46, c_last_name#47, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59]
Arguments: [c_customer_sk#42 ASC NULLS FIRST], false, 0

(59) SortMergeJoin [codegen id : 20]
Left keys [1]: [ctr_customer_sk#17]
Right keys [1]: [c_customer_sk#42]
Join condition: None

(60) Project [codegen id : 20]
Output [16]: [c_customer_id#43, c_salutation#45, c_first_name#46, c_last_name#47, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59, ctr_total_return#19]
Input [18]: [ctr_customer_sk#17, ctr_total_return#19, c_customer_sk#42, c_customer_id#43, c_salutation#45, c_first_name#46, c_last_name#47, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59]

(61) TakeOrderedAndProject
Input [16]: [c_customer_id#43, c_salutation#45, c_first_name#46, c_last_name#47, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59, ctr_total_return#19]
Arguments: 100, [c_customer_id#43 ASC NULLS FIRST, c_salutation#45 ASC NULLS FIRST, c_first_name#46 ASC NULLS FIRST, c_last_name#47 ASC NULLS FIRST, ca_street_number#49 ASC NULLS FIRST, ca_street_name#50 ASC NULLS FIRST, ca_street_type#51 ASC NULLS FIRST, ca_suite_number#52 ASC NULLS FIRST, ca_city#53 ASC NULLS FIRST, ca_county#54 ASC NULLS FIRST, ca_state#55 ASC NULLS FIRST, ca_zip#56 ASC NULLS FIRST, ca_country#57 ASC NULLS FIRST, ca_gmt_offset#58 ASC NULLS FIRST, ca_location_type#59 ASC NULLS FIRST, ctr_total_return#19 ASC NULLS FIRST], [c_customer_id#43, c_salutation#45, c_first_name#46, c_last_name#47, ca_street_number#49, ca_street_name#50, ca_street_type#51, ca_suite_number#52, ca_city#53, ca_county#54, ca_state#55, ca_zip#56, ca_country#57, ca_gmt_offset#58, ca_location_type#59, ctr_total_return#19]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cr_returned_date_sk#4 IN dynamicpruning#5
ReusedExchange (62)


(62) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#6]

Subquery:2 Hosting operator id = 24 Hosting Expression = cr_returned_date_sk#23 IN dynamicpruning#5


