== Physical Plan ==
TakeOrderedAndProject (61)
+- * Project (60)
   +- * BroadcastHashJoin Inner BuildRight (59)
      :- * Project (38)
      :  +- * SortMergeJoin Inner (37)
      :     :- * Sort (11)
      :     :  +- Exchange (10)
      :     :     +- * Project (9)
      :     :        +- * BroadcastHashJoin Inner BuildRight (8)
      :     :           :- * Filter (3)
      :     :           :  +- * ColumnarToRow (2)
      :     :           :     +- Scan parquet default.customer (1)
      :     :           +- BroadcastExchange (7)
      :     :              +- * Filter (6)
      :     :                 +- * ColumnarToRow (5)
      :     :                    +- Scan parquet default.customer_address (4)
      :     +- * Sort (36)
      :        +- Exchange (35)
      :           +- * Filter (34)
      :              +- * HashAggregate (33)
      :                 +- Exchange (32)
      :                    +- * HashAggregate (31)
      :                       +- * Project (30)
      :                          +- * SortMergeJoin Inner (29)
      :                             :- * Sort (23)
      :                             :  +- Exchange (22)
      :                             :     +- * Project (21)
      :                             :        +- * BroadcastHashJoin Inner BuildRight (20)
      :                             :           :- * Filter (14)
      :                             :           :  +- * ColumnarToRow (13)
      :                             :           :     +- Scan parquet default.catalog_returns (12)
      :                             :           +- BroadcastExchange (19)
      :                             :              +- * Project (18)
      :                             :                 +- * Filter (17)
      :                             :                    +- * ColumnarToRow (16)
      :                             :                       +- Scan parquet default.date_dim (15)
      :                             +- * Sort (28)
      :                                +- Exchange (27)
      :                                   +- * Filter (26)
      :                                      +- * ColumnarToRow (25)
      :                                         +- Scan parquet default.customer_address (24)
      +- BroadcastExchange (58)
         +- * Filter (57)
            +- * HashAggregate (56)
               +- Exchange (55)
                  +- * HashAggregate (54)
                     +- * HashAggregate (53)
                        +- Exchange (52)
                           +- * HashAggregate (51)
                              +- * Project (50)
                                 +- * SortMergeJoin Inner (49)
                                    :- * Sort (46)
                                    :  +- Exchange (45)
                                    :     +- * Project (44)
                                    :        +- * BroadcastHashJoin Inner BuildRight (43)
                                    :           :- * Filter (41)
                                    :           :  +- * ColumnarToRow (40)
                                    :           :     +- Scan parquet default.catalog_returns (39)
                                    :           +- ReusedExchange (42)
                                    +- * Sort (48)
                                       +- ReusedExchange (47)


(1) Scan parquet default.customer
Output [6]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6]

(3) Filter [codegen id : 2]
Input [6]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#3))

(4) Scan parquet default.customer_address
Output [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(5) ColumnarToRow [codegen id : 1]
Input [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]

(6) Filter [codegen id : 1]
Input [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Condition : ((isnotnull(ca_state#14) AND (ca_state#14 = GA)) AND isnotnull(ca_address_sk#7))

(7) BroadcastExchange
Input [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#7]
Join condition: None

(9) Project [codegen id : 2]
Output [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Input [18]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6, ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]

(10) Exchange
Input [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#20]

(11) Sort [codegen id : 3]
Input [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(12) Scan parquet default.catalog_returns
Output [4]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23, cr_returned_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#24), dynamicpruningexpression(cr_returned_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(13) ColumnarToRow [codegen id : 5]
Input [4]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23, cr_returned_date_sk#24]

(14) Filter [codegen id : 5]
Input [4]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23, cr_returned_date_sk#24]
Condition : (isnotnull(cr_returning_addr_sk#22) AND isnotnull(cr_returning_customer_sk#21))

(15) Scan parquet default.date_dim
Output [2]: [d_date_sk#26, d_year#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(16) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#26, d_year#27]

(17) Filter [codegen id : 4]
Input [2]: [d_date_sk#26, d_year#27]
Condition : ((isnotnull(d_year#27) AND (d_year#27 = 2000)) AND isnotnull(d_date_sk#26))

(18) Project [codegen id : 4]
Output [1]: [d_date_sk#26]
Input [2]: [d_date_sk#26, d_year#27]

(19) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(20) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cr_returned_date_sk#24]
Right keys [1]: [d_date_sk#26]
Join condition: None

(21) Project [codegen id : 5]
Output [3]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23]
Input [5]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23, cr_returned_date_sk#24, d_date_sk#26]

(22) Exchange
Input [3]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23]
Arguments: hashpartitioning(cr_returning_addr_sk#22, 5), ENSURE_REQUIREMENTS, [id=#29]

(23) Sort [codegen id : 6]
Input [3]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23]
Arguments: [cr_returning_addr_sk#22 ASC NULLS FIRST], false, 0

(24) Scan parquet default.customer_address
Output [2]: [ca_address_sk#30, ca_state#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(25) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#30, ca_state#31]

(26) Filter [codegen id : 7]
Input [2]: [ca_address_sk#30, ca_state#31]
Condition : (isnotnull(ca_address_sk#30) AND isnotnull(ca_state#31))

(27) Exchange
Input [2]: [ca_address_sk#30, ca_state#31]
Arguments: hashpartitioning(ca_address_sk#30, 5), ENSURE_REQUIREMENTS, [id=#32]

(28) Sort [codegen id : 8]
Input [2]: [ca_address_sk#30, ca_state#31]
Arguments: [ca_address_sk#30 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 9]
Left keys [1]: [cr_returning_addr_sk#22]
Right keys [1]: [ca_address_sk#30]
Join condition: None

(30) Project [codegen id : 9]
Output [3]: [cr_returning_customer_sk#21, cr_return_amt_inc_tax#23, ca_state#31]
Input [5]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23, ca_address_sk#30, ca_state#31]

(31) HashAggregate [codegen id : 9]
Input [3]: [cr_returning_customer_sk#21, cr_return_amt_inc_tax#23, ca_state#31]
Keys [2]: [cr_returning_customer_sk#21, ca_state#31]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#23))]
Aggregate Attributes [1]: [sum#33]
Results [3]: [cr_returning_customer_sk#21, ca_state#31, sum#34]

(32) Exchange
Input [3]: [cr_returning_customer_sk#21, ca_state#31, sum#34]
Arguments: hashpartitioning(cr_returning_customer_sk#21, ca_state#31, 5), ENSURE_REQUIREMENTS, [id=#35]

(33) HashAggregate [codegen id : 10]
Input [3]: [cr_returning_customer_sk#21, ca_state#31, sum#34]
Keys [2]: [cr_returning_customer_sk#21, ca_state#31]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#23))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#23))#36]
Results [3]: [cr_returning_customer_sk#21 AS ctr_customer_sk#37, ca_state#31 AS ctr_state#38, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#23))#36,17,2) AS ctr_total_return#39]

(34) Filter [codegen id : 10]
Input [3]: [ctr_customer_sk#37, ctr_state#38, ctr_total_return#39]
Condition : isnotnull(ctr_total_return#39)

(35) Exchange
Input [3]: [ctr_customer_sk#37, ctr_state#38, ctr_total_return#39]
Arguments: hashpartitioning(ctr_customer_sk#37, 5), ENSURE_REQUIREMENTS, [id=#40]

(36) Sort [codegen id : 11]
Input [3]: [ctr_customer_sk#37, ctr_state#38, ctr_total_return#39]
Arguments: [ctr_customer_sk#37 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 20]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ctr_customer_sk#37]
Join condition: None

(38) Project [codegen id : 20]
Output [17]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_state#38, ctr_total_return#39]
Input [19]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_customer_sk#37, ctr_state#38, ctr_total_return#39]

(39) Scan parquet default.catalog_returns
Output [4]: [cr_returning_customer_sk#41, cr_returning_addr_sk#42, cr_return_amt_inc_tax#43, cr_returned_date_sk#44]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#44), dynamicpruningexpression(cr_returned_date_sk#44 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(40) ColumnarToRow [codegen id : 13]
Input [4]: [cr_returning_customer_sk#41, cr_returning_addr_sk#42, cr_return_amt_inc_tax#43, cr_returned_date_sk#44]

(41) Filter [codegen id : 13]
Input [4]: [cr_returning_customer_sk#41, cr_returning_addr_sk#42, cr_return_amt_inc_tax#43, cr_returned_date_sk#44]
Condition : isnotnull(cr_returning_addr_sk#42)

(42) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#45]

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cr_returned_date_sk#44]
Right keys [1]: [d_date_sk#45]
Join condition: None

(44) Project [codegen id : 13]
Output [3]: [cr_returning_customer_sk#41, cr_returning_addr_sk#42, cr_return_amt_inc_tax#43]
Input [5]: [cr_returning_customer_sk#41, cr_returning_addr_sk#42, cr_return_amt_inc_tax#43, cr_returned_date_sk#44, d_date_sk#45]

(45) Exchange
Input [3]: [cr_returning_customer_sk#41, cr_returning_addr_sk#42, cr_return_amt_inc_tax#43]
Arguments: hashpartitioning(cr_returning_addr_sk#42, 5), ENSURE_REQUIREMENTS, [id=#46]

(46) Sort [codegen id : 14]
Input [3]: [cr_returning_customer_sk#41, cr_returning_addr_sk#42, cr_return_amt_inc_tax#43]
Arguments: [cr_returning_addr_sk#42 ASC NULLS FIRST], false, 0

(47) ReusedExchange [Reuses operator id: 27]
Output [2]: [ca_address_sk#47, ca_state#48]

(48) Sort [codegen id : 16]
Input [2]: [ca_address_sk#47, ca_state#48]
Arguments: [ca_address_sk#47 ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 17]
Left keys [1]: [cr_returning_addr_sk#42]
Right keys [1]: [ca_address_sk#47]
Join condition: None

(50) Project [codegen id : 17]
Output [3]: [cr_returning_customer_sk#41, cr_return_amt_inc_tax#43, ca_state#48]
Input [5]: [cr_returning_customer_sk#41, cr_returning_addr_sk#42, cr_return_amt_inc_tax#43, ca_address_sk#47, ca_state#48]

(51) HashAggregate [codegen id : 17]
Input [3]: [cr_returning_customer_sk#41, cr_return_amt_inc_tax#43, ca_state#48]
Keys [2]: [cr_returning_customer_sk#41, ca_state#48]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#43))]
Aggregate Attributes [1]: [sum#49]
Results [3]: [cr_returning_customer_sk#41, ca_state#48, sum#50]

(52) Exchange
Input [3]: [cr_returning_customer_sk#41, ca_state#48, sum#50]
Arguments: hashpartitioning(cr_returning_customer_sk#41, ca_state#48, 5), ENSURE_REQUIREMENTS, [id=#51]

(53) HashAggregate [codegen id : 18]
Input [3]: [cr_returning_customer_sk#41, ca_state#48, sum#50]
Keys [2]: [cr_returning_customer_sk#41, ca_state#48]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#43))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#43))#52]
Results [2]: [ca_state#48 AS ctr_state#38, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#43))#52,17,2) AS ctr_total_return#39]

(54) HashAggregate [codegen id : 18]
Input [2]: [ctr_state#38, ctr_total_return#39]
Keys [1]: [ctr_state#38]
Functions [1]: [partial_avg(ctr_total_return#39)]
Aggregate Attributes [2]: [sum#53, count#54]
Results [3]: [ctr_state#38, sum#55, count#56]

(55) Exchange
Input [3]: [ctr_state#38, sum#55, count#56]
Arguments: hashpartitioning(ctr_state#38, 5), ENSURE_REQUIREMENTS, [id=#57]

(56) HashAggregate [codegen id : 19]
Input [3]: [ctr_state#38, sum#55, count#56]
Keys [1]: [ctr_state#38]
Functions [1]: [avg(ctr_total_return#39)]
Aggregate Attributes [1]: [avg(ctr_total_return#39)#58]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#39)#58) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#59, ctr_state#38 AS ctr_state#38#60]

(57) Filter [codegen id : 19]
Input [2]: [(avg(ctr_total_return) * 1.2)#59, ctr_state#38#60]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#59)

(58) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#59, ctr_state#38#60]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#61]

(59) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ctr_state#38]
Right keys [1]: [ctr_state#38#60]
Join condition: (cast(ctr_total_return#39 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#59)

(60) Project [codegen id : 20]
Output [16]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_total_return#39]
Input [19]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_state#38, ctr_total_return#39, (avg(ctr_total_return) * 1.2)#59, ctr_state#38#60]

(61) TakeOrderedAndProject
Input [16]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_total_return#39]
Arguments: 100, [c_customer_id#2 ASC NULLS FIRST, c_salutation#4 ASC NULLS FIRST, c_first_name#5 ASC NULLS FIRST, c_last_name#6 ASC NULLS FIRST, ca_street_number#8 ASC NULLS FIRST, ca_street_name#9 ASC NULLS FIRST, ca_street_type#10 ASC NULLS FIRST, ca_suite_number#11 ASC NULLS FIRST, ca_city#12 ASC NULLS FIRST, ca_county#13 ASC NULLS FIRST, ca_state#14 ASC NULLS FIRST, ca_zip#15 ASC NULLS FIRST, ca_country#16 ASC NULLS FIRST, ca_gmt_offset#17 ASC NULLS FIRST, ca_location_type#18 ASC NULLS FIRST, ctr_total_return#39 ASC NULLS FIRST], [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_total_return#39]

===== Subqueries =====

Subquery:1 Hosting operator id = 12 Hosting Expression = cr_returned_date_sk#24 IN dynamicpruning#25
ReusedExchange (62)


(62) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#26]

Subquery:2 Hosting operator id = 39 Hosting Expression = cr_returned_date_sk#44 IN dynamicpruning#25


