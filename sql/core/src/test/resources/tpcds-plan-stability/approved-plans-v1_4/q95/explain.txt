== Physical Plan ==
* Sort (64)
+- * HashAggregate (63)
   +- Exchange (62)
      +- * HashAggregate (61)
         +- * HashAggregate (60)
            +- Exchange (59)
               +- * HashAggregate (58)
                  +- * Project (57)
                     +- * BroadcastHashJoin Inner BuildRight (56)
                        :- * Project (50)
                        :  +- * BroadcastHashJoin Inner BuildRight (49)
                        :     :- * Project (43)
                        :     :  +- * BroadcastHashJoin Inner BuildRight (42)
                        :     :     :- SortMergeJoin LeftSemi (36)
                        :     :     :  :- * Sort (19)
                        :     :     :  :  +- Exchange (18)
                        :     :     :  :     +- SortMergeJoin LeftSemi (17)
                        :     :     :  :        :- * Sort (6)
                        :     :     :  :        :  +- Exchange (5)
                        :     :     :  :        :     +- * Project (4)
                        :     :     :  :        :        +- * Filter (3)
                        :     :     :  :        :           +- * ColumnarToRow (2)
                        :     :     :  :        :              +- Scan parquet default.web_sales (1)
                        :     :     :  :        +- * Project (16)
                        :     :     :  :           +- * SortMergeJoin Inner (15)
                        :     :     :  :              :- * Sort (12)
                        :     :     :  :              :  +- Exchange (11)
                        :     :     :  :              :     +- * Project (10)
                        :     :     :  :              :        +- * Filter (9)
                        :     :     :  :              :           +- * ColumnarToRow (8)
                        :     :     :  :              :              +- Scan parquet default.web_sales (7)
                        :     :     :  :              +- * Sort (14)
                        :     :     :  :                 +- ReusedExchange (13)
                        :     :     :  +- * Project (35)
                        :     :     :     +- * SortMergeJoin Inner (34)
                        :     :     :        :- * Sort (25)
                        :     :     :        :  +- Exchange (24)
                        :     :     :        :     +- * Project (23)
                        :     :     :        :        +- * Filter (22)
                        :     :     :        :           +- * ColumnarToRow (21)
                        :     :     :        :              +- Scan parquet default.web_returns (20)
                        :     :     :        +- * Sort (33)
                        :     :     :           +- Exchange (32)
                        :     :     :              +- * Project (31)
                        :     :     :                 +- * SortMergeJoin Inner (30)
                        :     :     :                    :- * Sort (27)
                        :     :     :                    :  +- ReusedExchange (26)
                        :     :     :                    +- * Sort (29)
                        :     :     :                       +- ReusedExchange (28)
                        :     :     +- BroadcastExchange (41)
                        :     :        +- * Project (40)
                        :     :           +- * Filter (39)
                        :     :              +- * ColumnarToRow (38)
                        :     :                 +- Scan parquet default.date_dim (37)
                        :     +- BroadcastExchange (48)
                        :        +- * Project (47)
                        :           +- * Filter (46)
                        :              +- * ColumnarToRow (45)
                        :                 +- Scan parquet default.customer_address (44)
                        +- BroadcastExchange (55)
                           +- * Project (54)
                              +- * Filter (53)
                                 +- * ColumnarToRow (52)
                                    +- Scan parquet default.web_site (51)


(1) Scan parquet default.web_sales
Output [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3))

(4) Project [codegen id : 1]
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]

(5) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [id=#8]

(6) Sort [codegen id : 2]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(7) Scan parquet default.web_sales
Output [3]: [ws_warehouse_sk#9, ws_order_number#4, ws_sold_date_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(8) ColumnarToRow [codegen id : 3]
Input [3]: [ws_warehouse_sk#9, ws_order_number#4, ws_sold_date_sk#7]

(9) Filter [codegen id : 3]
Input [3]: [ws_warehouse_sk#9, ws_order_number#4, ws_sold_date_sk#7]
Condition : (isnotnull(ws_order_number#4) AND isnotnull(ws_warehouse_sk#9))

(10) Project [codegen id : 3]
Output [2]: [ws_warehouse_sk#9, ws_order_number#4]
Input [3]: [ws_warehouse_sk#9, ws_order_number#4, ws_sold_date_sk#7]

(11) Exchange
Input [2]: [ws_warehouse_sk#9, ws_order_number#4]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [id=#10]

(12) Sort [codegen id : 4]
Input [2]: [ws_warehouse_sk#9, ws_order_number#4]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(13) ReusedExchange [Reuses operator id: 11]
Output [2]: [ws_warehouse_sk#11, ws_order_number#12]

(14) Sort [codegen id : 6]
Input [2]: [ws_warehouse_sk#11, ws_order_number#12]
Arguments: [ws_order_number#12 ASC NULLS FIRST], false, 0

(15) SortMergeJoin [codegen id : 7]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#12]
Join condition: NOT (ws_warehouse_sk#9 = ws_warehouse_sk#11)

(16) Project [codegen id : 7]
Output [1]: [ws_order_number#4 AS ws_order_number#4#13]
Input [4]: [ws_warehouse_sk#9, ws_order_number#4, ws_warehouse_sk#11, ws_order_number#12]

(17) SortMergeJoin
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#4#13]
Join condition: None

(18) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(cast(ws_order_number#4 as bigint), 5), ENSURE_REQUIREMENTS, [id=#14]

(19) Sort [codegen id : 8]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [cast(ws_order_number#4 as bigint) ASC NULLS FIRST], false, 0

(20) Scan parquet default.web_returns
Output [2]: [wr_order_number#15, wr_returned_date_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:bigint>

(21) ColumnarToRow [codegen id : 9]
Input [2]: [wr_order_number#15, wr_returned_date_sk#16]

(22) Filter [codegen id : 9]
Input [2]: [wr_order_number#15, wr_returned_date_sk#16]
Condition : isnotnull(wr_order_number#15)

(23) Project [codegen id : 9]
Output [1]: [wr_order_number#15]
Input [2]: [wr_order_number#15, wr_returned_date_sk#16]

(24) Exchange
Input [1]: [wr_order_number#15]
Arguments: hashpartitioning(wr_order_number#15, 5), ENSURE_REQUIREMENTS, [id=#17]

(25) Sort [codegen id : 10]
Input [1]: [wr_order_number#15]
Arguments: [wr_order_number#15 ASC NULLS FIRST], false, 0

(26) ReusedExchange [Reuses operator id: 11]
Output [2]: [ws_warehouse_sk#9, ws_order_number#4]

(27) Sort [codegen id : 12]
Input [2]: [ws_warehouse_sk#9, ws_order_number#4]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(28) ReusedExchange [Reuses operator id: 11]
Output [2]: [ws_warehouse_sk#18, ws_order_number#19]

(29) Sort [codegen id : 14]
Input [2]: [ws_warehouse_sk#18, ws_order_number#19]
Arguments: [ws_order_number#19 ASC NULLS FIRST], false, 0

(30) SortMergeJoin [codegen id : 15]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#19]
Join condition: NOT (ws_warehouse_sk#9 = ws_warehouse_sk#18)

(31) Project [codegen id : 15]
Output [1]: [ws_order_number#4]
Input [4]: [ws_warehouse_sk#9, ws_order_number#4, ws_warehouse_sk#18, ws_order_number#19]

(32) Exchange
Input [1]: [ws_order_number#4]
Arguments: hashpartitioning(cast(ws_order_number#4 as bigint), 5), ENSURE_REQUIREMENTS, [id=#20]

(33) Sort [codegen id : 16]
Input [1]: [ws_order_number#4]
Arguments: [cast(ws_order_number#4 as bigint) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 17]
Left keys [1]: [wr_order_number#15]
Right keys [1]: [cast(ws_order_number#4 as bigint)]
Join condition: None

(35) Project [codegen id : 17]
Output [1]: [wr_order_number#15]
Input [2]: [wr_order_number#15, ws_order_number#4]

(36) SortMergeJoin
Left keys [1]: [cast(ws_order_number#4 as bigint)]
Right keys [1]: [wr_order_number#15]
Join condition: None

(37) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_date#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(38) ColumnarToRow [codegen id : 18]
Input [2]: [d_date_sk#21, d_date#22]

(39) Filter [codegen id : 18]
Input [2]: [d_date_sk#21, d_date#22]
Condition : (((isnotnull(d_date#22) AND (d_date#22 >= 10623)) AND (d_date#22 <= 10683)) AND isnotnull(d_date_sk#21))

(40) Project [codegen id : 18]
Output [1]: [d_date_sk#21]
Input [2]: [d_date_sk#21, d_date#22]

(41) BroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(42) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#21]
Join condition: None

(43) Project [codegen id : 21]
Output [5]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, d_date_sk#21]

(44) Scan parquet default.customer_address
Output [2]: [ca_address_sk#24, ca_state#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(45) ColumnarToRow [codegen id : 19]
Input [2]: [ca_address_sk#24, ca_state#25]

(46) Filter [codegen id : 19]
Input [2]: [ca_address_sk#24, ca_state#25]
Condition : ((isnotnull(ca_state#25) AND (ca_state#25 = IL)) AND isnotnull(ca_address_sk#24))

(47) Project [codegen id : 19]
Output [1]: [ca_address_sk#24]
Input [2]: [ca_address_sk#24, ca_state#25]

(48) BroadcastExchange
Input [1]: [ca_address_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(49) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#24]
Join condition: None

(50) Project [codegen id : 21]
Output [4]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ca_address_sk#24]

(51) Scan parquet default.web_site
Output [2]: [web_site_sk#27, web_company_name#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(52) ColumnarToRow [codegen id : 20]
Input [2]: [web_site_sk#27, web_company_name#28]

(53) Filter [codegen id : 20]
Input [2]: [web_site_sk#27, web_company_name#28]
Condition : ((isnotnull(web_company_name#28) AND (web_company_name#28 = pri)) AND isnotnull(web_site_sk#27))

(54) Project [codegen id : 20]
Output [1]: [web_site_sk#27]
Input [2]: [web_site_sk#27, web_company_name#28]

(55) BroadcastExchange
Input [1]: [web_site_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(56) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#27]
Join condition: None

(57) Project [codegen id : 21]
Output [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [5]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, web_site_sk#27]

(58) HashAggregate [codegen id : 21]
Input [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Keys [1]: [ws_order_number#4]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#5)), partial_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#30, sum(UnscaledValue(ws_net_profit#6))#31]
Results [3]: [ws_order_number#4, sum#32, sum#33]

(59) Exchange
Input [3]: [ws_order_number#4, sum#32, sum#33]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [id=#34]

(60) HashAggregate [codegen id : 22]
Input [3]: [ws_order_number#4, sum#32, sum#33]
Keys [1]: [ws_order_number#4]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#30, sum(UnscaledValue(ws_net_profit#6))#31]
Results [3]: [ws_order_number#4, sum#32, sum#33]

(61) HashAggregate [codegen id : 22]
Input [3]: [ws_order_number#4, sum#32, sum#33]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6)), partial_count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#30, sum(UnscaledValue(ws_net_profit#6))#31, count(ws_order_number#4)#35]
Results [3]: [sum#32, sum#33, count#36]

(62) Exchange
Input [3]: [sum#32, sum#33, count#36]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#37]

(63) HashAggregate [codegen id : 23]
Input [3]: [sum#32, sum#33, count#36]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#5)), sum(UnscaledValue(ws_net_profit#6)), count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#30, sum(UnscaledValue(ws_net_profit#6))#31, count(ws_order_number#4)#35]
Results [3]: [count(ws_order_number#4)#35 AS order count #38, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#5))#30,17,2) AS total shipping cost #39, MakeDecimal(sum(UnscaledValue(ws_net_profit#6))#31,17,2) AS total net profit #40]

(64) Sort [codegen id : 23]
Input [3]: [order count #38, total shipping cost #39, total net profit #40]
Arguments: [order count #38 ASC NULLS FIRST], true, 0

