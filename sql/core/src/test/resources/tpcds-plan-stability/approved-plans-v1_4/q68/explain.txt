== Physical Plan ==
TakeOrderedAndProject (43)
+- * Project (42)
   +- * BroadcastHashJoin Inner BuildRight (41)
      :- * Project (39)
      :  +- * BroadcastHashJoin Inner BuildRight (38)
      :     :- * HashAggregate (33)
      :     :  +- Exchange (32)
      :     :     +- * HashAggregate (31)
      :     :        +- * Project (30)
      :     :           +- * BroadcastHashJoin Inner BuildRight (29)
      :     :              :- * Project (24)
      :     :              :  +- * BroadcastHashJoin Inner BuildRight (23)
      :     :              :     :- * Project (17)
      :     :              :     :  +- * BroadcastHashJoin Inner BuildRight (16)
      :     :              :     :     :- * Project (10)
      :     :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :              :     :     :     :- * Filter (3)
      :     :              :     :     :     :  +- * ColumnarToRow (2)
      :     :              :     :     :     :     +- Scan parquet default.store_sales (1)
      :     :              :     :     :     +- BroadcastExchange (8)
      :     :              :     :     :        +- * Project (7)
      :     :              :     :     :           +- * Filter (6)
      :     :              :     :     :              +- * ColumnarToRow (5)
      :     :              :     :     :                 +- Scan parquet default.date_dim (4)
      :     :              :     :     +- BroadcastExchange (15)
      :     :              :     :        +- * Project (14)
      :     :              :     :           +- * Filter (13)
      :     :              :     :              +- * ColumnarToRow (12)
      :     :              :     :                 +- Scan parquet default.store (11)
      :     :              :     +- BroadcastExchange (22)
      :     :              :        +- * Project (21)
      :     :              :           +- * Filter (20)
      :     :              :              +- * ColumnarToRow (19)
      :     :              :                 +- Scan parquet default.household_demographics (18)
      :     :              +- BroadcastExchange (28)
      :     :                 +- * Filter (27)
      :     :                    +- * ColumnarToRow (26)
      :     :                       +- Scan parquet default.customer_address (25)
      :     +- BroadcastExchange (37)
      :        +- * Filter (36)
      :           +- * ColumnarToRow (35)
      :              +- Scan parquet default.customer (34)
      +- ReusedExchange (40)


(1) Scan parquet default.store_sales
Output [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]

(3) Filter [codegen id : 5]
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Condition : (((isnotnull(ss_store_sk#4) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_customer_sk#1))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_dom#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]
Condition : ((((isnotnull(d_dom#13) AND (d_dom#13 >= 1)) AND (d_dom#13 <= 2)) AND d_year#12 IN (1999,2000,2001)) AND isnotnull(d_date_sk#11))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]

(8) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(10) Project [codegen id : 5]
Output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]
Input [10]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, d_date_sk#11]

(11) Scan parquet default.store
Output [2]: [s_store_sk#15, s_city#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Midway,Fairview]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#15, s_city#16]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#15, s_city#16]
Condition : (s_city#16 IN (Midway,Fairview) AND isnotnull(s_store_sk#15))

(14) Project [codegen id : 2]
Output [1]: [s_store_sk#15]
Input [2]: [s_store_sk#15, s_city#16]

(15) BroadcastExchange
Input [1]: [s_store_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(16) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#15]
Join condition: None

(17) Project [codegen id : 5]
Output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, s_store_sk#15]

(18) Scan parquet default.household_demographics
Output [3]: [hd_demo_sk#18, hd_dep_count#19, hd_vehicle_count#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(19) ColumnarToRow [codegen id : 3]
Input [3]: [hd_demo_sk#18, hd_dep_count#19, hd_vehicle_count#20]

(20) Filter [codegen id : 3]
Input [3]: [hd_demo_sk#18, hd_dep_count#19, hd_vehicle_count#20]
Condition : (((hd_dep_count#19 = 4) OR (hd_vehicle_count#20 = 3)) AND isnotnull(hd_demo_sk#18))

(21) Project [codegen id : 3]
Output [1]: [hd_demo_sk#18]
Input [3]: [hd_demo_sk#18, hd_dep_count#19, hd_vehicle_count#20]

(22) BroadcastExchange
Input [1]: [hd_demo_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_hdemo_sk#2]
Right keys [1]: [hd_demo_sk#18]
Join condition: None

(24) Project [codegen id : 5]
Output [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, hd_demo_sk#18]

(25) Scan parquet default.customer_address
Output [2]: [ca_address_sk#22, ca_city#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(26) ColumnarToRow [codegen id : 4]
Input [2]: [ca_address_sk#22, ca_city#23]

(27) Filter [codegen id : 4]
Input [2]: [ca_address_sk#22, ca_city#23]
Condition : (isnotnull(ca_address_sk#22) AND isnotnull(ca_city#23))

(28) BroadcastExchange
Input [2]: [ca_address_sk#22, ca_city#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(29) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_addr_sk#3]
Right keys [1]: [ca_address_sk#22]
Join condition: None

(30) Project [codegen id : 5]
Output [7]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#23]
Input [8]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_address_sk#22, ca_city#23]

(31) HashAggregate [codegen id : 5]
Input [7]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#23]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#23]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#6)), partial_sum(UnscaledValue(ss_ext_list_price#7)), partial_sum(UnscaledValue(ss_ext_tax#8))]
Aggregate Attributes [3]: [sum#25, sum#26, sum#27]
Results [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#23, sum#28, sum#29, sum#30]

(32) Exchange
Input [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#23, sum#28, sum#29, sum#30]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#23, 5), ENSURE_REQUIREMENTS, [id=#31]

(33) HashAggregate [codegen id : 8]
Input [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#23, sum#28, sum#29, sum#30]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#23]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#6)), sum(UnscaledValue(ss_ext_list_price#7)), sum(UnscaledValue(ss_ext_tax#8))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#6))#32, sum(UnscaledValue(ss_ext_list_price#7))#33, sum(UnscaledValue(ss_ext_tax#8))#34]
Results [6]: [ss_ticket_number#5, ss_customer_sk#1, ca_city#23 AS bought_city#35, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#6))#32,17,2) AS extended_price#36, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#7))#33,17,2) AS list_price#37, MakeDecimal(sum(UnscaledValue(ss_ext_tax#8))#34,17,2) AS extended_tax#38]

(34) Scan parquet default.customer
Output [4]: [c_customer_sk#39, c_current_addr_sk#40, c_first_name#41, c_last_name#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(35) ColumnarToRow [codegen id : 6]
Input [4]: [c_customer_sk#39, c_current_addr_sk#40, c_first_name#41, c_last_name#42]

(36) Filter [codegen id : 6]
Input [4]: [c_customer_sk#39, c_current_addr_sk#40, c_first_name#41, c_last_name#42]
Condition : (isnotnull(c_customer_sk#39) AND isnotnull(c_current_addr_sk#40))

(37) BroadcastExchange
Input [4]: [c_customer_sk#39, c_current_addr_sk#40, c_first_name#41, c_last_name#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#43]

(38) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#39]
Join condition: None

(39) Project [codegen id : 8]
Output [8]: [ss_ticket_number#5, bought_city#35, extended_price#36, list_price#37, extended_tax#38, c_current_addr_sk#40, c_first_name#41, c_last_name#42]
Input [10]: [ss_ticket_number#5, ss_customer_sk#1, bought_city#35, extended_price#36, list_price#37, extended_tax#38, c_customer_sk#39, c_current_addr_sk#40, c_first_name#41, c_last_name#42]

(40) ReusedExchange [Reuses operator id: 28]
Output [2]: [ca_address_sk#22, ca_city#23]

(41) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#40]
Right keys [1]: [ca_address_sk#22]
Join condition: NOT (ca_city#23 = bought_city#35)

(42) Project [codegen id : 8]
Output [8]: [c_last_name#42, c_first_name#41, ca_city#23, bought_city#35, ss_ticket_number#5, extended_price#36, extended_tax#38, list_price#37]
Input [10]: [ss_ticket_number#5, bought_city#35, extended_price#36, list_price#37, extended_tax#38, c_current_addr_sk#40, c_first_name#41, c_last_name#42, ca_address_sk#22, ca_city#23]

(43) TakeOrderedAndProject
Input [8]: [c_last_name#42, c_first_name#41, ca_city#23, bought_city#35, ss_ticket_number#5, extended_price#36, extended_tax#38, list_price#37]
Arguments: 100, [c_last_name#42 ASC NULLS FIRST, ss_ticket_number#5 ASC NULLS FIRST], [c_last_name#42, c_first_name#41, ca_city#23, bought_city#35, ss_ticket_number#5, extended_price#36, extended_tax#38, list_price#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
ReusedExchange (44)


(44) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#11]


