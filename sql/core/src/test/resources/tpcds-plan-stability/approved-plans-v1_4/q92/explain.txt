== Physical Plan ==
* Sort (34)
+- * HashAggregate (33)
   +- Exchange (32)
      +- * HashAggregate (31)
         +- * Project (30)
            +- * BroadcastHashJoin Inner BuildRight (29)
               :- * Project (27)
               :  +- * BroadcastHashJoin Inner BuildRight (26)
               :     :- * Project (10)
               :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :     :     :- * Filter (3)
               :     :     :  +- * ColumnarToRow (2)
               :     :     :     +- Scan parquet default.web_sales (1)
               :     :     +- BroadcastExchange (8)
               :     :        +- * Project (7)
               :     :           +- * Filter (6)
               :     :              +- * ColumnarToRow (5)
               :     :                 +- Scan parquet default.item (4)
               :     +- BroadcastExchange (25)
               :        +- * Filter (24)
               :           +- * HashAggregate (23)
               :              +- Exchange (22)
               :                 +- * HashAggregate (21)
               :                    +- * Project (20)
               :                       +- * BroadcastHashJoin Inner BuildRight (19)
               :                          :- * Filter (13)
               :                          :  +- * ColumnarToRow (12)
               :                          :     +- Scan parquet default.web_sales (11)
               :                          +- BroadcastExchange (18)
               :                             +- * Project (17)
               :                                +- * Filter (16)
               :                                   +- * ColumnarToRow (15)
               :                                      +- Scan parquet default.date_dim (14)
               +- ReusedExchange (28)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_ext_discount_amt#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_ext_discount_amt)]
ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 6]
Input [3]: [ws_item_sk#1, ws_ext_discount_amt#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 6]
Input [3]: [ws_item_sk#1, ws_ext_discount_amt#2, ws_sold_date_sk#3]
Condition : (isnotnull(ws_item_sk#1) AND isnotnull(ws_ext_discount_amt#2))

(4) Scan parquet default.item
Output [2]: [i_item_sk#5, i_manufact_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,350), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_manufact_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#5, i_manufact_id#6]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#5, i_manufact_id#6]
Condition : ((isnotnull(i_manufact_id#6) AND (i_manufact_id#6 = 350)) AND isnotnull(i_item_sk#5))

(7) Project [codegen id : 1]
Output [1]: [i_item_sk#5]
Input [2]: [i_item_sk#5, i_manufact_id#6]

(8) BroadcastExchange
Input [1]: [i_item_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_item_sk#1]
Right keys [1]: [i_item_sk#5]
Join condition: None

(10) Project [codegen id : 6]
Output [3]: [ws_ext_discount_amt#2, ws_sold_date_sk#3, i_item_sk#5]
Input [4]: [ws_item_sk#1, ws_ext_discount_amt#2, ws_sold_date_sk#3, i_item_sk#5]

(11) Scan parquet default.web_sales
Output [3]: [ws_item_sk#8, ws_ext_discount_amt#9, ws_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#10), dynamicpruningexpression(ws_sold_date_sk#10 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>

(12) ColumnarToRow [codegen id : 3]
Input [3]: [ws_item_sk#8, ws_ext_discount_amt#9, ws_sold_date_sk#10]

(13) Filter [codegen id : 3]
Input [3]: [ws_item_sk#8, ws_ext_discount_amt#9, ws_sold_date_sk#10]
Condition : isnotnull(ws_item_sk#8)

(14) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_date#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(15) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#11, d_date#12]

(16) Filter [codegen id : 2]
Input [2]: [d_date_sk#11, d_date#12]
Condition : (((isnotnull(d_date#12) AND (d_date#12 >= 2000-01-27)) AND (d_date#12 <= 2000-04-26)) AND isnotnull(d_date_sk#11))

(17) Project [codegen id : 2]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_date#12]

(18) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(19) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_sold_date_sk#10]
Right keys [1]: [d_date_sk#11]
Join condition: None

(20) Project [codegen id : 3]
Output [2]: [ws_item_sk#8, ws_ext_discount_amt#9]
Input [4]: [ws_item_sk#8, ws_ext_discount_amt#9, ws_sold_date_sk#10, d_date_sk#11]

(21) HashAggregate [codegen id : 3]
Input [2]: [ws_item_sk#8, ws_ext_discount_amt#9]
Keys [1]: [ws_item_sk#8]
Functions [1]: [partial_avg(UnscaledValue(ws_ext_discount_amt#9))]
Aggregate Attributes [2]: [sum#14, count#15]
Results [3]: [ws_item_sk#8, sum#16, count#17]

(22) Exchange
Input [3]: [ws_item_sk#8, sum#16, count#17]
Arguments: hashpartitioning(ws_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#18]

(23) HashAggregate [codegen id : 4]
Input [3]: [ws_item_sk#8, sum#16, count#17]
Keys [1]: [ws_item_sk#8]
Functions [1]: [avg(UnscaledValue(ws_ext_discount_amt#9))]
Aggregate Attributes [1]: [avg(UnscaledValue(ws_ext_discount_amt#9))#19]
Results [2]: [CheckOverflow((1.300000 * promote_precision(cast((avg(UnscaledValue(ws_ext_discount_amt#9))#19 / 100.0) as decimal(11,6)))), DecimalType(14,7), true) AS (1.3 * avg(ws_ext_discount_amt))#20, ws_item_sk#8]

(24) Filter [codegen id : 4]
Input [2]: [(1.3 * avg(ws_ext_discount_amt))#20, ws_item_sk#8]
Condition : isnotnull((1.3 * avg(ws_ext_discount_amt))#20)

(25) BroadcastExchange
Input [2]: [(1.3 * avg(ws_ext_discount_amt))#20, ws_item_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#21]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [ws_item_sk#8]
Join condition: (cast(ws_ext_discount_amt#2 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#20)

(27) Project [codegen id : 6]
Output [2]: [ws_ext_discount_amt#2, ws_sold_date_sk#3]
Input [5]: [ws_ext_discount_amt#2, ws_sold_date_sk#3, i_item_sk#5, (1.3 * avg(ws_ext_discount_amt))#20, ws_item_sk#8]

(28) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#22]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#22]
Join condition: None

(30) Project [codegen id : 6]
Output [1]: [ws_ext_discount_amt#2]
Input [3]: [ws_ext_discount_amt#2, ws_sold_date_sk#3, d_date_sk#22]

(31) HashAggregate [codegen id : 6]
Input [1]: [ws_ext_discount_amt#2]
Keys: []
Functions [1]: [partial_sum(UnscaledValue(ws_ext_discount_amt#2))]
Aggregate Attributes [1]: [sum#23]
Results [1]: [sum#24]

(32) Exchange
Input [1]: [sum#24]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#25]

(33) HashAggregate [codegen id : 7]
Input [1]: [sum#24]
Keys: []
Functions [1]: [sum(UnscaledValue(ws_ext_discount_amt#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_discount_amt#2))#26]
Results [1]: [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#2))#26,17,2) AS Excess Discount Amount #27]

(34) Sort [codegen id : 7]
Input [1]: [Excess Discount Amount #27]
Arguments: [Excess Discount Amount #27 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
ReusedExchange (35)


(35) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#22]

Subquery:2 Hosting operator id = 11 Hosting Expression = ws_sold_date_sk#10 IN dynamicpruning#4


