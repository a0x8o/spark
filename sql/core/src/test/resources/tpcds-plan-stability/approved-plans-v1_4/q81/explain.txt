== Physical Plan ==
TakeOrderedAndProject (48)
+- * Project (47)
   +- * BroadcastHashJoin Inner BuildRight (46)
      :- * Project (41)
      :  +- * BroadcastHashJoin Inner BuildRight (40)
      :     :- * Project (35)
      :     :  +- * BroadcastHashJoin Inner BuildRight (34)
      :     :     :- * Filter (16)
      :     :     :  +- * HashAggregate (15)
      :     :     :     +- Exchange (14)
      :     :     :        +- * HashAggregate (13)
      :     :     :           +- * Project (12)
      :     :     :              +- * BroadcastHashJoin Inner BuildRight (11)
      :     :     :                 :- * Project (6)
      :     :     :                 :  +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                 :     :- * Filter (3)
      :     :     :                 :     :  +- * ColumnarToRow (2)
      :     :     :                 :     :     +- Scan parquet default.catalog_returns (1)
      :     :     :                 :     +- ReusedExchange (4)
      :     :     :                 +- BroadcastExchange (10)
      :     :     :                    +- * Filter (9)
      :     :     :                       +- * ColumnarToRow (8)
      :     :     :                          +- Scan parquet default.customer_address (7)
      :     :     +- BroadcastExchange (33)
      :     :        +- * Filter (32)
      :     :           +- * HashAggregate (31)
      :     :              +- Exchange (30)
      :     :                 +- * HashAggregate (29)
      :     :                    +- * HashAggregate (28)
      :     :                       +- Exchange (27)
      :     :                          +- * HashAggregate (26)
      :     :                             +- * Project (25)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (24)
      :     :                                   :- * Project (22)
      :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (21)
      :     :                                   :     :- * Filter (19)
      :     :                                   :     :  +- * ColumnarToRow (18)
      :     :                                   :     :     +- Scan parquet default.catalog_returns (17)
      :     :                                   :     +- ReusedExchange (20)
      :     :                                   +- ReusedExchange (23)
      :     +- BroadcastExchange (39)
      :        +- * Filter (38)
      :           +- * ColumnarToRow (37)
      :              +- Scan parquet default.customer (36)
      +- BroadcastExchange (45)
         +- * Filter (44)
            +- * ColumnarToRow (43)
               +- Scan parquet default.customer_address (42)


(1) Scan parquet default.catalog_returns
Output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#4), dynamicpruningexpression(cr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Condition : (isnotnull(cr_returning_addr_sk#2) AND isnotnull(cr_returning_customer_sk#1))

(4) ReusedExchange [Reuses operator id: 53]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Project [codegen id : 3]
Output [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4, d_date_sk#6]

(7) Scan parquet default.customer_address
Output [2]: [ca_address_sk#7, ca_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [ca_address_sk#7, ca_state#8]

(9) Filter [codegen id : 2]
Input [2]: [ca_address_sk#7, ca_state#8]
Condition : (isnotnull(ca_address_sk#7) AND isnotnull(ca_state#8))

(10) BroadcastExchange
Input [2]: [ca_address_sk#7, ca_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cr_returning_addr_sk#2]
Right keys [1]: [ca_address_sk#7]
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#8]
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, ca_address_sk#7, ca_state#8]

(13) HashAggregate [codegen id : 3]
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#8]
Keys [2]: [cr_returning_customer_sk#1, ca_state#8]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum#10]
Results [3]: [cr_returning_customer_sk#1, ca_state#8, sum#11]

(14) Exchange
Input [3]: [cr_returning_customer_sk#1, ca_state#8, sum#11]
Arguments: hashpartitioning(cr_returning_customer_sk#1, ca_state#8, 5), ENSURE_REQUIREMENTS, [id=#12]

(15) HashAggregate [codegen id : 11]
Input [3]: [cr_returning_customer_sk#1, ca_state#8, sum#11]
Keys [2]: [cr_returning_customer_sk#1, ca_state#8]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))#13]
Results [3]: [cr_returning_customer_sk#1 AS ctr_customer_sk#14, ca_state#8 AS ctr_state#15, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#3))#13,17,2) AS ctr_total_return#16]

(16) Filter [codegen id : 11]
Input [3]: [ctr_customer_sk#14, ctr_state#15, ctr_total_return#16]
Condition : isnotnull(ctr_total_return#16)

(17) Scan parquet default.catalog_returns
Output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#4), dynamicpruningexpression(cr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(18) ColumnarToRow [codegen id : 6]
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]

(19) Filter [codegen id : 6]
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Condition : isnotnull(cr_returning_addr_sk#2)

(20) ReusedExchange [Reuses operator id: 53]
Output [1]: [d_date_sk#6]

(21) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(22) Project [codegen id : 6]
Output [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4, d_date_sk#6]

(23) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#7, ca_state#8]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cr_returning_addr_sk#2]
Right keys [1]: [ca_address_sk#7]
Join condition: None

(25) Project [codegen id : 6]
Output [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#8]
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, ca_address_sk#7, ca_state#8]

(26) HashAggregate [codegen id : 6]
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#8]
Keys [2]: [cr_returning_customer_sk#1, ca_state#8]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum#17]
Results [3]: [cr_returning_customer_sk#1, ca_state#8, sum#18]

(27) Exchange
Input [3]: [cr_returning_customer_sk#1, ca_state#8, sum#18]
Arguments: hashpartitioning(cr_returning_customer_sk#1, ca_state#8, 5), ENSURE_REQUIREMENTS, [id=#19]

(28) HashAggregate [codegen id : 7]
Input [3]: [cr_returning_customer_sk#1, ca_state#8, sum#18]
Keys [2]: [cr_returning_customer_sk#1, ca_state#8]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))#13]
Results [2]: [ca_state#8 AS ctr_state#15, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#3))#13,17,2) AS ctr_total_return#16]

(29) HashAggregate [codegen id : 7]
Input [2]: [ctr_state#15, ctr_total_return#16]
Keys [1]: [ctr_state#15]
Functions [1]: [partial_avg(ctr_total_return#16)]
Aggregate Attributes [2]: [sum#20, count#21]
Results [3]: [ctr_state#15, sum#22, count#23]

(30) Exchange
Input [3]: [ctr_state#15, sum#22, count#23]
Arguments: hashpartitioning(ctr_state#15, 5), ENSURE_REQUIREMENTS, [id=#24]

(31) HashAggregate [codegen id : 8]
Input [3]: [ctr_state#15, sum#22, count#23]
Keys [1]: [ctr_state#15]
Functions [1]: [avg(ctr_total_return#16)]
Aggregate Attributes [1]: [avg(ctr_total_return#16)#25]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#16)#25) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#26, ctr_state#15 AS ctr_state#15#27]

(32) Filter [codegen id : 8]
Input [2]: [(avg(ctr_total_return) * 1.2)#26, ctr_state#15#27]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#26)

(33) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#26, ctr_state#15#27]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#28]

(34) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_state#15]
Right keys [1]: [ctr_state#15#27]
Join condition: (cast(ctr_total_return#16 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#26)

(35) Project [codegen id : 11]
Output [2]: [ctr_customer_sk#14, ctr_total_return#16]
Input [5]: [ctr_customer_sk#14, ctr_state#15, ctr_total_return#16, (avg(ctr_total_return) * 1.2)#26, ctr_state#15#27]

(36) Scan parquet default.customer
Output [6]: [c_customer_sk#29, c_customer_id#30, c_current_addr_sk#31, c_salutation#32, c_first_name#33, c_last_name#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(37) ColumnarToRow [codegen id : 9]
Input [6]: [c_customer_sk#29, c_customer_id#30, c_current_addr_sk#31, c_salutation#32, c_first_name#33, c_last_name#34]

(38) Filter [codegen id : 9]
Input [6]: [c_customer_sk#29, c_customer_id#30, c_current_addr_sk#31, c_salutation#32, c_first_name#33, c_last_name#34]
Condition : (isnotnull(c_customer_sk#29) AND isnotnull(c_current_addr_sk#31))

(39) BroadcastExchange
Input [6]: [c_customer_sk#29, c_customer_id#30, c_current_addr_sk#31, c_salutation#32, c_first_name#33, c_last_name#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(40) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_customer_sk#14]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(41) Project [codegen id : 11]
Output [6]: [ctr_total_return#16, c_customer_id#30, c_current_addr_sk#31, c_salutation#32, c_first_name#33, c_last_name#34]
Input [8]: [ctr_customer_sk#14, ctr_total_return#16, c_customer_sk#29, c_customer_id#30, c_current_addr_sk#31, c_salutation#32, c_first_name#33, c_last_name#34]

(42) Scan parquet default.customer_address
Output [12]: [ca_address_sk#36, ca_street_number#37, ca_street_name#38, ca_street_type#39, ca_suite_number#40, ca_city#41, ca_county#42, ca_state#43, ca_zip#44, ca_country#45, ca_gmt_offset#46, ca_location_type#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(43) ColumnarToRow [codegen id : 10]
Input [12]: [ca_address_sk#36, ca_street_number#37, ca_street_name#38, ca_street_type#39, ca_suite_number#40, ca_city#41, ca_county#42, ca_state#43, ca_zip#44, ca_country#45, ca_gmt_offset#46, ca_location_type#47]

(44) Filter [codegen id : 10]
Input [12]: [ca_address_sk#36, ca_street_number#37, ca_street_name#38, ca_street_type#39, ca_suite_number#40, ca_city#41, ca_county#42, ca_state#43, ca_zip#44, ca_country#45, ca_gmt_offset#46, ca_location_type#47]
Condition : ((isnotnull(ca_state#43) AND (ca_state#43 = GA)) AND isnotnull(ca_address_sk#36))

(45) BroadcastExchange
Input [12]: [ca_address_sk#36, ca_street_number#37, ca_street_name#38, ca_street_type#39, ca_suite_number#40, ca_city#41, ca_county#42, ca_state#43, ca_zip#44, ca_country#45, ca_gmt_offset#46, ca_location_type#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#48]

(46) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#31]
Right keys [1]: [ca_address_sk#36]
Join condition: None

(47) Project [codegen id : 11]
Output [16]: [c_customer_id#30, c_salutation#32, c_first_name#33, c_last_name#34, ca_street_number#37, ca_street_name#38, ca_street_type#39, ca_suite_number#40, ca_city#41, ca_county#42, ca_state#43, ca_zip#44, ca_country#45, ca_gmt_offset#46, ca_location_type#47, ctr_total_return#16]
Input [18]: [ctr_total_return#16, c_customer_id#30, c_current_addr_sk#31, c_salutation#32, c_first_name#33, c_last_name#34, ca_address_sk#36, ca_street_number#37, ca_street_name#38, ca_street_type#39, ca_suite_number#40, ca_city#41, ca_county#42, ca_state#43, ca_zip#44, ca_country#45, ca_gmt_offset#46, ca_location_type#47]

(48) TakeOrderedAndProject
Input [16]: [c_customer_id#30, c_salutation#32, c_first_name#33, c_last_name#34, ca_street_number#37, ca_street_name#38, ca_street_type#39, ca_suite_number#40, ca_city#41, ca_county#42, ca_state#43, ca_zip#44, ca_country#45, ca_gmt_offset#46, ca_location_type#47, ctr_total_return#16]
Arguments: 100, [c_customer_id#30 ASC NULLS FIRST, c_salutation#32 ASC NULLS FIRST, c_first_name#33 ASC NULLS FIRST, c_last_name#34 ASC NULLS FIRST, ca_street_number#37 ASC NULLS FIRST, ca_street_name#38 ASC NULLS FIRST, ca_street_type#39 ASC NULLS FIRST, ca_suite_number#40 ASC NULLS FIRST, ca_city#41 ASC NULLS FIRST, ca_county#42 ASC NULLS FIRST, ca_state#43 ASC NULLS FIRST, ca_zip#44 ASC NULLS FIRST, ca_country#45 ASC NULLS FIRST, ca_gmt_offset#46 ASC NULLS FIRST, ca_location_type#47 ASC NULLS FIRST, ctr_total_return#16 ASC NULLS FIRST], [c_customer_id#30, c_salutation#32, c_first_name#33, c_last_name#34, ca_street_number#37, ca_street_name#38, ca_street_type#39, ca_suite_number#40, ca_city#41, ca_county#42, ca_state#43, ca_zip#44, ca_country#45, ca_gmt_offset#46, ca_location_type#47, ctr_total_return#16]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (53)
+- * Project (52)
   +- * Filter (51)
      +- * ColumnarToRow (50)
         +- Scan parquet default.date_dim (49)


(49) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(50) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#49]

(51) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#49]
Condition : ((isnotnull(d_year#49) AND (d_year#49 = 2000)) AND isnotnull(d_date_sk#6))

(52) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#49]

(53) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50]

Subquery:2 Hosting operator id = 17 Hosting Expression = cr_returned_date_sk#4 IN dynamicpruning#5


