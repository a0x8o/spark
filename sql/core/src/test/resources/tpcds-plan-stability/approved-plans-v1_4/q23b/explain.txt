== Physical Plan ==
TakeOrderedAndProject (87)
+- Union (86)
   :- * HashAggregate (62)
   :  +- Exchange (61)
   :     +- * HashAggregate (60)
   :        +- * Project (59)
   :           +- * BroadcastHashJoin Inner BuildRight (58)
   :              :- * Project (56)
   :              :  +- * BroadcastHashJoin Inner BuildRight (55)
   :              :     :- * SortMergeJoin LeftSemi (42)
   :              :     :  :- * Sort (25)
   :              :     :  :  +- Exchange (24)
   :              :     :  :     +- * Project (23)
   :              :     :  :        +- * BroadcastHashJoin LeftSemi BuildRight (22)
   :              :     :  :           :- * Filter (3)
   :              :     :  :           :  +- * ColumnarToRow (2)
   :              :     :  :           :     +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- BroadcastExchange (21)
   :              :     :  :              +- * Project (20)
   :              :     :  :                 +- * Filter (19)
   :              :     :  :                    +- * HashAggregate (18)
   :              :     :  :                       +- Exchange (17)
   :              :     :  :                          +- * HashAggregate (16)
   :              :     :  :                             +- * Project (15)
   :              :     :  :                                +- * BroadcastHashJoin Inner BuildRight (14)
   :              :     :  :                                   :- * Project (9)
   :              :     :  :                                   :  +- * BroadcastHashJoin Inner BuildRight (8)
   :              :     :  :                                   :     :- * Filter (6)
   :              :     :  :                                   :     :  +- * ColumnarToRow (5)
   :              :     :  :                                   :     :     +- Scan parquet default.store_sales (4)
   :              :     :  :                                   :     +- ReusedExchange (7)
   :              :     :  :                                   +- BroadcastExchange (13)
   :              :     :  :                                      +- * Filter (12)
   :              :     :  :                                         +- * ColumnarToRow (11)
   :              :     :  :                                            +- Scan parquet default.item (10)
   :              :     :  +- * Sort (41)
   :              :     :     +- * Project (40)
   :              :     :        +- * Filter (39)
   :              :     :           +- * HashAggregate (38)
   :              :     :              +- Exchange (37)
   :              :     :                 +- * HashAggregate (36)
   :              :     :                    +- * Project (35)
   :              :     :                       +- * BroadcastHashJoin Inner BuildRight (34)
   :              :     :                          :- * Project (29)
   :              :     :                          :  +- * Filter (28)
   :              :     :                          :     +- * ColumnarToRow (27)
   :              :     :                          :        +- Scan parquet default.store_sales (26)
   :              :     :                          +- BroadcastExchange (33)
   :              :     :                             +- * Filter (32)
   :              :     :                                +- * ColumnarToRow (31)
   :              :     :                                   +- Scan parquet default.customer (30)
   :              :     +- BroadcastExchange (54)
   :              :        +- * SortMergeJoin LeftSemi (53)
   :              :           :- * Sort (47)
   :              :           :  +- Exchange (46)
   :              :           :     +- * Filter (45)
   :              :           :        +- * ColumnarToRow (44)
   :              :           :           +- Scan parquet default.customer (43)
   :              :           +- * Sort (52)
   :              :              +- * Project (51)
   :              :                 +- * Filter (50)
   :              :                    +- * HashAggregate (49)
   :              :                       +- ReusedExchange (48)
   :              +- ReusedExchange (57)
   +- * HashAggregate (85)
      +- Exchange (84)
         +- * HashAggregate (83)
            +- * Project (82)
               +- * BroadcastHashJoin Inner BuildRight (81)
                  :- * Project (79)
                  :  +- * BroadcastHashJoin Inner BuildRight (78)
                  :     :- * SortMergeJoin LeftSemi (76)
                  :     :  :- * Sort (70)
                  :     :  :  +- Exchange (69)
                  :     :  :     +- * Project (68)
                  :     :  :        +- * BroadcastHashJoin LeftSemi BuildRight (67)
                  :     :  :           :- * Filter (65)
                  :     :  :           :  +- * ColumnarToRow (64)
                  :     :  :           :     +- Scan parquet default.web_sales (63)
                  :     :  :           +- ReusedExchange (66)
                  :     :  +- * Sort (75)
                  :     :     +- * Project (74)
                  :     :        +- * Filter (73)
                  :     :           +- * HashAggregate (72)
                  :     :              +- ReusedExchange (71)
                  :     +- ReusedExchange (77)
                  +- ReusedExchange (80)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Scan parquet default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(5) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(6) Filter [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(7) ReusedExchange [Reuses operator id: 97]
Output [2]: [d_date_sk#10, d_date#11]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(9) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(10) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(12) Filter [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(13) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join condition: None

(15) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#15]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(16) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#15]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#16]
Results [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]

(17) Exchange
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Arguments: hashpartitioning(_groupingexpression#15, i_item_sk#12, d_date#11, 5), ENSURE_REQUIREMENTS, [id=#18]

(18) HashAggregate [codegen id : 4]
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [2]: [i_item_sk#12 AS item_sk#20, count(1)#19 AS cnt#21]

(19) Filter [codegen id : 4]
Input [2]: [item_sk#20, cnt#21]
Condition : (cnt#21 > 4)

(20) Project [codegen id : 4]
Output [1]: [item_sk#20]
Input [2]: [item_sk#20, cnt#21]

(21) BroadcastExchange
Input [1]: [item_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#20]
Join condition: None

(23) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(24) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(25) Sort [codegen id : 6]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(26) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(28) Filter [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(29) Project [codegen id : 8]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(30) Scan parquet default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(31) ColumnarToRow [codegen id : 7]
Input [1]: [c_customer_sk#28]

(32) Filter [codegen id : 7]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(33) BroadcastExchange
Input [1]: [c_customer_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(36) HashAggregate [codegen id : 8]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(37) Exchange
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [id=#34]

(38) HashAggregate [codegen id : 9]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 AS ssales#36]

(39) Filter [codegen id : 9]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(40) Project [codegen id : 9]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(41) Sort [codegen id : 9]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(43) Scan parquet default.customer
Output [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(44) ColumnarToRow [codegen id : 10]
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]

(45) Filter [codegen id : 10]
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Condition : isnotnull(c_customer_sk#39)

(46) Exchange
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Arguments: hashpartitioning(c_customer_sk#39, 5), ENSURE_REQUIREMENTS, [id=#42]

(47) Sort [codegen id : 11]
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Arguments: [c_customer_sk#39 ASC NULLS FIRST], false, 0

(48) ReusedExchange [Reuses operator id: 37]
Output [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(49) HashAggregate [codegen id : 14]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 AS ssales#36]

(50) Filter [codegen id : 14]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(51) Project [codegen id : 14]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(52) Sort [codegen id : 14]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_customer_sk#39]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(54) BroadcastExchange
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#43]

(55) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#39]
Join condition: None

(56) Project [codegen id : 17]
Output [5]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#40, c_last_name#41]
Input [7]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_customer_sk#39, c_first_name#40, c_last_name#41]

(57) ReusedExchange [Reuses operator id: 92]
Output [1]: [d_date_sk#44]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#44]
Join condition: None

(59) Project [codegen id : 17]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#40, c_last_name#41]
Input [6]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#40, c_last_name#41, d_date_sk#44]

(60) HashAggregate [codegen id : 17]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#40, c_last_name#41]
Keys [2]: [c_last_name#41, c_first_name#40]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#45, isEmpty#46]
Results [4]: [c_last_name#41, c_first_name#40, sum#47, isEmpty#48]

(61) Exchange
Input [4]: [c_last_name#41, c_first_name#40, sum#47, isEmpty#48]
Arguments: hashpartitioning(c_last_name#41, c_first_name#40, 5), ENSURE_REQUIREMENTS, [id=#49]

(62) HashAggregate [codegen id : 18]
Input [4]: [c_last_name#41, c_first_name#40, sum#47, isEmpty#48]
Keys [2]: [c_last_name#41, c_first_name#40]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#50]
Results [3]: [c_last_name#41, c_first_name#40, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#50 AS sales#51]

(63) Scan parquet default.web_sales
Output [5]: [ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#56), dynamicpruningexpression(ws_sold_date_sk#56 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(64) ColumnarToRow [codegen id : 23]
Input [5]: [ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]

(65) Filter [codegen id : 23]
Input [5]: [ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]
Condition : isnotnull(ws_bill_customer_sk#53)

(66) ReusedExchange [Reuses operator id: 21]
Output [1]: [item_sk#20]

(67) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ws_item_sk#52]
Right keys [1]: [item_sk#20]
Join condition: None

(68) Project [codegen id : 23]
Output [4]: [ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]
Input [5]: [ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]

(69) Exchange
Input [4]: [ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]
Arguments: hashpartitioning(ws_bill_customer_sk#53, 5), ENSURE_REQUIREMENTS, [id=#57]

(70) Sort [codegen id : 24]
Input [4]: [ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56]
Arguments: [ws_bill_customer_sk#53 ASC NULLS FIRST], false, 0

(71) ReusedExchange [Reuses operator id: 37]
Output [3]: [c_customer_sk#58, sum#59, isEmpty#60]

(72) HashAggregate [codegen id : 27]
Input [3]: [c_customer_sk#58, sum#59, isEmpty#60]
Keys [1]: [c_customer_sk#58]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#61 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#62 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#61 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#62 as decimal(12,2)))), DecimalType(18,2), true))#63]
Results [2]: [c_customer_sk#58, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#61 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#62 as decimal(12,2)))), DecimalType(18,2), true))#63 AS ssales#36]

(73) Filter [codegen id : 27]
Input [2]: [c_customer_sk#58, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(74) Project [codegen id : 27]
Output [1]: [c_customer_sk#58]
Input [2]: [c_customer_sk#58, ssales#36]

(75) Sort [codegen id : 27]
Input [1]: [c_customer_sk#58]
Arguments: [c_customer_sk#58 ASC NULLS FIRST], false, 0

(76) SortMergeJoin [codegen id : 35]
Left keys [1]: [ws_bill_customer_sk#53]
Right keys [1]: [c_customer_sk#58]
Join condition: None

(77) ReusedExchange [Reuses operator id: 54]
Output [3]: [c_customer_sk#64, c_first_name#65, c_last_name#66]

(78) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_bill_customer_sk#53]
Right keys [1]: [c_customer_sk#64]
Join condition: None

(79) Project [codegen id : 35]
Output [5]: [ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56, c_first_name#65, c_last_name#66]
Input [7]: [ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56, c_customer_sk#64, c_first_name#65, c_last_name#66]

(80) ReusedExchange [Reuses operator id: 92]
Output [1]: [d_date_sk#67]

(81) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_sold_date_sk#56]
Right keys [1]: [d_date_sk#67]
Join condition: None

(82) Project [codegen id : 35]
Output [4]: [ws_quantity#54, ws_list_price#55, c_first_name#65, c_last_name#66]
Input [6]: [ws_quantity#54, ws_list_price#55, ws_sold_date_sk#56, c_first_name#65, c_last_name#66, d_date_sk#67]

(83) HashAggregate [codegen id : 35]
Input [4]: [ws_quantity#54, ws_list_price#55, c_first_name#65, c_last_name#66]
Keys [2]: [c_last_name#66, c_first_name#65]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#54 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#68, isEmpty#69]
Results [4]: [c_last_name#66, c_first_name#65, sum#70, isEmpty#71]

(84) Exchange
Input [4]: [c_last_name#66, c_first_name#65, sum#70, isEmpty#71]
Arguments: hashpartitioning(c_last_name#66, c_first_name#65, 5), ENSURE_REQUIREMENTS, [id=#72]

(85) HashAggregate [codegen id : 36]
Input [4]: [c_last_name#66, c_first_name#65, sum#70, isEmpty#71]
Keys [2]: [c_last_name#66, c_first_name#65]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#54 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#54 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2), true))#73]
Results [3]: [c_last_name#66, c_first_name#65, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#54 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2), true))#73 AS sales#74]

(86) Union

(87) TakeOrderedAndProject
Input [3]: [c_last_name#41, c_first_name#40, sales#51]
Arguments: 100, [c_last_name#41 ASC NULLS FIRST, c_first_name#40 ASC NULLS FIRST, sales#51 ASC NULLS FIRST], [c_last_name#41, c_first_name#40, sales#51]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (92)
+- * Project (91)
   +- * Filter (90)
      +- * ColumnarToRow (89)
         +- Scan parquet default.date_dim (88)


(88) Scan parquet default.date_dim
Output [3]: [d_date_sk#44, d_year#75, d_moy#76]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(89) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#44, d_year#75, d_moy#76]

(90) Filter [codegen id : 1]
Input [3]: [d_date_sk#44, d_year#75, d_moy#76]
Condition : ((((isnotnull(d_year#75) AND isnotnull(d_moy#76)) AND (d_year#75 = 2000)) AND (d_moy#76 = 2)) AND isnotnull(d_date_sk#44))

(91) Project [codegen id : 1]
Output [1]: [d_date_sk#44]
Input [3]: [d_date_sk#44, d_year#75, d_moy#76]

(92) BroadcastExchange
Input [1]: [d_date_sk#44]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#77]

Subquery:2 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (97)
+- * Project (96)
   +- * Filter (95)
      +- * ColumnarToRow (94)
         +- Scan parquet default.date_dim (93)


(93) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(94) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#78]

(95) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#78]
Condition : (d_year#78 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(96) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#78]

(97) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#79]

Subquery:3 Hosting operator id = 39 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (112)
+- Exchange (111)
   +- * HashAggregate (110)
      +- * HashAggregate (109)
         +- Exchange (108)
            +- * HashAggregate (107)
               +- * Project (106)
                  +- * BroadcastHashJoin Inner BuildRight (105)
                     :- * Project (103)
                     :  +- * BroadcastHashJoin Inner BuildRight (102)
                     :     :- * Filter (100)
                     :     :  +- * ColumnarToRow (99)
                     :     :     +- Scan parquet default.store_sales (98)
                     :     +- ReusedExchange (101)
                     +- ReusedExchange (104)


(98) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#80, ss_quantity#81, ss_sales_price#82, ss_sold_date_sk#83]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#83), dynamicpruningexpression(ss_sold_date_sk#83 IN dynamicpruning#84)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(99) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#80, ss_quantity#81, ss_sales_price#82, ss_sold_date_sk#83]

(100) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#80, ss_quantity#81, ss_sales_price#82, ss_sold_date_sk#83]
Condition : isnotnull(ss_customer_sk#80)

(101) ReusedExchange [Reuses operator id: 33]
Output [1]: [c_customer_sk#85]

(102) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#80]
Right keys [1]: [c_customer_sk#85]
Join condition: None

(103) Project [codegen id : 3]
Output [4]: [ss_quantity#81, ss_sales_price#82, ss_sold_date_sk#83, c_customer_sk#85]
Input [5]: [ss_customer_sk#80, ss_quantity#81, ss_sales_price#82, ss_sold_date_sk#83, c_customer_sk#85]

(104) ReusedExchange [Reuses operator id: 117]
Output [1]: [d_date_sk#86]

(105) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#83]
Right keys [1]: [d_date_sk#86]
Join condition: None

(106) Project [codegen id : 3]
Output [3]: [ss_quantity#81, ss_sales_price#82, c_customer_sk#85]
Input [5]: [ss_quantity#81, ss_sales_price#82, ss_sold_date_sk#83, c_customer_sk#85, d_date_sk#86]

(107) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#81, ss_sales_price#82, c_customer_sk#85]
Keys [1]: [c_customer_sk#85]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#81 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#82 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#87, isEmpty#88]
Results [3]: [c_customer_sk#85, sum#89, isEmpty#90]

(108) Exchange
Input [3]: [c_customer_sk#85, sum#89, isEmpty#90]
Arguments: hashpartitioning(c_customer_sk#85, 5), ENSURE_REQUIREMENTS, [id=#91]

(109) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#85, sum#89, isEmpty#90]
Keys [1]: [c_customer_sk#85]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#81 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#82 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#81 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#82 as decimal(12,2)))), DecimalType(18,2), true))#92]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#81 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#82 as decimal(12,2)))), DecimalType(18,2), true))#92 AS csales#93]

(110) HashAggregate [codegen id : 4]
Input [1]: [csales#93]
Keys: []
Functions [1]: [partial_max(csales#93)]
Aggregate Attributes [1]: [max#94]
Results [1]: [max#95]

(111) Exchange
Input [1]: [max#95]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#96]

(112) HashAggregate [codegen id : 5]
Input [1]: [max#95]
Keys: []
Functions [1]: [max(csales#93)]
Aggregate Attributes [1]: [max(csales#93)#97]
Results [1]: [max(csales#93)#97 AS tpcds_cmax#98]

Subquery:4 Hosting operator id = 98 Hosting Expression = ss_sold_date_sk#83 IN dynamicpruning#84
BroadcastExchange (117)
+- * Project (116)
   +- * Filter (115)
      +- * ColumnarToRow (114)
         +- Scan parquet default.date_dim (113)


(113) Scan parquet default.date_dim
Output [2]: [d_date_sk#86, d_year#99]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(114) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#86, d_year#99]

(115) Filter [codegen id : 1]
Input [2]: [d_date_sk#86, d_year#99]
Condition : (d_year#99 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#86))

(116) Project [codegen id : 1]
Output [1]: [d_date_sk#86]
Input [2]: [d_date_sk#86, d_year#99]

(117) BroadcastExchange
Input [1]: [d_date_sk#86]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#100]

Subquery:5 Hosting operator id = 50 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]

Subquery:6 Hosting operator id = 63 Hosting Expression = ws_sold_date_sk#56 IN dynamicpruning#6

Subquery:7 Hosting operator id = 73 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


