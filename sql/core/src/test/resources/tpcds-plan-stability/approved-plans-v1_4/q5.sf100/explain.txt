== Physical Plan ==
TakeOrderedAndProject (81)
+- * HashAggregate (80)
   +- Exchange (79)
      +- * HashAggregate (78)
         +- * Expand (77)
            +- Union (76)
               :- * HashAggregate (25)
               :  +- Exchange (24)
               :     +- * HashAggregate (23)
               :        +- * Project (22)
               :           +- * BroadcastHashJoin Inner BuildRight (21)
               :              :- * Project (15)
               :              :  +- * BroadcastHashJoin Inner BuildRight (14)
               :              :     :- Union (9)
               :              :     :  :- * Project (4)
               :              :     :  :  +- * Filter (3)
               :              :     :  :     +- * ColumnarToRow (2)
               :              :     :  :        +- Scan parquet default.store_sales (1)
               :              :     :  +- * Project (8)
               :              :     :     +- * Filter (7)
               :              :     :        +- * ColumnarToRow (6)
               :              :     :           +- Scan parquet default.store_returns (5)
               :              :     +- BroadcastExchange (13)
               :              :        +- * Filter (12)
               :              :           +- * ColumnarToRow (11)
               :              :              +- Scan parquet default.store (10)
               :              +- BroadcastExchange (20)
               :                 +- * Project (19)
               :                    +- * Filter (18)
               :                       +- * ColumnarToRow (17)
               :                          +- Scan parquet default.date_dim (16)
               :- * HashAggregate (46)
               :  +- Exchange (45)
               :     +- * HashAggregate (44)
               :        +- * Project (43)
               :           +- * BroadcastHashJoin Inner BuildRight (42)
               :              :- * Project (40)
               :              :  +- * BroadcastHashJoin Inner BuildRight (39)
               :              :     :- Union (34)
               :              :     :  :- * Project (29)
               :              :     :  :  +- * Filter (28)
               :              :     :  :     +- * ColumnarToRow (27)
               :              :     :  :        +- Scan parquet default.catalog_sales (26)
               :              :     :  +- * Project (33)
               :              :     :     +- * Filter (32)
               :              :     :        +- * ColumnarToRow (31)
               :              :     :           +- Scan parquet default.catalog_returns (30)
               :              :     +- BroadcastExchange (38)
               :              :        +- * Filter (37)
               :              :           +- * ColumnarToRow (36)
               :              :              +- Scan parquet default.catalog_page (35)
               :              +- ReusedExchange (41)
               +- * HashAggregate (75)
                  +- Exchange (74)
                     +- * HashAggregate (73)
                        +- * Project (72)
                           +- * BroadcastHashJoin Inner BuildRight (71)
                              :- * Project (69)
                              :  +- * BroadcastHashJoin Inner BuildRight (68)
                              :     :- Union (63)
                              :     :  :- * Project (50)
                              :     :  :  +- * Filter (49)
                              :     :  :     +- * ColumnarToRow (48)
                              :     :  :        +- Scan parquet default.web_sales (47)
                              :     :  +- * Project (62)
                              :     :     +- * SortMergeJoin Inner (61)
                              :     :        :- * Sort (54)
                              :     :        :  +- Exchange (53)
                              :     :        :     +- * ColumnarToRow (52)
                              :     :        :        +- Scan parquet default.web_returns (51)
                              :     :        +- * Sort (60)
                              :     :           +- Exchange (59)
                              :     :              +- * Project (58)
                              :     :                 +- * Filter (57)
                              :     :                    +- * ColumnarToRow (56)
                              :     :                       +- Scan parquet default.web_sales (55)
                              :     +- BroadcastExchange (67)
                              :        +- * Filter (66)
                              :           +- * ColumnarToRow (65)
                              :              +- Scan parquet default.web_site (64)
                              +- ReusedExchange (70)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cast(ss_sold_date_sk#4 as bigint)), dynamicpruningexpression(cast(ss_sold_date_sk#4 as bigint) IN dynamicpruning#5)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(cast(ss_store_sk#1 as bigint))

(4) Project [codegen id : 1]
Output [6]: [cast(ss_store_sk#1 as bigint) AS store_sk#6, cast(ss_sold_date_sk#4 as bigint) AS date_sk#7, ss_ext_sales_price#2 AS sales_price#8, ss_net_profit#3 AS profit#9, 0.00 AS return_amt#10, 0.00 AS net_loss#11]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) Scan parquet default.store_returns
Output [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#15), dynamicpruningexpression(sr_returned_date_sk#15 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(7) Filter [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Condition : isnotnull(sr_store_sk#12)

(8) Project [codegen id : 2]
Output [6]: [sr_store_sk#12 AS store_sk#16, sr_returned_date_sk#15 AS date_sk#17, 0.00 AS sales_price#18, 0.00 AS profit#19, sr_return_amt#13 AS return_amt#20, sr_net_loss#14 AS net_loss#21]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(9) Union

(10) Scan parquet default.store
Output [2]: [s_store_sk#22, s_store_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(11) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#22, s_store_id#23]

(12) Filter [codegen id : 3]
Input [2]: [s_store_sk#22, s_store_id#23]
Condition : isnotnull(s_store_sk#22)

(13) BroadcastExchange
Input [2]: [s_store_sk#22, s_store_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [store_sk#6]
Right keys [1]: [cast(s_store_sk#22 as bigint)]
Join condition: None

(15) Project [codegen id : 5]
Output [6]: [date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Input [8]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_sk#22, s_store_id#23]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#25, d_date#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-23), LessThanOrEqual(d_date,2000-09-06), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#25, d_date#26]

(18) Filter [codegen id : 4]
Input [2]: [d_date_sk#25, d_date#26]
Condition : (((isnotnull(d_date#26) AND (d_date#26 >= 2000-08-23)) AND (d_date#26 <= 2000-09-06)) AND isnotnull(d_date_sk#25))

(19) Project [codegen id : 4]
Output [1]: [d_date_sk#25]
Input [2]: [d_date_sk#25, d_date#26]

(20) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [date_sk#7]
Right keys [1]: [cast(d_date_sk#25 as bigint)]
Join condition: None

(22) Project [codegen id : 5]
Output [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Input [7]: [date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23, d_date_sk#25]

(23) HashAggregate [codegen id : 5]
Input [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Keys [1]: [s_store_id#23]
Functions [4]: [partial_sum(UnscaledValue(sales_price#8)), partial_sum(UnscaledValue(return_amt#10)), partial_sum(UnscaledValue(profit#9)), partial_sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum#28, sum#29, sum#30, sum#31]
Results [5]: [s_store_id#23, sum#32, sum#33, sum#34, sum#35]

(24) Exchange
Input [5]: [s_store_id#23, sum#32, sum#33, sum#34, sum#35]
Arguments: hashpartitioning(s_store_id#23, 5), ENSURE_REQUIREMENTS, [id=#36]

(25) HashAggregate [codegen id : 6]
Input [5]: [s_store_id#23, sum#32, sum#33, sum#34, sum#35]
Keys [1]: [s_store_id#23]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#37, sum(UnscaledValue(return_amt#10))#38, sum(UnscaledValue(profit#9))#39, sum(UnscaledValue(net_loss#11))#40]
Results [5]: [MakeDecimal(sum(UnscaledValue(sales_price#8))#37,17,2) AS sales#41, MakeDecimal(sum(UnscaledValue(return_amt#10))#38,17,2) AS RETURNS#42, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#9))#39,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#11))#40,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#43, store channel AS channel#44, concat(store, s_store_id#23) AS id#45]

(26) Scan parquet default.catalog_sales
Output [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#49), dynamicpruningexpression(cs_sold_date_sk#49 IN dynamicpruning#50)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]

(28) Filter [codegen id : 7]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]
Condition : isnotnull(cs_catalog_page_sk#46)

(29) Project [codegen id : 7]
Output [6]: [cs_catalog_page_sk#46 AS page_sk#51, cs_sold_date_sk#49 AS date_sk#52, cs_ext_sales_price#47 AS sales_price#53, cs_net_profit#48 AS profit#54, 0.00 AS return_amt#55, 0.00 AS net_loss#56]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]

(30) Scan parquet default.catalog_returns
Output [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#60), dynamicpruningexpression(cr_returned_date_sk#60 IN dynamicpruning#50)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(31) ColumnarToRow [codegen id : 8]
Input [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]

(32) Filter [codegen id : 8]
Input [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]
Condition : isnotnull(cr_catalog_page_sk#57)

(33) Project [codegen id : 8]
Output [6]: [cr_catalog_page_sk#57 AS page_sk#61, cr_returned_date_sk#60 AS date_sk#62, 0.00 AS sales_price#63, 0.00 AS profit#64, cr_return_amount#58 AS return_amt#65, cr_net_loss#59 AS net_loss#66]
Input [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]

(34) Union

(35) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#67, cp_catalog_page_id#68]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(36) ColumnarToRow [codegen id : 9]
Input [2]: [cp_catalog_page_sk#67, cp_catalog_page_id#68]

(37) Filter [codegen id : 9]
Input [2]: [cp_catalog_page_sk#67, cp_catalog_page_id#68]
Condition : isnotnull(cp_catalog_page_sk#67)

(38) BroadcastExchange
Input [2]: [cp_catalog_page_sk#67, cp_catalog_page_id#68]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69]

(39) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [page_sk#51]
Right keys [1]: [cp_catalog_page_sk#67]
Join condition: None

(40) Project [codegen id : 11]
Output [6]: [date_sk#52, sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_id#68]
Input [8]: [page_sk#51, date_sk#52, sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_sk#67, cp_catalog_page_id#68]

(41) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#70]

(42) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [date_sk#52]
Right keys [1]: [d_date_sk#70]
Join condition: None

(43) Project [codegen id : 11]
Output [5]: [sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_id#68]
Input [7]: [date_sk#52, sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_id#68, d_date_sk#70]

(44) HashAggregate [codegen id : 11]
Input [5]: [sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_id#68]
Keys [1]: [cp_catalog_page_id#68]
Functions [4]: [partial_sum(UnscaledValue(sales_price#53)), partial_sum(UnscaledValue(return_amt#55)), partial_sum(UnscaledValue(profit#54)), partial_sum(UnscaledValue(net_loss#56))]
Aggregate Attributes [4]: [sum#71, sum#72, sum#73, sum#74]
Results [5]: [cp_catalog_page_id#68, sum#75, sum#76, sum#77, sum#78]

(45) Exchange
Input [5]: [cp_catalog_page_id#68, sum#75, sum#76, sum#77, sum#78]
Arguments: hashpartitioning(cp_catalog_page_id#68, 5), ENSURE_REQUIREMENTS, [id=#79]

(46) HashAggregate [codegen id : 12]
Input [5]: [cp_catalog_page_id#68, sum#75, sum#76, sum#77, sum#78]
Keys [1]: [cp_catalog_page_id#68]
Functions [4]: [sum(UnscaledValue(sales_price#53)), sum(UnscaledValue(return_amt#55)), sum(UnscaledValue(profit#54)), sum(UnscaledValue(net_loss#56))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#53))#80, sum(UnscaledValue(return_amt#55))#81, sum(UnscaledValue(profit#54))#82, sum(UnscaledValue(net_loss#56))#83]
Results [5]: [MakeDecimal(sum(UnscaledValue(sales_price#53))#80,17,2) AS sales#84, MakeDecimal(sum(UnscaledValue(return_amt#55))#81,17,2) AS RETURNS#85, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#54))#82,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#56))#83,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#86, catalog channel AS channel#87, concat(catalog_page, cp_catalog_page_id#68) AS id#88]

(47) Scan parquet default.web_sales
Output [4]: [ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cast(ws_sold_date_sk#92 as bigint)), dynamicpruningexpression(cast(ws_sold_date_sk#92 as bigint) IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(48) ColumnarToRow [codegen id : 13]
Input [4]: [ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]

(49) Filter [codegen id : 13]
Input [4]: [ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Condition : isnotnull(ws_web_site_sk#89)

(50) Project [codegen id : 13]
Output [6]: [ws_web_site_sk#89 AS wsr_web_site_sk#93, cast(ws_sold_date_sk#92 as bigint) AS date_sk#94, ws_ext_sales_price#90 AS sales_price#95, ws_net_profit#91 AS profit#96, 0.00 AS return_amt#97, 0.00 AS net_loss#98]
Input [4]: [ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]

(51) Scan parquet default.web_returns
Output [5]: [wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102, wr_returned_date_sk#103]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#103), dynamicpruningexpression(wr_returned_date_sk#103 IN dynamicpruning#5)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(52) ColumnarToRow [codegen id : 14]
Input [5]: [wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102, wr_returned_date_sk#103]

(53) Exchange
Input [5]: [wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102, wr_returned_date_sk#103]
Arguments: hashpartitioning(wr_item_sk#99, wr_order_number#100, 5), ENSURE_REQUIREMENTS, [id=#104]

(54) Sort [codegen id : 15]
Input [5]: [wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102, wr_returned_date_sk#103]
Arguments: [wr_item_sk#99 ASC NULLS FIRST, wr_order_number#100 ASC NULLS FIRST], false, 0

(55) Scan parquet default.web_sales
Output [4]: [ws_item_sk#105, ws_web_site_sk#106, ws_order_number#107, ws_sold_date_sk#108]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(56) ColumnarToRow [codegen id : 16]
Input [4]: [ws_item_sk#105, ws_web_site_sk#106, ws_order_number#107, ws_sold_date_sk#108]

(57) Filter [codegen id : 16]
Input [4]: [ws_item_sk#105, ws_web_site_sk#106, ws_order_number#107, ws_sold_date_sk#108]
Condition : ((isnotnull(ws_item_sk#105) AND isnotnull(ws_order_number#107)) AND isnotnull(ws_web_site_sk#106))

(58) Project [codegen id : 16]
Output [3]: [ws_item_sk#105, ws_web_site_sk#106, ws_order_number#107]
Input [4]: [ws_item_sk#105, ws_web_site_sk#106, ws_order_number#107, ws_sold_date_sk#108]

(59) Exchange
Input [3]: [ws_item_sk#105, ws_web_site_sk#106, ws_order_number#107]
Arguments: hashpartitioning(cast(ws_item_sk#105 as bigint), cast(ws_order_number#107 as bigint), 5), ENSURE_REQUIREMENTS, [id=#109]

(60) Sort [codegen id : 17]
Input [3]: [ws_item_sk#105, ws_web_site_sk#106, ws_order_number#107]
Arguments: [cast(ws_item_sk#105 as bigint) ASC NULLS FIRST, cast(ws_order_number#107 as bigint) ASC NULLS FIRST], false, 0

(61) SortMergeJoin [codegen id : 18]
Left keys [2]: [wr_item_sk#99, wr_order_number#100]
Right keys [2]: [cast(ws_item_sk#105 as bigint), cast(ws_order_number#107 as bigint)]
Join condition: None

(62) Project [codegen id : 18]
Output [6]: [ws_web_site_sk#106 AS wsr_web_site_sk#110, wr_returned_date_sk#103 AS date_sk#111, 0.00 AS sales_price#112, 0.00 AS profit#113, wr_return_amt#101 AS return_amt#114, wr_net_loss#102 AS net_loss#115]
Input [8]: [wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102, wr_returned_date_sk#103, ws_item_sk#105, ws_web_site_sk#106, ws_order_number#107]

(63) Union

(64) Scan parquet default.web_site
Output [2]: [web_site_sk#116, web_site_id#117]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(65) ColumnarToRow [codegen id : 19]
Input [2]: [web_site_sk#116, web_site_id#117]

(66) Filter [codegen id : 19]
Input [2]: [web_site_sk#116, web_site_id#117]
Condition : isnotnull(web_site_sk#116)

(67) BroadcastExchange
Input [2]: [web_site_sk#116, web_site_id#117]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#118]

(68) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [wsr_web_site_sk#93]
Right keys [1]: [web_site_sk#116]
Join condition: None

(69) Project [codegen id : 21]
Output [6]: [date_sk#94, sales_price#95, profit#96, return_amt#97, net_loss#98, web_site_id#117]
Input [8]: [wsr_web_site_sk#93, date_sk#94, sales_price#95, profit#96, return_amt#97, net_loss#98, web_site_sk#116, web_site_id#117]

(70) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#119]

(71) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [date_sk#94]
Right keys [1]: [cast(d_date_sk#119 as bigint)]
Join condition: None

(72) Project [codegen id : 21]
Output [5]: [sales_price#95, profit#96, return_amt#97, net_loss#98, web_site_id#117]
Input [7]: [date_sk#94, sales_price#95, profit#96, return_amt#97, net_loss#98, web_site_id#117, d_date_sk#119]

(73) HashAggregate [codegen id : 21]
Input [5]: [sales_price#95, profit#96, return_amt#97, net_loss#98, web_site_id#117]
Keys [1]: [web_site_id#117]
Functions [4]: [partial_sum(UnscaledValue(sales_price#95)), partial_sum(UnscaledValue(return_amt#97)), partial_sum(UnscaledValue(profit#96)), partial_sum(UnscaledValue(net_loss#98))]
Aggregate Attributes [4]: [sum#120, sum#121, sum#122, sum#123]
Results [5]: [web_site_id#117, sum#124, sum#125, sum#126, sum#127]

(74) Exchange
Input [5]: [web_site_id#117, sum#124, sum#125, sum#126, sum#127]
Arguments: hashpartitioning(web_site_id#117, 5), ENSURE_REQUIREMENTS, [id=#128]

(75) HashAggregate [codegen id : 22]
Input [5]: [web_site_id#117, sum#124, sum#125, sum#126, sum#127]
Keys [1]: [web_site_id#117]
Functions [4]: [sum(UnscaledValue(sales_price#95)), sum(UnscaledValue(return_amt#97)), sum(UnscaledValue(profit#96)), sum(UnscaledValue(net_loss#98))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#95))#129, sum(UnscaledValue(return_amt#97))#130, sum(UnscaledValue(profit#96))#131, sum(UnscaledValue(net_loss#98))#132]
Results [5]: [MakeDecimal(sum(UnscaledValue(sales_price#95))#129,17,2) AS sales#133, MakeDecimal(sum(UnscaledValue(return_amt#97))#130,17,2) AS RETURNS#134, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#96))#131,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#98))#132,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#135, web channel AS channel#136, concat(web_site, web_site_id#117) AS id#137]

(76) Union

(77) Expand [codegen id : 23]
Input [5]: [sales#41, RETURNS#42, profit#43, channel#44, id#45]
Arguments: [List(sales#41, returns#42, profit#43, channel#44, id#45, 0), List(sales#41, returns#42, profit#43, channel#44, null, 1), List(sales#41, returns#42, profit#43, null, null, 3)], [sales#41, returns#42, profit#43, channel#138, id#139, spark_grouping_id#140]

(78) HashAggregate [codegen id : 23]
Input [6]: [sales#41, returns#42, profit#43, channel#138, id#139, spark_grouping_id#140]
Keys [3]: [channel#138, id#139, spark_grouping_id#140]
Functions [3]: [partial_sum(sales#41), partial_sum(returns#42), partial_sum(profit#43)]
Aggregate Attributes [6]: [sum#141, isEmpty#142, sum#143, isEmpty#144, sum#145, isEmpty#146]
Results [9]: [channel#138, id#139, spark_grouping_id#140, sum#147, isEmpty#148, sum#149, isEmpty#150, sum#151, isEmpty#152]

(79) Exchange
Input [9]: [channel#138, id#139, spark_grouping_id#140, sum#147, isEmpty#148, sum#149, isEmpty#150, sum#151, isEmpty#152]
Arguments: hashpartitioning(channel#138, id#139, spark_grouping_id#140, 5), ENSURE_REQUIREMENTS, [id=#153]

(80) HashAggregate [codegen id : 24]
Input [9]: [channel#138, id#139, spark_grouping_id#140, sum#147, isEmpty#148, sum#149, isEmpty#150, sum#151, isEmpty#152]
Keys [3]: [channel#138, id#139, spark_grouping_id#140]
Functions [3]: [sum(sales#41), sum(returns#42), sum(profit#43)]
Aggregate Attributes [3]: [sum(sales#41)#154, sum(returns#42)#155, sum(profit#43)#156]
Results [5]: [channel#138, id#139, sum(sales#41)#154 AS sales#157, sum(returns#42)#155 AS returns#158, sum(profit#43)#156 AS profit#159]

(81) TakeOrderedAndProject
Input [5]: [channel#138, id#139, sales#157, returns#158, profit#159]
Arguments: 100, [channel#138 ASC NULLS FIRST, id#139 ASC NULLS FIRST], [channel#138, id#139, sales#157, returns#158, profit#159]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cast(ss_sold_date_sk#4 as bigint) IN dynamicpruning#5
ReusedExchange (82)


(82) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#25]

Subquery:2 Hosting operator id = 5 Hosting Expression = sr_returned_date_sk#15 IN dynamicpruning#5

Subquery:3 Hosting operator id = 26 Hosting Expression = cs_sold_date_sk#49 IN dynamicpruning#50
ReusedExchange (83)


(83) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#70]

Subquery:4 Hosting operator id = 30 Hosting Expression = cr_returned_date_sk#60 IN dynamicpruning#50

Subquery:5 Hosting operator id = 47 Hosting Expression = cast(ws_sold_date_sk#92 as bigint) IN dynamicpruning#5

Subquery:6 Hosting operator id = 51 Hosting Expression = wr_returned_date_sk#103 IN dynamicpruning#5


