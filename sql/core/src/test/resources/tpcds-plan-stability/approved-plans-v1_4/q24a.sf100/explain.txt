== Physical Plan ==
* Filter (49)
+- * HashAggregate (48)
   +- Exchange (47)
      +- * HashAggregate (46)
         +- * HashAggregate (45)
            +- Exchange (44)
               +- * HashAggregate (43)
                  +- * Project (42)
                     +- * BroadcastHashJoin Inner BuildRight (41)
                        :- * Project (29)
                        :  +- * SortMergeJoin Inner (28)
                        :     :- * Sort (21)
                        :     :  +- Exchange (20)
                        :     :     +- * Project (19)
                        :     :        +- * SortMergeJoin Inner (18)
                        :     :           :- * Sort (12)
                        :     :           :  +- Exchange (11)
                        :     :           :     +- * Project (10)
                        :     :           :        +- * BroadcastHashJoin Inner BuildRight (9)
                        :     :           :           :- * Project (4)
                        :     :           :           :  +- * Filter (3)
                        :     :           :           :     +- * ColumnarToRow (2)
                        :     :           :           :        +- Scan parquet default.store_sales (1)
                        :     :           :           +- BroadcastExchange (8)
                        :     :           :              +- * Filter (7)
                        :     :           :                 +- * ColumnarToRow (6)
                        :     :           :                    +- Scan parquet default.item (5)
                        :     :           +- * Sort (17)
                        :     :              +- Exchange (16)
                        :     :                 +- * Filter (15)
                        :     :                    +- * ColumnarToRow (14)
                        :     :                       +- Scan parquet default.customer (13)
                        :     +- * Sort (27)
                        :        +- Exchange (26)
                        :           +- * Project (25)
                        :              +- * Filter (24)
                        :                 +- * ColumnarToRow (23)
                        :                    +- Scan parquet default.store_returns (22)
                        +- BroadcastExchange (40)
                           +- * Project (39)
                              +- * BroadcastHashJoin Inner BuildLeft (38)
                                 :- BroadcastExchange (34)
                                 :  +- * Project (33)
                                 :     +- * Filter (32)
                                 :        +- * ColumnarToRow (31)
                                 :           +- Scan parquet default.store (30)
                                 +- * Filter (37)
                                    +- * ColumnarToRow (36)
                                       +- Scan parquet default.customer_address (35)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Project [codegen id : 2]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(5) Scan parquet default.item
Output [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(6) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]

(7) Filter [codegen id : 1]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Condition : ((isnotnull(i_color#10) AND (i_color#10 = pale                )) AND isnotnull(i_item_sk#7))

(8) BroadcastExchange
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(10) Project [codegen id : 2]
Output [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]

(11) Exchange
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#14]

(12) Sort [codegen id : 3]
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(15) Filter [codegen id : 4]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Condition : (isnotnull(c_customer_sk#15) AND isnotnull(c_birth_country#18))

(16) Exchange
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(c_customer_sk#15, 5), ENSURE_REQUIREMENTS, [id=#19]

(17) Sort [codegen id : 5]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [c_customer_sk#15 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join condition: None

(19) Project [codegen id : 6]
Output [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(20) Exchange
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#20]

(21) Sort [codegen id : 7]
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(22) Scan parquet default.store_returns
Output [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(23) ColumnarToRow [codegen id : 8]
Input [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]

(24) Filter [codegen id : 8]
Input [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]
Condition : (isnotnull(sr_ticket_number#22) AND isnotnull(sr_item_sk#21))

(25) Project [codegen id : 8]
Output [2]: [sr_item_sk#21, sr_ticket_number#22]
Input [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]

(26) Exchange
Input [2]: [sr_item_sk#21, sr_ticket_number#22]
Arguments: hashpartitioning(sr_ticket_number#22, sr_item_sk#21, 5), ENSURE_REQUIREMENTS, [id=#24]

(27) Sort [codegen id : 9]
Input [2]: [sr_item_sk#21, sr_ticket_number#22]
Arguments: [sr_ticket_number#22 ASC NULLS FIRST, sr_item_sk#21 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 12]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#22, sr_item_sk#21]
Join condition: None

(29) Project [codegen id : 12]
Output [10]: [ss_store_sk#3, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18, sr_item_sk#21, sr_ticket_number#22]

(30) Scan parquet default.store
Output [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(31) ColumnarToRow [codegen id : 10]
Input [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]

(32) Filter [codegen id : 10]
Input [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]
Condition : (((isnotnull(s_market_id#27) AND (s_market_id#27 = 8)) AND isnotnull(s_store_sk#25)) AND isnotnull(s_zip#29))

(33) Project [codegen id : 10]
Output [4]: [s_store_sk#25, s_store_name#26, s_state#28, s_zip#29]
Input [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]

(34) BroadcastExchange
Input [4]: [s_store_sk#25, s_store_name#26, s_state#28, s_zip#29]
Arguments: HashedRelationBroadcastMode(List(input[3, string, true]),false), [id=#30]

(35) Scan parquet default.customer_address
Output [3]: [ca_state#31, ca_zip#32, ca_country#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(36) ColumnarToRow
Input [3]: [ca_state#31, ca_zip#32, ca_country#33]

(37) Filter
Input [3]: [ca_state#31, ca_zip#32, ca_country#33]
Condition : (isnotnull(ca_country#33) AND isnotnull(ca_zip#32))

(38) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [s_zip#29]
Right keys [1]: [ca_zip#32]
Join condition: None

(39) Project [codegen id : 11]
Output [5]: [s_store_sk#25, s_store_name#26, s_state#28, ca_state#31, ca_country#33]
Input [7]: [s_store_sk#25, s_store_name#26, s_state#28, s_zip#29, ca_state#31, ca_zip#32, ca_country#33]

(40) BroadcastExchange
Input [5]: [s_store_sk#25, s_store_name#26, s_state#28, ca_state#31, ca_country#33]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], upper(input[4, string, true])),false), [id=#34]

(41) BroadcastHashJoin [codegen id : 12]
Left keys [2]: [ss_store_sk#3, c_birth_country#18]
Right keys [2]: [s_store_sk#25, upper(ca_country#33)]
Join condition: None

(42) Project [codegen id : 12]
Output [11]: [ss_net_paid#5, s_store_name#26, s_state#28, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#31]
Input [15]: [ss_store_sk#3, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18, s_store_sk#25, s_store_name#26, s_state#28, ca_state#31, ca_country#33]

(43) HashAggregate [codegen id : 12]
Input [11]: [ss_net_paid#5, s_store_name#26, s_state#28, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#31]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#35]
Results [11]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#36]

(44) Exchange
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#36]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, 5), ENSURE_REQUIREMENTS, [id=#37]

(45) HashAggregate [codegen id : 13]
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#36]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#38]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#26, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#38,17,2) AS netpaid#39]

(46) HashAggregate [codegen id : 13]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#26, netpaid#39]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#26]
Functions [1]: [partial_sum(netpaid#39)]
Aggregate Attributes [2]: [sum#40, isEmpty#41]
Results [5]: [c_last_name#17, c_first_name#16, s_store_name#26, sum#42, isEmpty#43]

(47) Exchange
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#26, sum#42, isEmpty#43]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#26, 5), ENSURE_REQUIREMENTS, [id=#44]

(48) HashAggregate [codegen id : 14]
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#26, sum#42, isEmpty#43]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#26]
Functions [1]: [sum(netpaid#39)]
Aggregate Attributes [1]: [sum(netpaid#39)#45]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#26, sum(netpaid#39)#45 AS paid#46]

(49) Filter [codegen id : 14]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#26, paid#46]
Condition : (isnotnull(paid#46) AND (cast(paid#46 as decimal(33,8)) > cast(Subquery scalar-subquery#47, [id=#48] as decimal(33,8))))

===== Subqueries =====

Subquery:1 Hosting operator id = 49 Hosting Expression = Subquery scalar-subquery#47, [id=#48]
* HashAggregate (103)
+- Exchange (102)
   +- * HashAggregate (101)
      +- * HashAggregate (100)
         +- Exchange (99)
            +- * HashAggregate (98)
               +- * Project (97)
                  +- * SortMergeJoin Inner (96)
                     :- * Sort (90)
                     :  +- Exchange (89)
                     :     +- * Project (88)
                     :        +- * SortMergeJoin Inner (87)
                     :           :- * Sort (80)
                     :           :  +- Exchange (79)
                     :           :     +- * Project (78)
                     :           :        +- * SortMergeJoin Inner (77)
                     :           :           :- * Sort (71)
                     :           :           :  +- Exchange (70)
                     :           :           :     +- * Project (69)
                     :           :           :        +- * SortMergeJoin Inner (68)
                     :           :           :           :- * Sort (62)
                     :           :           :           :  +- Exchange (61)
                     :           :           :           :     +- * Project (60)
                     :           :           :           :        +- * BroadcastHashJoin Inner BuildRight (59)
                     :           :           :           :           :- * Project (53)
                     :           :           :           :           :  +- * Filter (52)
                     :           :           :           :           :     +- * ColumnarToRow (51)
                     :           :           :           :           :        +- Scan parquet default.store_sales (50)
                     :           :           :           :           +- BroadcastExchange (58)
                     :           :           :           :              +- * Project (57)
                     :           :           :           :                 +- * Filter (56)
                     :           :           :           :                    +- * ColumnarToRow (55)
                     :           :           :           :                       +- Scan parquet default.store (54)
                     :           :           :           +- * Sort (67)
                     :           :           :              +- Exchange (66)
                     :           :           :                 +- * Filter (65)
                     :           :           :                    +- * ColumnarToRow (64)
                     :           :           :                       +- Scan parquet default.item (63)
                     :           :           +- * Sort (76)
                     :           :              +- Exchange (75)
                     :           :                 +- * Filter (74)
                     :           :                    +- * ColumnarToRow (73)
                     :           :                       +- Scan parquet default.customer (72)
                     :           +- * Sort (86)
                     :              +- Exchange (85)
                     :                 +- * Project (84)
                     :                    +- * Filter (83)
                     :                       +- * ColumnarToRow (82)
                     :                          +- Scan parquet default.store_returns (81)
                     +- * Sort (95)
                        +- Exchange (94)
                           +- * Filter (93)
                              +- * ColumnarToRow (92)
                                 +- Scan parquet default.customer_address (91)


(50) Scan parquet default.store_sales
Output [6]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, ss_sold_date_sk#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(51) ColumnarToRow [codegen id : 2]
Input [6]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, ss_sold_date_sk#54]

(52) Filter [codegen id : 2]
Input [6]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, ss_sold_date_sk#54]
Condition : (((isnotnull(ss_ticket_number#52) AND isnotnull(ss_item_sk#49)) AND isnotnull(ss_store_sk#51)) AND isnotnull(ss_customer_sk#50))

(53) Project [codegen id : 2]
Output [5]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53]
Input [6]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, ss_sold_date_sk#54]

(54) Scan parquet default.store
Output [5]: [s_store_sk#55, s_store_name#56, s_market_id#57, s_state#58, s_zip#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(55) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#55, s_store_name#56, s_market_id#57, s_state#58, s_zip#59]

(56) Filter [codegen id : 1]
Input [5]: [s_store_sk#55, s_store_name#56, s_market_id#57, s_state#58, s_zip#59]
Condition : (((isnotnull(s_market_id#57) AND (s_market_id#57 = 8)) AND isnotnull(s_store_sk#55)) AND isnotnull(s_zip#59))

(57) Project [codegen id : 1]
Output [4]: [s_store_sk#55, s_store_name#56, s_state#58, s_zip#59]
Input [5]: [s_store_sk#55, s_store_name#56, s_market_id#57, s_state#58, s_zip#59]

(58) BroadcastExchange
Input [4]: [s_store_sk#55, s_store_name#56, s_state#58, s_zip#59]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#60]

(59) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#51]
Right keys [1]: [s_store_sk#55]
Join condition: None

(60) Project [codegen id : 2]
Output [7]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59]
Input [9]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, s_store_sk#55, s_store_name#56, s_state#58, s_zip#59]

(61) Exchange
Input [7]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59]
Arguments: hashpartitioning(ss_item_sk#49, 5), ENSURE_REQUIREMENTS, [id=#61]

(62) Sort [codegen id : 3]
Input [7]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59]
Arguments: [ss_item_sk#49 ASC NULLS FIRST], false, 0

(63) Scan parquet default.item
Output [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(64) ColumnarToRow [codegen id : 4]
Input [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]

(65) Filter [codegen id : 4]
Input [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Condition : isnotnull(i_item_sk#62)

(66) Exchange
Input [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Arguments: hashpartitioning(i_item_sk#62, 5), ENSURE_REQUIREMENTS, [id=#68]

(67) Sort [codegen id : 5]
Input [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Arguments: [i_item_sk#62 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#49]
Right keys [1]: [i_item_sk#62]
Join condition: None

(69) Project [codegen id : 6]
Output [12]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Input [13]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]

(70) Exchange
Input [12]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Arguments: hashpartitioning(ss_customer_sk#50, 5), ENSURE_REQUIREMENTS, [id=#69]

(71) Sort [codegen id : 7]
Input [12]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Arguments: [ss_customer_sk#50 ASC NULLS FIRST], false, 0

(72) Scan parquet default.customer
Output [4]: [c_customer_sk#70, c_first_name#71, c_last_name#72, c_birth_country#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(73) ColumnarToRow [codegen id : 8]
Input [4]: [c_customer_sk#70, c_first_name#71, c_last_name#72, c_birth_country#73]

(74) Filter [codegen id : 8]
Input [4]: [c_customer_sk#70, c_first_name#71, c_last_name#72, c_birth_country#73]
Condition : (isnotnull(c_customer_sk#70) AND isnotnull(c_birth_country#73))

(75) Exchange
Input [4]: [c_customer_sk#70, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: hashpartitioning(c_customer_sk#70, 5), ENSURE_REQUIREMENTS, [id=#74]

(76) Sort [codegen id : 9]
Input [4]: [c_customer_sk#70, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: [c_customer_sk#70 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_customer_sk#50]
Right keys [1]: [c_customer_sk#70]
Join condition: None

(78) Project [codegen id : 10]
Output [14]: [ss_item_sk#49, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Input [16]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_customer_sk#70, c_first_name#71, c_last_name#72, c_birth_country#73]

(79) Exchange
Input [14]: [ss_item_sk#49, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: hashpartitioning(ss_ticket_number#52, ss_item_sk#49, 5), ENSURE_REQUIREMENTS, [id=#75]

(80) Sort [codegen id : 11]
Input [14]: [ss_item_sk#49, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: [ss_ticket_number#52 ASC NULLS FIRST, ss_item_sk#49 ASC NULLS FIRST], false, 0

(81) Scan parquet default.store_returns
Output [3]: [sr_item_sk#76, sr_ticket_number#77, sr_returned_date_sk#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(82) ColumnarToRow [codegen id : 12]
Input [3]: [sr_item_sk#76, sr_ticket_number#77, sr_returned_date_sk#78]

(83) Filter [codegen id : 12]
Input [3]: [sr_item_sk#76, sr_ticket_number#77, sr_returned_date_sk#78]
Condition : (isnotnull(sr_ticket_number#77) AND isnotnull(sr_item_sk#76))

(84) Project [codegen id : 12]
Output [2]: [sr_item_sk#76, sr_ticket_number#77]
Input [3]: [sr_item_sk#76, sr_ticket_number#77, sr_returned_date_sk#78]

(85) Exchange
Input [2]: [sr_item_sk#76, sr_ticket_number#77]
Arguments: hashpartitioning(sr_ticket_number#77, sr_item_sk#76, 5), ENSURE_REQUIREMENTS, [id=#79]

(86) Sort [codegen id : 13]
Input [2]: [sr_item_sk#76, sr_ticket_number#77]
Arguments: [sr_ticket_number#77 ASC NULLS FIRST, sr_item_sk#76 ASC NULLS FIRST], false, 0

(87) SortMergeJoin [codegen id : 14]
Left keys [2]: [ss_ticket_number#52, ss_item_sk#49]
Right keys [2]: [sr_ticket_number#77, sr_item_sk#76]
Join condition: None

(88) Project [codegen id : 14]
Output [12]: [ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Input [16]: [ss_item_sk#49, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73, sr_item_sk#76, sr_ticket_number#77]

(89) Exchange
Input [12]: [ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: hashpartitioning(c_birth_country#73, s_zip#59, 5), ENSURE_REQUIREMENTS, [id=#80]

(90) Sort [codegen id : 15]
Input [12]: [ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: [c_birth_country#73 ASC NULLS FIRST, s_zip#59 ASC NULLS FIRST], false, 0

(91) Scan parquet default.customer_address
Output [3]: [ca_state#81, ca_zip#82, ca_country#83]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(92) ColumnarToRow [codegen id : 16]
Input [3]: [ca_state#81, ca_zip#82, ca_country#83]

(93) Filter [codegen id : 16]
Input [3]: [ca_state#81, ca_zip#82, ca_country#83]
Condition : (isnotnull(ca_country#83) AND isnotnull(ca_zip#82))

(94) Exchange
Input [3]: [ca_state#81, ca_zip#82, ca_country#83]
Arguments: hashpartitioning(upper(ca_country#83), ca_zip#82, 5), ENSURE_REQUIREMENTS, [id=#84]

(95) Sort [codegen id : 17]
Input [3]: [ca_state#81, ca_zip#82, ca_country#83]
Arguments: [upper(ca_country#83) ASC NULLS FIRST, ca_zip#82 ASC NULLS FIRST], false, 0

(96) SortMergeJoin [codegen id : 18]
Left keys [2]: [c_birth_country#73, s_zip#59]
Right keys [2]: [upper(ca_country#83), ca_zip#82]
Join condition: None

(97) Project [codegen id : 18]
Output [11]: [ss_net_paid#53, s_store_name#56, s_state#58, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, ca_state#81]
Input [15]: [ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73, ca_state#81, ca_zip#82, ca_country#83]

(98) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#53, s_store_name#56, s_state#58, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, ca_state#81]
Keys [10]: [c_last_name#72, c_first_name#71, s_store_name#56, ca_state#81, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#53))]
Aggregate Attributes [1]: [sum#85]
Results [11]: [c_last_name#72, c_first_name#71, s_store_name#56, ca_state#81, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64, sum#86]

(99) Exchange
Input [11]: [c_last_name#72, c_first_name#71, s_store_name#56, ca_state#81, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64, sum#86]
Arguments: hashpartitioning(c_last_name#72, c_first_name#71, s_store_name#56, ca_state#81, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64, 5), ENSURE_REQUIREMENTS, [id=#87]

(100) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#72, c_first_name#71, s_store_name#56, ca_state#81, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64, sum#86]
Keys [10]: [c_last_name#72, c_first_name#71, s_store_name#56, ca_state#81, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64]
Functions [1]: [sum(UnscaledValue(ss_net_paid#53))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#53))#88]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#53))#88,17,2) AS netpaid#39]

(101) HashAggregate [codegen id : 19]
Input [1]: [netpaid#39]
Keys: []
Functions [1]: [partial_avg(netpaid#39)]
Aggregate Attributes [2]: [sum#89, count#90]
Results [2]: [sum#91, count#92]

(102) Exchange
Input [2]: [sum#91, count#92]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#93]

(103) HashAggregate [codegen id : 20]
Input [2]: [sum#91, count#92]
Keys: []
Functions [1]: [avg(netpaid#39)]
Aggregate Attributes [1]: [avg(netpaid#39)#94]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#39)#94)), DecimalType(24,8), true) AS (0.05 * avg(netpaid))#95]


