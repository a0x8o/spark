== Physical Plan ==
TakeOrderedAndProject (32)
+- * HashAggregate (31)
   +- Exchange (30)
      +- * HashAggregate (29)
         +- * Project (28)
            +- * SortMergeJoin Inner (27)
               :- * Sort (20)
               :  +- Exchange (19)
               :     +- * Project (18)
               :        +- * BroadcastHashJoin Inner BuildRight (17)
               :           :- * Project (11)
               :           :  +- * BroadcastHashJoin Inner BuildLeft (10)
               :           :     :- BroadcastExchange (5)
               :           :     :  +- * Project (4)
               :           :     :     +- * Filter (3)
               :           :     :        +- * ColumnarToRow (2)
               :           :     :           +- Scan parquet default.item (1)
               :           :     +- * Project (9)
               :           :        +- * Filter (8)
               :           :           +- * ColumnarToRow (7)
               :           :              +- Scan parquet default.inventory (6)
               :           +- BroadcastExchange (16)
               :              +- * Project (15)
               :                 +- * Filter (14)
               :                    +- * ColumnarToRow (13)
               :                       +- Scan parquet default.date_dim (12)
               +- * Sort (26)
                  +- Exchange (25)
                     +- * Project (24)
                        +- * Filter (23)
                           +- * ColumnarToRow (22)
                              +- Scan parquet default.catalog_sales (21)


(1) Scan parquet default.item
Output [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,68.00), LessThanOrEqual(i_current_price,98.00), In(i_manufact_id, [677,940,694,808]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_id:int>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]

(3) Filter [codegen id : 1]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]
Condition : ((((isnotnull(i_current_price#4) AND (i_current_price#4 >= 68.00)) AND (i_current_price#4 <= 98.00)) AND i_manufact_id#5 IN (677,940,694,808)) AND isnotnull(i_item_sk#1))

(4) Project [codegen id : 1]
Output [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]

(5) BroadcastExchange
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(6) Scan parquet default.inventory
Output [3]: [inv_item_sk#7, inv_quantity_on_hand#8, inv_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#9), dynamicpruningexpression(inv_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(inv_quantity_on_hand,500), IsNotNull(inv_item_sk)]
ReadSchema: struct<inv_item_sk:int,inv_quantity_on_hand:int>

(7) ColumnarToRow
Input [3]: [inv_item_sk#7, inv_quantity_on_hand#8, inv_date_sk#9]

(8) Filter
Input [3]: [inv_item_sk#7, inv_quantity_on_hand#8, inv_date_sk#9]
Condition : (((isnotnull(inv_quantity_on_hand#8) AND (inv_quantity_on_hand#8 >= 100)) AND (inv_quantity_on_hand#8 <= 500)) AND isnotnull(inv_item_sk#7))

(9) Project
Output [2]: [inv_item_sk#7, inv_date_sk#9]
Input [3]: [inv_item_sk#7, inv_quantity_on_hand#8, inv_date_sk#9]

(10) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [inv_item_sk#7]
Join condition: None

(11) Project [codegen id : 3]
Output [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#9]
Input [6]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_item_sk#7, inv_date_sk#9]

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_date#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-01), LessThanOrEqual(d_date,2000-04-01), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(13) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#11, d_date#12]

(14) Filter [codegen id : 2]
Input [2]: [d_date_sk#11, d_date#12]
Condition : (((isnotnull(d_date#12) AND (d_date#12 >= 10988)) AND (d_date#12 <= 11048)) AND isnotnull(d_date_sk#11))

(15) Project [codegen id : 2]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_date#12]

(16) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(17) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(18) Project [codegen id : 3]
Output [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Input [6]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#9, d_date_sk#11]

(19) Exchange
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: hashpartitioning(i_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#14]

(20) Sort [codegen id : 4]
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: [i_item_sk#1 ASC NULLS FIRST], false, 0

(21) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(22) ColumnarToRow [codegen id : 5]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(23) Filter [codegen id : 5]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(24) Project [codegen id : 5]
Output [1]: [cs_item_sk#15]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(25) Exchange
Input [1]: [cs_item_sk#15]
Arguments: hashpartitioning(cs_item_sk#15, 5), ENSURE_REQUIREMENTS, [id=#17]

(26) Sort [codegen id : 6]
Input [1]: [cs_item_sk#15]
Arguments: [cs_item_sk#15 ASC NULLS FIRST], false, 0

(27) SortMergeJoin [codegen id : 7]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [cs_item_sk#15]
Join condition: None

(28) Project [codegen id : 7]
Output [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, cs_item_sk#15]

(29) HashAggregate [codegen id : 7]
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Keys [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]

(30) Exchange
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: hashpartitioning(i_item_id#2, i_item_desc#3, i_current_price#4, 5), ENSURE_REQUIREMENTS, [id=#18]

(31) HashAggregate [codegen id : 8]
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Keys [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]

(32) TakeOrderedAndProject
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: 100, [i_item_id#2 ASC NULLS FIRST], [i_item_id#2, i_item_desc#3, i_current_price#4]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = inv_date_sk#9 IN dynamicpruning#10
ReusedExchange (33)


(33) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#11]


