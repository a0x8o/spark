== Physical Plan ==
TakeOrderedAndProject (67)
+- * HashAggregate (66)
   +- Exchange (65)
      +- * HashAggregate (64)
         +- * HashAggregate (63)
            +- * HashAggregate (62)
               +- * Project (61)
                  +- * SortMergeJoin Inner (60)
                     :- * Sort (47)
                     :  +- * Project (46)
                     :     +- * BroadcastHashJoin Inner BuildLeft (45)
                     :        :- BroadcastExchange (10)
                     :        :  +- * Project (9)
                     :        :     +- * BroadcastHashJoin Inner BuildRight (8)
                     :        :        :- * Filter (3)
                     :        :        :  +- * ColumnarToRow (2)
                     :        :        :     +- Scan parquet default.customer_address (1)
                     :        :        +- BroadcastExchange (7)
                     :        :           +- * Filter (6)
                     :        :              +- * ColumnarToRow (5)
                     :        :                 +- Scan parquet default.store (4)
                     :        +- * HashAggregate (44)
                     :           +- * HashAggregate (43)
                     :              +- * Project (42)
                     :                 +- * SortMergeJoin Inner (41)
                     :                    :- * Sort (35)
                     :                    :  +- Exchange (34)
                     :                    :     +- * Project (33)
                     :                    :        +- * BroadcastHashJoin Inner BuildRight (32)
                     :                    :           :- * Project (26)
                     :                    :           :  +- * BroadcastHashJoin Inner BuildRight (25)
                     :                    :           :     :- Union (19)
                     :                    :           :     :  :- * Project (14)
                     :                    :           :     :  :  +- * Filter (13)
                     :                    :           :     :  :     +- * ColumnarToRow (12)
                     :                    :           :     :  :        +- Scan parquet default.catalog_sales (11)
                     :                    :           :     :  +- * Project (18)
                     :                    :           :     :     +- * Filter (17)
                     :                    :           :     :        +- * ColumnarToRow (16)
                     :                    :           :     :           +- Scan parquet default.web_sales (15)
                     :                    :           :     +- BroadcastExchange (24)
                     :                    :           :        +- * Project (23)
                     :                    :           :           +- * Filter (22)
                     :                    :           :              +- * ColumnarToRow (21)
                     :                    :           :                 +- Scan parquet default.date_dim (20)
                     :                    :           +- BroadcastExchange (31)
                     :                    :              +- * Project (30)
                     :                    :                 +- * Filter (29)
                     :                    :                    +- * ColumnarToRow (28)
                     :                    :                       +- Scan parquet default.item (27)
                     :                    +- * Sort (40)
                     :                       +- Exchange (39)
                     :                          +- * Filter (38)
                     :                             +- * ColumnarToRow (37)
                     :                                +- Scan parquet default.customer (36)
                     +- * Sort (59)
                        +- Exchange (58)
                           +- * Project (57)
                              +- * BroadcastHashJoin Inner BuildRight (56)
                                 :- * Filter (50)
                                 :  +- * ColumnarToRow (49)
                                 :     +- Scan parquet default.store_sales (48)
                                 +- BroadcastExchange (55)
                                    +- * Project (54)
                                       +- * Filter (53)
                                          +- * ColumnarToRow (52)
                                             +- Scan parquet default.date_dim (51)


(1) Scan parquet default.customer_address
Output [3]: [ca_address_sk#1, ca_county#2, ca_state#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ca_address_sk#1, ca_county#2, ca_state#3]

(3) Filter [codegen id : 2]
Input [3]: [ca_address_sk#1, ca_county#2, ca_state#3]
Condition : ((isnotnull(ca_address_sk#1) AND isnotnull(ca_county#2)) AND isnotnull(ca_state#3))

(4) Scan parquet default.store
Output [2]: [s_county#4, s_state#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)]
ReadSchema: struct<s_county:string,s_state:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [s_county#4, s_state#5]

(6) Filter [codegen id : 1]
Input [2]: [s_county#4, s_state#5]
Condition : (isnotnull(s_county#4) AND isnotnull(s_state#5))

(7) BroadcastExchange
Input [2]: [s_county#4, s_state#5]
Arguments: HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [id=#6]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [2]: [ca_county#2, ca_state#3]
Right keys [2]: [s_county#4, s_state#5]
Join condition: None

(9) Project [codegen id : 2]
Output [1]: [ca_address_sk#1]
Input [5]: [ca_address_sk#1, ca_county#2, ca_state#3, s_county#4, s_state#5]

(10) BroadcastExchange
Input [1]: [ca_address_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(11) Scan parquet default.catalog_sales
Output [3]: [cs_bill_customer_sk#8, cs_item_sk#9, cs_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#10), dynamicpruningexpression(cs_sold_date_sk#10 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>

(12) ColumnarToRow [codegen id : 3]
Input [3]: [cs_bill_customer_sk#8, cs_item_sk#9, cs_sold_date_sk#10]

(13) Filter [codegen id : 3]
Input [3]: [cs_bill_customer_sk#8, cs_item_sk#9, cs_sold_date_sk#10]
Condition : (isnotnull(cs_item_sk#9) AND isnotnull(cs_bill_customer_sk#8))

(14) Project [codegen id : 3]
Output [3]: [cs_sold_date_sk#10 AS sold_date_sk#12, cs_bill_customer_sk#8 AS customer_sk#13, cs_item_sk#9 AS item_sk#14]
Input [3]: [cs_bill_customer_sk#8, cs_item_sk#9, cs_sold_date_sk#10]

(15) Scan parquet default.web_sales
Output [3]: [ws_item_sk#15, ws_bill_customer_sk#16, ws_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#17), dynamicpruningexpression(ws_sold_date_sk#17 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>

(16) ColumnarToRow [codegen id : 4]
Input [3]: [ws_item_sk#15, ws_bill_customer_sk#16, ws_sold_date_sk#17]

(17) Filter [codegen id : 4]
Input [3]: [ws_item_sk#15, ws_bill_customer_sk#16, ws_sold_date_sk#17]
Condition : (isnotnull(ws_item_sk#15) AND isnotnull(ws_bill_customer_sk#16))

(18) Project [codegen id : 4]
Output [3]: [ws_sold_date_sk#17 AS sold_date_sk#18, ws_bill_customer_sk#16 AS customer_sk#19, ws_item_sk#15 AS item_sk#20]
Input [3]: [ws_item_sk#15, ws_bill_customer_sk#16, ws_sold_date_sk#17]

(19) Union

(20) Scan parquet default.date_dim
Output [3]: [d_date_sk#21, d_year#22, d_moy#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(21) ColumnarToRow [codegen id : 5]
Input [3]: [d_date_sk#21, d_year#22, d_moy#23]

(22) Filter [codegen id : 5]
Input [3]: [d_date_sk#21, d_year#22, d_moy#23]
Condition : ((((isnotnull(d_moy#23) AND isnotnull(d_year#22)) AND (d_moy#23 = 12)) AND (d_year#22 = 1998)) AND isnotnull(d_date_sk#21))

(23) Project [codegen id : 5]
Output [1]: [d_date_sk#21]
Input [3]: [d_date_sk#21, d_year#22, d_moy#23]

(24) BroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [sold_date_sk#12]
Right keys [1]: [d_date_sk#21]
Join condition: None

(26) Project [codegen id : 7]
Output [2]: [customer_sk#13, item_sk#14]
Input [4]: [sold_date_sk#12, customer_sk#13, item_sk#14, d_date_sk#21]

(27) Scan parquet default.item
Output [3]: [i_item_sk#25, i_class#26, i_category#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Women), EqualTo(i_class,maternity), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(28) ColumnarToRow [codegen id : 6]
Input [3]: [i_item_sk#25, i_class#26, i_category#27]

(29) Filter [codegen id : 6]
Input [3]: [i_item_sk#25, i_class#26, i_category#27]
Condition : ((((isnotnull(i_category#27) AND isnotnull(i_class#26)) AND (i_category#27 = Women)) AND (i_class#26 = maternity)) AND isnotnull(i_item_sk#25))

(30) Project [codegen id : 6]
Output [1]: [i_item_sk#25]
Input [3]: [i_item_sk#25, i_class#26, i_category#27]

(31) BroadcastExchange
Input [1]: [i_item_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(32) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [item_sk#14]
Right keys [1]: [i_item_sk#25]
Join condition: None

(33) Project [codegen id : 7]
Output [1]: [customer_sk#13]
Input [3]: [customer_sk#13, item_sk#14, i_item_sk#25]

(34) Exchange
Input [1]: [customer_sk#13]
Arguments: hashpartitioning(customer_sk#13, 5), ENSURE_REQUIREMENTS, [id=#29]

(35) Sort [codegen id : 8]
Input [1]: [customer_sk#13]
Arguments: [customer_sk#13 ASC NULLS FIRST], false, 0

(36) Scan parquet default.customer
Output [2]: [c_customer_sk#30, c_current_addr_sk#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [c_customer_sk#30, c_current_addr_sk#31]

(38) Filter [codegen id : 9]
Input [2]: [c_customer_sk#30, c_current_addr_sk#31]
Condition : (isnotnull(c_customer_sk#30) AND isnotnull(c_current_addr_sk#31))

(39) Exchange
Input [2]: [c_customer_sk#30, c_current_addr_sk#31]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#32]

(40) Sort [codegen id : 10]
Input [2]: [c_customer_sk#30, c_current_addr_sk#31]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [1]: [customer_sk#13]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(42) Project
Output [2]: [c_customer_sk#30, c_current_addr_sk#31]
Input [3]: [customer_sk#13, c_customer_sk#30, c_current_addr_sk#31]

(43) HashAggregate
Input [2]: [c_customer_sk#30, c_current_addr_sk#31]
Keys [2]: [c_customer_sk#30, c_current_addr_sk#31]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#30, c_current_addr_sk#31]

(44) HashAggregate
Input [2]: [c_customer_sk#30, c_current_addr_sk#31]
Keys [2]: [c_customer_sk#30, c_current_addr_sk#31]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#30, c_current_addr_sk#31]

(45) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [c_current_addr_sk#31]
Join condition: None

(46) Project [codegen id : 11]
Output [1]: [c_customer_sk#30]
Input [3]: [ca_address_sk#1, c_customer_sk#30, c_current_addr_sk#31]

(47) Sort [codegen id : 11]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(48) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#35), dynamicpruningexpression(ss_sold_date_sk#35 IN dynamicpruning#36)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>

(49) ColumnarToRow [codegen id : 13]
Input [3]: [ss_customer_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35]

(50) Filter [codegen id : 13]
Input [3]: [ss_customer_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35]
Condition : isnotnull(ss_customer_sk#33)

(51) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_month_seq#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(52) ColumnarToRow [codegen id : 12]
Input [2]: [d_date_sk#21, d_month_seq#37]

(53) Filter [codegen id : 12]
Input [2]: [d_date_sk#21, d_month_seq#37]
Condition : (((isnotnull(d_month_seq#37) AND (d_month_seq#37 >= Subquery scalar-subquery#38, [id=#39])) AND (d_month_seq#37 <= Subquery scalar-subquery#40, [id=#41])) AND isnotnull(d_date_sk#21))

(54) Project [codegen id : 12]
Output [1]: [d_date_sk#21]
Input [2]: [d_date_sk#21, d_month_seq#37]

(55) BroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(56) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#35]
Right keys [1]: [d_date_sk#21]
Join condition: None

(57) Project [codegen id : 13]
Output [2]: [ss_customer_sk#33, ss_ext_sales_price#34]
Input [4]: [ss_customer_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35, d_date_sk#21]

(58) Exchange
Input [2]: [ss_customer_sk#33, ss_ext_sales_price#34]
Arguments: hashpartitioning(ss_customer_sk#33, 5), ENSURE_REQUIREMENTS, [id=#43]

(59) Sort [codegen id : 14]
Input [2]: [ss_customer_sk#33, ss_ext_sales_price#34]
Arguments: [ss_customer_sk#33 ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [ss_customer_sk#33]
Join condition: None

(61) Project [codegen id : 15]
Output [2]: [c_customer_sk#30, ss_ext_sales_price#34]
Input [3]: [c_customer_sk#30, ss_customer_sk#33, ss_ext_sales_price#34]

(62) HashAggregate [codegen id : 15]
Input [2]: [c_customer_sk#30, ss_ext_sales_price#34]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#34))]
Aggregate Attributes [1]: [sum#44]
Results [2]: [c_customer_sk#30, sum#45]

(63) HashAggregate [codegen id : 15]
Input [2]: [c_customer_sk#30, sum#45]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#34))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#34))#46]
Results [1]: [cast(CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34))#46,17,2)) / 50.00), DecimalType(21,6), true) as int) AS segment#47]

(64) HashAggregate [codegen id : 15]
Input [1]: [segment#47]
Keys [1]: [segment#47]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#48]
Results [2]: [segment#47, count#49]

(65) Exchange
Input [2]: [segment#47, count#49]
Arguments: hashpartitioning(segment#47, 5), ENSURE_REQUIREMENTS, [id=#50]

(66) HashAggregate [codegen id : 16]
Input [2]: [segment#47, count#49]
Keys [1]: [segment#47]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#51]
Results [3]: [segment#47, count(1)#51 AS num_customers#52, (segment#47 * 50) AS segment_base#53]

(67) TakeOrderedAndProject
Input [3]: [segment#47, num_customers#52, segment_base#53]
Arguments: 100, [segment#47 ASC NULLS FIRST, num_customers#52 ASC NULLS FIRST], [segment#47, num_customers#52, segment_base#53]

===== Subqueries =====

Subquery:1 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#10 IN dynamicpruning#11
ReusedExchange (68)


(68) ReusedExchange [Reuses operator id: 24]
Output [1]: [d_date_sk#21]

Subquery:2 Hosting operator id = 15 Hosting Expression = ws_sold_date_sk#17 IN dynamicpruning#11

Subquery:3 Hosting operator id = 48 Hosting Expression = ss_sold_date_sk#35 IN dynamicpruning#36
ReusedExchange (69)


(69) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#21]

Subquery:4 Hosting operator id = 53 Hosting Expression = Subquery scalar-subquery#38, [id=#39]
* HashAggregate (76)
+- Exchange (75)
   +- * HashAggregate (74)
      +- * Project (73)
         +- * Filter (72)
            +- * ColumnarToRow (71)
               +- Scan parquet default.date_dim (70)


(70) Scan parquet default.date_dim
Output [3]: [d_month_seq#37, d_year#22, d_moy#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(71) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#37, d_year#22, d_moy#23]

(72) Filter [codegen id : 1]
Input [3]: [d_month_seq#37, d_year#22, d_moy#23]
Condition : (((isnotnull(d_year#22) AND isnotnull(d_moy#23)) AND (d_year#22 = 1998)) AND (d_moy#23 = 12))

(73) Project [codegen id : 1]
Output [1]: [(d_month_seq#37 + 1) AS (d_month_seq + 1)#54]
Input [3]: [d_month_seq#37, d_year#22, d_moy#23]

(74) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 1)#54]
Keys [1]: [(d_month_seq + 1)#54]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#54]

(75) Exchange
Input [1]: [(d_month_seq + 1)#54]
Arguments: hashpartitioning((d_month_seq + 1)#54, 5), ENSURE_REQUIREMENTS, [id=#55]

(76) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 1)#54]
Keys [1]: [(d_month_seq + 1)#54]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#54]

Subquery:5 Hosting operator id = 53 Hosting Expression = Subquery scalar-subquery#40, [id=#41]
* HashAggregate (83)
+- Exchange (82)
   +- * HashAggregate (81)
      +- * Project (80)
         +- * Filter (79)
            +- * ColumnarToRow (78)
               +- Scan parquet default.date_dim (77)


(77) Scan parquet default.date_dim
Output [3]: [d_month_seq#37, d_year#22, d_moy#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(78) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#37, d_year#22, d_moy#23]

(79) Filter [codegen id : 1]
Input [3]: [d_month_seq#37, d_year#22, d_moy#23]
Condition : (((isnotnull(d_year#22) AND isnotnull(d_moy#23)) AND (d_year#22 = 1998)) AND (d_moy#23 = 12))

(80) Project [codegen id : 1]
Output [1]: [(d_month_seq#37 + 3) AS (d_month_seq + 3)#56]
Input [3]: [d_month_seq#37, d_year#22, d_moy#23]

(81) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 3)#56]
Keys [1]: [(d_month_seq + 3)#56]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#56]

(82) Exchange
Input [1]: [(d_month_seq + 3)#56]
Arguments: hashpartitioning((d_month_seq + 3)#56, 5), ENSURE_REQUIREMENTS, [id=#57]

(83) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 3)#56]
Keys [1]: [(d_month_seq + 3)#56]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#56]


