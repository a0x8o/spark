== Physical Plan ==
* HashAggregate (71)
+- Exchange (70)
   +- * HashAggregate (69)
      +- * HashAggregate (68)
         +- Exchange (67)
            +- * HashAggregate (66)
               +- SortMergeJoin LeftAnti (65)
                  :- * Sort (47)
                  :  +- Exchange (46)
                  :     +- * HashAggregate (45)
                  :        +- Exchange (44)
                  :           +- * HashAggregate (43)
                  :              +- SortMergeJoin LeftAnti (42)
                  :                 :- * Sort (24)
                  :                 :  +- Exchange (23)
                  :                 :     +- * HashAggregate (22)
                  :                 :        +- Exchange (21)
                  :                 :           +- * HashAggregate (20)
                  :                 :              +- * Project (19)
                  :                 :                 +- * SortMergeJoin Inner (18)
                  :                 :                    :- * Sort (12)
                  :                 :                    :  +- Exchange (11)
                  :                 :                    :     +- * Project (10)
                  :                 :                    :        +- * BroadcastHashJoin Inner BuildRight (9)
                  :                 :                    :           :- * Filter (3)
                  :                 :                    :           :  +- * ColumnarToRow (2)
                  :                 :                    :           :     +- Scan parquet default.store_sales (1)
                  :                 :                    :           +- BroadcastExchange (8)
                  :                 :                    :              +- * Project (7)
                  :                 :                    :                 +- * Filter (6)
                  :                 :                    :                    +- * ColumnarToRow (5)
                  :                 :                    :                       +- Scan parquet default.date_dim (4)
                  :                 :                    +- * Sort (17)
                  :                 :                       +- Exchange (16)
                  :                 :                          +- * Filter (15)
                  :                 :                             +- * ColumnarToRow (14)
                  :                 :                                +- Scan parquet default.customer (13)
                  :                 +- * Sort (41)
                  :                    +- Exchange (40)
                  :                       +- * HashAggregate (39)
                  :                          +- Exchange (38)
                  :                             +- * HashAggregate (37)
                  :                                +- * Project (36)
                  :                                   +- * SortMergeJoin Inner (35)
                  :                                      :- * Sort (32)
                  :                                      :  +- Exchange (31)
                  :                                      :     +- * Project (30)
                  :                                      :        +- * BroadcastHashJoin Inner BuildRight (29)
                  :                                      :           :- * Filter (27)
                  :                                      :           :  +- * ColumnarToRow (26)
                  :                                      :           :     +- Scan parquet default.catalog_sales (25)
                  :                                      :           +- ReusedExchange (28)
                  :                                      +- * Sort (34)
                  :                                         +- ReusedExchange (33)
                  +- * Sort (64)
                     +- Exchange (63)
                        +- * HashAggregate (62)
                           +- Exchange (61)
                              +- * HashAggregate (60)
                                 +- * Project (59)
                                    +- * SortMergeJoin Inner (58)
                                       :- * Sort (55)
                                       :  +- Exchange (54)
                                       :     +- * Project (53)
                                       :        +- * BroadcastHashJoin Inner BuildRight (52)
                                       :           :- * Filter (50)
                                       :           :  +- * ColumnarToRow (49)
                                       :           :     +- Scan parquet default.web_sales (48)
                                       :           +- ReusedExchange (51)
                                       +- * Sort (57)
                                          +- ReusedExchange (56)


(1) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#2), dynamicpruningexpression(ss_sold_date_sk#2 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 2]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]

(3) Filter [codegen id : 2]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Condition : isnotnull(ss_customer_sk#1)

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#4))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#4, d_date#5]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]

(8) BroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#2]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [ss_customer_sk#1, d_date#5]
Input [4]: [ss_customer_sk#1, ss_sold_date_sk#2, d_date_sk#4, d_date#5]

(11) Exchange
Input [2]: [ss_customer_sk#1, d_date#5]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#8]

(12) Sort [codegen id : 3]
Input [2]: [ss_customer_sk#1, d_date#5]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [3]: [c_customer_sk#9, c_first_name#10, c_last_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(14) ColumnarToRow [codegen id : 4]
Input [3]: [c_customer_sk#9, c_first_name#10, c_last_name#11]

(15) Filter [codegen id : 4]
Input [3]: [c_customer_sk#9, c_first_name#10, c_last_name#11]
Condition : isnotnull(c_customer_sk#9)

(16) Exchange
Input [3]: [c_customer_sk#9, c_first_name#10, c_last_name#11]
Arguments: hashpartitioning(c_customer_sk#9, 5), ENSURE_REQUIREMENTS, [id=#12]

(17) Sort [codegen id : 5]
Input [3]: [c_customer_sk#9, c_first_name#10, c_last_name#11]
Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#9]
Join condition: None

(19) Project [codegen id : 6]
Output [3]: [c_last_name#11, c_first_name#10, d_date#5]
Input [5]: [ss_customer_sk#1, d_date#5, c_customer_sk#9, c_first_name#10, c_last_name#11]

(20) HashAggregate [codegen id : 6]
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#11, c_first_name#10, d_date#5]

(21) Exchange
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Arguments: hashpartitioning(c_last_name#11, c_first_name#10, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#13]

(22) HashAggregate [codegen id : 7]
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#11, c_first_name#10, d_date#5]

(23) Exchange
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Arguments: hashpartitioning(coalesce(c_last_name#11, ), isnull(c_last_name#11), coalesce(c_first_name#10, ), isnull(c_first_name#10), coalesce(d_date#5, 0), isnull(d_date#5), 5), ENSURE_REQUIREMENTS, [id=#14]

(24) Sort [codegen id : 8]
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Arguments: [coalesce(c_last_name#11, ) ASC NULLS FIRST, isnull(c_last_name#11) ASC NULLS FIRST, coalesce(c_first_name#10, ) ASC NULLS FIRST, isnull(c_first_name#10) ASC NULLS FIRST, coalesce(d_date#5, 0) ASC NULLS FIRST, isnull(d_date#5) ASC NULLS FIRST], false, 0

(25) Scan parquet default.catalog_sales
Output [2]: [cs_bill_customer_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int>

(26) ColumnarToRow [codegen id : 10]
Input [2]: [cs_bill_customer_sk#15, cs_sold_date_sk#16]

(27) Filter [codegen id : 10]
Input [2]: [cs_bill_customer_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_bill_customer_sk#15)

(28) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#17, d_date#18]

(29) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#17]
Join condition: None

(30) Project [codegen id : 10]
Output [2]: [cs_bill_customer_sk#15, d_date#18]
Input [4]: [cs_bill_customer_sk#15, cs_sold_date_sk#16, d_date_sk#17, d_date#18]

(31) Exchange
Input [2]: [cs_bill_customer_sk#15, d_date#18]
Arguments: hashpartitioning(cs_bill_customer_sk#15, 5), ENSURE_REQUIREMENTS, [id=#19]

(32) Sort [codegen id : 11]
Input [2]: [cs_bill_customer_sk#15, d_date#18]
Arguments: [cs_bill_customer_sk#15 ASC NULLS FIRST], false, 0

(33) ReusedExchange [Reuses operator id: 16]
Output [3]: [c_customer_sk#20, c_first_name#21, c_last_name#22]

(34) Sort [codegen id : 13]
Input [3]: [c_customer_sk#20, c_first_name#21, c_last_name#22]
Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 14]
Left keys [1]: [cs_bill_customer_sk#15]
Right keys [1]: [c_customer_sk#20]
Join condition: None

(36) Project [codegen id : 14]
Output [3]: [c_last_name#22, c_first_name#21, d_date#18]
Input [5]: [cs_bill_customer_sk#15, d_date#18, c_customer_sk#20, c_first_name#21, c_last_name#22]

(37) HashAggregate [codegen id : 14]
Input [3]: [c_last_name#22, c_first_name#21, d_date#18]
Keys [3]: [c_last_name#22, c_first_name#21, d_date#18]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#22, c_first_name#21, d_date#18]

(38) Exchange
Input [3]: [c_last_name#22, c_first_name#21, d_date#18]
Arguments: hashpartitioning(c_last_name#22, c_first_name#21, d_date#18, 5), ENSURE_REQUIREMENTS, [id=#23]

(39) HashAggregate [codegen id : 15]
Input [3]: [c_last_name#22, c_first_name#21, d_date#18]
Keys [3]: [c_last_name#22, c_first_name#21, d_date#18]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#22, c_first_name#21, d_date#18]

(40) Exchange
Input [3]: [c_last_name#22, c_first_name#21, d_date#18]
Arguments: hashpartitioning(coalesce(c_last_name#22, ), isnull(c_last_name#22), coalesce(c_first_name#21, ), isnull(c_first_name#21), coalesce(d_date#18, 0), isnull(d_date#18), 5), ENSURE_REQUIREMENTS, [id=#24]

(41) Sort [codegen id : 16]
Input [3]: [c_last_name#22, c_first_name#21, d_date#18]
Arguments: [coalesce(c_last_name#22, ) ASC NULLS FIRST, isnull(c_last_name#22) ASC NULLS FIRST, coalesce(c_first_name#21, ) ASC NULLS FIRST, isnull(c_first_name#21) ASC NULLS FIRST, coalesce(d_date#18, 0) ASC NULLS FIRST, isnull(d_date#18) ASC NULLS FIRST], false, 0

(42) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#11, ), isnull(c_last_name#11), coalesce(c_first_name#10, ), isnull(c_first_name#10), coalesce(d_date#5, 0), isnull(d_date#5)]
Right keys [6]: [coalesce(c_last_name#22, ), isnull(c_last_name#22), coalesce(c_first_name#21, ), isnull(c_first_name#21), coalesce(d_date#18, 0), isnull(d_date#18)]
Join condition: None

(43) HashAggregate [codegen id : 17]
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#11, c_first_name#10, d_date#5]

(44) Exchange
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Arguments: hashpartitioning(c_last_name#11, c_first_name#10, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#25]

(45) HashAggregate [codegen id : 18]
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#11, c_first_name#10, d_date#5]

(46) Exchange
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Arguments: hashpartitioning(coalesce(c_last_name#11, ), isnull(c_last_name#11), coalesce(c_first_name#10, ), isnull(c_first_name#10), coalesce(d_date#5, 0), isnull(d_date#5), 5), ENSURE_REQUIREMENTS, [id=#26]

(47) Sort [codegen id : 19]
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Arguments: [coalesce(c_last_name#11, ) ASC NULLS FIRST, isnull(c_last_name#11) ASC NULLS FIRST, coalesce(c_first_name#10, ) ASC NULLS FIRST, isnull(c_first_name#10) ASC NULLS FIRST, coalesce(d_date#5, 0) ASC NULLS FIRST, isnull(d_date#5) ASC NULLS FIRST], false, 0

(48) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#27, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(ws_sold_date_sk#28 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(49) ColumnarToRow [codegen id : 21]
Input [2]: [ws_bill_customer_sk#27, ws_sold_date_sk#28]

(50) Filter [codegen id : 21]
Input [2]: [ws_bill_customer_sk#27, ws_sold_date_sk#28]
Condition : isnotnull(ws_bill_customer_sk#27)

(51) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#29, d_date#30]

(52) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#29]
Join condition: None

(53) Project [codegen id : 21]
Output [2]: [ws_bill_customer_sk#27, d_date#30]
Input [4]: [ws_bill_customer_sk#27, ws_sold_date_sk#28, d_date_sk#29, d_date#30]

(54) Exchange
Input [2]: [ws_bill_customer_sk#27, d_date#30]
Arguments: hashpartitioning(ws_bill_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#31]

(55) Sort [codegen id : 22]
Input [2]: [ws_bill_customer_sk#27, d_date#30]
Arguments: [ws_bill_customer_sk#27 ASC NULLS FIRST], false, 0

(56) ReusedExchange [Reuses operator id: 16]
Output [3]: [c_customer_sk#32, c_first_name#33, c_last_name#34]

(57) Sort [codegen id : 24]
Input [3]: [c_customer_sk#32, c_first_name#33, c_last_name#34]
Arguments: [c_customer_sk#32 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 25]
Left keys [1]: [ws_bill_customer_sk#27]
Right keys [1]: [c_customer_sk#32]
Join condition: None

(59) Project [codegen id : 25]
Output [3]: [c_last_name#34, c_first_name#33, d_date#30]
Input [5]: [ws_bill_customer_sk#27, d_date#30, c_customer_sk#32, c_first_name#33, c_last_name#34]

(60) HashAggregate [codegen id : 25]
Input [3]: [c_last_name#34, c_first_name#33, d_date#30]
Keys [3]: [c_last_name#34, c_first_name#33, d_date#30]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#34, c_first_name#33, d_date#30]

(61) Exchange
Input [3]: [c_last_name#34, c_first_name#33, d_date#30]
Arguments: hashpartitioning(c_last_name#34, c_first_name#33, d_date#30, 5), ENSURE_REQUIREMENTS, [id=#35]

(62) HashAggregate [codegen id : 26]
Input [3]: [c_last_name#34, c_first_name#33, d_date#30]
Keys [3]: [c_last_name#34, c_first_name#33, d_date#30]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#34, c_first_name#33, d_date#30]

(63) Exchange
Input [3]: [c_last_name#34, c_first_name#33, d_date#30]
Arguments: hashpartitioning(coalesce(c_last_name#34, ), isnull(c_last_name#34), coalesce(c_first_name#33, ), isnull(c_first_name#33), coalesce(d_date#30, 0), isnull(d_date#30), 5), ENSURE_REQUIREMENTS, [id=#36]

(64) Sort [codegen id : 27]
Input [3]: [c_last_name#34, c_first_name#33, d_date#30]
Arguments: [coalesce(c_last_name#34, ) ASC NULLS FIRST, isnull(c_last_name#34) ASC NULLS FIRST, coalesce(c_first_name#33, ) ASC NULLS FIRST, isnull(c_first_name#33) ASC NULLS FIRST, coalesce(d_date#30, 0) ASC NULLS FIRST, isnull(d_date#30) ASC NULLS FIRST], false, 0

(65) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#11, ), isnull(c_last_name#11), coalesce(c_first_name#10, ), isnull(c_first_name#10), coalesce(d_date#5, 0), isnull(d_date#5)]
Right keys [6]: [coalesce(c_last_name#34, ), isnull(c_last_name#34), coalesce(c_first_name#33, ), isnull(c_first_name#33), coalesce(d_date#30, 0), isnull(d_date#30)]
Join condition: None

(66) HashAggregate [codegen id : 28]
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#11, c_first_name#10, d_date#5]

(67) Exchange
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Arguments: hashpartitioning(c_last_name#11, c_first_name#10, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#37]

(68) HashAggregate [codegen id : 29]
Input [3]: [c_last_name#11, c_first_name#10, d_date#5]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#5]
Functions: []
Aggregate Attributes: []
Results: []

(69) HashAggregate [codegen id : 29]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#38]
Results [1]: [count#39]

(70) Exchange
Input [1]: [count#39]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#40]

(71) HashAggregate [codegen id : 30]
Input [1]: [count#39]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#41]
Results [1]: [count(1)#41 AS count(1)#42]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#2 IN dynamicpruning#3
ReusedExchange (72)


(72) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#4, d_date#5]

Subquery:2 Hosting operator id = 25 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#3

Subquery:3 Hosting operator id = 48 Hosting Expression = ws_sold_date_sk#28 IN dynamicpruning#3


