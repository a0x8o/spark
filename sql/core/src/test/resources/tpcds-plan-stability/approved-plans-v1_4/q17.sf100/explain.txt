== Physical Plan ==
TakeOrderedAndProject (57)
+- * HashAggregate (56)
   +- Exchange (55)
      +- * HashAggregate (54)
         +- * Project (53)
            +- * SortMergeJoin Inner (52)
               :- * Sort (27)
               :  +- Exchange (26)
               :     +- * Project (25)
               :        +- * SortMergeJoin Inner (24)
               :           :- * Sort (18)
               :           :  +- Exchange (17)
               :           :     +- * Project (16)
               :           :        +- * BroadcastHashJoin Inner BuildRight (15)
               :           :           :- * Project (10)
               :           :           :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :           :     :- * Filter (3)
               :           :           :     :  +- * ColumnarToRow (2)
               :           :           :     :     +- Scan parquet default.store_sales (1)
               :           :           :     +- BroadcastExchange (8)
               :           :           :        +- * Project (7)
               :           :           :           +- * Filter (6)
               :           :           :              +- * ColumnarToRow (5)
               :           :           :                 +- Scan parquet default.date_dim (4)
               :           :           +- BroadcastExchange (14)
               :           :              +- * Filter (13)
               :           :                 +- * ColumnarToRow (12)
               :           :                    +- Scan parquet default.store (11)
               :           +- * Sort (23)
               :              +- Exchange (22)
               :                 +- * Filter (21)
               :                    +- * ColumnarToRow (20)
               :                       +- Scan parquet default.item (19)
               +- * Sort (51)
                  +- Exchange (50)
                     +- * Project (49)
                        +- * SortMergeJoin Inner (48)
                           :- * Sort (39)
                           :  +- Exchange (38)
                           :     +- * Project (37)
                           :        +- * BroadcastHashJoin Inner BuildRight (36)
                           :           :- * Filter (30)
                           :           :  +- * ColumnarToRow (29)
                           :           :     +- Scan parquet default.store_returns (28)
                           :           +- BroadcastExchange (35)
                           :              +- * Project (34)
                           :                 +- * Filter (33)
                           :                    +- * ColumnarToRow (32)
                           :                       +- Scan parquet default.date_dim (31)
                           +- * Sort (47)
                              +- Exchange (46)
                                 +- * Project (45)
                                    +- * BroadcastHashJoin Inner BuildRight (44)
                                       :- * Filter (42)
                                       :  +- * ColumnarToRow (41)
                                       :     +- Scan parquet default.catalog_sales (40)
                                       +- ReusedExchange (43)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(2) ColumnarToRow [codegen id : 3]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 3]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_customer_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_ticket_number#4)) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_quarter_name#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,2001Q1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_quarter_name#9]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_quarter_name#9]
Condition : ((isnotnull(d_quarter_name#9) AND (d_quarter_name#9 = 2001Q1)) AND isnotnull(d_date_sk#8))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_quarter_name#9]

(8) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(10) Project [codegen id : 3]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6, d_date_sk#8]

(11) Scan parquet default.store
Output [2]: [s_store_sk#11, s_state#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#11, s_state#12]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#11, s_state#12]
Condition : isnotnull(s_store_sk#11)

(14) BroadcastExchange
Input [2]: [s_store_sk#11, s_state#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#11]
Join condition: None

(16) Project [codegen id : 3]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, s_store_sk#11, s_state#12]

(17) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#14]

(18) Sort [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(19) Scan parquet default.item
Output [3]: [i_item_sk#15, i_item_id#16, i_item_desc#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(20) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#15, i_item_id#16, i_item_desc#17]

(21) Filter [codegen id : 5]
Input [3]: [i_item_sk#15, i_item_id#16, i_item_desc#17]
Condition : isnotnull(i_item_sk#15)

(22) Exchange
Input [3]: [i_item_sk#15, i_item_id#16, i_item_desc#17]
Arguments: hashpartitioning(i_item_sk#15, 5), ENSURE_REQUIREMENTS, [id=#18]

(23) Sort [codegen id : 6]
Input [3]: [i_item_sk#15, i_item_id#16, i_item_desc#17]
Arguments: [i_item_sk#15 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#15]
Join condition: None

(25) Project [codegen id : 7]
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, i_item_id#16, i_item_desc#17]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, i_item_sk#15, i_item_id#16, i_item_desc#17]

(26) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, i_item_id#16, i_item_desc#17]
Arguments: hashpartitioning(cast(ss_customer_sk#2 as bigint), cast(ss_item_sk#1 as bigint), cast(ss_ticket_number#4 as bigint), 5), ENSURE_REQUIREMENTS, [id=#19]

(27) Sort [codegen id : 8]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, i_item_id#16, i_item_desc#17]
Arguments: [cast(ss_customer_sk#2 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST], false, 0

(28) Scan parquet default.store_returns
Output [5]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23, sr_returned_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#24), dynamicpruningexpression(sr_returned_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int>

(29) ColumnarToRow [codegen id : 10]
Input [5]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23, sr_returned_date_sk#24]

(30) Filter [codegen id : 10]
Input [5]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23, sr_returned_date_sk#24]
Condition : ((isnotnull(sr_customer_sk#21) AND isnotnull(sr_item_sk#20)) AND isnotnull(sr_ticket_number#22))

(31) Scan parquet default.date_dim
Output [2]: [d_date_sk#26, d_quarter_name#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_quarter_name, [2001Q1,2001Q2,2001Q3]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(32) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#26, d_quarter_name#27]

(33) Filter [codegen id : 9]
Input [2]: [d_date_sk#26, d_quarter_name#27]
Condition : (d_quarter_name#27 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#26))

(34) Project [codegen id : 9]
Output [1]: [d_date_sk#26]
Input [2]: [d_date_sk#26, d_quarter_name#27]

(35) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(36) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [sr_returned_date_sk#24]
Right keys [1]: [cast(d_date_sk#26 as bigint)]
Join condition: None

(37) Project [codegen id : 10]
Output [4]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23]
Input [6]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23, sr_returned_date_sk#24, d_date_sk#26]

(38) Exchange
Input [4]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23]
Arguments: hashpartitioning(sr_customer_sk#21, sr_item_sk#20, 5), ENSURE_REQUIREMENTS, [id=#29]

(39) Sort [codegen id : 11]
Input [4]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23]
Arguments: [sr_customer_sk#21 ASC NULLS FIRST, sr_item_sk#20 ASC NULLS FIRST], false, 0

(40) Scan parquet default.catalog_sales
Output [4]: [cs_bill_customer_sk#30, cs_item_sk#31, cs_quantity#32, cs_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#33), dynamicpruningexpression(cs_sold_date_sk#33 IN dynamicpruning#34)]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(41) ColumnarToRow [codegen id : 13]
Input [4]: [cs_bill_customer_sk#30, cs_item_sk#31, cs_quantity#32, cs_sold_date_sk#33]

(42) Filter [codegen id : 13]
Input [4]: [cs_bill_customer_sk#30, cs_item_sk#31, cs_quantity#32, cs_sold_date_sk#33]
Condition : (isnotnull(cs_bill_customer_sk#30) AND isnotnull(cs_item_sk#31))

(43) ReusedExchange [Reuses operator id: 35]
Output [1]: [d_date_sk#35]

(44) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_sold_date_sk#33]
Right keys [1]: [d_date_sk#35]
Join condition: None

(45) Project [codegen id : 13]
Output [3]: [cs_bill_customer_sk#30, cs_item_sk#31, cs_quantity#32]
Input [5]: [cs_bill_customer_sk#30, cs_item_sk#31, cs_quantity#32, cs_sold_date_sk#33, d_date_sk#35]

(46) Exchange
Input [3]: [cs_bill_customer_sk#30, cs_item_sk#31, cs_quantity#32]
Arguments: hashpartitioning(cast(cs_bill_customer_sk#30 as bigint), cast(cs_item_sk#31 as bigint), 5), ENSURE_REQUIREMENTS, [id=#36]

(47) Sort [codegen id : 14]
Input [3]: [cs_bill_customer_sk#30, cs_item_sk#31, cs_quantity#32]
Arguments: [cast(cs_bill_customer_sk#30 as bigint) ASC NULLS FIRST, cast(cs_item_sk#31 as bigint) ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 15]
Left keys [2]: [sr_customer_sk#21, sr_item_sk#20]
Right keys [2]: [cast(cs_bill_customer_sk#30 as bigint), cast(cs_item_sk#31 as bigint)]
Join condition: None

(49) Project [codegen id : 15]
Output [5]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23, cs_quantity#32]
Input [7]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23, cs_bill_customer_sk#30, cs_item_sk#31, cs_quantity#32]

(50) Exchange
Input [5]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23, cs_quantity#32]
Arguments: hashpartitioning(sr_customer_sk#21, sr_item_sk#20, sr_ticket_number#22, 5), ENSURE_REQUIREMENTS, [id=#37]

(51) Sort [codegen id : 16]
Input [5]: [sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23, cs_quantity#32]
Arguments: [sr_customer_sk#21 ASC NULLS FIRST, sr_item_sk#20 ASC NULLS FIRST, sr_ticket_number#22 ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 17]
Left keys [3]: [cast(ss_customer_sk#2 as bigint), cast(ss_item_sk#1 as bigint), cast(ss_ticket_number#4 as bigint)]
Right keys [3]: [sr_customer_sk#21, sr_item_sk#20, sr_ticket_number#22]
Join condition: None

(53) Project [codegen id : 17]
Output [6]: [ss_quantity#5, sr_return_quantity#23, cs_quantity#32, s_state#12, i_item_id#16, i_item_desc#17]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, i_item_id#16, i_item_desc#17, sr_item_sk#20, sr_customer_sk#21, sr_ticket_number#22, sr_return_quantity#23, cs_quantity#32]

(54) HashAggregate [codegen id : 17]
Input [6]: [ss_quantity#5, sr_return_quantity#23, cs_quantity#32, s_state#12, i_item_id#16, i_item_desc#17]
Keys [3]: [i_item_id#16, i_item_desc#17, s_state#12]
Functions [9]: [partial_count(ss_quantity#5), partial_avg(ss_quantity#5), partial_stddev_samp(cast(ss_quantity#5 as double)), partial_count(sr_return_quantity#23), partial_avg(sr_return_quantity#23), partial_stddev_samp(cast(sr_return_quantity#23 as double)), partial_count(cs_quantity#32), partial_avg(cs_quantity#32), partial_stddev_samp(cast(cs_quantity#32 as double))]
Aggregate Attributes [18]: [count#38, sum#39, count#40, n#41, avg#42, m2#43, count#44, sum#45, count#46, n#47, avg#48, m2#49, count#50, sum#51, count#52, n#53, avg#54, m2#55]
Results [21]: [i_item_id#16, i_item_desc#17, s_state#12, count#56, sum#57, count#58, n#59, avg#60, m2#61, count#62, sum#63, count#64, n#65, avg#66, m2#67, count#68, sum#69, count#70, n#71, avg#72, m2#73]

(55) Exchange
Input [21]: [i_item_id#16, i_item_desc#17, s_state#12, count#56, sum#57, count#58, n#59, avg#60, m2#61, count#62, sum#63, count#64, n#65, avg#66, m2#67, count#68, sum#69, count#70, n#71, avg#72, m2#73]
Arguments: hashpartitioning(i_item_id#16, i_item_desc#17, s_state#12, 5), ENSURE_REQUIREMENTS, [id=#74]

(56) HashAggregate [codegen id : 18]
Input [21]: [i_item_id#16, i_item_desc#17, s_state#12, count#56, sum#57, count#58, n#59, avg#60, m2#61, count#62, sum#63, count#64, n#65, avg#66, m2#67, count#68, sum#69, count#70, n#71, avg#72, m2#73]
Keys [3]: [i_item_id#16, i_item_desc#17, s_state#12]
Functions [9]: [count(ss_quantity#5), avg(ss_quantity#5), stddev_samp(cast(ss_quantity#5 as double)), count(sr_return_quantity#23), avg(sr_return_quantity#23), stddev_samp(cast(sr_return_quantity#23 as double)), count(cs_quantity#32), avg(cs_quantity#32), stddev_samp(cast(cs_quantity#32 as double))]
Aggregate Attributes [9]: [count(ss_quantity#5)#75, avg(ss_quantity#5)#76, stddev_samp(cast(ss_quantity#5 as double))#77, count(sr_return_quantity#23)#78, avg(sr_return_quantity#23)#79, stddev_samp(cast(sr_return_quantity#23 as double))#80, count(cs_quantity#32)#81, avg(cs_quantity#32)#82, stddev_samp(cast(cs_quantity#32 as double))#83]
Results [15]: [i_item_id#16, i_item_desc#17, s_state#12, count(ss_quantity#5)#75 AS store_sales_quantitycount#84, avg(ss_quantity#5)#76 AS store_sales_quantityave#85, stddev_samp(cast(ss_quantity#5 as double))#77 AS store_sales_quantitystdev#86, (stddev_samp(cast(ss_quantity#5 as double))#77 / avg(ss_quantity#5)#76) AS store_sales_quantitycov#87, count(sr_return_quantity#23)#78 AS as_store_returns_quantitycount#88, avg(sr_return_quantity#23)#79 AS as_store_returns_quantityave#89, stddev_samp(cast(sr_return_quantity#23 as double))#80 AS as_store_returns_quantitystdev#90, (stddev_samp(cast(sr_return_quantity#23 as double))#80 / avg(sr_return_quantity#23)#79) AS store_returns_quantitycov#91, count(cs_quantity#32)#81 AS catalog_sales_quantitycount#92, avg(cs_quantity#32)#82 AS catalog_sales_quantityave#93, (stddev_samp(cast(cs_quantity#32 as double))#83 / avg(cs_quantity#32)#82) AS catalog_sales_quantitystdev#94, (stddev_samp(cast(cs_quantity#32 as double))#83 / avg(cs_quantity#32)#82) AS catalog_sales_quantitycov#95]

(57) TakeOrderedAndProject
Input [15]: [i_item_id#16, i_item_desc#17, s_state#12, store_sales_quantitycount#84, store_sales_quantityave#85, store_sales_quantitystdev#86, store_sales_quantitycov#87, as_store_returns_quantitycount#88, as_store_returns_quantityave#89, as_store_returns_quantitystdev#90, store_returns_quantitycov#91, catalog_sales_quantitycount#92, catalog_sales_quantityave#93, catalog_sales_quantitystdev#94, catalog_sales_quantitycov#95]
Arguments: 100, [i_item_id#16 ASC NULLS FIRST, i_item_desc#17 ASC NULLS FIRST, s_state#12 ASC NULLS FIRST], [i_item_id#16, i_item_desc#17, s_state#12, store_sales_quantitycount#84, store_sales_quantityave#85, store_sales_quantitystdev#86, store_sales_quantitycov#87, as_store_returns_quantitycount#88, as_store_returns_quantityave#89, as_store_returns_quantitystdev#90, store_returns_quantitycov#91, catalog_sales_quantitycount#92, catalog_sales_quantityave#93, catalog_sales_quantitystdev#94, catalog_sales_quantitycov#95]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
ReusedExchange (58)


(58) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#8]

Subquery:2 Hosting operator id = 28 Hosting Expression = sr_returned_date_sk#24 IN dynamicpruning#25
ReusedExchange (59)


(59) ReusedExchange [Reuses operator id: 35]
Output [1]: [d_date_sk#26]

Subquery:3 Hosting operator id = 40 Hosting Expression = cs_sold_date_sk#33 IN dynamicpruning#34
ReusedExchange (60)


(60) ReusedExchange [Reuses operator id: 35]
Output [1]: [d_date_sk#35]


