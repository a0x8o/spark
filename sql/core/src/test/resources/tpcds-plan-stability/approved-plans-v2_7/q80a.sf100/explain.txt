== Physical Plan ==
TakeOrderedAndProject (124)
+- * HashAggregate (123)
   +- Exchange (122)
      +- * HashAggregate (121)
         +- Union (120)
            :- * HashAggregate (109)
            :  +- Exchange (108)
            :     +- * HashAggregate (107)
            :        +- Union (106)
            :           :- * HashAggregate (43)
            :           :  +- Exchange (42)
            :           :     +- * HashAggregate (41)
            :           :        +- * Project (40)
            :           :           +- * BroadcastHashJoin Inner BuildRight (39)
            :           :              :- * Project (34)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (33)
            :           :              :     :- * Project (27)
            :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (26)
            :           :              :     :     :- * Project (20)
            :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (19)
            :           :              :     :     :     :- * Project (13)
            :           :              :     :     :     :  +- SortMergeJoin LeftOuter (12)
            :           :              :     :     :     :     :- * Sort (5)
            :           :              :     :     :     :     :  +- Exchange (4)
            :           :              :     :     :     :     :     +- * Filter (3)
            :           :              :     :     :     :     :        +- * ColumnarToRow (2)
            :           :              :     :     :     :     :           +- Scan parquet default.store_sales (1)
            :           :              :     :     :     :     +- * Sort (11)
            :           :              :     :     :     :        +- Exchange (10)
            :           :              :     :     :     :           +- * Project (9)
            :           :              :     :     :     :              +- * Filter (8)
            :           :              :     :     :     :                 +- * ColumnarToRow (7)
            :           :              :     :     :     :                    +- Scan parquet default.store_returns (6)
            :           :              :     :     :     +- BroadcastExchange (18)
            :           :              :     :     :        +- * Project (17)
            :           :              :     :     :           +- * Filter (16)
            :           :              :     :     :              +- * ColumnarToRow (15)
            :           :              :     :     :                 +- Scan parquet default.item (14)
            :           :              :     :     +- BroadcastExchange (25)
            :           :              :     :        +- * Project (24)
            :           :              :     :           +- * Filter (23)
            :           :              :     :              +- * ColumnarToRow (22)
            :           :              :     :                 +- Scan parquet default.promotion (21)
            :           :              :     +- BroadcastExchange (32)
            :           :              :        +- * Project (31)
            :           :              :           +- * Filter (30)
            :           :              :              +- * ColumnarToRow (29)
            :           :              :                 +- Scan parquet default.date_dim (28)
            :           :              +- BroadcastExchange (38)
            :           :                 +- * Filter (37)
            :           :                    +- * ColumnarToRow (36)
            :           :                       +- Scan parquet default.store (35)
            :           :- * HashAggregate (74)
            :           :  +- Exchange (73)
            :           :     +- * HashAggregate (72)
            :           :        +- * Project (71)
            :           :           +- * BroadcastHashJoin Inner BuildRight (70)
            :           :              :- * Project (65)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (64)
            :           :              :     :- * Project (62)
            :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (61)
            :           :              :     :     :- * Project (59)
            :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (58)
            :           :              :     :     :     :- * Project (56)
            :           :              :     :     :     :  +- SortMergeJoin LeftOuter (55)
            :           :              :     :     :     :     :- * Sort (48)
            :           :              :     :     :     :     :  +- Exchange (47)
            :           :              :     :     :     :     :     +- * Filter (46)
            :           :              :     :     :     :     :        +- * ColumnarToRow (45)
            :           :              :     :     :     :     :           +- Scan parquet default.catalog_sales (44)
            :           :              :     :     :     :     +- * Sort (54)
            :           :              :     :     :     :        +- Exchange (53)
            :           :              :     :     :     :           +- * Project (52)
            :           :              :     :     :     :              +- * Filter (51)
            :           :              :     :     :     :                 +- * ColumnarToRow (50)
            :           :              :     :     :     :                    +- Scan parquet default.catalog_returns (49)
            :           :              :     :     :     +- ReusedExchange (57)
            :           :              :     :     +- ReusedExchange (60)
            :           :              :     +- ReusedExchange (63)
            :           :              +- BroadcastExchange (69)
            :           :                 +- * Filter (68)
            :           :                    +- * ColumnarToRow (67)
            :           :                       +- Scan parquet default.catalog_page (66)
            :           +- * HashAggregate (105)
            :              +- Exchange (104)
            :                 +- * HashAggregate (103)
            :                    +- * Project (102)
            :                       +- * BroadcastHashJoin Inner BuildRight (101)
            :                          :- * Project (96)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (95)
            :                          :     :- * Project (93)
            :                          :     :  +- * BroadcastHashJoin Inner BuildRight (92)
            :                          :     :     :- * Project (90)
            :                          :     :     :  +- * BroadcastHashJoin Inner BuildRight (89)
            :                          :     :     :     :- * Project (87)
            :                          :     :     :     :  +- SortMergeJoin LeftOuter (86)
            :                          :     :     :     :     :- * Sort (79)
            :                          :     :     :     :     :  +- Exchange (78)
            :                          :     :     :     :     :     +- * Filter (77)
            :                          :     :     :     :     :        +- * ColumnarToRow (76)
            :                          :     :     :     :     :           +- Scan parquet default.web_sales (75)
            :                          :     :     :     :     +- * Sort (85)
            :                          :     :     :     :        +- Exchange (84)
            :                          :     :     :     :           +- * Project (83)
            :                          :     :     :     :              +- * Filter (82)
            :                          :     :     :     :                 +- * ColumnarToRow (81)
            :                          :     :     :     :                    +- Scan parquet default.web_returns (80)
            :                          :     :     :     +- ReusedExchange (88)
            :                          :     :     +- ReusedExchange (91)
            :                          :     +- ReusedExchange (94)
            :                          +- BroadcastExchange (100)
            :                             +- * Filter (99)
            :                                +- * ColumnarToRow (98)
            :                                   +- Scan parquet default.web_site (97)
            :- * HashAggregate (114)
            :  +- Exchange (113)
            :     +- * HashAggregate (112)
            :        +- * HashAggregate (111)
            :           +- ReusedExchange (110)
            +- * HashAggregate (119)
               +- Exchange (118)
                  +- * HashAggregate (117)
                     +- * HashAggregate (116)
                        +- ReusedExchange (115)


(1) Scan parquet default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(4) Exchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(cast(ss_item_sk#1 as bigint), cast(ss_ticket_number#4 as bigint), 5), ENSURE_REQUIREMENTS, [id=#9]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [cast(ss_item_sk#1 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]

(8) Filter [codegen id : 3]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Condition : (isnotnull(sr_item_sk#10) AND isnotnull(sr_ticket_number#11))

(9) Project [codegen id : 3]
Output [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]

(10) Exchange
Input [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Arguments: hashpartitioning(sr_item_sk#10, sr_ticket_number#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(11) Sort [codegen id : 4]
Input [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Arguments: [sr_item_sk#10 ASC NULLS FIRST, sr_ticket_number#11 ASC NULLS FIRST], false, 0

(12) SortMergeJoin
Left keys [2]: [cast(ss_item_sk#1 as bigint), cast(ss_ticket_number#4 as bigint)]
Right keys [2]: [sr_item_sk#10, sr_ticket_number#11]
Join condition: None

(13) Project [codegen id : 9]
Output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13]
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]

(14) Scan parquet default.item
Output [2]: [i_item_sk#16, i_current_price#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(15) ColumnarToRow [codegen id : 5]
Input [2]: [i_item_sk#16, i_current_price#17]

(16) Filter [codegen id : 5]
Input [2]: [i_item_sk#16, i_current_price#17]
Condition : ((isnotnull(i_current_price#17) AND (i_current_price#17 > 50.00)) AND isnotnull(i_item_sk#16))

(17) Project [codegen id : 5]
Output [1]: [i_item_sk#16]
Input [2]: [i_item_sk#16, i_current_price#17]

(18) BroadcastExchange
Input [1]: [i_item_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(19) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#16]
Join condition: None

(20) Project [codegen id : 9]
Output [7]: [ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13, i_item_sk#16]

(21) Scan parquet default.promotion
Output [2]: [p_promo_sk#19, p_channel_tv#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(22) ColumnarToRow [codegen id : 6]
Input [2]: [p_promo_sk#19, p_channel_tv#20]

(23) Filter [codegen id : 6]
Input [2]: [p_promo_sk#19, p_channel_tv#20]
Condition : ((isnotnull(p_channel_tv#20) AND (p_channel_tv#20 = N)) AND isnotnull(p_promo_sk#19))

(24) Project [codegen id : 6]
Output [1]: [p_promo_sk#19]
Input [2]: [p_promo_sk#19, p_channel_tv#20]

(25) BroadcastExchange
Input [1]: [p_promo_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_promo_sk#3]
Right keys [1]: [p_promo_sk#19]
Join condition: None

(27) Project [codegen id : 9]
Output [6]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13]
Input [8]: [ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13, p_promo_sk#19]

(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#22, d_date#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(29) ColumnarToRow [codegen id : 7]
Input [2]: [d_date_sk#22, d_date#23]

(30) Filter [codegen id : 7]
Input [2]: [d_date_sk#22, d_date#23]
Condition : (((isnotnull(d_date#23) AND (d_date#23 >= 1998-08-04)) AND (d_date#23 <= 1998-09-03)) AND isnotnull(d_date_sk#22))

(31) Project [codegen id : 7]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_date#23]

(32) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(33) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#22]
Join condition: None

(34) Project [codegen id : 9]
Output [5]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13]
Input [7]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13, d_date_sk#22]

(35) Scan parquet default.store
Output [2]: [s_store_sk#25, s_store_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(36) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#25, s_store_id#26]

(37) Filter [codegen id : 8]
Input [2]: [s_store_sk#25, s_store_id#26]
Condition : isnotnull(s_store_sk#25)

(38) BroadcastExchange
Input [2]: [s_store_sk#25, s_store_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(39) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#25]
Join condition: None

(40) Project [codegen id : 9]
Output [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#26]
Input [7]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_sk#25, s_store_id#26]

(41) HashAggregate [codegen id : 9]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#26]
Keys [1]: [s_store_id#26]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#28, sum#29, isEmpty#30, sum#31, isEmpty#32]
Results [6]: [s_store_id#26, sum#33, sum#34, isEmpty#35, sum#36, isEmpty#37]

(42) Exchange
Input [6]: [s_store_id#26, sum#33, sum#34, isEmpty#35, sum#36, isEmpty#37]
Arguments: hashpartitioning(s_store_id#26, 5), ENSURE_REQUIREMENTS, [id=#38]

(43) HashAggregate [codegen id : 10]
Input [6]: [s_store_id#26, sum#33, sum#34, isEmpty#35, sum#36, isEmpty#37]
Keys [1]: [s_store_id#26]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#39, sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00))#40, sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#41]
Results [5]: [store channel AS channel#42, concat(store, s_store_id#26) AS id#43, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#39,17,2) AS sales#44, sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00))#40 AS returns#45, sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#41 AS profit#46]

(44) Scan parquet default.catalog_sales
Output [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#53), dynamicpruningexpression(cs_sold_date_sk#53 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(45) ColumnarToRow [codegen id : 11]
Input [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53]

(46) Filter [codegen id : 11]
Input [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53]
Condition : ((isnotnull(cs_catalog_page_sk#47) AND isnotnull(cs_item_sk#48)) AND isnotnull(cs_promo_sk#49))

(47) Exchange
Input [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53]
Arguments: hashpartitioning(cs_item_sk#48, cs_order_number#50, 5), ENSURE_REQUIREMENTS, [id=#54]

(48) Sort [codegen id : 12]
Input [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53]
Arguments: [cs_item_sk#48 ASC NULLS FIRST, cs_order_number#50 ASC NULLS FIRST], false, 0

(49) Scan parquet default.catalog_returns
Output [5]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(50) ColumnarToRow [codegen id : 13]
Input [5]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]

(51) Filter [codegen id : 13]
Input [5]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]
Condition : (isnotnull(cr_item_sk#55) AND isnotnull(cr_order_number#56))

(52) Project [codegen id : 13]
Output [4]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58]
Input [5]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]

(53) Exchange
Input [4]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58]
Arguments: hashpartitioning(cr_item_sk#55, cr_order_number#56, 5), ENSURE_REQUIREMENTS, [id=#60]

(54) Sort [codegen id : 14]
Input [4]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58]
Arguments: [cr_item_sk#55 ASC NULLS FIRST, cr_order_number#56 ASC NULLS FIRST], false, 0

(55) SortMergeJoin
Left keys [2]: [cs_item_sk#48, cs_order_number#50]
Right keys [2]: [cr_item_sk#55, cr_order_number#56]
Join condition: None

(56) Project [codegen id : 19]
Output [8]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53, cr_return_amount#57, cr_net_loss#58]
Input [11]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53, cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58]

(57) ReusedExchange [Reuses operator id: 18]
Output [1]: [i_item_sk#61]

(58) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_item_sk#48]
Right keys [1]: [i_item_sk#61]
Join condition: None

(59) Project [codegen id : 19]
Output [7]: [cs_catalog_page_sk#47, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53, cr_return_amount#57, cr_net_loss#58]
Input [9]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53, cr_return_amount#57, cr_net_loss#58, i_item_sk#61]

(60) ReusedExchange [Reuses operator id: 25]
Output [1]: [p_promo_sk#62]

(61) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_promo_sk#49]
Right keys [1]: [p_promo_sk#62]
Join condition: None

(62) Project [codegen id : 19]
Output [6]: [cs_catalog_page_sk#47, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53, cr_return_amount#57, cr_net_loss#58]
Input [8]: [cs_catalog_page_sk#47, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53, cr_return_amount#57, cr_net_loss#58, p_promo_sk#62]

(63) ReusedExchange [Reuses operator id: 32]
Output [1]: [d_date_sk#63]

(64) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#53]
Right keys [1]: [d_date_sk#63]
Join condition: None

(65) Project [codegen id : 19]
Output [5]: [cs_catalog_page_sk#47, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58]
Input [7]: [cs_catalog_page_sk#47, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53, cr_return_amount#57, cr_net_loss#58, d_date_sk#63]

(66) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(67) ColumnarToRow [codegen id : 18]
Input [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]

(68) Filter [codegen id : 18]
Input [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]
Condition : isnotnull(cp_catalog_page_sk#64)

(69) BroadcastExchange
Input [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#66]

(70) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_catalog_page_sk#47]
Right keys [1]: [cp_catalog_page_sk#64]
Join condition: None

(71) Project [codegen id : 19]
Output [5]: [cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58, cp_catalog_page_id#65]
Input [7]: [cs_catalog_page_sk#47, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58, cp_catalog_page_sk#64, cp_catalog_page_id#65]

(72) HashAggregate [codegen id : 19]
Input [5]: [cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58, cp_catalog_page_id#65]
Keys [1]: [cp_catalog_page_id#65]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#51)), partial_sum(coalesce(cast(cr_return_amount#57 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#58 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#67, sum#68, isEmpty#69, sum#70, isEmpty#71]
Results [6]: [cp_catalog_page_id#65, sum#72, sum#73, isEmpty#74, sum#75, isEmpty#76]

(73) Exchange
Input [6]: [cp_catalog_page_id#65, sum#72, sum#73, isEmpty#74, sum#75, isEmpty#76]
Arguments: hashpartitioning(cp_catalog_page_id#65, 5), ENSURE_REQUIREMENTS, [id=#77]

(74) HashAggregate [codegen id : 20]
Input [6]: [cp_catalog_page_id#65, sum#72, sum#73, isEmpty#74, sum#75, isEmpty#76]
Keys [1]: [cp_catalog_page_id#65]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#51)), sum(coalesce(cast(cr_return_amount#57 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#58 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#51))#78, sum(coalesce(cast(cr_return_amount#57 as decimal(12,2)), 0.00))#79, sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#58 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#80]
Results [5]: [catalog channel AS channel#81, concat(catalog_page, cp_catalog_page_id#65) AS id#82, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#51))#78,17,2) AS sales#83, sum(coalesce(cast(cr_return_amount#57 as decimal(12,2)), 0.00))#79 AS returns#84, sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#58 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#80 AS profit#85]

(75) Scan parquet default.web_sales
Output [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#92), dynamicpruningexpression(ws_sold_date_sk#92 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(76) ColumnarToRow [codegen id : 21]
Input [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]

(77) Filter [codegen id : 21]
Input [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Condition : ((isnotnull(ws_web_site_sk#87) AND isnotnull(ws_item_sk#86)) AND isnotnull(ws_promo_sk#88))

(78) Exchange
Input [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Arguments: hashpartitioning(cast(ws_item_sk#86 as bigint), cast(ws_order_number#89 as bigint), 5), ENSURE_REQUIREMENTS, [id=#93]

(79) Sort [codegen id : 22]
Input [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Arguments: [cast(ws_item_sk#86 as bigint) ASC NULLS FIRST, cast(ws_order_number#89 as bigint) ASC NULLS FIRST], false, 0

(80) Scan parquet default.web_returns
Output [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(81) ColumnarToRow [codegen id : 23]
Input [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]

(82) Filter [codegen id : 23]
Input [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Condition : (isnotnull(wr_item_sk#94) AND isnotnull(wr_order_number#95))

(83) Project [codegen id : 23]
Output [4]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97]
Input [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]

(84) Exchange
Input [4]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97]
Arguments: hashpartitioning(wr_item_sk#94, wr_order_number#95, 5), ENSURE_REQUIREMENTS, [id=#99]

(85) Sort [codegen id : 24]
Input [4]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97]
Arguments: [wr_item_sk#94 ASC NULLS FIRST, wr_order_number#95 ASC NULLS FIRST], false, 0

(86) SortMergeJoin
Left keys [2]: [cast(ws_item_sk#86 as bigint), cast(ws_order_number#89 as bigint)]
Right keys [2]: [wr_item_sk#94, wr_order_number#95]
Join condition: None

(87) Project [codegen id : 29]
Output [8]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92, wr_return_amt#96, wr_net_loss#97]
Input [11]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92, wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97]

(88) ReusedExchange [Reuses operator id: 18]
Output [1]: [i_item_sk#100]

(89) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_item_sk#86]
Right keys [1]: [i_item_sk#100]
Join condition: None

(90) Project [codegen id : 29]
Output [7]: [ws_web_site_sk#87, ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92, wr_return_amt#96, wr_net_loss#97]
Input [9]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92, wr_return_amt#96, wr_net_loss#97, i_item_sk#100]

(91) ReusedExchange [Reuses operator id: 25]
Output [1]: [p_promo_sk#101]

(92) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_promo_sk#88]
Right keys [1]: [p_promo_sk#101]
Join condition: None

(93) Project [codegen id : 29]
Output [6]: [ws_web_site_sk#87, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92, wr_return_amt#96, wr_net_loss#97]
Input [8]: [ws_web_site_sk#87, ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92, wr_return_amt#96, wr_net_loss#97, p_promo_sk#101]

(94) ReusedExchange [Reuses operator id: 32]
Output [1]: [d_date_sk#102]

(95) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_sold_date_sk#92]
Right keys [1]: [d_date_sk#102]
Join condition: None

(96) Project [codegen id : 29]
Output [5]: [ws_web_site_sk#87, ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97]
Input [7]: [ws_web_site_sk#87, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92, wr_return_amt#96, wr_net_loss#97, d_date_sk#102]

(97) Scan parquet default.web_site
Output [2]: [web_site_sk#103, web_site_id#104]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(98) ColumnarToRow [codegen id : 28]
Input [2]: [web_site_sk#103, web_site_id#104]

(99) Filter [codegen id : 28]
Input [2]: [web_site_sk#103, web_site_id#104]
Condition : isnotnull(web_site_sk#103)

(100) BroadcastExchange
Input [2]: [web_site_sk#103, web_site_id#104]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#105]

(101) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_web_site_sk#87]
Right keys [1]: [web_site_sk#103]
Join condition: None

(102) Project [codegen id : 29]
Output [5]: [ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97, web_site_id#104]
Input [7]: [ws_web_site_sk#87, ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97, web_site_sk#103, web_site_id#104]

(103) HashAggregate [codegen id : 29]
Input [5]: [ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97, web_site_id#104]
Keys [1]: [web_site_id#104]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#90)), partial_sum(coalesce(cast(wr_return_amt#96 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#91 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#97 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#106, sum#107, isEmpty#108, sum#109, isEmpty#110]
Results [6]: [web_site_id#104, sum#111, sum#112, isEmpty#113, sum#114, isEmpty#115]

(104) Exchange
Input [6]: [web_site_id#104, sum#111, sum#112, isEmpty#113, sum#114, isEmpty#115]
Arguments: hashpartitioning(web_site_id#104, 5), ENSURE_REQUIREMENTS, [id=#116]

(105) HashAggregate [codegen id : 30]
Input [6]: [web_site_id#104, sum#111, sum#112, isEmpty#113, sum#114, isEmpty#115]
Keys [1]: [web_site_id#104]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#90)), sum(coalesce(cast(wr_return_amt#96 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#91 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#97 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#90))#117, sum(coalesce(cast(wr_return_amt#96 as decimal(12,2)), 0.00))#118, sum(CheckOverflow((promote_precision(cast(ws_net_profit#91 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#97 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#119]
Results [5]: [web channel AS channel#120, concat(web_site, web_site_id#104) AS id#121, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#90))#117,17,2) AS sales#122, sum(coalesce(cast(wr_return_amt#96 as decimal(12,2)), 0.00))#118 AS returns#123, sum(CheckOverflow((promote_precision(cast(ws_net_profit#91 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#97 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#119 AS profit#124]

(106) Union

(107) HashAggregate [codegen id : 31]
Input [5]: [channel#42, id#43, sales#44, returns#45, profit#46]
Keys [2]: [channel#42, id#43]
Functions [3]: [partial_sum(sales#44), partial_sum(returns#45), partial_sum(profit#46)]
Aggregate Attributes [6]: [sum#125, isEmpty#126, sum#127, isEmpty#128, sum#129, isEmpty#130]
Results [8]: [channel#42, id#43, sum#131, isEmpty#132, sum#133, isEmpty#134, sum#135, isEmpty#136]

(108) Exchange
Input [8]: [channel#42, id#43, sum#131, isEmpty#132, sum#133, isEmpty#134, sum#135, isEmpty#136]
Arguments: hashpartitioning(channel#42, id#43, 5), ENSURE_REQUIREMENTS, [id=#137]

(109) HashAggregate [codegen id : 32]
Input [8]: [channel#42, id#43, sum#131, isEmpty#132, sum#133, isEmpty#134, sum#135, isEmpty#136]
Keys [2]: [channel#42, id#43]
Functions [3]: [sum(sales#44), sum(returns#45), sum(profit#46)]
Aggregate Attributes [3]: [sum(sales#44)#138, sum(returns#45)#139, sum(profit#46)#140]
Results [5]: [channel#42, id#43, cast(sum(sales#44)#138 as decimal(37,2)) AS sales#141, cast(sum(returns#45)#139 as decimal(38,2)) AS returns#142, cast(sum(profit#46)#140 as decimal(38,2)) AS profit#143]

(110) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#42, id#43, sum#144, isEmpty#145, sum#146, isEmpty#147, sum#148, isEmpty#149]

(111) HashAggregate [codegen id : 64]
Input [8]: [channel#42, id#43, sum#144, isEmpty#145, sum#146, isEmpty#147, sum#148, isEmpty#149]
Keys [2]: [channel#42, id#43]
Functions [3]: [sum(sales#44), sum(returns#45), sum(profit#46)]
Aggregate Attributes [3]: [sum(sales#44)#150, sum(returns#45)#151, sum(profit#46)#152]
Results [4]: [channel#42, sum(sales#44)#150 AS sales#153, sum(returns#45)#151 AS returns#154, sum(profit#46)#152 AS profit#155]

(112) HashAggregate [codegen id : 64]
Input [4]: [channel#42, sales#153, returns#154, profit#155]
Keys [1]: [channel#42]
Functions [3]: [partial_sum(sales#153), partial_sum(returns#154), partial_sum(profit#155)]
Aggregate Attributes [6]: [sum#156, isEmpty#157, sum#158, isEmpty#159, sum#160, isEmpty#161]
Results [7]: [channel#42, sum#162, isEmpty#163, sum#164, isEmpty#165, sum#166, isEmpty#167]

(113) Exchange
Input [7]: [channel#42, sum#162, isEmpty#163, sum#164, isEmpty#165, sum#166, isEmpty#167]
Arguments: hashpartitioning(channel#42, 5), ENSURE_REQUIREMENTS, [id=#168]

(114) HashAggregate [codegen id : 65]
Input [7]: [channel#42, sum#162, isEmpty#163, sum#164, isEmpty#165, sum#166, isEmpty#167]
Keys [1]: [channel#42]
Functions [3]: [sum(sales#153), sum(returns#154), sum(profit#155)]
Aggregate Attributes [3]: [sum(sales#153)#169, sum(returns#154)#170, sum(profit#155)#171]
Results [5]: [channel#42, null AS id#172, sum(sales#153)#169 AS sales#173, sum(returns#154)#170 AS returns#174, sum(profit#155)#171 AS profit#175]

(115) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#42, id#43, sum#176, isEmpty#177, sum#178, isEmpty#179, sum#180, isEmpty#181]

(116) HashAggregate [codegen id : 97]
Input [8]: [channel#42, id#43, sum#176, isEmpty#177, sum#178, isEmpty#179, sum#180, isEmpty#181]
Keys [2]: [channel#42, id#43]
Functions [3]: [sum(sales#44), sum(returns#45), sum(profit#46)]
Aggregate Attributes [3]: [sum(sales#44)#182, sum(returns#45)#183, sum(profit#46)#184]
Results [3]: [sum(sales#44)#182 AS sales#153, sum(returns#45)#183 AS returns#154, sum(profit#46)#184 AS profit#155]

(117) HashAggregate [codegen id : 97]
Input [3]: [sales#153, returns#154, profit#155]
Keys: []
Functions [3]: [partial_sum(sales#153), partial_sum(returns#154), partial_sum(profit#155)]
Aggregate Attributes [6]: [sum#185, isEmpty#186, sum#187, isEmpty#188, sum#189, isEmpty#190]
Results [6]: [sum#191, isEmpty#192, sum#193, isEmpty#194, sum#195, isEmpty#196]

(118) Exchange
Input [6]: [sum#191, isEmpty#192, sum#193, isEmpty#194, sum#195, isEmpty#196]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#197]

(119) HashAggregate [codegen id : 98]
Input [6]: [sum#191, isEmpty#192, sum#193, isEmpty#194, sum#195, isEmpty#196]
Keys: []
Functions [3]: [sum(sales#153), sum(returns#154), sum(profit#155)]
Aggregate Attributes [3]: [sum(sales#153)#198, sum(returns#154)#199, sum(profit#155)#200]
Results [5]: [null AS channel#201, null AS id#202, sum(sales#153)#198 AS sales#203, sum(returns#154)#199 AS returns#204, sum(profit#155)#200 AS profit#205]

(120) Union

(121) HashAggregate [codegen id : 99]
Input [5]: [channel#42, id#43, sales#141, returns#142, profit#143]
Keys [5]: [channel#42, id#43, sales#141, returns#142, profit#143]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#42, id#43, sales#141, returns#142, profit#143]

(122) Exchange
Input [5]: [channel#42, id#43, sales#141, returns#142, profit#143]
Arguments: hashpartitioning(channel#42, id#43, sales#141, returns#142, profit#143, 5), ENSURE_REQUIREMENTS, [id=#206]

(123) HashAggregate [codegen id : 100]
Input [5]: [channel#42, id#43, sales#141, returns#142, profit#143]
Keys [5]: [channel#42, id#43, sales#141, returns#142, profit#143]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#42, id#43, sales#141, returns#142, profit#143]

(124) TakeOrderedAndProject
Input [5]: [channel#42, id#43, sales#141, returns#142, profit#143]
Arguments: 100, [channel#42 ASC NULLS FIRST, id#43 ASC NULLS FIRST], [channel#42, id#43, sales#141, returns#142, profit#143]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
ReusedExchange (125)


(125) ReusedExchange [Reuses operator id: 32]
Output [1]: [d_date_sk#22]

Subquery:2 Hosting operator id = 44 Hosting Expression = cs_sold_date_sk#53 IN dynamicpruning#8

Subquery:3 Hosting operator id = 75 Hosting Expression = ws_sold_date_sk#92 IN dynamicpruning#8


