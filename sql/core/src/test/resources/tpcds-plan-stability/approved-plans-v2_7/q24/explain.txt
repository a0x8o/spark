== Physical Plan ==
* Sort (48)
+- Exchange (47)
   +- * Filter (46)
      +- * HashAggregate (45)
         +- Exchange (44)
            +- * HashAggregate (43)
               +- * HashAggregate (42)
                  +- Exchange (41)
                     +- * HashAggregate (40)
                        +- * Project (39)
                           +- * BroadcastHashJoin Inner BuildRight (38)
                              :- * Project (33)
                              :  +- * BroadcastHashJoin Inner BuildRight (32)
                              :     :- * Project (27)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (26)
                              :     :     :- * Project (21)
                              :     :     :  +- * BroadcastHashJoin Inner BuildRight (20)
                              :     :     :     :- * Project (14)
                              :     :     :     :  +- * SortMergeJoin Inner (13)
                              :     :     :     :     :- * Sort (6)
                              :     :     :     :     :  +- Exchange (5)
                              :     :     :     :     :     +- * Project (4)
                              :     :     :     :     :        +- * Filter (3)
                              :     :     :     :     :           +- * ColumnarToRow (2)
                              :     :     :     :     :              +- Scan parquet default.store_sales (1)
                              :     :     :     :     +- * Sort (12)
                              :     :     :     :        +- Exchange (11)
                              :     :     :     :           +- * Project (10)
                              :     :     :     :              +- * Filter (9)
                              :     :     :     :                 +- * ColumnarToRow (8)
                              :     :     :     :                    +- Scan parquet default.store_returns (7)
                              :     :     :     +- BroadcastExchange (19)
                              :     :     :        +- * Project (18)
                              :     :     :           +- * Filter (17)
                              :     :     :              +- * ColumnarToRow (16)
                              :     :     :                 +- Scan parquet default.store (15)
                              :     :     +- BroadcastExchange (25)
                              :     :        +- * Filter (24)
                              :     :           +- * ColumnarToRow (23)
                              :     :              +- Scan parquet default.item (22)
                              :     +- BroadcastExchange (31)
                              :        +- * Filter (30)
                              :           +- * ColumnarToRow (29)
                              :              +- Scan parquet default.customer (28)
                              +- BroadcastExchange (37)
                                 +- * Filter (36)
                                    +- * ColumnarToRow (35)
                                       +- Scan parquet default.customer_address (34)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 1]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Project [codegen id : 1]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(5) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#7]

(6) Sort [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(7) Scan parquet default.store_returns
Output [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(8) ColumnarToRow [codegen id : 3]
Input [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]

(9) Filter [codegen id : 3]
Input [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]
Condition : (isnotnull(sr_ticket_number#9) AND isnotnull(sr_item_sk#8))

(10) Project [codegen id : 3]
Output [2]: [sr_item_sk#8, sr_ticket_number#9]
Input [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]

(11) Exchange
Input [2]: [sr_item_sk#8, sr_ticket_number#9]
Arguments: hashpartitioning(sr_ticket_number#9, sr_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#11]

(12) Sort [codegen id : 4]
Input [2]: [sr_item_sk#8, sr_ticket_number#9]
Arguments: [sr_ticket_number#9 ASC NULLS FIRST, sr_item_sk#8 ASC NULLS FIRST], false, 0

(13) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#9, sr_item_sk#8]
Join condition: None

(14) Project [codegen id : 9]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#8, sr_ticket_number#9]

(15) Scan parquet default.store
Output [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(16) ColumnarToRow [codegen id : 5]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]

(17) Filter [codegen id : 5]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]
Condition : (((isnotnull(s_market_id#14) AND (s_market_id#14 = 8)) AND isnotnull(s_store_sk#12)) AND isnotnull(s_zip#16))

(18) Project [codegen id : 5]
Output [4]: [s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]

(19) BroadcastExchange
Input [4]: [s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(20) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#12]
Join condition: None

(21) Project [codegen id : 9]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]

(22) Scan parquet default.item
Output [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(23) ColumnarToRow [codegen id : 6]
Input [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]

(24) Filter [codegen id : 6]
Input [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Condition : ((isnotnull(i_color#21) AND (i_color#21 = pale                )) AND isnotnull(i_item_sk#18))

(25) BroadcastExchange
Input [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#18]
Join condition: None

(27) Project [codegen id : 9]
Output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]

(28) Scan parquet default.customer
Output [5]: [c_customer_sk#25, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(29) ColumnarToRow [codegen id : 7]
Input [5]: [c_customer_sk#25, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]

(30) Filter [codegen id : 7]
Input [5]: [c_customer_sk#25, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]
Condition : ((isnotnull(c_customer_sk#25) AND isnotnull(c_current_addr_sk#26)) AND isnotnull(c_birth_country#29))

(31) BroadcastExchange
Input [5]: [c_customer_sk#25, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30]

(32) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#25]
Join condition: None

(33) Project [codegen id : 9]
Output [13]: [ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]
Input [15]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_customer_sk#25, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]

(34) Scan parquet default.customer_address
Output [4]: [ca_address_sk#31, ca_state#32, ca_zip#33, ca_country#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(35) ColumnarToRow [codegen id : 8]
Input [4]: [ca_address_sk#31, ca_state#32, ca_zip#33, ca_country#34]

(36) Filter [codegen id : 8]
Input [4]: [ca_address_sk#31, ca_state#32, ca_zip#33, ca_country#34]
Condition : ((isnotnull(ca_address_sk#31) AND isnotnull(ca_country#34)) AND isnotnull(ca_zip#33))

(37) BroadcastExchange
Input [4]: [ca_address_sk#31, ca_state#32, ca_zip#33, ca_country#34]
Arguments: HashedRelationBroadcastMode(List(input[0, int, false], upper(input[3, string, false]), input[2, string, false]),false), [id=#35]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [3]: [c_current_addr_sk#26, c_birth_country#29, s_zip#16]
Right keys [3]: [ca_address_sk#31, upper(ca_country#34), ca_zip#33]
Join condition: None

(39) Project [codegen id : 9]
Output [11]: [ss_net_paid#5, s_store_name#13, s_state#15, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_first_name#27, c_last_name#28, ca_state#32]
Input [17]: [ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29, ca_address_sk#31, ca_state#32, ca_zip#33, ca_country#34]

(40) HashAggregate [codegen id : 9]
Input [11]: [ss_net_paid#5, s_store_name#13, s_state#15, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_first_name#27, c_last_name#28, ca_state#32]
Keys [10]: [c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#36]
Results [11]: [c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, sum#37]

(41) Exchange
Input [11]: [c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, sum#37]
Arguments: hashpartitioning(c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, 5), ENSURE_REQUIREMENTS, [id=#38]

(42) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, sum#37]
Keys [10]: [c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#39]
Results [4]: [c_last_name#28, c_first_name#27, s_store_name#13, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#39,17,2) AS netpaid#40]

(43) HashAggregate [codegen id : 10]
Input [4]: [c_last_name#28, c_first_name#27, s_store_name#13, netpaid#40]
Keys [3]: [c_last_name#28, c_first_name#27, s_store_name#13]
Functions [1]: [partial_sum(netpaid#40)]
Aggregate Attributes [2]: [sum#41, isEmpty#42]
Results [5]: [c_last_name#28, c_first_name#27, s_store_name#13, sum#43, isEmpty#44]

(44) Exchange
Input [5]: [c_last_name#28, c_first_name#27, s_store_name#13, sum#43, isEmpty#44]
Arguments: hashpartitioning(c_last_name#28, c_first_name#27, s_store_name#13, 5), ENSURE_REQUIREMENTS, [id=#45]

(45) HashAggregate [codegen id : 11]
Input [5]: [c_last_name#28, c_first_name#27, s_store_name#13, sum#43, isEmpty#44]
Keys [3]: [c_last_name#28, c_first_name#27, s_store_name#13]
Functions [1]: [sum(netpaid#40)]
Aggregate Attributes [1]: [sum(netpaid#40)#46]
Results [4]: [c_last_name#28, c_first_name#27, s_store_name#13, sum(netpaid#40)#46 AS paid#47]

(46) Filter [codegen id : 11]
Input [4]: [c_last_name#28, c_first_name#27, s_store_name#13, paid#47]
Condition : (isnotnull(paid#47) AND (cast(paid#47 as decimal(33,8)) > cast(Subquery scalar-subquery#48, [id=#49] as decimal(33,8))))

(47) Exchange
Input [4]: [c_last_name#28, c_first_name#27, s_store_name#13, paid#47]
Arguments: rangepartitioning(c_last_name#28 ASC NULLS FIRST, c_first_name#27 ASC NULLS FIRST, s_store_name#13 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#50]

(48) Sort [codegen id : 12]
Input [4]: [c_last_name#28, c_first_name#27, s_store_name#13, paid#47]
Arguments: [c_last_name#28 ASC NULLS FIRST, c_first_name#27 ASC NULLS FIRST, s_store_name#13 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 46 Hosting Expression = Subquery scalar-subquery#48, [id=#49]
* HashAggregate (93)
+- Exchange (92)
   +- * HashAggregate (91)
      +- * HashAggregate (90)
         +- Exchange (89)
            +- * HashAggregate (88)
               +- * Project (87)
                  +- * BroadcastHashJoin Inner BuildRight (86)
                     :- * Project (81)
                     :  +- * BroadcastHashJoin Inner BuildRight (80)
                     :     :- * Project (75)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (74)
                     :     :     :- * Project (69)
                     :     :     :  +- * BroadcastHashJoin Inner BuildRight (68)
                     :     :     :     :- * Project (62)
                     :     :     :     :  +- * SortMergeJoin Inner (61)
                     :     :     :     :     :- * Sort (54)
                     :     :     :     :     :  +- Exchange (53)
                     :     :     :     :     :     +- * Project (52)
                     :     :     :     :     :        +- * Filter (51)
                     :     :     :     :     :           +- * ColumnarToRow (50)
                     :     :     :     :     :              +- Scan parquet default.store_sales (49)
                     :     :     :     :     +- * Sort (60)
                     :     :     :     :        +- Exchange (59)
                     :     :     :     :           +- * Project (58)
                     :     :     :     :              +- * Filter (57)
                     :     :     :     :                 +- * ColumnarToRow (56)
                     :     :     :     :                    +- Scan parquet default.store_returns (55)
                     :     :     :     +- BroadcastExchange (67)
                     :     :     :        +- * Project (66)
                     :     :     :           +- * Filter (65)
                     :     :     :              +- * ColumnarToRow (64)
                     :     :     :                 +- Scan parquet default.store (63)
                     :     :     +- BroadcastExchange (73)
                     :     :        +- * Filter (72)
                     :     :           +- * ColumnarToRow (71)
                     :     :              +- Scan parquet default.item (70)
                     :     +- BroadcastExchange (79)
                     :        +- * Filter (78)
                     :           +- * ColumnarToRow (77)
                     :              +- Scan parquet default.customer (76)
                     +- BroadcastExchange (85)
                        +- * Filter (84)
                           +- * ColumnarToRow (83)
                              +- Scan parquet default.customer_address (82)


(49) Scan parquet default.store_sales
Output [6]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55, ss_sold_date_sk#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(50) ColumnarToRow [codegen id : 1]
Input [6]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55, ss_sold_date_sk#56]

(51) Filter [codegen id : 1]
Input [6]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55, ss_sold_date_sk#56]
Condition : (((isnotnull(ss_ticket_number#54) AND isnotnull(ss_item_sk#51)) AND isnotnull(ss_store_sk#53)) AND isnotnull(ss_customer_sk#52))

(52) Project [codegen id : 1]
Output [5]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55]
Input [6]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55, ss_sold_date_sk#56]

(53) Exchange
Input [5]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55]
Arguments: hashpartitioning(ss_ticket_number#54, ss_item_sk#51, 5), ENSURE_REQUIREMENTS, [id=#57]

(54) Sort [codegen id : 2]
Input [5]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55]
Arguments: [ss_ticket_number#54 ASC NULLS FIRST, ss_item_sk#51 ASC NULLS FIRST], false, 0

(55) Scan parquet default.store_returns
Output [3]: [sr_item_sk#58, sr_ticket_number#59, sr_returned_date_sk#60]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(56) ColumnarToRow [codegen id : 3]
Input [3]: [sr_item_sk#58, sr_ticket_number#59, sr_returned_date_sk#60]

(57) Filter [codegen id : 3]
Input [3]: [sr_item_sk#58, sr_ticket_number#59, sr_returned_date_sk#60]
Condition : (isnotnull(sr_ticket_number#59) AND isnotnull(sr_item_sk#58))

(58) Project [codegen id : 3]
Output [2]: [sr_item_sk#58, sr_ticket_number#59]
Input [3]: [sr_item_sk#58, sr_ticket_number#59, sr_returned_date_sk#60]

(59) Exchange
Input [2]: [sr_item_sk#58, sr_ticket_number#59]
Arguments: hashpartitioning(sr_ticket_number#59, sr_item_sk#58, 5), ENSURE_REQUIREMENTS, [id=#61]

(60) Sort [codegen id : 4]
Input [2]: [sr_item_sk#58, sr_ticket_number#59]
Arguments: [sr_ticket_number#59 ASC NULLS FIRST, sr_item_sk#58 ASC NULLS FIRST], false, 0

(61) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_ticket_number#54, ss_item_sk#51]
Right keys [2]: [sr_ticket_number#59, sr_item_sk#58]
Join condition: None

(62) Project [codegen id : 9]
Output [4]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_net_paid#55]
Input [7]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55, sr_item_sk#58, sr_ticket_number#59]

(63) Scan parquet default.store
Output [5]: [s_store_sk#62, s_store_name#63, s_market_id#64, s_state#65, s_zip#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(64) ColumnarToRow [codegen id : 5]
Input [5]: [s_store_sk#62, s_store_name#63, s_market_id#64, s_state#65, s_zip#66]

(65) Filter [codegen id : 5]
Input [5]: [s_store_sk#62, s_store_name#63, s_market_id#64, s_state#65, s_zip#66]
Condition : (((isnotnull(s_market_id#64) AND (s_market_id#64 = 8)) AND isnotnull(s_store_sk#62)) AND isnotnull(s_zip#66))

(66) Project [codegen id : 5]
Output [4]: [s_store_sk#62, s_store_name#63, s_state#65, s_zip#66]
Input [5]: [s_store_sk#62, s_store_name#63, s_market_id#64, s_state#65, s_zip#66]

(67) BroadcastExchange
Input [4]: [s_store_sk#62, s_store_name#63, s_state#65, s_zip#66]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67]

(68) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#53]
Right keys [1]: [s_store_sk#62]
Join condition: None

(69) Project [codegen id : 9]
Output [6]: [ss_item_sk#51, ss_customer_sk#52, ss_net_paid#55, s_store_name#63, s_state#65, s_zip#66]
Input [8]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_net_paid#55, s_store_sk#62, s_store_name#63, s_state#65, s_zip#66]

(70) Scan parquet default.item
Output [6]: [i_item_sk#68, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(71) ColumnarToRow [codegen id : 6]
Input [6]: [i_item_sk#68, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73]

(72) Filter [codegen id : 6]
Input [6]: [i_item_sk#68, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73]
Condition : isnotnull(i_item_sk#68)

(73) BroadcastExchange
Input [6]: [i_item_sk#68, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74]

(74) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#51]
Right keys [1]: [i_item_sk#68]
Join condition: None

(75) Project [codegen id : 9]
Output [10]: [ss_customer_sk#52, ss_net_paid#55, s_store_name#63, s_state#65, s_zip#66, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73]
Input [12]: [ss_item_sk#51, ss_customer_sk#52, ss_net_paid#55, s_store_name#63, s_state#65, s_zip#66, i_item_sk#68, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73]

(76) Scan parquet default.customer
Output [5]: [c_customer_sk#75, c_current_addr_sk#76, c_first_name#77, c_last_name#78, c_birth_country#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(77) ColumnarToRow [codegen id : 7]
Input [5]: [c_customer_sk#75, c_current_addr_sk#76, c_first_name#77, c_last_name#78, c_birth_country#79]

(78) Filter [codegen id : 7]
Input [5]: [c_customer_sk#75, c_current_addr_sk#76, c_first_name#77, c_last_name#78, c_birth_country#79]
Condition : ((isnotnull(c_customer_sk#75) AND isnotnull(c_current_addr_sk#76)) AND isnotnull(c_birth_country#79))

(79) BroadcastExchange
Input [5]: [c_customer_sk#75, c_current_addr_sk#76, c_first_name#77, c_last_name#78, c_birth_country#79]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#80]

(80) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#52]
Right keys [1]: [c_customer_sk#75]
Join condition: None

(81) Project [codegen id : 9]
Output [13]: [ss_net_paid#55, s_store_name#63, s_state#65, s_zip#66, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73, c_current_addr_sk#76, c_first_name#77, c_last_name#78, c_birth_country#79]
Input [15]: [ss_customer_sk#52, ss_net_paid#55, s_store_name#63, s_state#65, s_zip#66, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73, c_customer_sk#75, c_current_addr_sk#76, c_first_name#77, c_last_name#78, c_birth_country#79]

(82) Scan parquet default.customer_address
Output [4]: [ca_address_sk#81, ca_state#82, ca_zip#83, ca_country#84]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(83) ColumnarToRow [codegen id : 8]
Input [4]: [ca_address_sk#81, ca_state#82, ca_zip#83, ca_country#84]

(84) Filter [codegen id : 8]
Input [4]: [ca_address_sk#81, ca_state#82, ca_zip#83, ca_country#84]
Condition : ((isnotnull(ca_address_sk#81) AND isnotnull(ca_country#84)) AND isnotnull(ca_zip#83))

(85) BroadcastExchange
Input [4]: [ca_address_sk#81, ca_state#82, ca_zip#83, ca_country#84]
Arguments: HashedRelationBroadcastMode(List(input[0, int, false], upper(input[3, string, false]), input[2, string, false]),false), [id=#85]

(86) BroadcastHashJoin [codegen id : 9]
Left keys [3]: [c_current_addr_sk#76, c_birth_country#79, s_zip#66]
Right keys [3]: [ca_address_sk#81, upper(ca_country#84), ca_zip#83]
Join condition: None

(87) Project [codegen id : 9]
Output [11]: [ss_net_paid#55, s_store_name#63, s_state#65, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73, c_first_name#77, c_last_name#78, ca_state#82]
Input [17]: [ss_net_paid#55, s_store_name#63, s_state#65, s_zip#66, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73, c_current_addr_sk#76, c_first_name#77, c_last_name#78, c_birth_country#79, ca_address_sk#81, ca_state#82, ca_zip#83, ca_country#84]

(88) HashAggregate [codegen id : 9]
Input [11]: [ss_net_paid#55, s_store_name#63, s_state#65, i_current_price#69, i_size#70, i_color#71, i_units#72, i_manager_id#73, c_first_name#77, c_last_name#78, ca_state#82]
Keys [10]: [c_last_name#78, c_first_name#77, s_store_name#63, ca_state#82, s_state#65, i_color#71, i_current_price#69, i_manager_id#73, i_units#72, i_size#70]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#55))]
Aggregate Attributes [1]: [sum#86]
Results [11]: [c_last_name#78, c_first_name#77, s_store_name#63, ca_state#82, s_state#65, i_color#71, i_current_price#69, i_manager_id#73, i_units#72, i_size#70, sum#87]

(89) Exchange
Input [11]: [c_last_name#78, c_first_name#77, s_store_name#63, ca_state#82, s_state#65, i_color#71, i_current_price#69, i_manager_id#73, i_units#72, i_size#70, sum#87]
Arguments: hashpartitioning(c_last_name#78, c_first_name#77, s_store_name#63, ca_state#82, s_state#65, i_color#71, i_current_price#69, i_manager_id#73, i_units#72, i_size#70, 5), ENSURE_REQUIREMENTS, [id=#88]

(90) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#78, c_first_name#77, s_store_name#63, ca_state#82, s_state#65, i_color#71, i_current_price#69, i_manager_id#73, i_units#72, i_size#70, sum#87]
Keys [10]: [c_last_name#78, c_first_name#77, s_store_name#63, ca_state#82, s_state#65, i_color#71, i_current_price#69, i_manager_id#73, i_units#72, i_size#70]
Functions [1]: [sum(UnscaledValue(ss_net_paid#55))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#55))#89]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#55))#89,17,2) AS netpaid#40]

(91) HashAggregate [codegen id : 10]
Input [1]: [netpaid#40]
Keys: []
Functions [1]: [partial_avg(netpaid#40)]
Aggregate Attributes [2]: [sum#90, count#91]
Results [2]: [sum#92, count#93]

(92) Exchange
Input [2]: [sum#92, count#93]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#94]

(93) HashAggregate [codegen id : 11]
Input [2]: [sum#92, count#93]
Keys: []
Functions [1]: [avg(netpaid#40)]
Aggregate Attributes [1]: [avg(netpaid#40)#95]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#40)#95)), DecimalType(24,8), true) AS (0.05 * avg(netpaid))#96]


