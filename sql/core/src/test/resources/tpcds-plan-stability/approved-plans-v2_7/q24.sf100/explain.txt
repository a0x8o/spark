== Physical Plan ==
* Sort (48)
+- Exchange (47)
   +- * Filter (46)
      +- * HashAggregate (45)
         +- Exchange (44)
            +- * HashAggregate (43)
               +- * HashAggregate (42)
                  +- Exchange (41)
                     +- * HashAggregate (40)
                        +- * Project (39)
                           +- * SortMergeJoin Inner (38)
                              :- * Sort (31)
                              :  +- Exchange (30)
                              :     +- * Project (29)
                              :        +- * BroadcastHashJoin Inner BuildRight (28)
                              :           :- * Project (23)
                              :           :  +- * BroadcastHashJoin Inner BuildLeft (22)
                              :           :     :- BroadcastExchange (17)
                              :           :     :  +- * Project (16)
                              :           :     :     +- * BroadcastHashJoin Inner BuildLeft (15)
                              :           :     :        :- BroadcastExchange (11)
                              :           :     :        :  +- * Project (10)
                              :           :     :        :     +- * BroadcastHashJoin Inner BuildLeft (9)
                              :           :     :        :        :- BroadcastExchange (5)
                              :           :     :        :        :  +- * Project (4)
                              :           :     :        :        :     +- * Filter (3)
                              :           :     :        :        :        +- * ColumnarToRow (2)
                              :           :     :        :        :           +- Scan parquet default.store (1)
                              :           :     :        :        +- * Filter (8)
                              :           :     :        :           +- * ColumnarToRow (7)
                              :           :     :        :              +- Scan parquet default.customer_address (6)
                              :           :     :        +- * Filter (14)
                              :           :     :           +- * ColumnarToRow (13)
                              :           :     :              +- Scan parquet default.customer (12)
                              :           :     +- * Project (21)
                              :           :        +- * Filter (20)
                              :           :           +- * ColumnarToRow (19)
                              :           :              +- Scan parquet default.store_sales (18)
                              :           +- BroadcastExchange (27)
                              :              +- * Filter (26)
                              :                 +- * ColumnarToRow (25)
                              :                    +- Scan parquet default.item (24)
                              +- * Sort (37)
                                 +- Exchange (36)
                                    +- * Project (35)
                                       +- * Filter (34)
                                          +- * ColumnarToRow (33)
                                             +- Scan parquet default.store_returns (32)


(1) Scan parquet default.store
Output [5]: [s_store_sk#1, s_store_name#2, s_market_id#3, s_state#4, s_zip#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#1, s_store_name#2, s_market_id#3, s_state#4, s_zip#5]

(3) Filter [codegen id : 1]
Input [5]: [s_store_sk#1, s_store_name#2, s_market_id#3, s_state#4, s_zip#5]
Condition : (((isnotnull(s_market_id#3) AND (s_market_id#3 = 8)) AND isnotnull(s_store_sk#1)) AND isnotnull(s_zip#5))

(4) Project [codegen id : 1]
Output [4]: [s_store_sk#1, s_store_name#2, s_state#4, s_zip#5]
Input [5]: [s_store_sk#1, s_store_name#2, s_market_id#3, s_state#4, s_zip#5]

(5) BroadcastExchange
Input [4]: [s_store_sk#1, s_store_name#2, s_state#4, s_zip#5]
Arguments: HashedRelationBroadcastMode(List(input[3, string, true]),false), [id=#6]

(6) Scan parquet default.customer_address
Output [4]: [ca_address_sk#7, ca_state#8, ca_zip#9, ca_country#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(7) ColumnarToRow
Input [4]: [ca_address_sk#7, ca_state#8, ca_zip#9, ca_country#10]

(8) Filter
Input [4]: [ca_address_sk#7, ca_state#8, ca_zip#9, ca_country#10]
Condition : ((isnotnull(ca_address_sk#7) AND isnotnull(ca_country#10)) AND isnotnull(ca_zip#9))

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [s_zip#5]
Right keys [1]: [ca_zip#9]
Join condition: None

(10) Project [codegen id : 2]
Output [6]: [s_store_sk#1, s_store_name#2, s_state#4, ca_address_sk#7, ca_state#8, ca_country#10]
Input [8]: [s_store_sk#1, s_store_name#2, s_state#4, s_zip#5, ca_address_sk#7, ca_state#8, ca_zip#9, ca_country#10]

(11) BroadcastExchange
Input [6]: [s_store_sk#1, s_store_name#2, s_state#4, ca_address_sk#7, ca_state#8, ca_country#10]
Arguments: HashedRelationBroadcastMode(List(input[3, int, true], upper(input[5, string, true])),false), [id=#11]

(12) Scan parquet default.customer
Output [5]: [c_customer_sk#12, c_current_addr_sk#13, c_first_name#14, c_last_name#15, c_birth_country#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(13) ColumnarToRow
Input [5]: [c_customer_sk#12, c_current_addr_sk#13, c_first_name#14, c_last_name#15, c_birth_country#16]

(14) Filter
Input [5]: [c_customer_sk#12, c_current_addr_sk#13, c_first_name#14, c_last_name#15, c_birth_country#16]
Condition : ((isnotnull(c_customer_sk#12) AND isnotnull(c_current_addr_sk#13)) AND isnotnull(c_birth_country#16))

(15) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [ca_address_sk#7, upper(ca_country#10)]
Right keys [2]: [c_current_addr_sk#13, c_birth_country#16]
Join condition: None

(16) Project [codegen id : 3]
Output [7]: [s_store_sk#1, s_store_name#2, s_state#4, ca_state#8, c_customer_sk#12, c_first_name#14, c_last_name#15]
Input [11]: [s_store_sk#1, s_store_name#2, s_state#4, ca_address_sk#7, ca_state#8, ca_country#10, c_customer_sk#12, c_current_addr_sk#13, c_first_name#14, c_last_name#15, c_birth_country#16]

(17) BroadcastExchange
Input [7]: [s_store_sk#1, s_store_name#2, s_state#4, ca_state#8, c_customer_sk#12, c_first_name#14, c_last_name#15]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, true] as bigint), 32) | (cast(input[4, int, true] as bigint) & 4294967295))),false), [id=#17]

(18) Scan parquet default.store_sales
Output [6]: [ss_item_sk#18, ss_customer_sk#19, ss_store_sk#20, ss_ticket_number#21, ss_net_paid#22, ss_sold_date_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(19) ColumnarToRow
Input [6]: [ss_item_sk#18, ss_customer_sk#19, ss_store_sk#20, ss_ticket_number#21, ss_net_paid#22, ss_sold_date_sk#23]

(20) Filter
Input [6]: [ss_item_sk#18, ss_customer_sk#19, ss_store_sk#20, ss_ticket_number#21, ss_net_paid#22, ss_sold_date_sk#23]
Condition : (((isnotnull(ss_ticket_number#21) AND isnotnull(ss_item_sk#18)) AND isnotnull(ss_store_sk#20)) AND isnotnull(ss_customer_sk#19))

(21) Project
Output [5]: [ss_item_sk#18, ss_customer_sk#19, ss_store_sk#20, ss_ticket_number#21, ss_net_paid#22]
Input [6]: [ss_item_sk#18, ss_customer_sk#19, ss_store_sk#20, ss_ticket_number#21, ss_net_paid#22, ss_sold_date_sk#23]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [2]: [s_store_sk#1, c_customer_sk#12]
Right keys [2]: [ss_store_sk#20, ss_customer_sk#19]
Join condition: None

(23) Project [codegen id : 5]
Output [8]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#14, c_last_name#15, ss_item_sk#18, ss_ticket_number#21, ss_net_paid#22]
Input [12]: [s_store_sk#1, s_store_name#2, s_state#4, ca_state#8, c_customer_sk#12, c_first_name#14, c_last_name#15, ss_item_sk#18, ss_customer_sk#19, ss_store_sk#20, ss_ticket_number#21, ss_net_paid#22]

(24) Scan parquet default.item
Output [6]: [i_item_sk#24, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(25) ColumnarToRow [codegen id : 4]
Input [6]: [i_item_sk#24, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29]

(26) Filter [codegen id : 4]
Input [6]: [i_item_sk#24, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29]
Condition : ((isnotnull(i_color#27) AND (i_color#27 = pale                )) AND isnotnull(i_item_sk#24))

(27) BroadcastExchange
Input [6]: [i_item_sk#24, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30]

(28) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#18]
Right keys [1]: [i_item_sk#24]
Join condition: None

(29) Project [codegen id : 5]
Output [13]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#14, c_last_name#15, ss_item_sk#18, ss_ticket_number#21, ss_net_paid#22, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29]
Input [14]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#14, c_last_name#15, ss_item_sk#18, ss_ticket_number#21, ss_net_paid#22, i_item_sk#24, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29]

(30) Exchange
Input [13]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#14, c_last_name#15, ss_item_sk#18, ss_ticket_number#21, ss_net_paid#22, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29]
Arguments: hashpartitioning(ss_ticket_number#21, ss_item_sk#18, 5), ENSURE_REQUIREMENTS, [id=#31]

(31) Sort [codegen id : 6]
Input [13]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#14, c_last_name#15, ss_item_sk#18, ss_ticket_number#21, ss_net_paid#22, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29]
Arguments: [ss_ticket_number#21 ASC NULLS FIRST, ss_item_sk#18 ASC NULLS FIRST], false, 0

(32) Scan parquet default.store_returns
Output [3]: [sr_item_sk#32, sr_ticket_number#33, sr_returned_date_sk#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(33) ColumnarToRow [codegen id : 7]
Input [3]: [sr_item_sk#32, sr_ticket_number#33, sr_returned_date_sk#34]

(34) Filter [codegen id : 7]
Input [3]: [sr_item_sk#32, sr_ticket_number#33, sr_returned_date_sk#34]
Condition : (isnotnull(sr_ticket_number#33) AND isnotnull(sr_item_sk#32))

(35) Project [codegen id : 7]
Output [2]: [sr_item_sk#32, sr_ticket_number#33]
Input [3]: [sr_item_sk#32, sr_ticket_number#33, sr_returned_date_sk#34]

(36) Exchange
Input [2]: [sr_item_sk#32, sr_ticket_number#33]
Arguments: hashpartitioning(sr_ticket_number#33, sr_item_sk#32, 5), ENSURE_REQUIREMENTS, [id=#35]

(37) Sort [codegen id : 8]
Input [2]: [sr_item_sk#32, sr_ticket_number#33]
Arguments: [sr_ticket_number#33 ASC NULLS FIRST, sr_item_sk#32 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_ticket_number#21, ss_item_sk#18]
Right keys [2]: [sr_ticket_number#33, sr_item_sk#32]
Join condition: None

(39) Project [codegen id : 9]
Output [11]: [ss_net_paid#22, s_store_name#2, s_state#4, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29, c_first_name#14, c_last_name#15, ca_state#8]
Input [15]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#14, c_last_name#15, ss_item_sk#18, ss_ticket_number#21, ss_net_paid#22, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29, sr_item_sk#32, sr_ticket_number#33]

(40) HashAggregate [codegen id : 9]
Input [11]: [ss_net_paid#22, s_store_name#2, s_state#4, i_current_price#25, i_size#26, i_color#27, i_units#28, i_manager_id#29, c_first_name#14, c_last_name#15, ca_state#8]
Keys [10]: [c_last_name#15, c_first_name#14, s_store_name#2, ca_state#8, s_state#4, i_color#27, i_current_price#25, i_manager_id#29, i_units#28, i_size#26]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#22))]
Aggregate Attributes [1]: [sum#36]
Results [11]: [c_last_name#15, c_first_name#14, s_store_name#2, ca_state#8, s_state#4, i_color#27, i_current_price#25, i_manager_id#29, i_units#28, i_size#26, sum#37]

(41) Exchange
Input [11]: [c_last_name#15, c_first_name#14, s_store_name#2, ca_state#8, s_state#4, i_color#27, i_current_price#25, i_manager_id#29, i_units#28, i_size#26, sum#37]
Arguments: hashpartitioning(c_last_name#15, c_first_name#14, s_store_name#2, ca_state#8, s_state#4, i_color#27, i_current_price#25, i_manager_id#29, i_units#28, i_size#26, 5), ENSURE_REQUIREMENTS, [id=#38]

(42) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#15, c_first_name#14, s_store_name#2, ca_state#8, s_state#4, i_color#27, i_current_price#25, i_manager_id#29, i_units#28, i_size#26, sum#37]
Keys [10]: [c_last_name#15, c_first_name#14, s_store_name#2, ca_state#8, s_state#4, i_color#27, i_current_price#25, i_manager_id#29, i_units#28, i_size#26]
Functions [1]: [sum(UnscaledValue(ss_net_paid#22))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#22))#39]
Results [4]: [c_last_name#15, c_first_name#14, s_store_name#2, MakeDecimal(sum(UnscaledValue(ss_net_paid#22))#39,17,2) AS netpaid#40]

(43) HashAggregate [codegen id : 10]
Input [4]: [c_last_name#15, c_first_name#14, s_store_name#2, netpaid#40]
Keys [3]: [c_last_name#15, c_first_name#14, s_store_name#2]
Functions [1]: [partial_sum(netpaid#40)]
Aggregate Attributes [2]: [sum#41, isEmpty#42]
Results [5]: [c_last_name#15, c_first_name#14, s_store_name#2, sum#43, isEmpty#44]

(44) Exchange
Input [5]: [c_last_name#15, c_first_name#14, s_store_name#2, sum#43, isEmpty#44]
Arguments: hashpartitioning(c_last_name#15, c_first_name#14, s_store_name#2, 5), ENSURE_REQUIREMENTS, [id=#45]

(45) HashAggregate [codegen id : 11]
Input [5]: [c_last_name#15, c_first_name#14, s_store_name#2, sum#43, isEmpty#44]
Keys [3]: [c_last_name#15, c_first_name#14, s_store_name#2]
Functions [1]: [sum(netpaid#40)]
Aggregate Attributes [1]: [sum(netpaid#40)#46]
Results [4]: [c_last_name#15, c_first_name#14, s_store_name#2, sum(netpaid#40)#46 AS paid#47]

(46) Filter [codegen id : 11]
Input [4]: [c_last_name#15, c_first_name#14, s_store_name#2, paid#47]
Condition : (isnotnull(paid#47) AND (cast(paid#47 as decimal(33,8)) > cast(Subquery scalar-subquery#48, [id=#49] as decimal(33,8))))

(47) Exchange
Input [4]: [c_last_name#15, c_first_name#14, s_store_name#2, paid#47]
Arguments: rangepartitioning(c_last_name#15 ASC NULLS FIRST, c_first_name#14 ASC NULLS FIRST, s_store_name#2 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#50]

(48) Sort [codegen id : 12]
Input [4]: [c_last_name#15, c_first_name#14, s_store_name#2, paid#47]
Arguments: [c_last_name#15 ASC NULLS FIRST, c_first_name#14 ASC NULLS FIRST, s_store_name#2 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 46 Hosting Expression = Subquery scalar-subquery#48, [id=#49]
* HashAggregate (76)
+- Exchange (75)
   +- * HashAggregate (74)
      +- * HashAggregate (73)
         +- Exchange (72)
            +- * HashAggregate (71)
               +- * Project (70)
                  +- * SortMergeJoin Inner (69)
                     :- * Sort (66)
                     :  +- Exchange (65)
                     :     +- * Project (64)
                     :        +- * SortMergeJoin Inner (63)
                     :           :- * Sort (57)
                     :           :  +- Exchange (56)
                     :           :     +- * Project (55)
                     :           :        +- * BroadcastHashJoin Inner BuildLeft (54)
                     :           :           :- ReusedExchange (49)
                     :           :           +- * Project (53)
                     :           :              +- * Filter (52)
                     :           :                 +- * ColumnarToRow (51)
                     :           :                    +- Scan parquet default.store_sales (50)
                     :           +- * Sort (62)
                     :              +- Exchange (61)
                     :                 +- * Filter (60)
                     :                    +- * ColumnarToRow (59)
                     :                       +- Scan parquet default.item (58)
                     +- * Sort (68)
                        +- ReusedExchange (67)


(49) ReusedExchange [Reuses operator id: 17]
Output [7]: [s_store_sk#51, s_store_name#52, s_state#53, ca_state#54, c_customer_sk#55, c_first_name#56, c_last_name#57]

(50) Scan parquet default.store_sales
Output [6]: [ss_item_sk#58, ss_customer_sk#59, ss_store_sk#60, ss_ticket_number#61, ss_net_paid#62, ss_sold_date_sk#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(51) ColumnarToRow
Input [6]: [ss_item_sk#58, ss_customer_sk#59, ss_store_sk#60, ss_ticket_number#61, ss_net_paid#62, ss_sold_date_sk#63]

(52) Filter
Input [6]: [ss_item_sk#58, ss_customer_sk#59, ss_store_sk#60, ss_ticket_number#61, ss_net_paid#62, ss_sold_date_sk#63]
Condition : (((isnotnull(ss_ticket_number#61) AND isnotnull(ss_item_sk#58)) AND isnotnull(ss_store_sk#60)) AND isnotnull(ss_customer_sk#59))

(53) Project
Output [5]: [ss_item_sk#58, ss_customer_sk#59, ss_store_sk#60, ss_ticket_number#61, ss_net_paid#62]
Input [6]: [ss_item_sk#58, ss_customer_sk#59, ss_store_sk#60, ss_ticket_number#61, ss_net_paid#62, ss_sold_date_sk#63]

(54) BroadcastHashJoin [codegen id : 4]
Left keys [2]: [s_store_sk#51, c_customer_sk#55]
Right keys [2]: [ss_store_sk#60, ss_customer_sk#59]
Join condition: None

(55) Project [codegen id : 4]
Output [8]: [s_store_name#52, s_state#53, ca_state#54, c_first_name#56, c_last_name#57, ss_item_sk#58, ss_ticket_number#61, ss_net_paid#62]
Input [12]: [s_store_sk#51, s_store_name#52, s_state#53, ca_state#54, c_customer_sk#55, c_first_name#56, c_last_name#57, ss_item_sk#58, ss_customer_sk#59, ss_store_sk#60, ss_ticket_number#61, ss_net_paid#62]

(56) Exchange
Input [8]: [s_store_name#52, s_state#53, ca_state#54, c_first_name#56, c_last_name#57, ss_item_sk#58, ss_ticket_number#61, ss_net_paid#62]
Arguments: hashpartitioning(ss_item_sk#58, 5), ENSURE_REQUIREMENTS, [id=#64]

(57) Sort [codegen id : 5]
Input [8]: [s_store_name#52, s_state#53, ca_state#54, c_first_name#56, c_last_name#57, ss_item_sk#58, ss_ticket_number#61, ss_net_paid#62]
Arguments: [ss_item_sk#58 ASC NULLS FIRST], false, 0

(58) Scan parquet default.item
Output [6]: [i_item_sk#65, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(59) ColumnarToRow [codegen id : 6]
Input [6]: [i_item_sk#65, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70]

(60) Filter [codegen id : 6]
Input [6]: [i_item_sk#65, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70]
Condition : isnotnull(i_item_sk#65)

(61) Exchange
Input [6]: [i_item_sk#65, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70]
Arguments: hashpartitioning(i_item_sk#65, 5), ENSURE_REQUIREMENTS, [id=#71]

(62) Sort [codegen id : 7]
Input [6]: [i_item_sk#65, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70]
Arguments: [i_item_sk#65 ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#58]
Right keys [1]: [i_item_sk#65]
Join condition: None

(64) Project [codegen id : 8]
Output [13]: [s_store_name#52, s_state#53, ca_state#54, c_first_name#56, c_last_name#57, ss_item_sk#58, ss_ticket_number#61, ss_net_paid#62, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70]
Input [14]: [s_store_name#52, s_state#53, ca_state#54, c_first_name#56, c_last_name#57, ss_item_sk#58, ss_ticket_number#61, ss_net_paid#62, i_item_sk#65, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70]

(65) Exchange
Input [13]: [s_store_name#52, s_state#53, ca_state#54, c_first_name#56, c_last_name#57, ss_item_sk#58, ss_ticket_number#61, ss_net_paid#62, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70]
Arguments: hashpartitioning(ss_ticket_number#61, ss_item_sk#58, 5), ENSURE_REQUIREMENTS, [id=#72]

(66) Sort [codegen id : 9]
Input [13]: [s_store_name#52, s_state#53, ca_state#54, c_first_name#56, c_last_name#57, ss_item_sk#58, ss_ticket_number#61, ss_net_paid#62, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70]
Arguments: [ss_ticket_number#61 ASC NULLS FIRST, ss_item_sk#58 ASC NULLS FIRST], false, 0

(67) ReusedExchange [Reuses operator id: 36]
Output [2]: [sr_item_sk#73, sr_ticket_number#74]

(68) Sort [codegen id : 11]
Input [2]: [sr_item_sk#73, sr_ticket_number#74]
Arguments: [sr_ticket_number#74 ASC NULLS FIRST, sr_item_sk#73 ASC NULLS FIRST], false, 0

(69) SortMergeJoin [codegen id : 12]
Left keys [2]: [ss_ticket_number#61, ss_item_sk#58]
Right keys [2]: [sr_ticket_number#74, sr_item_sk#73]
Join condition: None

(70) Project [codegen id : 12]
Output [11]: [ss_net_paid#62, s_store_name#52, s_state#53, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70, c_first_name#56, c_last_name#57, ca_state#54]
Input [15]: [s_store_name#52, s_state#53, ca_state#54, c_first_name#56, c_last_name#57, ss_item_sk#58, ss_ticket_number#61, ss_net_paid#62, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70, sr_item_sk#73, sr_ticket_number#74]

(71) HashAggregate [codegen id : 12]
Input [11]: [ss_net_paid#62, s_store_name#52, s_state#53, i_current_price#66, i_size#67, i_color#68, i_units#69, i_manager_id#70, c_first_name#56, c_last_name#57, ca_state#54]
Keys [10]: [c_last_name#57, c_first_name#56, s_store_name#52, ca_state#54, s_state#53, i_color#68, i_current_price#66, i_manager_id#70, i_units#69, i_size#67]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#62))]
Aggregate Attributes [1]: [sum#75]
Results [11]: [c_last_name#57, c_first_name#56, s_store_name#52, ca_state#54, s_state#53, i_color#68, i_current_price#66, i_manager_id#70, i_units#69, i_size#67, sum#76]

(72) Exchange
Input [11]: [c_last_name#57, c_first_name#56, s_store_name#52, ca_state#54, s_state#53, i_color#68, i_current_price#66, i_manager_id#70, i_units#69, i_size#67, sum#76]
Arguments: hashpartitioning(c_last_name#57, c_first_name#56, s_store_name#52, ca_state#54, s_state#53, i_color#68, i_current_price#66, i_manager_id#70, i_units#69, i_size#67, 5), ENSURE_REQUIREMENTS, [id=#77]

(73) HashAggregate [codegen id : 13]
Input [11]: [c_last_name#57, c_first_name#56, s_store_name#52, ca_state#54, s_state#53, i_color#68, i_current_price#66, i_manager_id#70, i_units#69, i_size#67, sum#76]
Keys [10]: [c_last_name#57, c_first_name#56, s_store_name#52, ca_state#54, s_state#53, i_color#68, i_current_price#66, i_manager_id#70, i_units#69, i_size#67]
Functions [1]: [sum(UnscaledValue(ss_net_paid#62))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#62))#78]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#62))#78,17,2) AS netpaid#40]

(74) HashAggregate [codegen id : 13]
Input [1]: [netpaid#40]
Keys: []
Functions [1]: [partial_avg(netpaid#40)]
Aggregate Attributes [2]: [sum#79, count#80]
Results [2]: [sum#81, count#82]

(75) Exchange
Input [2]: [sum#81, count#82]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#83]

(76) HashAggregate [codegen id : 14]
Input [2]: [sum#81, count#82]
Keys: []
Functions [1]: [avg(netpaid#40)]
Aggregate Attributes [1]: [avg(netpaid#40)#84]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#40)#84)), DecimalType(24,8), true) AS (0.05 * avg(netpaid))#85]


