== Physical Plan ==
TakeOrderedAndProject (86)
+- * Project (85)
   +- * SortMergeJoin Inner (84)
      :- * Project (66)
      :  +- * SortMergeJoin Inner (65)
      :     :- * SortMergeJoin Inner (45)
      :     :  :- * Sort (24)
      :     :  :  +- Exchange (23)
      :     :  :     +- * Filter (22)
      :     :  :        +- * HashAggregate (21)
      :     :  :           +- Exchange (20)
      :     :  :              +- * HashAggregate (19)
      :     :  :                 +- * Project (18)
      :     :  :                    +- * SortMergeJoin Inner (17)
      :     :  :                       :- * Sort (11)
      :     :  :                       :  +- Exchange (10)
      :     :  :                       :     +- * Project (9)
      :     :  :                       :        +- * BroadcastHashJoin Inner BuildRight (8)
      :     :  :                       :           :- * Filter (3)
      :     :  :                       :           :  +- * ColumnarToRow (2)
      :     :  :                       :           :     +- Scan parquet default.store_sales (1)
      :     :  :                       :           +- BroadcastExchange (7)
      :     :  :                       :              +- * Filter (6)
      :     :  :                       :                 +- * ColumnarToRow (5)
      :     :  :                       :                    +- Scan parquet default.date_dim (4)
      :     :  :                       +- * Sort (16)
      :     :  :                          +- Exchange (15)
      :     :  :                             +- * Filter (14)
      :     :  :                                +- * ColumnarToRow (13)
      :     :  :                                   +- Scan parquet default.customer (12)
      :     :  +- * Sort (44)
      :     :     +- Exchange (43)
      :     :        +- * HashAggregate (42)
      :     :           +- Exchange (41)
      :     :              +- * HashAggregate (40)
      :     :                 +- * Project (39)
      :     :                    +- * SortMergeJoin Inner (38)
      :     :                       :- * Sort (35)
      :     :                       :  +- Exchange (34)
      :     :                       :     +- * Project (33)
      :     :                       :        +- * BroadcastHashJoin Inner BuildRight (32)
      :     :                       :           :- * Filter (27)
      :     :                       :           :  +- * ColumnarToRow (26)
      :     :                       :           :     +- Scan parquet default.store_sales (25)
      :     :                       :           +- BroadcastExchange (31)
      :     :                       :              +- * Filter (30)
      :     :                       :                 +- * ColumnarToRow (29)
      :     :                       :                    +- Scan parquet default.date_dim (28)
      :     :                       +- * Sort (37)
      :     :                          +- ReusedExchange (36)
      :     +- * Sort (64)
      :        +- Exchange (63)
      :           +- * Project (62)
      :              +- * Filter (61)
      :                 +- * HashAggregate (60)
      :                    +- Exchange (59)
      :                       +- * HashAggregate (58)
      :                          +- * Project (57)
      :                             +- * SortMergeJoin Inner (56)
      :                                :- * Sort (53)
      :                                :  +- Exchange (52)
      :                                :     +- * Project (51)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (50)
      :                                :           :- * Filter (48)
      :                                :           :  +- * ColumnarToRow (47)
      :                                :           :     +- Scan parquet default.web_sales (46)
      :                                :           +- ReusedExchange (49)
      :                                +- * Sort (55)
      :                                   +- ReusedExchange (54)
      +- * Sort (83)
         +- Exchange (82)
            +- * HashAggregate (81)
               +- Exchange (80)
                  +- * HashAggregate (79)
                     +- * Project (78)
                        +- * SortMergeJoin Inner (77)
                           :- * Sort (74)
                           :  +- Exchange (73)
                           :     +- * Project (72)
                           :        +- * BroadcastHashJoin Inner BuildRight (71)
                           :           :- * Filter (69)
                           :           :  +- * ColumnarToRow (68)
                           :           :     +- Scan parquet default.web_sales (67)
                           :           +- ReusedExchange (70)
                           +- * Sort (76)
                              +- ReusedExchange (75)


(1) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_customer_sk#1)

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2001)) AND isnotnull(d_date_sk#6))

(7) BroadcastExchange
Input [2]: [d_date_sk#6, d_year#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(9) Project [codegen id : 2]
Output [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4, d_date_sk#6, d_year#7]

(10) Exchange
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(11) Sort [codegen id : 3]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(13) ColumnarToRow [codegen id : 4]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(14) Filter [codegen id : 4]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Condition : (isnotnull(c_customer_sk#10) AND isnotnull(c_customer_id#11))

(15) Exchange
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: hashpartitioning(c_customer_sk#10, 5), ENSURE_REQUIREMENTS, [id=#18]

(16) Sort [codegen id : 5]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#10]
Join condition: None

(18) Project [codegen id : 6]
Output [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Input [12]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(19) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#19]
Results [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#20]

(20) Exchange
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#20]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, 5), ENSURE_REQUIREMENTS, [id=#21]

(21) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#20]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))#22]
Results [2]: [c_customer_id#11 AS customer_id#23, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))#22,18,2) AS year_total#24]

(22) Filter [codegen id : 7]
Input [2]: [customer_id#23, year_total#24]
Condition : (isnotnull(year_total#24) AND (year_total#24 > 0.00))

(23) Exchange
Input [2]: [customer_id#23, year_total#24]
Arguments: hashpartitioning(customer_id#23, 5), ENSURE_REQUIREMENTS, [id=#25]

(24) Sort [codegen id : 8]
Input [2]: [customer_id#23, year_total#24]
Arguments: [customer_id#23 ASC NULLS FIRST], false, 0

(25) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#26)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(26) ColumnarToRow [codegen id : 10]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]

(27) Filter [codegen id : 10]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_customer_sk#1)

(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(29) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#6, d_year#7]

(30) Filter [codegen id : 9]
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2002)) AND isnotnull(d_date_sk#6))

(31) BroadcastExchange
Input [2]: [d_date_sk#6, d_year#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(32) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(33) Project [codegen id : 10]
Output [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4, d_date_sk#6, d_year#7]

(34) Exchange
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#28]

(35) Sort [codegen id : 11]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(36) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(37) Sort [codegen id : 13]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#10]
Join condition: None

(39) Project [codegen id : 14]
Output [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Input [12]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(40) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#7]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#29]
Results [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#30]

(41) Exchange
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#30]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, 5), ENSURE_REQUIREMENTS, [id=#31]

(42) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#30]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#7, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))#32]
Results [5]: [c_customer_id#11 AS customer_id#33, c_first_name#12 AS customer_first_name#34, c_last_name#13 AS customer_last_name#35, c_email_address#17 AS customer_email_address#36, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#3 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#2 as decimal(8,2)))), DecimalType(8,2), true)))#32,18,2) AS year_total#37]

(43) Exchange
Input [5]: [customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36, year_total#37]
Arguments: hashpartitioning(customer_id#33, 5), ENSURE_REQUIREMENTS, [id=#38]

(44) Sort [codegen id : 16]
Input [5]: [customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36, year_total#37]
Arguments: [customer_id#33 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#33]
Join condition: None

(46) Scan parquet default.web_sales
Output [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, ws_sold_date_sk#42]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#42), dynamicpruningexpression(ws_sold_date_sk#42 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(47) ColumnarToRow [codegen id : 19]
Input [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, ws_sold_date_sk#42]

(48) Filter [codegen id : 19]
Input [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, ws_sold_date_sk#42]
Condition : isnotnull(ws_bill_customer_sk#39)

(49) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#6, d_year#7]

(50) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#42]
Right keys [1]: [d_date_sk#6]
Join condition: None

(51) Project [codegen id : 19]
Output [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7]
Input [6]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, ws_sold_date_sk#42, d_date_sk#6, d_year#7]

(52) Exchange
Input [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7]
Arguments: hashpartitioning(ws_bill_customer_sk#39, 5), ENSURE_REQUIREMENTS, [id=#43]

(53) Sort [codegen id : 20]
Input [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7]
Arguments: [ws_bill_customer_sk#39 ASC NULLS FIRST], false, 0

(54) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(55) Sort [codegen id : 22]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#39]
Right keys [1]: [c_customer_sk#10]
Join condition: None

(57) Project [codegen id : 23]
Output [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7]
Input [12]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(58) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#41 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#40 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#44]
Results [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7, sum#45]

(59) Exchange
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7, sum#45]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7, 5), ENSURE_REQUIREMENTS, [id=#46]

(60) HashAggregate [codegen id : 24]
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7, sum#45]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#41 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#40 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#41 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#40 as decimal(8,2)))), DecimalType(8,2), true)))#47]
Results [2]: [c_customer_id#11 AS customer_id#48, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#41 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#40 as decimal(8,2)))), DecimalType(8,2), true)))#47,18,2) AS year_total#49]

(61) Filter [codegen id : 24]
Input [2]: [customer_id#48, year_total#49]
Condition : (isnotnull(year_total#49) AND (year_total#49 > 0.00))

(62) Project [codegen id : 24]
Output [2]: [customer_id#48 AS customer_id#50, year_total#49 AS year_total#51]
Input [2]: [customer_id#48, year_total#49]

(63) Exchange
Input [2]: [customer_id#50, year_total#51]
Arguments: hashpartitioning(customer_id#50, 5), ENSURE_REQUIREMENTS, [id=#52]

(64) Sort [codegen id : 25]
Input [2]: [customer_id#50, year_total#51]
Arguments: [customer_id#50 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#50]
Join condition: None

(66) Project [codegen id : 26]
Output [8]: [customer_id#23, year_total#24, customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36, year_total#37, year_total#51]
Input [9]: [customer_id#23, year_total#24, customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36, year_total#37, customer_id#50, year_total#51]

(67) Scan parquet default.web_sales
Output [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, ws_sold_date_sk#42]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#42), dynamicpruningexpression(ws_sold_date_sk#42 IN dynamicpruning#26)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(68) ColumnarToRow [codegen id : 28]
Input [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, ws_sold_date_sk#42]

(69) Filter [codegen id : 28]
Input [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, ws_sold_date_sk#42]
Condition : isnotnull(ws_bill_customer_sk#39)

(70) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#6, d_year#7]

(71) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#42]
Right keys [1]: [d_date_sk#6]
Join condition: None

(72) Project [codegen id : 28]
Output [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7]
Input [6]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, ws_sold_date_sk#42, d_date_sk#6, d_year#7]

(73) Exchange
Input [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7]
Arguments: hashpartitioning(ws_bill_customer_sk#39, 5), ENSURE_REQUIREMENTS, [id=#53]

(74) Sort [codegen id : 29]
Input [4]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7]
Arguments: [ws_bill_customer_sk#39 ASC NULLS FIRST], false, 0

(75) ReusedExchange [Reuses operator id: 15]
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(76) Sort [codegen id : 31]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#39]
Right keys [1]: [c_customer_sk#10]
Join condition: None

(78) Project [codegen id : 32]
Output [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7]
Input [12]: [ws_bill_customer_sk#39, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(79) HashAggregate [codegen id : 32]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ws_ext_discount_amt#40, ws_ext_list_price#41, d_year#7]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#41 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#40 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#54]
Results [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7, sum#55]

(80) Exchange
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7, sum#55]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7, 5), ENSURE_REQUIREMENTS, [id=#56]

(81) HashAggregate [codegen id : 33]
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7, sum#55]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#7]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#41 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#40 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#41 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#40 as decimal(8,2)))), DecimalType(8,2), true)))#57]
Results [2]: [c_customer_id#11 AS customer_id#58, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#41 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#40 as decimal(8,2)))), DecimalType(8,2), true)))#57,18,2) AS year_total#59]

(82) Exchange
Input [2]: [customer_id#58, year_total#59]
Arguments: hashpartitioning(customer_id#58, 5), ENSURE_REQUIREMENTS, [id=#60]

(83) Sort [codegen id : 34]
Input [2]: [customer_id#58, year_total#59]
Arguments: [customer_id#58 ASC NULLS FIRST], false, 0

(84) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#58]
Join condition: (CASE WHEN (year_total#51 > 0.00) THEN CheckOverflow((promote_precision(year_total#59) / promote_precision(year_total#51)), DecimalType(38,20), true) ELSE 0E-20 END > CASE WHEN (year_total#24 > 0.00) THEN CheckOverflow((promote_precision(year_total#37) / promote_precision(year_total#24)), DecimalType(38,20), true) ELSE 0E-20 END)

(85) Project [codegen id : 35]
Output [4]: [customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36]
Input [10]: [customer_id#23, year_total#24, customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36, year_total#37, year_total#51, customer_id#58, year_total#59]

(86) TakeOrderedAndProject
Input [4]: [customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36]
Arguments: 100, [customer_id#33 ASC NULLS FIRST, customer_first_name#34 ASC NULLS FIRST, customer_last_name#35 ASC NULLS FIRST, customer_email_address#36 ASC NULLS FIRST], [customer_id#33, customer_first_name#34, customer_last_name#35, customer_email_address#36]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (87)


(87) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#6, d_year#7]

Subquery:2 Hosting operator id = 25 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#26
ReusedExchange (88)


(88) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#6, d_year#7]

Subquery:3 Hosting operator id = 46 Hosting Expression = ws_sold_date_sk#42 IN dynamicpruning#5

Subquery:4 Hosting operator id = 67 Hosting Expression = ws_sold_date_sk#42 IN dynamicpruning#26


