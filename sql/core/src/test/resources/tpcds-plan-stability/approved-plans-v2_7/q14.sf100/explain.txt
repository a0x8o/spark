== Physical Plan ==
TakeOrderedAndProject (116)
+- * BroadcastHashJoin Inner BuildRight (115)
   :- * Project (90)
   :  +- * Filter (89)
   :     +- * HashAggregate (88)
   :        +- Exchange (87)
   :           +- * HashAggregate (86)
   :              +- * Project (85)
   :                 +- * BroadcastHashJoin Inner BuildRight (84)
   :                    :- * Project (74)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (73)
   :                    :     :- SortMergeJoin LeftSemi (67)
   :                    :     :  :- * Sort (5)
   :                    :     :  :  +- Exchange (4)
   :                    :     :  :     +- * Filter (3)
   :                    :     :  :        +- * ColumnarToRow (2)
   :                    :     :  :           +- Scan parquet default.store_sales (1)
   :                    :     :  +- * Sort (66)
   :                    :     :     +- Exchange (65)
   :                    :     :        +- * Project (64)
   :                    :     :           +- * BroadcastHashJoin Inner BuildRight (63)
   :                    :     :              :- * Filter (8)
   :                    :     :              :  +- * ColumnarToRow (7)
   :                    :     :              :     +- Scan parquet default.item (6)
   :                    :     :              +- BroadcastExchange (62)
   :                    :     :                 +- * HashAggregate (61)
   :                    :     :                    +- Exchange (60)
   :                    :     :                       +- * HashAggregate (59)
   :                    :     :                          +- SortMergeJoin LeftSemi (58)
   :                    :     :                             :- * Sort (46)
   :                    :     :                             :  +- Exchange (45)
   :                    :     :                             :     +- * HashAggregate (44)
   :                    :     :                             :        +- Exchange (43)
   :                    :     :                             :           +- * HashAggregate (42)
   :                    :     :                             :              +- * Project (41)
   :                    :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (40)
   :                    :     :                             :                    :- * Project (18)
   :                    :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (17)
   :                    :     :                             :                    :     :- * Filter (11)
   :                    :     :                             :                    :     :  +- * ColumnarToRow (10)
   :                    :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
   :                    :     :                             :                    :     +- BroadcastExchange (16)
   :                    :     :                             :                    :        +- * Project (15)
   :                    :     :                             :                    :           +- * Filter (14)
   :                    :     :                             :                    :              +- * ColumnarToRow (13)
   :                    :     :                             :                    :                 +- Scan parquet default.date_dim (12)
   :                    :     :                             :                    +- BroadcastExchange (39)
   :                    :     :                             :                       +- SortMergeJoin LeftSemi (38)
   :                    :     :                             :                          :- * Sort (23)
   :                    :     :                             :                          :  +- Exchange (22)
   :                    :     :                             :                          :     +- * Filter (21)
   :                    :     :                             :                          :        +- * ColumnarToRow (20)
   :                    :     :                             :                          :           +- Scan parquet default.item (19)
   :                    :     :                             :                          +- * Sort (37)
   :                    :     :                             :                             +- Exchange (36)
   :                    :     :                             :                                +- * Project (35)
   :                    :     :                             :                                   +- * BroadcastHashJoin Inner BuildRight (34)
   :                    :     :                             :                                      :- * Project (29)
   :                    :     :                             :                                      :  +- * BroadcastHashJoin Inner BuildRight (28)
   :                    :     :                             :                                      :     :- * Filter (26)
   :                    :     :                             :                                      :     :  +- * ColumnarToRow (25)
   :                    :     :                             :                                      :     :     +- Scan parquet default.catalog_sales (24)
   :                    :     :                             :                                      :     +- ReusedExchange (27)
   :                    :     :                             :                                      +- BroadcastExchange (33)
   :                    :     :                             :                                         +- * Filter (32)
   :                    :     :                             :                                            +- * ColumnarToRow (31)
   :                    :     :                             :                                               +- Scan parquet default.item (30)
   :                    :     :                             +- * Sort (57)
   :                    :     :                                +- Exchange (56)
   :                    :     :                                   +- * Project (55)
   :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (54)
   :                    :     :                                         :- * Project (52)
   :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (51)
   :                    :     :                                         :     :- * Filter (49)
   :                    :     :                                         :     :  +- * ColumnarToRow (48)
   :                    :     :                                         :     :     +- Scan parquet default.web_sales (47)
   :                    :     :                                         :     +- ReusedExchange (50)
   :                    :     :                                         +- ReusedExchange (53)
   :                    :     +- BroadcastExchange (72)
   :                    :        +- * Project (71)
   :                    :           +- * Filter (70)
   :                    :              +- * ColumnarToRow (69)
   :                    :                 +- Scan parquet default.date_dim (68)
   :                    +- BroadcastExchange (83)
   :                       +- SortMergeJoin LeftSemi (82)
   :                          :- * Sort (79)
   :                          :  +- Exchange (78)
   :                          :     +- * Filter (77)
   :                          :        +- * ColumnarToRow (76)
   :                          :           +- Scan parquet default.item (75)
   :                          +- * Sort (81)
   :                             +- ReusedExchange (80)
   +- BroadcastExchange (114)
      +- * Project (113)
         +- * Filter (112)
            +- * HashAggregate (111)
               +- Exchange (110)
                  +- * HashAggregate (109)
                     +- * Project (108)
                        +- * BroadcastHashJoin Inner BuildRight (107)
                           :- * Project (105)
                           :  +- * BroadcastHashJoin Inner BuildRight (104)
                           :     :- SortMergeJoin LeftSemi (98)
                           :     :  :- * Sort (95)
                           :     :  :  +- Exchange (94)
                           :     :  :     +- * Filter (93)
                           :     :  :        +- * ColumnarToRow (92)
                           :     :  :           +- Scan parquet default.store_sales (91)
                           :     :  +- * Sort (97)
                           :     :     +- ReusedExchange (96)
                           :     +- BroadcastExchange (103)
                           :        +- * Project (102)
                           :           +- * Filter (101)
                           :              +- * ColumnarToRow (100)
                           :                 +- Scan parquet default.date_dim (99)
                           +- ReusedExchange (106)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 10]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 10]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1998)) AND (d_year#15 <= 2000)) AND isnotnull(d_date_sk#14))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(16) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(17) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(18) Project [codegen id : 10]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(19) Scan parquet default.item
Output [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Condition : (((isnotnull(i_item_sk#17) AND isnotnull(i_brand_id#18)) AND isnotnull(i_class_id#19)) AND isnotnull(i_category_id#20))

(22) Exchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: hashpartitioning(coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20), 5), ENSURE_REQUIREMENTS, [id=#21]

(23) Sort [codegen id : 5]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: [coalesce(i_brand_id#18, 0) ASC NULLS FIRST, isnull(i_brand_id#18) ASC NULLS FIRST, coalesce(i_class_id#19, 0) ASC NULLS FIRST, isnull(i_class_id#19) ASC NULLS FIRST, coalesce(i_category_id#20, 0) ASC NULLS FIRST, isnull(i_category_id#20) ASC NULLS FIRST], false, 0

(24) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#22, cs_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#23), dynamicpruningexpression(cs_sold_date_sk#23 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(25) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#22, cs_sold_date_sk#23]

(26) Filter [codegen id : 8]
Input [2]: [cs_item_sk#22, cs_sold_date_sk#23]
Condition : isnotnull(cs_item_sk#22)

(27) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#24]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#23]
Right keys [1]: [d_date_sk#24]
Join condition: None

(29) Project [codegen id : 8]
Output [1]: [cs_item_sk#22]
Input [3]: [cs_item_sk#22, cs_sold_date_sk#23, d_date_sk#24]

(30) Scan parquet default.item
Output [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(31) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]

(32) Filter [codegen id : 7]
Input [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]
Condition : isnotnull(i_item_sk#25)

(33) BroadcastExchange
Input [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#22]
Right keys [1]: [i_item_sk#25]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [i_brand_id#26, i_class_id#27, i_category_id#28]
Input [5]: [cs_item_sk#22, i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]

(36) Exchange
Input [3]: [i_brand_id#26, i_class_id#27, i_category_id#28]
Arguments: hashpartitioning(coalesce(i_brand_id#26, 0), isnull(i_brand_id#26), coalesce(i_class_id#27, 0), isnull(i_class_id#27), coalesce(i_category_id#28, 0), isnull(i_category_id#28), 5), ENSURE_REQUIREMENTS, [id=#30]

(37) Sort [codegen id : 9]
Input [3]: [i_brand_id#26, i_class_id#27, i_category_id#28]
Arguments: [coalesce(i_brand_id#26, 0) ASC NULLS FIRST, isnull(i_brand_id#26) ASC NULLS FIRST, coalesce(i_class_id#27, 0) ASC NULLS FIRST, isnull(i_class_id#27) ASC NULLS FIRST, coalesce(i_category_id#28, 0) ASC NULLS FIRST, isnull(i_category_id#28) ASC NULLS FIRST], false, 0

(38) SortMergeJoin
Left keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Right keys [6]: [coalesce(i_brand_id#26, 0), isnull(i_brand_id#26), coalesce(i_class_id#27, 0), isnull(i_class_id#27), coalesce(i_category_id#28, 0), isnull(i_category_id#28)]
Join condition: None

(39) BroadcastExchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(40) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#17]
Join condition: None

(41) Project [codegen id : 10]
Output [3]: [i_brand_id#18 AS brand_id#32, i_class_id#19 AS class_id#33, i_category_id#20 AS category_id#34]
Input [5]: [ss_item_sk#11, i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(42) HashAggregate [codegen id : 10]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(43) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#35]

(44) HashAggregate [codegen id : 11]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(45) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34), 5), ENSURE_REQUIREMENTS, [id=#36]

(46) Sort [codegen id : 12]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: [coalesce(brand_id#32, 0) ASC NULLS FIRST, isnull(brand_id#32) ASC NULLS FIRST, coalesce(class_id#33, 0) ASC NULLS FIRST, isnull(class_id#33) ASC NULLS FIRST, coalesce(category_id#34, 0) ASC NULLS FIRST, isnull(category_id#34) ASC NULLS FIRST], false, 0

(47) Scan parquet default.web_sales
Output [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#38), dynamicpruningexpression(ws_sold_date_sk#38 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(48) ColumnarToRow [codegen id : 15]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]

(49) Filter [codegen id : 15]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Condition : isnotnull(ws_item_sk#37)

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#39]

(51) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_sold_date_sk#38]
Right keys [1]: [d_date_sk#39]
Join condition: None

(52) Project [codegen id : 15]
Output [1]: [ws_item_sk#37]
Input [3]: [ws_item_sk#37, ws_sold_date_sk#38, d_date_sk#39]

(53) ReusedExchange [Reuses operator id: 33]
Output [4]: [i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(54) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_item_sk#37]
Right keys [1]: [i_item_sk#40]
Join condition: None

(55) Project [codegen id : 15]
Output [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Input [5]: [ws_item_sk#37, i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(56) Exchange
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: hashpartitioning(coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43), 5), ENSURE_REQUIREMENTS, [id=#44]

(57) Sort [codegen id : 16]
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: [coalesce(i_brand_id#41, 0) ASC NULLS FIRST, isnull(i_brand_id#41) ASC NULLS FIRST, coalesce(i_class_id#42, 0) ASC NULLS FIRST, isnull(i_class_id#42) ASC NULLS FIRST, coalesce(i_category_id#43, 0) ASC NULLS FIRST, isnull(i_category_id#43) ASC NULLS FIRST], false, 0

(58) SortMergeJoin
Left keys [6]: [coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34)]
Right keys [6]: [coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43)]
Join condition: None

(59) HashAggregate [codegen id : 17]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(60) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#45]

(61) HashAggregate [codegen id : 18]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(62) BroadcastExchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#46]

(63) BroadcastHashJoin [codegen id : 19]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#32, class_id#33, category_id#34]
Join condition: None

(64) Project [codegen id : 19]
Output [1]: [i_item_sk#7 AS ss_item_sk#47]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#32, class_id#33, category_id#34]

(65) Exchange
Input [1]: [ss_item_sk#47]
Arguments: hashpartitioning(ss_item_sk#47, 5), ENSURE_REQUIREMENTS, [id=#48]

(66) Sort [codegen id : 20]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(67) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(68) Scan parquet default.date_dim
Output [2]: [d_date_sk#49, d_week_seq#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(69) ColumnarToRow [codegen id : 21]
Input [2]: [d_date_sk#49, d_week_seq#50]

(70) Filter [codegen id : 21]
Input [2]: [d_date_sk#49, d_week_seq#50]
Condition : ((isnotnull(d_week_seq#50) AND (d_week_seq#50 = Subquery scalar-subquery#51, [id=#52])) AND isnotnull(d_date_sk#49))

(71) Project [codegen id : 21]
Output [1]: [d_date_sk#49]
Input [2]: [d_date_sk#49, d_week_seq#50]

(72) BroadcastExchange
Input [1]: [d_date_sk#49]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#53]

(73) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#49]
Join condition: None

(74) Project [codegen id : 42]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#49]

(75) Scan parquet default.item
Output [4]: [i_item_sk#54, i_brand_id#55, i_class_id#56, i_category_id#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(76) ColumnarToRow [codegen id : 22]
Input [4]: [i_item_sk#54, i_brand_id#55, i_class_id#56, i_category_id#57]

(77) Filter [codegen id : 22]
Input [4]: [i_item_sk#54, i_brand_id#55, i_class_id#56, i_category_id#57]
Condition : (((isnotnull(i_item_sk#54) AND isnotnull(i_brand_id#55)) AND isnotnull(i_class_id#56)) AND isnotnull(i_category_id#57))

(78) Exchange
Input [4]: [i_item_sk#54, i_brand_id#55, i_class_id#56, i_category_id#57]
Arguments: hashpartitioning(i_item_sk#54, 5), ENSURE_REQUIREMENTS, [id=#58]

(79) Sort [codegen id : 23]
Input [4]: [i_item_sk#54, i_brand_id#55, i_class_id#56, i_category_id#57]
Arguments: [i_item_sk#54 ASC NULLS FIRST], false, 0

(80) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#47]

(81) Sort [codegen id : 41]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(82) SortMergeJoin
Left keys [1]: [i_item_sk#54]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(83) BroadcastExchange
Input [4]: [i_item_sk#54, i_brand_id#55, i_class_id#56, i_category_id#57]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#59]

(84) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#54]
Join condition: None

(85) Project [codegen id : 42]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#55, i_class_id#56, i_category_id#57]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#54, i_brand_id#55, i_class_id#56, i_category_id#57]

(86) HashAggregate [codegen id : 42]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#55, i_class_id#56, i_category_id#57]
Keys [3]: [i_brand_id#55, i_class_id#56, i_category_id#57]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#60, isEmpty#61, count#62]
Results [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sum#63, isEmpty#64, count#65]

(87) Exchange
Input [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sum#63, isEmpty#64, count#65]
Arguments: hashpartitioning(i_brand_id#55, i_class_id#56, i_category_id#57, 5), ENSURE_REQUIREMENTS, [id=#66]

(88) HashAggregate [codegen id : 86]
Input [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sum#63, isEmpty#64, count#65]
Keys [3]: [i_brand_id#55, i_class_id#56, i_category_id#57]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#67, count(1)#68]
Results [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#67 AS sales#69, count(1)#68 AS number_sales#70, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#67 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#71]

(89) Filter [codegen id : 86]
Input [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sales#69, number_sales#70, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#71]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#71) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#71 as decimal(32,6)) > cast(Subquery scalar-subquery#72, [id=#73] as decimal(32,6))))

(90) Project [codegen id : 86]
Output [6]: [store AS channel#74, i_brand_id#55, i_class_id#56, i_category_id#57, sales#69, number_sales#70]
Input [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sales#69, number_sales#70, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#71]

(91) Scan parquet default.store_sales
Output [4]: [ss_item_sk#75, ss_quantity#76, ss_list_price#77, ss_sold_date_sk#78]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#78), dynamicpruningexpression(ss_sold_date_sk#78 IN dynamicpruning#79)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 43]
Input [4]: [ss_item_sk#75, ss_quantity#76, ss_list_price#77, ss_sold_date_sk#78]

(93) Filter [codegen id : 43]
Input [4]: [ss_item_sk#75, ss_quantity#76, ss_list_price#77, ss_sold_date_sk#78]
Condition : isnotnull(ss_item_sk#75)

(94) Exchange
Input [4]: [ss_item_sk#75, ss_quantity#76, ss_list_price#77, ss_sold_date_sk#78]
Arguments: hashpartitioning(ss_item_sk#75, 5), ENSURE_REQUIREMENTS, [id=#80]

(95) Sort [codegen id : 44]
Input [4]: [ss_item_sk#75, ss_quantity#76, ss_list_price#77, ss_sold_date_sk#78]
Arguments: [ss_item_sk#75 ASC NULLS FIRST], false, 0

(96) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#47]

(97) Sort [codegen id : 62]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(98) SortMergeJoin
Left keys [1]: [ss_item_sk#75]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(99) Scan parquet default.date_dim
Output [2]: [d_date_sk#81, d_week_seq#82]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(100) ColumnarToRow [codegen id : 63]
Input [2]: [d_date_sk#81, d_week_seq#82]

(101) Filter [codegen id : 63]
Input [2]: [d_date_sk#81, d_week_seq#82]
Condition : ((isnotnull(d_week_seq#82) AND (d_week_seq#82 = Subquery scalar-subquery#83, [id=#84])) AND isnotnull(d_date_sk#81))

(102) Project [codegen id : 63]
Output [1]: [d_date_sk#81]
Input [2]: [d_date_sk#81, d_week_seq#82]

(103) BroadcastExchange
Input [1]: [d_date_sk#81]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#85]

(104) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [ss_sold_date_sk#78]
Right keys [1]: [d_date_sk#81]
Join condition: None

(105) Project [codegen id : 84]
Output [3]: [ss_item_sk#75, ss_quantity#76, ss_list_price#77]
Input [5]: [ss_item_sk#75, ss_quantity#76, ss_list_price#77, ss_sold_date_sk#78, d_date_sk#81]

(106) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#86, i_brand_id#87, i_class_id#88, i_category_id#89]

(107) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [ss_item_sk#75]
Right keys [1]: [i_item_sk#86]
Join condition: None

(108) Project [codegen id : 84]
Output [5]: [ss_quantity#76, ss_list_price#77, i_brand_id#87, i_class_id#88, i_category_id#89]
Input [7]: [ss_item_sk#75, ss_quantity#76, ss_list_price#77, i_item_sk#86, i_brand_id#87, i_class_id#88, i_category_id#89]

(109) HashAggregate [codegen id : 84]
Input [5]: [ss_quantity#76, ss_list_price#77, i_brand_id#87, i_class_id#88, i_category_id#89]
Keys [3]: [i_brand_id#87, i_class_id#88, i_category_id#89]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#76 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#77 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#90, isEmpty#91, count#92]
Results [6]: [i_brand_id#87, i_class_id#88, i_category_id#89, sum#93, isEmpty#94, count#95]

(110) Exchange
Input [6]: [i_brand_id#87, i_class_id#88, i_category_id#89, sum#93, isEmpty#94, count#95]
Arguments: hashpartitioning(i_brand_id#87, i_class_id#88, i_category_id#89, 5), ENSURE_REQUIREMENTS, [id=#96]

(111) HashAggregate [codegen id : 85]
Input [6]: [i_brand_id#87, i_class_id#88, i_category_id#89, sum#93, isEmpty#94, count#95]
Keys [3]: [i_brand_id#87, i_class_id#88, i_category_id#89]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#76 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#77 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#76 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#77 as decimal(12,2)))), DecimalType(18,2), true))#97, count(1)#98]
Results [6]: [i_brand_id#87, i_class_id#88, i_category_id#89, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#76 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#77 as decimal(12,2)))), DecimalType(18,2), true))#97 AS sales#99, count(1)#98 AS number_sales#100, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#76 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#77 as decimal(12,2)))), DecimalType(18,2), true))#97 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#76 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#77 as decimal(12,2)))), DecimalType(18,2), true))#101]

(112) Filter [codegen id : 85]
Input [6]: [i_brand_id#87, i_class_id#88, i_category_id#89, sales#99, number_sales#100, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#76 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#77 as decimal(12,2)))), DecimalType(18,2), true))#101]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#76 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#77 as decimal(12,2)))), DecimalType(18,2), true))#101) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#76 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#77 as decimal(12,2)))), DecimalType(18,2), true))#101 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#72, [id=#73] as decimal(32,6))))

(113) Project [codegen id : 85]
Output [6]: [store AS channel#102, i_brand_id#87, i_class_id#88, i_category_id#89, sales#99, number_sales#100]
Input [6]: [i_brand_id#87, i_class_id#88, i_category_id#89, sales#99, number_sales#100, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#76 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#77 as decimal(12,2)))), DecimalType(18,2), true))#101]

(114) BroadcastExchange
Input [6]: [channel#102, i_brand_id#87, i_class_id#88, i_category_id#89, sales#99, number_sales#100]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#103]

(115) BroadcastHashJoin [codegen id : 86]
Left keys [3]: [i_brand_id#55, i_class_id#56, i_category_id#57]
Right keys [3]: [i_brand_id#87, i_class_id#88, i_category_id#89]
Join condition: None

(116) TakeOrderedAndProject
Input [12]: [channel#74, i_brand_id#55, i_class_id#56, i_category_id#57, sales#69, number_sales#70, channel#102, i_brand_id#87, i_class_id#88, i_category_id#89, sales#99, number_sales#100]
Arguments: 100, [i_brand_id#55 ASC NULLS FIRST, i_class_id#56 ASC NULLS FIRST, i_category_id#57 ASC NULLS FIRST], [channel#74, i_brand_id#55, i_class_id#56, i_category_id#57, sales#69, number_sales#70, channel#102, i_brand_id#87, i_class_id#88, i_category_id#89, sales#99, number_sales#100]

===== Subqueries =====

Subquery:1 Hosting operator id = 89 Hosting Expression = Subquery scalar-subquery#72, [id=#73]
* HashAggregate (139)
+- Exchange (138)
   +- * HashAggregate (137)
      +- Union (136)
         :- * Project (125)
         :  +- * BroadcastHashJoin Inner BuildRight (124)
         :     :- * ColumnarToRow (118)
         :     :  +- Scan parquet default.store_sales (117)
         :     +- BroadcastExchange (123)
         :        +- * Project (122)
         :           +- * Filter (121)
         :              +- * ColumnarToRow (120)
         :                 +- Scan parquet default.date_dim (119)
         :- * Project (130)
         :  +- * BroadcastHashJoin Inner BuildRight (129)
         :     :- * ColumnarToRow (127)
         :     :  +- Scan parquet default.catalog_sales (126)
         :     +- ReusedExchange (128)
         +- * Project (135)
            +- * BroadcastHashJoin Inner BuildRight (134)
               :- * ColumnarToRow (132)
               :  +- Scan parquet default.web_sales (131)
               +- ReusedExchange (133)


(117) Scan parquet default.store_sales
Output [3]: [ss_quantity#104, ss_list_price#105, ss_sold_date_sk#106]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#106), dynamicpruningexpression(ss_sold_date_sk#106 IN dynamicpruning#107)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(118) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#104, ss_list_price#105, ss_sold_date_sk#106]

(119) Scan parquet default.date_dim
Output [2]: [d_date_sk#108, d_year#109]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(120) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#108, d_year#109]

(121) Filter [codegen id : 1]
Input [2]: [d_date_sk#108, d_year#109]
Condition : (((isnotnull(d_year#109) AND (d_year#109 >= 1998)) AND (d_year#109 <= 2000)) AND isnotnull(d_date_sk#108))

(122) Project [codegen id : 1]
Output [1]: [d_date_sk#108]
Input [2]: [d_date_sk#108, d_year#109]

(123) BroadcastExchange
Input [1]: [d_date_sk#108]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#110]

(124) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#106]
Right keys [1]: [d_date_sk#108]
Join condition: None

(125) Project [codegen id : 2]
Output [2]: [ss_quantity#104 AS quantity#111, ss_list_price#105 AS list_price#112]
Input [4]: [ss_quantity#104, ss_list_price#105, ss_sold_date_sk#106, d_date_sk#108]

(126) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#113, cs_list_price#114, cs_sold_date_sk#115]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#115), dynamicpruningexpression(cs_sold_date_sk#115 IN dynamicpruning#107)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(127) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#113, cs_list_price#114, cs_sold_date_sk#115]

(128) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#116]

(129) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#115]
Right keys [1]: [d_date_sk#116]
Join condition: None

(130) Project [codegen id : 4]
Output [2]: [cs_quantity#113 AS quantity#117, cs_list_price#114 AS list_price#118]
Input [4]: [cs_quantity#113, cs_list_price#114, cs_sold_date_sk#115, d_date_sk#116]

(131) Scan parquet default.web_sales
Output [3]: [ws_quantity#119, ws_list_price#120, ws_sold_date_sk#121]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#121), dynamicpruningexpression(ws_sold_date_sk#121 IN dynamicpruning#107)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(132) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#119, ws_list_price#120, ws_sold_date_sk#121]

(133) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#122]

(134) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#121]
Right keys [1]: [d_date_sk#122]
Join condition: None

(135) Project [codegen id : 6]
Output [2]: [ws_quantity#119 AS quantity#123, ws_list_price#120 AS list_price#124]
Input [4]: [ws_quantity#119, ws_list_price#120, ws_sold_date_sk#121, d_date_sk#122]

(136) Union

(137) HashAggregate [codegen id : 7]
Input [2]: [quantity#111, list_price#112]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#111 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#112 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#125, count#126]
Results [2]: [sum#127, count#128]

(138) Exchange
Input [2]: [sum#127, count#128]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#129]

(139) HashAggregate [codegen id : 8]
Input [2]: [sum#127, count#128]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#111 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#112 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#111 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#112 as decimal(12,2)))), DecimalType(18,2), true))#130]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#111 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#112 as decimal(12,2)))), DecimalType(18,2), true))#130 AS average_sales#131]

Subquery:2 Hosting operator id = 117 Hosting Expression = ss_sold_date_sk#106 IN dynamicpruning#107
ReusedExchange (140)


(140) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#108]

Subquery:3 Hosting operator id = 126 Hosting Expression = cs_sold_date_sk#115 IN dynamicpruning#107

Subquery:4 Hosting operator id = 131 Hosting Expression = ws_sold_date_sk#121 IN dynamicpruning#107

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (141)


(141) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#49]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
ReusedExchange (142)


(142) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#14]

Subquery:7 Hosting operator id = 24 Hosting Expression = cs_sold_date_sk#23 IN dynamicpruning#13

Subquery:8 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#38 IN dynamicpruning#13

Subquery:9 Hosting operator id = 70 Hosting Expression = Subquery scalar-subquery#51, [id=#52]
* Project (146)
+- * Filter (145)
   +- * ColumnarToRow (144)
      +- Scan parquet default.date_dim (143)


(143) Scan parquet default.date_dim
Output [4]: [d_week_seq#132, d_year#133, d_moy#134, d_dom#135]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(144) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#132, d_year#133, d_moy#134, d_dom#135]

(145) Filter [codegen id : 1]
Input [4]: [d_week_seq#132, d_year#133, d_moy#134, d_dom#135]
Condition : (((((isnotnull(d_year#133) AND isnotnull(d_moy#134)) AND isnotnull(d_dom#135)) AND (d_year#133 = 1999)) AND (d_moy#134 = 12)) AND (d_dom#135 = 16))

(146) Project [codegen id : 1]
Output [1]: [d_week_seq#132]
Input [4]: [d_week_seq#132, d_year#133, d_moy#134, d_dom#135]

Subquery:10 Hosting operator id = 112 Hosting Expression = ReusedSubquery Subquery scalar-subquery#72, [id=#73]

Subquery:11 Hosting operator id = 91 Hosting Expression = ss_sold_date_sk#78 IN dynamicpruning#79
ReusedExchange (147)


(147) ReusedExchange [Reuses operator id: 103]
Output [1]: [d_date_sk#81]

Subquery:12 Hosting operator id = 101 Hosting Expression = Subquery scalar-subquery#83, [id=#84]
* Project (151)
+- * Filter (150)
   +- * ColumnarToRow (149)
      +- Scan parquet default.date_dim (148)


(148) Scan parquet default.date_dim
Output [4]: [d_week_seq#136, d_year#137, d_moy#138, d_dom#139]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(149) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#136, d_year#137, d_moy#138, d_dom#139]

(150) Filter [codegen id : 1]
Input [4]: [d_week_seq#136, d_year#137, d_moy#138, d_dom#139]
Condition : (((((isnotnull(d_year#137) AND isnotnull(d_moy#138)) AND isnotnull(d_dom#139)) AND (d_year#137 = 1998)) AND (d_moy#138 = 12)) AND (d_dom#139 = 16))

(151) Project [codegen id : 1]
Output [1]: [d_week_seq#136]
Input [4]: [d_week_seq#136, d_year#137, d_moy#138, d_dom#139]


