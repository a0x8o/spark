== Physical Plan ==
TakeOrderedAndProject (73)
+- * Project (72)
   +- * SortMergeJoin Inner (71)
      :- * Project (48)
      :  +- * SortMergeJoin Inner (47)
      :     :- * Sort (24)
      :     :  +- * HashAggregate (23)
      :     :     +- Exchange (22)
      :     :        +- * HashAggregate (21)
      :     :           +- * Project (20)
      :     :              +- * BroadcastHashJoin Inner BuildRight (19)
      :     :                 :- * Project (14)
      :     :                 :  +- * Filter (13)
      :     :                 :     +- SortMergeJoin LeftOuter (12)
      :     :                 :        :- * Sort (5)
      :     :                 :        :  +- Exchange (4)
      :     :                 :        :     +- * Filter (3)
      :     :                 :        :        +- * ColumnarToRow (2)
      :     :                 :        :           +- Scan parquet default.store_sales (1)
      :     :                 :        +- * Sort (11)
      :     :                 :           +- Exchange (10)
      :     :                 :              +- * Project (9)
      :     :                 :                 +- * Filter (8)
      :     :                 :                    +- * ColumnarToRow (7)
      :     :                 :                       +- Scan parquet default.store_returns (6)
      :     :                 +- BroadcastExchange (18)
      :     :                    +- * Filter (17)
      :     :                       +- * ColumnarToRow (16)
      :     :                          +- Scan parquet default.date_dim (15)
      :     +- * Sort (46)
      :        +- * Filter (45)
      :           +- * HashAggregate (44)
      :              +- Exchange (43)
      :                 +- * HashAggregate (42)
      :                    +- * Project (41)
      :                       +- * BroadcastHashJoin Inner BuildRight (40)
      :                          :- * Project (38)
      :                          :  +- * Filter (37)
      :                          :     +- SortMergeJoin LeftOuter (36)
      :                          :        :- * Sort (29)
      :                          :        :  +- Exchange (28)
      :                          :        :     +- * Filter (27)
      :                          :        :        +- * ColumnarToRow (26)
      :                          :        :           +- Scan parquet default.catalog_sales (25)
      :                          :        +- * Sort (35)
      :                          :           +- Exchange (34)
      :                          :              +- * Project (33)
      :                          :                 +- * Filter (32)
      :                          :                    +- * ColumnarToRow (31)
      :                          :                       +- Scan parquet default.catalog_returns (30)
      :                          +- ReusedExchange (39)
      +- * Sort (70)
         +- * Filter (69)
            +- * HashAggregate (68)
               +- Exchange (67)
                  +- * HashAggregate (66)
                     +- * Project (65)
                        +- * BroadcastHashJoin Inner BuildRight (64)
                           :- * Project (62)
                           :  +- * Filter (61)
                           :     +- SortMergeJoin LeftOuter (60)
                           :        :- * Sort (53)
                           :        :  +- Exchange (52)
                           :        :     +- * Filter (51)
                           :        :        +- * ColumnarToRow (50)
                           :        :           +- Scan parquet default.web_sales (49)
                           :        +- * Sort (59)
                           :           +- Exchange (58)
                           :              +- * Project (57)
                           :                 +- * Filter (56)
                           :                    +- * ColumnarToRow (55)
                           :                       +- Scan parquet default.web_returns (54)
                           +- ReusedExchange (63)


(1) Scan parquet default.store_sales
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_customer_sk#2))

(4) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(cast(ss_ticket_number#3 as bigint), cast(ss_item_sk#1 as bigint), 5), ENSURE_REQUIREMENTS, [id=#9]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: [cast(ss_ticket_number#3 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(7) ColumnarToRow [codegen id : 3]
Input [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]

(8) Filter [codegen id : 3]
Input [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]
Condition : (isnotnull(sr_ticket_number#11) AND isnotnull(sr_item_sk#10))

(9) Project [codegen id : 3]
Output [2]: [sr_item_sk#10, sr_ticket_number#11]
Input [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]

(10) Exchange
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: hashpartitioning(sr_ticket_number#11, sr_item_sk#10, 5), ENSURE_REQUIREMENTS, [id=#13]

(11) Sort [codegen id : 4]
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: [sr_ticket_number#11 ASC NULLS FIRST, sr_item_sk#10 ASC NULLS FIRST], false, 0

(12) SortMergeJoin
Left keys [2]: [cast(ss_ticket_number#3 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#11, sr_item_sk#10]
Join condition: None

(13) Filter [codegen id : 6]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11]
Condition : isnull(sr_ticket_number#11)

(14) Project [codegen id : 6]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11]

(15) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(16) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#14, d_year#15]

(17) Filter [codegen id : 5]
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 2000)) AND isnotnull(d_date_sk#14))

(18) BroadcastExchange
Input [2]: [d_date_sk#14, d_year#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16]

(19) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#14]
Join condition: None

(20) Project [codegen id : 6]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#15]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, d_date_sk#14, d_year#15]

(21) HashAggregate [codegen id : 6]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#15]
Keys [3]: [d_year#15, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [partial_sum(ss_quantity#4), partial_sum(UnscaledValue(ss_wholesale_cost#5)), partial_sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [3]: [sum#17, sum#18, sum#19]
Results [6]: [d_year#15, ss_item_sk#1, ss_customer_sk#2, sum#20, sum#21, sum#22]

(22) Exchange
Input [6]: [d_year#15, ss_item_sk#1, ss_customer_sk#2, sum#20, sum#21, sum#22]
Arguments: hashpartitioning(d_year#15, ss_item_sk#1, ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#23]

(23) HashAggregate [codegen id : 7]
Input [6]: [d_year#15, ss_item_sk#1, ss_customer_sk#2, sum#20, sum#21, sum#22]
Keys [3]: [d_year#15, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [sum(ss_quantity#4), sum(UnscaledValue(ss_wholesale_cost#5)), sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [3]: [sum(ss_quantity#4)#24, sum(UnscaledValue(ss_wholesale_cost#5))#25, sum(UnscaledValue(ss_sales_price#6))#26]
Results [6]: [d_year#15 AS ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, sum(ss_quantity#4)#24 AS ss_qty#28, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#5))#25,17,2) AS ss_wc#29, MakeDecimal(sum(UnscaledValue(ss_sales_price#6))#26,17,2) AS ss_sp#30]

(24) Sort [codegen id : 7]
Input [6]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30]
Arguments: [ss_sold_year#27 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST], false, 0

(25) Scan parquet default.catalog_sales
Output [7]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_order_number#33, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, cs_sold_date_sk#37]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#37), dynamicpruningexpression(cs_sold_date_sk#37 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_sales_price:decimal(7,2)>

(26) ColumnarToRow [codegen id : 8]
Input [7]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_order_number#33, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, cs_sold_date_sk#37]

(27) Filter [codegen id : 8]
Input [7]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_order_number#33, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, cs_sold_date_sk#37]
Condition : (isnotnull(cs_item_sk#32) AND isnotnull(cs_bill_customer_sk#31))

(28) Exchange
Input [7]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_order_number#33, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, cs_sold_date_sk#37]
Arguments: hashpartitioning(cs_order_number#33, cs_item_sk#32, 5), ENSURE_REQUIREMENTS, [id=#38]

(29) Sort [codegen id : 9]
Input [7]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_order_number#33, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, cs_sold_date_sk#37]
Arguments: [cs_order_number#33 ASC NULLS FIRST, cs_item_sk#32 ASC NULLS FIRST], false, 0

(30) Scan parquet default.catalog_returns
Output [3]: [cr_item_sk#39, cr_order_number#40, cr_returned_date_sk#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(31) ColumnarToRow [codegen id : 10]
Input [3]: [cr_item_sk#39, cr_order_number#40, cr_returned_date_sk#41]

(32) Filter [codegen id : 10]
Input [3]: [cr_item_sk#39, cr_order_number#40, cr_returned_date_sk#41]
Condition : (isnotnull(cr_order_number#40) AND isnotnull(cr_item_sk#39))

(33) Project [codegen id : 10]
Output [2]: [cr_item_sk#39, cr_order_number#40]
Input [3]: [cr_item_sk#39, cr_order_number#40, cr_returned_date_sk#41]

(34) Exchange
Input [2]: [cr_item_sk#39, cr_order_number#40]
Arguments: hashpartitioning(cr_order_number#40, cr_item_sk#39, 5), ENSURE_REQUIREMENTS, [id=#42]

(35) Sort [codegen id : 11]
Input [2]: [cr_item_sk#39, cr_order_number#40]
Arguments: [cr_order_number#40 ASC NULLS FIRST, cr_item_sk#39 ASC NULLS FIRST], false, 0

(36) SortMergeJoin
Left keys [2]: [cs_order_number#33, cs_item_sk#32]
Right keys [2]: [cr_order_number#40, cr_item_sk#39]
Join condition: None

(37) Filter [codegen id : 13]
Input [9]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_order_number#33, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, cs_sold_date_sk#37, cr_item_sk#39, cr_order_number#40]
Condition : isnull(cr_order_number#40)

(38) Project [codegen id : 13]
Output [6]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, cs_sold_date_sk#37]
Input [9]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_order_number#33, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, cs_sold_date_sk#37, cr_item_sk#39, cr_order_number#40]

(39) ReusedExchange [Reuses operator id: 18]
Output [2]: [d_date_sk#14, d_year#15]

(40) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_sold_date_sk#37]
Right keys [1]: [d_date_sk#14]
Join condition: None

(41) Project [codegen id : 13]
Output [6]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, d_year#15]
Input [8]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, cs_sold_date_sk#37, d_date_sk#14, d_year#15]

(42) HashAggregate [codegen id : 13]
Input [6]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#34, cs_wholesale_cost#35, cs_sales_price#36, d_year#15]
Keys [3]: [d_year#15, cs_item_sk#32, cs_bill_customer_sk#31]
Functions [3]: [partial_sum(cs_quantity#34), partial_sum(UnscaledValue(cs_wholesale_cost#35)), partial_sum(UnscaledValue(cs_sales_price#36))]
Aggregate Attributes [3]: [sum#43, sum#44, sum#45]
Results [6]: [d_year#15, cs_item_sk#32, cs_bill_customer_sk#31, sum#46, sum#47, sum#48]

(43) Exchange
Input [6]: [d_year#15, cs_item_sk#32, cs_bill_customer_sk#31, sum#46, sum#47, sum#48]
Arguments: hashpartitioning(d_year#15, cs_item_sk#32, cs_bill_customer_sk#31, 5), ENSURE_REQUIREMENTS, [id=#49]

(44) HashAggregate [codegen id : 14]
Input [6]: [d_year#15, cs_item_sk#32, cs_bill_customer_sk#31, sum#46, sum#47, sum#48]
Keys [3]: [d_year#15, cs_item_sk#32, cs_bill_customer_sk#31]
Functions [3]: [sum(cs_quantity#34), sum(UnscaledValue(cs_wholesale_cost#35)), sum(UnscaledValue(cs_sales_price#36))]
Aggregate Attributes [3]: [sum(cs_quantity#34)#50, sum(UnscaledValue(cs_wholesale_cost#35))#51, sum(UnscaledValue(cs_sales_price#36))#52]
Results [6]: [d_year#15 AS cs_sold_year#53, cs_item_sk#32, cs_bill_customer_sk#31 AS cs_customer_sk#54, sum(cs_quantity#34)#50 AS cs_qty#55, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#35))#51,17,2) AS cs_wc#56, MakeDecimal(sum(UnscaledValue(cs_sales_price#36))#52,17,2) AS cs_sp#57]

(45) Filter [codegen id : 14]
Input [6]: [cs_sold_year#53, cs_item_sk#32, cs_customer_sk#54, cs_qty#55, cs_wc#56, cs_sp#57]
Condition : (coalesce(cs_qty#55, 0) > 0)

(46) Sort [codegen id : 14]
Input [6]: [cs_sold_year#53, cs_item_sk#32, cs_customer_sk#54, cs_qty#55, cs_wc#56, cs_sp#57]
Arguments: [cs_sold_year#53 ASC NULLS FIRST, cs_item_sk#32 ASC NULLS FIRST, cs_customer_sk#54 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 15]
Left keys [3]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2]
Right keys [3]: [cs_sold_year#53, cs_item_sk#32, cs_customer_sk#54]
Join condition: None

(48) Project [codegen id : 15]
Output [9]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30, cs_qty#55, cs_wc#56, cs_sp#57]
Input [12]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30, cs_sold_year#53, cs_item_sk#32, cs_customer_sk#54, cs_qty#55, cs_wc#56, cs_sp#57]

(49) Scan parquet default.web_sales
Output [7]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_order_number#60, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, ws_sold_date_sk#64]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#64), dynamicpruningexpression(ws_sold_date_sk#64 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_sales_price:decimal(7,2)>

(50) ColumnarToRow [codegen id : 16]
Input [7]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_order_number#60, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, ws_sold_date_sk#64]

(51) Filter [codegen id : 16]
Input [7]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_order_number#60, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, ws_sold_date_sk#64]
Condition : (isnotnull(ws_item_sk#58) AND isnotnull(ws_bill_customer_sk#59))

(52) Exchange
Input [7]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_order_number#60, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, ws_sold_date_sk#64]
Arguments: hashpartitioning(cast(ws_order_number#60 as bigint), cast(ws_item_sk#58 as bigint), 5), ENSURE_REQUIREMENTS, [id=#65]

(53) Sort [codegen id : 17]
Input [7]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_order_number#60, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, ws_sold_date_sk#64]
Arguments: [cast(ws_order_number#60 as bigint) ASC NULLS FIRST, cast(ws_item_sk#58 as bigint) ASC NULLS FIRST], false, 0

(54) Scan parquet default.web_returns
Output [3]: [wr_item_sk#66, wr_order_number#67, wr_returned_date_sk#68]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint>

(55) ColumnarToRow [codegen id : 18]
Input [3]: [wr_item_sk#66, wr_order_number#67, wr_returned_date_sk#68]

(56) Filter [codegen id : 18]
Input [3]: [wr_item_sk#66, wr_order_number#67, wr_returned_date_sk#68]
Condition : (isnotnull(wr_order_number#67) AND isnotnull(wr_item_sk#66))

(57) Project [codegen id : 18]
Output [2]: [wr_item_sk#66, wr_order_number#67]
Input [3]: [wr_item_sk#66, wr_order_number#67, wr_returned_date_sk#68]

(58) Exchange
Input [2]: [wr_item_sk#66, wr_order_number#67]
Arguments: hashpartitioning(wr_order_number#67, wr_item_sk#66, 5), ENSURE_REQUIREMENTS, [id=#69]

(59) Sort [codegen id : 19]
Input [2]: [wr_item_sk#66, wr_order_number#67]
Arguments: [wr_order_number#67 ASC NULLS FIRST, wr_item_sk#66 ASC NULLS FIRST], false, 0

(60) SortMergeJoin
Left keys [2]: [cast(ws_order_number#60 as bigint), cast(ws_item_sk#58 as bigint)]
Right keys [2]: [wr_order_number#67, wr_item_sk#66]
Join condition: None

(61) Filter [codegen id : 21]
Input [9]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_order_number#60, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, ws_sold_date_sk#64, wr_item_sk#66, wr_order_number#67]
Condition : isnull(wr_order_number#67)

(62) Project [codegen id : 21]
Output [6]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, ws_sold_date_sk#64]
Input [9]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_order_number#60, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, ws_sold_date_sk#64, wr_item_sk#66, wr_order_number#67]

(63) ReusedExchange [Reuses operator id: 18]
Output [2]: [d_date_sk#14, d_year#15]

(64) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_sold_date_sk#64]
Right keys [1]: [d_date_sk#14]
Join condition: None

(65) Project [codegen id : 21]
Output [6]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, d_year#15]
Input [8]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, ws_sold_date_sk#64, d_date_sk#14, d_year#15]

(66) HashAggregate [codegen id : 21]
Input [6]: [ws_item_sk#58, ws_bill_customer_sk#59, ws_quantity#61, ws_wholesale_cost#62, ws_sales_price#63, d_year#15]
Keys [3]: [d_year#15, ws_item_sk#58, ws_bill_customer_sk#59]
Functions [3]: [partial_sum(ws_quantity#61), partial_sum(UnscaledValue(ws_wholesale_cost#62)), partial_sum(UnscaledValue(ws_sales_price#63))]
Aggregate Attributes [3]: [sum#70, sum#71, sum#72]
Results [6]: [d_year#15, ws_item_sk#58, ws_bill_customer_sk#59, sum#73, sum#74, sum#75]

(67) Exchange
Input [6]: [d_year#15, ws_item_sk#58, ws_bill_customer_sk#59, sum#73, sum#74, sum#75]
Arguments: hashpartitioning(d_year#15, ws_item_sk#58, ws_bill_customer_sk#59, 5), ENSURE_REQUIREMENTS, [id=#76]

(68) HashAggregate [codegen id : 22]
Input [6]: [d_year#15, ws_item_sk#58, ws_bill_customer_sk#59, sum#73, sum#74, sum#75]
Keys [3]: [d_year#15, ws_item_sk#58, ws_bill_customer_sk#59]
Functions [3]: [sum(ws_quantity#61), sum(UnscaledValue(ws_wholesale_cost#62)), sum(UnscaledValue(ws_sales_price#63))]
Aggregate Attributes [3]: [sum(ws_quantity#61)#77, sum(UnscaledValue(ws_wholesale_cost#62))#78, sum(UnscaledValue(ws_sales_price#63))#79]
Results [6]: [d_year#15 AS ws_sold_year#80, ws_item_sk#58, ws_bill_customer_sk#59 AS ws_customer_sk#81, sum(ws_quantity#61)#77 AS ws_qty#82, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#62))#78,17,2) AS ws_wc#83, MakeDecimal(sum(UnscaledValue(ws_sales_price#63))#79,17,2) AS ws_sp#84]

(69) Filter [codegen id : 22]
Input [6]: [ws_sold_year#80, ws_item_sk#58, ws_customer_sk#81, ws_qty#82, ws_wc#83, ws_sp#84]
Condition : (coalesce(ws_qty#82, 0) > 0)

(70) Sort [codegen id : 22]
Input [6]: [ws_sold_year#80, ws_item_sk#58, ws_customer_sk#81, ws_qty#82, ws_wc#83, ws_sp#84]
Arguments: [ws_sold_year#80 ASC NULLS FIRST, ws_item_sk#58 ASC NULLS FIRST, ws_customer_sk#81 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 23]
Left keys [3]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2]
Right keys [3]: [ws_sold_year#80, ws_item_sk#58, ws_customer_sk#81]
Join condition: None

(72) Project [codegen id : 23]
Output [13]: [round((cast(ss_qty#28 as double) / cast(coalesce((ws_qty#82 + cs_qty#55), 1) as double)), 2) AS ratio#85, ss_qty#28 AS store_qty#86, ss_wc#29 AS store_wholesale_cost#87, ss_sp#30 AS store_sales_price#88, (coalesce(ws_qty#82, 0) + coalesce(cs_qty#55, 0)) AS other_chan_qty#89, CheckOverflow((promote_precision(cast(coalesce(ws_wc#83, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_wc#56, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_wholesale_cost#90, CheckOverflow((promote_precision(cast(coalesce(ws_sp#84, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_sp#57, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_sales_price#91, ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30]
Input [15]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30, cs_qty#55, cs_wc#56, cs_sp#57, ws_sold_year#80, ws_item_sk#58, ws_customer_sk#81, ws_qty#82, ws_wc#83, ws_sp#84]

(73) TakeOrderedAndProject
Input [13]: [ratio#85, store_qty#86, store_wholesale_cost#87, store_sales_price#88, other_chan_qty#89, other_chan_wholesale_cost#90, other_chan_sales_price#91, ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30]
Arguments: 100, [ss_sold_year#27 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST, ss_qty#28 DESC NULLS LAST, ss_wc#29 DESC NULLS LAST, ss_sp#30 DESC NULLS LAST, other_chan_qty#89 ASC NULLS FIRST, other_chan_wholesale_cost#90 ASC NULLS FIRST, other_chan_sales_price#91 ASC NULLS FIRST, ratio#85 ASC NULLS FIRST], [ratio#85, store_qty#86, store_wholesale_cost#87, store_sales_price#88, other_chan_qty#89, other_chan_wholesale_cost#90, other_chan_sales_price#91]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
ReusedExchange (74)


(74) ReusedExchange [Reuses operator id: 18]
Output [2]: [d_date_sk#14, d_year#15]

Subquery:2 Hosting operator id = 25 Hosting Expression = cs_sold_date_sk#37 IN dynamicpruning#8

Subquery:3 Hosting operator id = 49 Hosting Expression = ws_sold_date_sk#64 IN dynamicpruning#8


