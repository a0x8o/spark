== Physical Plan ==
TakeOrderedAndProject (157)
+- * HashAggregate (156)
   +- Exchange (155)
      +- * HashAggregate (154)
         +- Union (153)
            :- * HashAggregate (132)
            :  +- Exchange (131)
            :     +- * HashAggregate (130)
            :        +- Union (129)
            :           :- * Project (90)
            :           :  +- * Filter (89)
            :           :     +- * HashAggregate (88)
            :           :        +- Exchange (87)
            :           :           +- * HashAggregate (86)
            :           :              +- * Project (85)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (84)
            :           :                    :- * Project (74)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (73)
            :           :                    :     :- * SortMergeJoin LeftSemi (67)
            :           :                    :     :  :- * Sort (5)
            :           :                    :     :  :  +- Exchange (4)
            :           :                    :     :  :     +- * Filter (3)
            :           :                    :     :  :        +- * ColumnarToRow (2)
            :           :                    :     :  :           +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- * Sort (66)
            :           :                    :     :     +- Exchange (65)
            :           :                    :     :        +- * Project (64)
            :           :                    :     :           +- * BroadcastHashJoin Inner BuildRight (63)
            :           :                    :     :              :- * Filter (8)
            :           :                    :     :              :  +- * ColumnarToRow (7)
            :           :                    :     :              :     +- Scan parquet default.item (6)
            :           :                    :     :              +- BroadcastExchange (62)
            :           :                    :     :                 +- * HashAggregate (61)
            :           :                    :     :                    +- Exchange (60)
            :           :                    :     :                       +- * HashAggregate (59)
            :           :                    :     :                          +- * SortMergeJoin LeftSemi (58)
            :           :                    :     :                             :- * Sort (46)
            :           :                    :     :                             :  +- Exchange (45)
            :           :                    :     :                             :     +- * HashAggregate (44)
            :           :                    :     :                             :        +- Exchange (43)
            :           :                    :     :                             :           +- * HashAggregate (42)
            :           :                    :     :                             :              +- * Project (41)
            :           :                    :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (40)
            :           :                    :     :                             :                    :- * Project (18)
            :           :                    :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (17)
            :           :                    :     :                             :                    :     :- * Filter (11)
            :           :                    :     :                             :                    :     :  +- * ColumnarToRow (10)
            :           :                    :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
            :           :                    :     :                             :                    :     +- BroadcastExchange (16)
            :           :                    :     :                             :                    :        +- * Project (15)
            :           :                    :     :                             :                    :           +- * Filter (14)
            :           :                    :     :                             :                    :              +- * ColumnarToRow (13)
            :           :                    :     :                             :                    :                 +- Scan parquet default.date_dim (12)
            :           :                    :     :                             :                    +- BroadcastExchange (39)
            :           :                    :     :                             :                       +- * SortMergeJoin LeftSemi (38)
            :           :                    :     :                             :                          :- * Sort (23)
            :           :                    :     :                             :                          :  +- Exchange (22)
            :           :                    :     :                             :                          :     +- * Filter (21)
            :           :                    :     :                             :                          :        +- * ColumnarToRow (20)
            :           :                    :     :                             :                          :           +- Scan parquet default.item (19)
            :           :                    :     :                             :                          +- * Sort (37)
            :           :                    :     :                             :                             +- Exchange (36)
            :           :                    :     :                             :                                +- * Project (35)
            :           :                    :     :                             :                                   +- * BroadcastHashJoin Inner BuildRight (34)
            :           :                    :     :                             :                                      :- * Project (29)
            :           :                    :     :                             :                                      :  +- * BroadcastHashJoin Inner BuildRight (28)
            :           :                    :     :                             :                                      :     :- * Filter (26)
            :           :                    :     :                             :                                      :     :  +- * ColumnarToRow (25)
            :           :                    :     :                             :                                      :     :     +- Scan parquet default.catalog_sales (24)
            :           :                    :     :                             :                                      :     +- ReusedExchange (27)
            :           :                    :     :                             :                                      +- BroadcastExchange (33)
            :           :                    :     :                             :                                         +- * Filter (32)
            :           :                    :     :                             :                                            +- * ColumnarToRow (31)
            :           :                    :     :                             :                                               +- Scan parquet default.item (30)
            :           :                    :     :                             +- * Sort (57)
            :           :                    :     :                                +- Exchange (56)
            :           :                    :     :                                   +- * Project (55)
            :           :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                    :     :                                         :- * Project (52)
            :           :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (51)
            :           :                    :     :                                         :     :- * Filter (49)
            :           :                    :     :                                         :     :  +- * ColumnarToRow (48)
            :           :                    :     :                                         :     :     +- Scan parquet default.web_sales (47)
            :           :                    :     :                                         :     +- ReusedExchange (50)
            :           :                    :     :                                         +- ReusedExchange (53)
            :           :                    :     +- BroadcastExchange (72)
            :           :                    :        +- * Project (71)
            :           :                    :           +- * Filter (70)
            :           :                    :              +- * ColumnarToRow (69)
            :           :                    :                 +- Scan parquet default.date_dim (68)
            :           :                    +- BroadcastExchange (83)
            :           :                       +- * SortMergeJoin LeftSemi (82)
            :           :                          :- * Sort (79)
            :           :                          :  +- Exchange (78)
            :           :                          :     +- * Filter (77)
            :           :                          :        +- * ColumnarToRow (76)
            :           :                          :           +- Scan parquet default.item (75)
            :           :                          +- * Sort (81)
            :           :                             +- ReusedExchange (80)
            :           :- * Project (109)
            :           :  +- * Filter (108)
            :           :     +- * HashAggregate (107)
            :           :        +- Exchange (106)
            :           :           +- * HashAggregate (105)
            :           :              +- * Project (104)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (103)
            :           :                    :- * Project (101)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (100)
            :           :                    :     :- * SortMergeJoin LeftSemi (98)
            :           :                    :     :  :- * Sort (95)
            :           :                    :     :  :  +- Exchange (94)
            :           :                    :     :  :     +- * Filter (93)
            :           :                    :     :  :        +- * ColumnarToRow (92)
            :           :                    :     :  :           +- Scan parquet default.catalog_sales (91)
            :           :                    :     :  +- * Sort (97)
            :           :                    :     :     +- ReusedExchange (96)
            :           :                    :     +- ReusedExchange (99)
            :           :                    +- ReusedExchange (102)
            :           +- * Project (128)
            :              +- * Filter (127)
            :                 +- * HashAggregate (126)
            :                    +- Exchange (125)
            :                       +- * HashAggregate (124)
            :                          +- * Project (123)
            :                             +- * BroadcastHashJoin Inner BuildRight (122)
            :                                :- * Project (120)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (119)
            :                                :     :- * SortMergeJoin LeftSemi (117)
            :                                :     :  :- * Sort (114)
            :                                :     :  :  +- Exchange (113)
            :                                :     :  :     +- * Filter (112)
            :                                :     :  :        +- * ColumnarToRow (111)
            :                                :     :  :           +- Scan parquet default.web_sales (110)
            :                                :     :  +- * Sort (116)
            :                                :     :     +- ReusedExchange (115)
            :                                :     +- ReusedExchange (118)
            :                                +- ReusedExchange (121)
            :- * HashAggregate (137)
            :  +- Exchange (136)
            :     +- * HashAggregate (135)
            :        +- * HashAggregate (134)
            :           +- ReusedExchange (133)
            :- * HashAggregate (142)
            :  +- Exchange (141)
            :     +- * HashAggregate (140)
            :        +- * HashAggregate (139)
            :           +- ReusedExchange (138)
            :- * HashAggregate (147)
            :  +- Exchange (146)
            :     +- * HashAggregate (145)
            :        +- * HashAggregate (144)
            :           +- ReusedExchange (143)
            +- * HashAggregate (152)
               +- Exchange (151)
                  +- * HashAggregate (150)
                     +- * HashAggregate (149)
                        +- ReusedExchange (148)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(16) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(17) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(18) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(19) Scan parquet default.item
Output [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Condition : (((isnotnull(i_item_sk#17) AND isnotnull(i_brand_id#18)) AND isnotnull(i_class_id#19)) AND isnotnull(i_category_id#20))

(22) Exchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: hashpartitioning(coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20), 5), ENSURE_REQUIREMENTS, [id=#21]

(23) Sort [codegen id : 5]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: [coalesce(i_brand_id#18, 0) ASC NULLS FIRST, isnull(i_brand_id#18) ASC NULLS FIRST, coalesce(i_class_id#19, 0) ASC NULLS FIRST, isnull(i_class_id#19) ASC NULLS FIRST, coalesce(i_category_id#20, 0) ASC NULLS FIRST, isnull(i_category_id#20) ASC NULLS FIRST], false, 0

(24) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#22, cs_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#23), dynamicpruningexpression(cs_sold_date_sk#23 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(25) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#22, cs_sold_date_sk#23]

(26) Filter [codegen id : 8]
Input [2]: [cs_item_sk#22, cs_sold_date_sk#23]
Condition : isnotnull(cs_item_sk#22)

(27) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#24]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#23]
Right keys [1]: [d_date_sk#24]
Join condition: None

(29) Project [codegen id : 8]
Output [1]: [cs_item_sk#22]
Input [3]: [cs_item_sk#22, cs_sold_date_sk#23, d_date_sk#24]

(30) Scan parquet default.item
Output [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(31) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]

(32) Filter [codegen id : 7]
Input [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]
Condition : isnotnull(i_item_sk#25)

(33) BroadcastExchange
Input [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#22]
Right keys [1]: [i_item_sk#25]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [i_brand_id#26, i_class_id#27, i_category_id#28]
Input [5]: [cs_item_sk#22, i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]

(36) Exchange
Input [3]: [i_brand_id#26, i_class_id#27, i_category_id#28]
Arguments: hashpartitioning(coalesce(i_brand_id#26, 0), isnull(i_brand_id#26), coalesce(i_class_id#27, 0), isnull(i_class_id#27), coalesce(i_category_id#28, 0), isnull(i_category_id#28), 5), ENSURE_REQUIREMENTS, [id=#30]

(37) Sort [codegen id : 9]
Input [3]: [i_brand_id#26, i_class_id#27, i_category_id#28]
Arguments: [coalesce(i_brand_id#26, 0) ASC NULLS FIRST, isnull(i_brand_id#26) ASC NULLS FIRST, coalesce(i_class_id#27, 0) ASC NULLS FIRST, isnull(i_class_id#27) ASC NULLS FIRST, coalesce(i_category_id#28, 0) ASC NULLS FIRST, isnull(i_category_id#28) ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Right keys [6]: [coalesce(i_brand_id#26, 0), isnull(i_brand_id#26), coalesce(i_class_id#27, 0), isnull(i_class_id#27), coalesce(i_category_id#28, 0), isnull(i_category_id#28)]
Join condition: None

(39) BroadcastExchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(40) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#17]
Join condition: None

(41) Project [codegen id : 11]
Output [3]: [i_brand_id#18 AS brand_id#32, i_class_id#19 AS class_id#33, i_category_id#20 AS category_id#34]
Input [5]: [ss_item_sk#11, i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(42) HashAggregate [codegen id : 11]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(43) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#35]

(44) HashAggregate [codegen id : 12]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(45) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34), 5), ENSURE_REQUIREMENTS, [id=#36]

(46) Sort [codegen id : 13]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: [coalesce(brand_id#32, 0) ASC NULLS FIRST, isnull(brand_id#32) ASC NULLS FIRST, coalesce(class_id#33, 0) ASC NULLS FIRST, isnull(class_id#33) ASC NULLS FIRST, coalesce(category_id#34, 0) ASC NULLS FIRST, isnull(category_id#34) ASC NULLS FIRST], false, 0

(47) Scan parquet default.web_sales
Output [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#38), dynamicpruningexpression(ws_sold_date_sk#38 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(48) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]

(49) Filter [codegen id : 16]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Condition : isnotnull(ws_item_sk#37)

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#39]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#38]
Right keys [1]: [d_date_sk#39]
Join condition: None

(52) Project [codegen id : 16]
Output [1]: [ws_item_sk#37]
Input [3]: [ws_item_sk#37, ws_sold_date_sk#38, d_date_sk#39]

(53) ReusedExchange [Reuses operator id: 33]
Output [4]: [i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(54) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#37]
Right keys [1]: [i_item_sk#40]
Join condition: None

(55) Project [codegen id : 16]
Output [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Input [5]: [ws_item_sk#37, i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(56) Exchange
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: hashpartitioning(coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43), 5), ENSURE_REQUIREMENTS, [id=#44]

(57) Sort [codegen id : 17]
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: [coalesce(i_brand_id#41, 0) ASC NULLS FIRST, isnull(i_brand_id#41) ASC NULLS FIRST, coalesce(i_class_id#42, 0) ASC NULLS FIRST, isnull(i_class_id#42) ASC NULLS FIRST, coalesce(i_category_id#43, 0) ASC NULLS FIRST, isnull(i_category_id#43) ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34)]
Right keys [6]: [coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43)]
Join condition: None

(59) HashAggregate [codegen id : 18]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(60) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#45]

(61) HashAggregate [codegen id : 19]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(62) BroadcastExchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#46]

(63) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#32, class_id#33, category_id#34]
Join condition: None

(64) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#47]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#32, class_id#33, category_id#34]

(65) Exchange
Input [1]: [ss_item_sk#47]
Arguments: hashpartitioning(ss_item_sk#47, 5), ENSURE_REQUIREMENTS, [id=#48]

(66) Sort [codegen id : 21]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(68) Scan parquet default.date_dim
Output [3]: [d_date_sk#49, d_year#50, d_moy#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(69) ColumnarToRow [codegen id : 22]
Input [3]: [d_date_sk#49, d_year#50, d_moy#51]

(70) Filter [codegen id : 22]
Input [3]: [d_date_sk#49, d_year#50, d_moy#51]
Condition : ((((isnotnull(d_year#50) AND isnotnull(d_moy#51)) AND (d_year#50 = 2000)) AND (d_moy#51 = 11)) AND isnotnull(d_date_sk#49))

(71) Project [codegen id : 22]
Output [1]: [d_date_sk#49]
Input [3]: [d_date_sk#49, d_year#50, d_moy#51]

(72) BroadcastExchange
Input [1]: [d_date_sk#49]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#52]

(73) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#49]
Join condition: None

(74) Project [codegen id : 45]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#49]

(75) Scan parquet default.item
Output [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(76) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]

(77) Filter [codegen id : 23]
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Condition : isnotnull(i_item_sk#53)

(78) Exchange
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: hashpartitioning(i_item_sk#53, 5), ENSURE_REQUIREMENTS, [id=#57]

(79) Sort [codegen id : 24]
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: [i_item_sk#53 ASC NULLS FIRST], false, 0

(80) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#47]

(81) Sort [codegen id : 43]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(82) SortMergeJoin [codegen id : 44]
Left keys [1]: [i_item_sk#53]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(83) BroadcastExchange
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58]

(84) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#53]
Join condition: None

(85) Project [codegen id : 45]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#54, i_class_id#55, i_category_id#56]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]

(86) HashAggregate [codegen id : 45]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#54, i_class_id#55, i_category_id#56]
Keys [3]: [i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#59, isEmpty#60, count#61]
Results [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#62, isEmpty#63, count#64]

(87) Exchange
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#62, isEmpty#63, count#64]
Arguments: hashpartitioning(i_brand_id#54, i_class_id#55, i_category_id#56, 5), ENSURE_REQUIREMENTS, [id=#65]

(88) HashAggregate [codegen id : 46]
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#62, isEmpty#63, count#64]
Keys [3]: [i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66, count(1)#67]
Results [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66 AS sales#68, count(1)#67 AS number_sales#69, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#70]

(89) Filter [codegen id : 46]
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sales#68, number_sales#69, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#70]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#70) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#70 as decimal(32,6)) > cast(Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(90) Project [codegen id : 46]
Output [6]: [store AS channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sales#68, number_sales#69]
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sales#68, number_sales#69, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#70]

(91) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#74, cs_quantity#75, cs_list_price#76, cs_sold_date_sk#77]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#77), dynamicpruningexpression(cs_sold_date_sk#77 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 47]
Input [4]: [cs_item_sk#74, cs_quantity#75, cs_list_price#76, cs_sold_date_sk#77]

(93) Filter [codegen id : 47]
Input [4]: [cs_item_sk#74, cs_quantity#75, cs_list_price#76, cs_sold_date_sk#77]
Condition : isnotnull(cs_item_sk#74)

(94) Exchange
Input [4]: [cs_item_sk#74, cs_quantity#75, cs_list_price#76, cs_sold_date_sk#77]
Arguments: hashpartitioning(cs_item_sk#74, 5), ENSURE_REQUIREMENTS, [id=#78]

(95) Sort [codegen id : 48]
Input [4]: [cs_item_sk#74, cs_quantity#75, cs_list_price#76, cs_sold_date_sk#77]
Arguments: [cs_item_sk#74 ASC NULLS FIRST], false, 0

(96) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#47]

(97) Sort [codegen id : 67]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(98) SortMergeJoin [codegen id : 91]
Left keys [1]: [cs_item_sk#74]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(99) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#79]

(100) BroadcastHashJoin [codegen id : 91]
Left keys [1]: [cs_sold_date_sk#77]
Right keys [1]: [d_date_sk#79]
Join condition: None

(101) Project [codegen id : 91]
Output [3]: [cs_item_sk#74, cs_quantity#75, cs_list_price#76]
Input [5]: [cs_item_sk#74, cs_quantity#75, cs_list_price#76, cs_sold_date_sk#77, d_date_sk#79]

(102) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#80, i_brand_id#81, i_class_id#82, i_category_id#83]

(103) BroadcastHashJoin [codegen id : 91]
Left keys [1]: [cs_item_sk#74]
Right keys [1]: [i_item_sk#80]
Join condition: None

(104) Project [codegen id : 91]
Output [5]: [cs_quantity#75, cs_list_price#76, i_brand_id#81, i_class_id#82, i_category_id#83]
Input [7]: [cs_item_sk#74, cs_quantity#75, cs_list_price#76, i_item_sk#80, i_brand_id#81, i_class_id#82, i_category_id#83]

(105) HashAggregate [codegen id : 91]
Input [5]: [cs_quantity#75, cs_list_price#76, i_brand_id#81, i_class_id#82, i_category_id#83]
Keys [3]: [i_brand_id#81, i_class_id#82, i_category_id#83]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#76 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#84, isEmpty#85, count#86]
Results [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sum#87, isEmpty#88, count#89]

(106) Exchange
Input [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sum#87, isEmpty#88, count#89]
Arguments: hashpartitioning(i_brand_id#81, i_class_id#82, i_category_id#83, 5), ENSURE_REQUIREMENTS, [id=#90]

(107) HashAggregate [codegen id : 92]
Input [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sum#87, isEmpty#88, count#89]
Keys [3]: [i_brand_id#81, i_class_id#82, i_category_id#83]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#76 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#91, count(1)#92]
Results [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#91 AS sales#93, count(1)#92 AS number_sales#94, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#91 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#95]

(108) Filter [codegen id : 92]
Input [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sales#93, number_sales#94, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#95]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#95) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#95 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(109) Project [codegen id : 92]
Output [6]: [catalog AS channel#96, i_brand_id#81, i_class_id#82, i_category_id#83, sales#93, number_sales#94]
Input [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sales#93, number_sales#94, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#95]

(110) Scan parquet default.web_sales
Output [4]: [ws_item_sk#97, ws_quantity#98, ws_list_price#99, ws_sold_date_sk#100]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#100), dynamicpruningexpression(ws_sold_date_sk#100 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(111) ColumnarToRow [codegen id : 93]
Input [4]: [ws_item_sk#97, ws_quantity#98, ws_list_price#99, ws_sold_date_sk#100]

(112) Filter [codegen id : 93]
Input [4]: [ws_item_sk#97, ws_quantity#98, ws_list_price#99, ws_sold_date_sk#100]
Condition : isnotnull(ws_item_sk#97)

(113) Exchange
Input [4]: [ws_item_sk#97, ws_quantity#98, ws_list_price#99, ws_sold_date_sk#100]
Arguments: hashpartitioning(ws_item_sk#97, 5), ENSURE_REQUIREMENTS, [id=#101]

(114) Sort [codegen id : 94]
Input [4]: [ws_item_sk#97, ws_quantity#98, ws_list_price#99, ws_sold_date_sk#100]
Arguments: [ws_item_sk#97 ASC NULLS FIRST], false, 0

(115) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#47]

(116) Sort [codegen id : 113]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(117) SortMergeJoin [codegen id : 137]
Left keys [1]: [ws_item_sk#97]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(118) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#102]

(119) BroadcastHashJoin [codegen id : 137]
Left keys [1]: [ws_sold_date_sk#100]
Right keys [1]: [d_date_sk#102]
Join condition: None

(120) Project [codegen id : 137]
Output [3]: [ws_item_sk#97, ws_quantity#98, ws_list_price#99]
Input [5]: [ws_item_sk#97, ws_quantity#98, ws_list_price#99, ws_sold_date_sk#100, d_date_sk#102]

(121) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#103, i_brand_id#104, i_class_id#105, i_category_id#106]

(122) BroadcastHashJoin [codegen id : 137]
Left keys [1]: [ws_item_sk#97]
Right keys [1]: [i_item_sk#103]
Join condition: None

(123) Project [codegen id : 137]
Output [5]: [ws_quantity#98, ws_list_price#99, i_brand_id#104, i_class_id#105, i_category_id#106]
Input [7]: [ws_item_sk#97, ws_quantity#98, ws_list_price#99, i_item_sk#103, i_brand_id#104, i_class_id#105, i_category_id#106]

(124) HashAggregate [codegen id : 137]
Input [5]: [ws_quantity#98, ws_list_price#99, i_brand_id#104, i_class_id#105, i_category_id#106]
Keys [3]: [i_brand_id#104, i_class_id#105, i_category_id#106]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#99 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#107, isEmpty#108, count#109]
Results [6]: [i_brand_id#104, i_class_id#105, i_category_id#106, sum#110, isEmpty#111, count#112]

(125) Exchange
Input [6]: [i_brand_id#104, i_class_id#105, i_category_id#106, sum#110, isEmpty#111, count#112]
Arguments: hashpartitioning(i_brand_id#104, i_class_id#105, i_category_id#106, 5), ENSURE_REQUIREMENTS, [id=#113]

(126) HashAggregate [codegen id : 138]
Input [6]: [i_brand_id#104, i_class_id#105, i_category_id#106, sum#110, isEmpty#111, count#112]
Keys [3]: [i_brand_id#104, i_class_id#105, i_category_id#106]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#99 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#114, count(1)#115]
Results [6]: [i_brand_id#104, i_class_id#105, i_category_id#106, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#114 AS sales#116, count(1)#115 AS number_sales#117, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#114 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#118]

(127) Filter [codegen id : 138]
Input [6]: [i_brand_id#104, i_class_id#105, i_category_id#106, sales#116, number_sales#117, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#118]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#118) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#118 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(128) Project [codegen id : 138]
Output [6]: [web AS channel#119, i_brand_id#104, i_class_id#105, i_category_id#106, sales#116, number_sales#117]
Input [6]: [i_brand_id#104, i_class_id#105, i_category_id#106, sales#116, number_sales#117, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#118]

(129) Union

(130) HashAggregate [codegen id : 139]
Input [6]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sales#68, number_sales#69]
Keys [4]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [partial_sum(sales#68), partial_sum(number_sales#69)]
Aggregate Attributes [3]: [sum#120, isEmpty#121, sum#122]
Results [7]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum#123, isEmpty#124, sum#125]

(131) Exchange
Input [7]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum#123, isEmpty#124, sum#125]
Arguments: hashpartitioning(channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, 5), ENSURE_REQUIREMENTS, [id=#126]

(132) HashAggregate [codegen id : 140]
Input [7]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum#123, isEmpty#124, sum#125]
Keys [4]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [sum(sales#68), sum(number_sales#69)]
Aggregate Attributes [2]: [sum(sales#68)#127, sum(number_sales#69)#128]
Results [6]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum(sales#68)#127 AS sum_sales#129, sum(number_sales#69)#128 AS number_sales#130]

(133) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#73, i_brand_id#131, i_class_id#132, i_category_id#133, sum#134, isEmpty#135, sum#136]

(134) HashAggregate [codegen id : 280]
Input [7]: [channel#73, i_brand_id#131, i_class_id#132, i_category_id#133, sum#134, isEmpty#135, sum#136]
Keys [4]: [channel#73, i_brand_id#131, i_class_id#132, i_category_id#133]
Functions [2]: [sum(sales#68), sum(number_sales#69)]
Aggregate Attributes [2]: [sum(sales#68)#137, sum(number_sales#69)#138]
Results [5]: [channel#73, i_brand_id#131, i_class_id#132, sum(sales#68)#137 AS sum_sales#129, sum(number_sales#69)#138 AS number_sales#130]

(135) HashAggregate [codegen id : 280]
Input [5]: [channel#73, i_brand_id#131, i_class_id#132, sum_sales#129, number_sales#130]
Keys [3]: [channel#73, i_brand_id#131, i_class_id#132]
Functions [2]: [partial_sum(sum_sales#129), partial_sum(number_sales#130)]
Aggregate Attributes [3]: [sum#139, isEmpty#140, sum#141]
Results [6]: [channel#73, i_brand_id#131, i_class_id#132, sum#142, isEmpty#143, sum#144]

(136) Exchange
Input [6]: [channel#73, i_brand_id#131, i_class_id#132, sum#142, isEmpty#143, sum#144]
Arguments: hashpartitioning(channel#73, i_brand_id#131, i_class_id#132, 5), ENSURE_REQUIREMENTS, [id=#145]

(137) HashAggregate [codegen id : 281]
Input [6]: [channel#73, i_brand_id#131, i_class_id#132, sum#142, isEmpty#143, sum#144]
Keys [3]: [channel#73, i_brand_id#131, i_class_id#132]
Functions [2]: [sum(sum_sales#129), sum(number_sales#130)]
Aggregate Attributes [2]: [sum(sum_sales#129)#146, sum(number_sales#130)#147]
Results [6]: [channel#73, i_brand_id#131, i_class_id#132, null AS i_category_id#148, sum(sum_sales#129)#146 AS sum(sum_sales)#149, sum(number_sales#130)#147 AS sum(number_sales)#150]

(138) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#73, i_brand_id#151, i_class_id#152, i_category_id#153, sum#154, isEmpty#155, sum#156]

(139) HashAggregate [codegen id : 421]
Input [7]: [channel#73, i_brand_id#151, i_class_id#152, i_category_id#153, sum#154, isEmpty#155, sum#156]
Keys [4]: [channel#73, i_brand_id#151, i_class_id#152, i_category_id#153]
Functions [2]: [sum(sales#68), sum(number_sales#69)]
Aggregate Attributes [2]: [sum(sales#68)#157, sum(number_sales#69)#158]
Results [4]: [channel#73, i_brand_id#151, sum(sales#68)#157 AS sum_sales#129, sum(number_sales#69)#158 AS number_sales#130]

(140) HashAggregate [codegen id : 421]
Input [4]: [channel#73, i_brand_id#151, sum_sales#129, number_sales#130]
Keys [2]: [channel#73, i_brand_id#151]
Functions [2]: [partial_sum(sum_sales#129), partial_sum(number_sales#130)]
Aggregate Attributes [3]: [sum#159, isEmpty#160, sum#161]
Results [5]: [channel#73, i_brand_id#151, sum#162, isEmpty#163, sum#164]

(141) Exchange
Input [5]: [channel#73, i_brand_id#151, sum#162, isEmpty#163, sum#164]
Arguments: hashpartitioning(channel#73, i_brand_id#151, 5), ENSURE_REQUIREMENTS, [id=#165]

(142) HashAggregate [codegen id : 422]
Input [5]: [channel#73, i_brand_id#151, sum#162, isEmpty#163, sum#164]
Keys [2]: [channel#73, i_brand_id#151]
Functions [2]: [sum(sum_sales#129), sum(number_sales#130)]
Aggregate Attributes [2]: [sum(sum_sales#129)#166, sum(number_sales#130)#167]
Results [6]: [channel#73, i_brand_id#151, null AS i_class_id#168, null AS i_category_id#169, sum(sum_sales#129)#166 AS sum(sum_sales)#170, sum(number_sales#130)#167 AS sum(number_sales)#171]

(143) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#73, i_brand_id#172, i_class_id#173, i_category_id#174, sum#175, isEmpty#176, sum#177]

(144) HashAggregate [codegen id : 562]
Input [7]: [channel#73, i_brand_id#172, i_class_id#173, i_category_id#174, sum#175, isEmpty#176, sum#177]
Keys [4]: [channel#73, i_brand_id#172, i_class_id#173, i_category_id#174]
Functions [2]: [sum(sales#68), sum(number_sales#69)]
Aggregate Attributes [2]: [sum(sales#68)#178, sum(number_sales#69)#179]
Results [3]: [channel#73, sum(sales#68)#178 AS sum_sales#129, sum(number_sales#69)#179 AS number_sales#130]

(145) HashAggregate [codegen id : 562]
Input [3]: [channel#73, sum_sales#129, number_sales#130]
Keys [1]: [channel#73]
Functions [2]: [partial_sum(sum_sales#129), partial_sum(number_sales#130)]
Aggregate Attributes [3]: [sum#180, isEmpty#181, sum#182]
Results [4]: [channel#73, sum#183, isEmpty#184, sum#185]

(146) Exchange
Input [4]: [channel#73, sum#183, isEmpty#184, sum#185]
Arguments: hashpartitioning(channel#73, 5), ENSURE_REQUIREMENTS, [id=#186]

(147) HashAggregate [codegen id : 563]
Input [4]: [channel#73, sum#183, isEmpty#184, sum#185]
Keys [1]: [channel#73]
Functions [2]: [sum(sum_sales#129), sum(number_sales#130)]
Aggregate Attributes [2]: [sum(sum_sales#129)#187, sum(number_sales#130)#188]
Results [6]: [channel#73, null AS i_brand_id#189, null AS i_class_id#190, null AS i_category_id#191, sum(sum_sales#129)#187 AS sum(sum_sales)#192, sum(number_sales#130)#188 AS sum(number_sales)#193]

(148) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#73, i_brand_id#194, i_class_id#195, i_category_id#196, sum#197, isEmpty#198, sum#199]

(149) HashAggregate [codegen id : 703]
Input [7]: [channel#73, i_brand_id#194, i_class_id#195, i_category_id#196, sum#197, isEmpty#198, sum#199]
Keys [4]: [channel#73, i_brand_id#194, i_class_id#195, i_category_id#196]
Functions [2]: [sum(sales#68), sum(number_sales#69)]
Aggregate Attributes [2]: [sum(sales#68)#200, sum(number_sales#69)#201]
Results [2]: [sum(sales#68)#200 AS sum_sales#129, sum(number_sales#69)#201 AS number_sales#130]

(150) HashAggregate [codegen id : 703]
Input [2]: [sum_sales#129, number_sales#130]
Keys: []
Functions [2]: [partial_sum(sum_sales#129), partial_sum(number_sales#130)]
Aggregate Attributes [3]: [sum#202, isEmpty#203, sum#204]
Results [3]: [sum#205, isEmpty#206, sum#207]

(151) Exchange
Input [3]: [sum#205, isEmpty#206, sum#207]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#208]

(152) HashAggregate [codegen id : 704]
Input [3]: [sum#205, isEmpty#206, sum#207]
Keys: []
Functions [2]: [sum(sum_sales#129), sum(number_sales#130)]
Aggregate Attributes [2]: [sum(sum_sales#129)#209, sum(number_sales#130)#210]
Results [6]: [null AS channel#211, null AS i_brand_id#212, null AS i_class_id#213, null AS i_category_id#214, sum(sum_sales#129)#209 AS sum(sum_sales)#215, sum(number_sales#130)#210 AS sum(number_sales)#216]

(153) Union

(154) HashAggregate [codegen id : 705]
Input [6]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#129, number_sales#130]
Keys [6]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#129, number_sales#130]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#129, number_sales#130]

(155) Exchange
Input [6]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#129, number_sales#130]
Arguments: hashpartitioning(channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#129, number_sales#130, 5), ENSURE_REQUIREMENTS, [id=#217]

(156) HashAggregate [codegen id : 706]
Input [6]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#129, number_sales#130]
Keys [6]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#129, number_sales#130]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#129, number_sales#130]

(157) TakeOrderedAndProject
Input [6]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#129, number_sales#130]
Arguments: 100, [channel#73 ASC NULLS FIRST, i_brand_id#54 ASC NULLS FIRST, i_class_id#55 ASC NULLS FIRST, i_category_id#56 ASC NULLS FIRST], [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#129, number_sales#130]

===== Subqueries =====

Subquery:1 Hosting operator id = 89 Hosting Expression = Subquery scalar-subquery#71, [id=#72]
* HashAggregate (184)
+- Exchange (183)
   +- * HashAggregate (182)
      +- Union (181)
         :- * Project (166)
         :  +- * BroadcastHashJoin Inner BuildRight (165)
         :     :- * ColumnarToRow (159)
         :     :  +- Scan parquet default.store_sales (158)
         :     +- BroadcastExchange (164)
         :        +- * Project (163)
         :           +- * Filter (162)
         :              +- * ColumnarToRow (161)
         :                 +- Scan parquet default.date_dim (160)
         :- * Project (175)
         :  +- * BroadcastHashJoin Inner BuildRight (174)
         :     :- * ColumnarToRow (168)
         :     :  +- Scan parquet default.catalog_sales (167)
         :     +- BroadcastExchange (173)
         :        +- * Project (172)
         :           +- * Filter (171)
         :              +- * ColumnarToRow (170)
         :                 +- Scan parquet default.date_dim (169)
         +- * Project (180)
            +- * BroadcastHashJoin Inner BuildRight (179)
               :- * ColumnarToRow (177)
               :  +- Scan parquet default.web_sales (176)
               +- ReusedExchange (178)


(158) Scan parquet default.store_sales
Output [3]: [ss_quantity#218, ss_list_price#219, ss_sold_date_sk#220]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#220), dynamicpruningexpression(ss_sold_date_sk#220 IN dynamicpruning#221)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(159) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#218, ss_list_price#219, ss_sold_date_sk#220]

(160) Scan parquet default.date_dim
Output [2]: [d_date_sk#222, d_year#223]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(161) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#222, d_year#223]

(162) Filter [codegen id : 1]
Input [2]: [d_date_sk#222, d_year#223]
Condition : (((isnotnull(d_year#223) AND (d_year#223 >= 1999)) AND (d_year#223 <= 2001)) AND isnotnull(d_date_sk#222))

(163) Project [codegen id : 1]
Output [1]: [d_date_sk#222]
Input [2]: [d_date_sk#222, d_year#223]

(164) BroadcastExchange
Input [1]: [d_date_sk#222]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#224]

(165) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#220]
Right keys [1]: [d_date_sk#222]
Join condition: None

(166) Project [codegen id : 2]
Output [2]: [ss_quantity#218 AS quantity#225, ss_list_price#219 AS list_price#226]
Input [4]: [ss_quantity#218, ss_list_price#219, ss_sold_date_sk#220, d_date_sk#222]

(167) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#227, cs_list_price#228, cs_sold_date_sk#229]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#229), dynamicpruningexpression(cs_sold_date_sk#229 IN dynamicpruning#230)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(168) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#227, cs_list_price#228, cs_sold_date_sk#229]

(169) Scan parquet default.date_dim
Output [2]: [d_date_sk#231, d_year#232]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(170) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#231, d_year#232]

(171) Filter [codegen id : 3]
Input [2]: [d_date_sk#231, d_year#232]
Condition : (((isnotnull(d_year#232) AND (d_year#232 >= 1998)) AND (d_year#232 <= 2000)) AND isnotnull(d_date_sk#231))

(172) Project [codegen id : 3]
Output [1]: [d_date_sk#231]
Input [2]: [d_date_sk#231, d_year#232]

(173) BroadcastExchange
Input [1]: [d_date_sk#231]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#233]

(174) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#229]
Right keys [1]: [d_date_sk#231]
Join condition: None

(175) Project [codegen id : 4]
Output [2]: [cs_quantity#227 AS quantity#234, cs_list_price#228 AS list_price#235]
Input [4]: [cs_quantity#227, cs_list_price#228, cs_sold_date_sk#229, d_date_sk#231]

(176) Scan parquet default.web_sales
Output [3]: [ws_quantity#236, ws_list_price#237, ws_sold_date_sk#238]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#238), dynamicpruningexpression(ws_sold_date_sk#238 IN dynamicpruning#230)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(177) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#236, ws_list_price#237, ws_sold_date_sk#238]

(178) ReusedExchange [Reuses operator id: 173]
Output [1]: [d_date_sk#239]

(179) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#238]
Right keys [1]: [d_date_sk#239]
Join condition: None

(180) Project [codegen id : 6]
Output [2]: [ws_quantity#236 AS quantity#240, ws_list_price#237 AS list_price#241]
Input [4]: [ws_quantity#236, ws_list_price#237, ws_sold_date_sk#238, d_date_sk#239]

(181) Union

(182) HashAggregate [codegen id : 7]
Input [2]: [quantity#225, list_price#226]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#225 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#226 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#242, count#243]
Results [2]: [sum#244, count#245]

(183) Exchange
Input [2]: [sum#244, count#245]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#246]

(184) HashAggregate [codegen id : 8]
Input [2]: [sum#244, count#245]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#225 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#226 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#225 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#226 as decimal(12,2)))), DecimalType(18,2), true))#247]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#225 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#226 as decimal(12,2)))), DecimalType(18,2), true))#247 AS average_sales#248]

Subquery:2 Hosting operator id = 158 Hosting Expression = ss_sold_date_sk#220 IN dynamicpruning#221
ReusedExchange (185)


(185) ReusedExchange [Reuses operator id: 164]
Output [1]: [d_date_sk#222]

Subquery:3 Hosting operator id = 167 Hosting Expression = cs_sold_date_sk#229 IN dynamicpruning#230
ReusedExchange (186)


(186) ReusedExchange [Reuses operator id: 173]
Output [1]: [d_date_sk#231]

Subquery:4 Hosting operator id = 176 Hosting Expression = ws_sold_date_sk#238 IN dynamicpruning#230

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (187)


(187) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#49]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
ReusedExchange (188)


(188) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#14]

Subquery:7 Hosting operator id = 24 Hosting Expression = cs_sold_date_sk#23 IN dynamicpruning#13

Subquery:8 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#38 IN dynamicpruning#13

Subquery:9 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#71, [id=#72]

Subquery:10 Hosting operator id = 91 Hosting Expression = cs_sold_date_sk#77 IN dynamicpruning#5

Subquery:11 Hosting operator id = 127 Hosting Expression = ReusedSubquery Subquery scalar-subquery#71, [id=#72]

Subquery:12 Hosting operator id = 110 Hosting Expression = ws_sold_date_sk#100 IN dynamicpruning#5


