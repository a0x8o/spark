== Physical Plan ==
TakeOrderedAndProject (143)
+- * HashAggregate (142)
   +- Exchange (141)
      +- * HashAggregate (140)
         +- Union (139)
            :- * HashAggregate (118)
            :  +- Exchange (117)
            :     +- * HashAggregate (116)
            :        +- Union (115)
            :           :- * Filter (78)
            :           :  +- * HashAggregate (77)
            :           :     +- Exchange (76)
            :           :        +- * HashAggregate (75)
            :           :           +- * Project (74)
            :           :              +- * BroadcastHashJoin Inner BuildRight (73)
            :           :                 :- * Project (63)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (62)
            :           :                 :     :- * SortMergeJoin LeftSemi (60)
            :           :                 :     :  :- * Sort (5)
            :           :                 :     :  :  +- Exchange (4)
            :           :                 :     :  :     +- * Filter (3)
            :           :                 :     :  :        +- * ColumnarToRow (2)
            :           :                 :     :  :           +- Scan parquet default.store_sales (1)
            :           :                 :     :  +- * Sort (59)
            :           :                 :     :     +- Exchange (58)
            :           :                 :     :        +- * Project (57)
            :           :                 :     :           +- * BroadcastHashJoin Inner BuildRight (56)
            :           :                 :     :              :- * Filter (8)
            :           :                 :     :              :  +- * ColumnarToRow (7)
            :           :                 :     :              :     +- Scan parquet default.item (6)
            :           :                 :     :              +- BroadcastExchange (55)
            :           :                 :     :                 +- * SortMergeJoin LeftSemi (54)
            :           :                 :     :                    :- * Sort (42)
            :           :                 :     :                    :  +- Exchange (41)
            :           :                 :     :                    :     +- * HashAggregate (40)
            :           :                 :     :                    :        +- Exchange (39)
            :           :                 :     :                    :           +- * HashAggregate (38)
            :           :                 :     :                    :              +- * Project (37)
            :           :                 :     :                    :                 +- * BroadcastHashJoin Inner BuildRight (36)
            :           :                 :     :                    :                    :- * Project (14)
            :           :                 :     :                    :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
            :           :                 :     :                    :                    :     :- * Filter (11)
            :           :                 :     :                    :                    :     :  +- * ColumnarToRow (10)
            :           :                 :     :                    :                    :     :     +- Scan parquet default.store_sales (9)
            :           :                 :     :                    :                    :     +- ReusedExchange (12)
            :           :                 :     :                    :                    +- BroadcastExchange (35)
            :           :                 :     :                    :                       +- * SortMergeJoin LeftSemi (34)
            :           :                 :     :                    :                          :- * Sort (19)
            :           :                 :     :                    :                          :  +- Exchange (18)
            :           :                 :     :                    :                          :     +- * Filter (17)
            :           :                 :     :                    :                          :        +- * ColumnarToRow (16)
            :           :                 :     :                    :                          :           +- Scan parquet default.item (15)
            :           :                 :     :                    :                          +- * Sort (33)
            :           :                 :     :                    :                             +- Exchange (32)
            :           :                 :     :                    :                                +- * Project (31)
            :           :                 :     :                    :                                   +- * BroadcastHashJoin Inner BuildRight (30)
            :           :                 :     :                    :                                      :- * Project (25)
            :           :                 :     :                    :                                      :  +- * BroadcastHashJoin Inner BuildRight (24)
            :           :                 :     :                    :                                      :     :- * Filter (22)
            :           :                 :     :                    :                                      :     :  +- * ColumnarToRow (21)
            :           :                 :     :                    :                                      :     :     +- Scan parquet default.catalog_sales (20)
            :           :                 :     :                    :                                      :     +- ReusedExchange (23)
            :           :                 :     :                    :                                      +- BroadcastExchange (29)
            :           :                 :     :                    :                                         +- * Filter (28)
            :           :                 :     :                    :                                            +- * ColumnarToRow (27)
            :           :                 :     :                    :                                               +- Scan parquet default.item (26)
            :           :                 :     :                    +- * Sort (53)
            :           :                 :     :                       +- Exchange (52)
            :           :                 :     :                          +- * Project (51)
            :           :                 :     :                             +- * BroadcastHashJoin Inner BuildRight (50)
            :           :                 :     :                                :- * Project (48)
            :           :                 :     :                                :  +- * BroadcastHashJoin Inner BuildRight (47)
            :           :                 :     :                                :     :- * Filter (45)
            :           :                 :     :                                :     :  +- * ColumnarToRow (44)
            :           :                 :     :                                :     :     +- Scan parquet default.web_sales (43)
            :           :                 :     :                                :     +- ReusedExchange (46)
            :           :                 :     :                                +- ReusedExchange (49)
            :           :                 :     +- ReusedExchange (61)
            :           :                 +- BroadcastExchange (72)
            :           :                    +- * SortMergeJoin LeftSemi (71)
            :           :                       :- * Sort (68)
            :           :                       :  +- Exchange (67)
            :           :                       :     +- * Filter (66)
            :           :                       :        +- * ColumnarToRow (65)
            :           :                       :           +- Scan parquet default.item (64)
            :           :                       +- * Sort (70)
            :           :                          +- ReusedExchange (69)
            :           :- * Filter (96)
            :           :  +- * HashAggregate (95)
            :           :     +- Exchange (94)
            :           :        +- * HashAggregate (93)
            :           :           +- * Project (92)
            :           :              +- * BroadcastHashJoin Inner BuildRight (91)
            :           :                 :- * Project (89)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (88)
            :           :                 :     :- * SortMergeJoin LeftSemi (86)
            :           :                 :     :  :- * Sort (83)
            :           :                 :     :  :  +- Exchange (82)
            :           :                 :     :  :     +- * Filter (81)
            :           :                 :     :  :        +- * ColumnarToRow (80)
            :           :                 :     :  :           +- Scan parquet default.catalog_sales (79)
            :           :                 :     :  +- * Sort (85)
            :           :                 :     :     +- ReusedExchange (84)
            :           :                 :     +- ReusedExchange (87)
            :           :                 +- ReusedExchange (90)
            :           +- * Filter (114)
            :              +- * HashAggregate (113)
            :                 +- Exchange (112)
            :                    +- * HashAggregate (111)
            :                       +- * Project (110)
            :                          +- * BroadcastHashJoin Inner BuildRight (109)
            :                             :- * Project (107)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (106)
            :                             :     :- * SortMergeJoin LeftSemi (104)
            :                             :     :  :- * Sort (101)
            :                             :     :  :  +- Exchange (100)
            :                             :     :  :     +- * Filter (99)
            :                             :     :  :        +- * ColumnarToRow (98)
            :                             :     :  :           +- Scan parquet default.web_sales (97)
            :                             :     :  +- * Sort (103)
            :                             :     :     +- ReusedExchange (102)
            :                             :     +- ReusedExchange (105)
            :                             +- ReusedExchange (108)
            :- * HashAggregate (123)
            :  +- Exchange (122)
            :     +- * HashAggregate (121)
            :        +- * HashAggregate (120)
            :           +- ReusedExchange (119)
            :- * HashAggregate (128)
            :  +- Exchange (127)
            :     +- * HashAggregate (126)
            :        +- * HashAggregate (125)
            :           +- ReusedExchange (124)
            :- * HashAggregate (133)
            :  +- Exchange (132)
            :     +- * HashAggregate (131)
            :        +- * HashAggregate (130)
            :           +- ReusedExchange (129)
            +- * HashAggregate (138)
               +- Exchange (137)
                  +- * HashAggregate (136)
                     +- * HashAggregate (135)
                        +- ReusedExchange (134)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) ReusedExchange [Reuses operator id: 177]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(15) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(18) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(22) Filter [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(23) ReusedExchange [Reuses operator id: 177]
Output [1]: [d_date_sk#22]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(25) Project [codegen id : 8]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(26) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(29) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(31) Project [codegen id : 8]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#28]

(33) Sort [codegen id : 9]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(35) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(37) Project [codegen id : 11]
Output [3]: [i_brand_id#16 AS brand_id#30, i_class_id#17 AS class_id#31, i_category_id#18 AS category_id#32]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(38) HashAggregate [codegen id : 11]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(39) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(40) HashAggregate [codegen id : 12]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(41) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32), 5), ENSURE_REQUIREMENTS, [id=#34]

(42) Sort [codegen id : 13]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: [coalesce(brand_id#30, 0) ASC NULLS FIRST, isnull(brand_id#30) ASC NULLS FIRST, coalesce(class_id#31, 0) ASC NULLS FIRST, isnull(class_id#31) ASC NULLS FIRST, coalesce(category_id#32, 0) ASC NULLS FIRST, isnull(category_id#32) ASC NULLS FIRST], false, 0

(43) Scan parquet default.web_sales
Output [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]

(45) Filter [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_item_sk#35)

(46) ReusedExchange [Reuses operator id: 177]
Output [1]: [d_date_sk#37]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join condition: None

(48) Project [codegen id : 16]
Output [1]: [ws_item_sk#35]
Input [3]: [ws_item_sk#35, ws_sold_date_sk#36, d_date_sk#37]

(49) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(50) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [i_item_sk#38]
Join condition: None

(51) Project [codegen id : 16]
Output [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Input [5]: [ws_item_sk#35, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(52) Exchange
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: hashpartitioning(coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41), 5), ENSURE_REQUIREMENTS, [id=#42]

(53) Sort [codegen id : 17]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: [coalesce(i_brand_id#39, 0) ASC NULLS FIRST, isnull(i_brand_id#39) ASC NULLS FIRST, coalesce(i_class_id#40, 0) ASC NULLS FIRST, isnull(i_class_id#40) ASC NULLS FIRST, coalesce(i_category_id#41, 0) ASC NULLS FIRST, isnull(i_category_id#41) ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41)]
Join condition: None

(55) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#43]

(56) BroadcastHashJoin [codegen id : 19]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(57) Project [codegen id : 19]
Output [1]: [i_item_sk#7 AS ss_item_sk#44]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#30, class_id#31, category_id#32]

(58) Exchange
Input [1]: [ss_item_sk#44]
Arguments: hashpartitioning(ss_item_sk#44, 5), ENSURE_REQUIREMENTS, [id=#45]

(59) Sort [codegen id : 20]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 43]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(61) ReusedExchange [Reuses operator id: 172]
Output [1]: [d_date_sk#46]

(62) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#46]
Join condition: None

(63) Project [codegen id : 43]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#46]

(64) Scan parquet default.item
Output [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(65) ColumnarToRow [codegen id : 22]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(66) Filter [codegen id : 22]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Condition : isnotnull(i_item_sk#47)

(67) Exchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: hashpartitioning(i_item_sk#47, 5), ENSURE_REQUIREMENTS, [id=#51]

(68) Sort [codegen id : 23]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: [i_item_sk#47 ASC NULLS FIRST], false, 0

(69) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#44]

(70) Sort [codegen id : 41]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 42]
Left keys [1]: [i_item_sk#47]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(72) BroadcastExchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#52]

(73) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#47]
Join condition: None

(74) Project [codegen id : 43]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(75) HashAggregate [codegen id : 43]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#53, isEmpty#54, count#55]
Results [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#56, isEmpty#57, count#58]

(76) Exchange
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#56, isEmpty#57, count#58]
Arguments: hashpartitioning(i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#59]

(77) HashAggregate [codegen id : 44]
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#56, isEmpty#57, count#58]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#60, count(1)#61]
Results [6]: [store AS channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#60 AS sales#63, count(1)#61 AS number_sales#64]

(78) Filter [codegen id : 44]
Input [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sales#63, number_sales#64]
Condition : (isnotnull(sales#63) AND (cast(sales#63 as decimal(32,6)) > cast(Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(79) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#67, cs_quantity#68, cs_list_price#69, cs_sold_date_sk#70]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#70), dynamicpruningexpression(cs_sold_date_sk#70 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(80) ColumnarToRow [codegen id : 45]
Input [4]: [cs_item_sk#67, cs_quantity#68, cs_list_price#69, cs_sold_date_sk#70]

(81) Filter [codegen id : 45]
Input [4]: [cs_item_sk#67, cs_quantity#68, cs_list_price#69, cs_sold_date_sk#70]
Condition : isnotnull(cs_item_sk#67)

(82) Exchange
Input [4]: [cs_item_sk#67, cs_quantity#68, cs_list_price#69, cs_sold_date_sk#70]
Arguments: hashpartitioning(cs_item_sk#67, 5), ENSURE_REQUIREMENTS, [id=#71]

(83) Sort [codegen id : 46]
Input [4]: [cs_item_sk#67, cs_quantity#68, cs_list_price#69, cs_sold_date_sk#70]
Arguments: [cs_item_sk#67 ASC NULLS FIRST], false, 0

(84) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#44]

(85) Sort [codegen id : 64]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 87]
Left keys [1]: [cs_item_sk#67]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(87) ReusedExchange [Reuses operator id: 172]
Output [1]: [d_date_sk#72]

(88) BroadcastHashJoin [codegen id : 87]
Left keys [1]: [cs_sold_date_sk#70]
Right keys [1]: [d_date_sk#72]
Join condition: None

(89) Project [codegen id : 87]
Output [3]: [cs_item_sk#67, cs_quantity#68, cs_list_price#69]
Input [5]: [cs_item_sk#67, cs_quantity#68, cs_list_price#69, cs_sold_date_sk#70, d_date_sk#72]

(90) ReusedExchange [Reuses operator id: 72]
Output [4]: [i_item_sk#73, i_brand_id#74, i_class_id#75, i_category_id#76]

(91) BroadcastHashJoin [codegen id : 87]
Left keys [1]: [cs_item_sk#67]
Right keys [1]: [i_item_sk#73]
Join condition: None

(92) Project [codegen id : 87]
Output [5]: [cs_quantity#68, cs_list_price#69, i_brand_id#74, i_class_id#75, i_category_id#76]
Input [7]: [cs_item_sk#67, cs_quantity#68, cs_list_price#69, i_item_sk#73, i_brand_id#74, i_class_id#75, i_category_id#76]

(93) HashAggregate [codegen id : 87]
Input [5]: [cs_quantity#68, cs_list_price#69, i_brand_id#74, i_class_id#75, i_category_id#76]
Keys [3]: [i_brand_id#74, i_class_id#75, i_category_id#76]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#68 as decimal(12,2))) * promote_precision(cast(cs_list_price#69 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#77, isEmpty#78, count#79]
Results [6]: [i_brand_id#74, i_class_id#75, i_category_id#76, sum#80, isEmpty#81, count#82]

(94) Exchange
Input [6]: [i_brand_id#74, i_class_id#75, i_category_id#76, sum#80, isEmpty#81, count#82]
Arguments: hashpartitioning(i_brand_id#74, i_class_id#75, i_category_id#76, 5), ENSURE_REQUIREMENTS, [id=#83]

(95) HashAggregate [codegen id : 88]
Input [6]: [i_brand_id#74, i_class_id#75, i_category_id#76, sum#80, isEmpty#81, count#82]
Keys [3]: [i_brand_id#74, i_class_id#75, i_category_id#76]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#68 as decimal(12,2))) * promote_precision(cast(cs_list_price#69 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#68 as decimal(12,2))) * promote_precision(cast(cs_list_price#69 as decimal(12,2)))), DecimalType(18,2)))#84, count(1)#85]
Results [6]: [catalog AS channel#86, i_brand_id#74, i_class_id#75, i_category_id#76, sum(CheckOverflow((promote_precision(cast(cs_quantity#68 as decimal(12,2))) * promote_precision(cast(cs_list_price#69 as decimal(12,2)))), DecimalType(18,2)))#84 AS sales#87, count(1)#85 AS number_sales#88]

(96) Filter [codegen id : 88]
Input [6]: [channel#86, i_brand_id#74, i_class_id#75, i_category_id#76, sales#87, number_sales#88]
Condition : (isnotnull(sales#87) AND (cast(sales#87 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(97) Scan parquet default.web_sales
Output [4]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#92), dynamicpruningexpression(ws_sold_date_sk#92 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(98) ColumnarToRow [codegen id : 89]
Input [4]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92]

(99) Filter [codegen id : 89]
Input [4]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92]
Condition : isnotnull(ws_item_sk#89)

(100) Exchange
Input [4]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92]
Arguments: hashpartitioning(ws_item_sk#89, 5), ENSURE_REQUIREMENTS, [id=#93]

(101) Sort [codegen id : 90]
Input [4]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92]
Arguments: [ws_item_sk#89 ASC NULLS FIRST], false, 0

(102) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#44]

(103) Sort [codegen id : 108]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(104) SortMergeJoin [codegen id : 131]
Left keys [1]: [ws_item_sk#89]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(105) ReusedExchange [Reuses operator id: 172]
Output [1]: [d_date_sk#94]

(106) BroadcastHashJoin [codegen id : 131]
Left keys [1]: [ws_sold_date_sk#92]
Right keys [1]: [d_date_sk#94]
Join condition: None

(107) Project [codegen id : 131]
Output [3]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91]
Input [5]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92, d_date_sk#94]

(108) ReusedExchange [Reuses operator id: 72]
Output [4]: [i_item_sk#95, i_brand_id#96, i_class_id#97, i_category_id#98]

(109) BroadcastHashJoin [codegen id : 131]
Left keys [1]: [ws_item_sk#89]
Right keys [1]: [i_item_sk#95]
Join condition: None

(110) Project [codegen id : 131]
Output [5]: [ws_quantity#90, ws_list_price#91, i_brand_id#96, i_class_id#97, i_category_id#98]
Input [7]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, i_item_sk#95, i_brand_id#96, i_class_id#97, i_category_id#98]

(111) HashAggregate [codegen id : 131]
Input [5]: [ws_quantity#90, ws_list_price#91, i_brand_id#96, i_class_id#97, i_category_id#98]
Keys [3]: [i_brand_id#96, i_class_id#97, i_category_id#98]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#90 as decimal(12,2))) * promote_precision(cast(ws_list_price#91 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#99, isEmpty#100, count#101]
Results [6]: [i_brand_id#96, i_class_id#97, i_category_id#98, sum#102, isEmpty#103, count#104]

(112) Exchange
Input [6]: [i_brand_id#96, i_class_id#97, i_category_id#98, sum#102, isEmpty#103, count#104]
Arguments: hashpartitioning(i_brand_id#96, i_class_id#97, i_category_id#98, 5), ENSURE_REQUIREMENTS, [id=#105]

(113) HashAggregate [codegen id : 132]
Input [6]: [i_brand_id#96, i_class_id#97, i_category_id#98, sum#102, isEmpty#103, count#104]
Keys [3]: [i_brand_id#96, i_class_id#97, i_category_id#98]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#90 as decimal(12,2))) * promote_precision(cast(ws_list_price#91 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#90 as decimal(12,2))) * promote_precision(cast(ws_list_price#91 as decimal(12,2)))), DecimalType(18,2)))#106, count(1)#107]
Results [6]: [web AS channel#108, i_brand_id#96, i_class_id#97, i_category_id#98, sum(CheckOverflow((promote_precision(cast(ws_quantity#90 as decimal(12,2))) * promote_precision(cast(ws_list_price#91 as decimal(12,2)))), DecimalType(18,2)))#106 AS sales#109, count(1)#107 AS number_sales#110]

(114) Filter [codegen id : 132]
Input [6]: [channel#108, i_brand_id#96, i_class_id#97, i_category_id#98, sales#109, number_sales#110]
Condition : (isnotnull(sales#109) AND (cast(sales#109 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(115) Union

(116) HashAggregate [codegen id : 133]
Input [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sales#63, number_sales#64]
Keys [4]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(sales#63), partial_sum(number_sales#64)]
Aggregate Attributes [3]: [sum#111, isEmpty#112, sum#113]
Results [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]

(117) Exchange
Input [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]
Arguments: hashpartitioning(channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#117]

(118) HashAggregate [codegen id : 134]
Input [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]
Keys [4]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#118, sum(number_sales#64)#119]
Results [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum(sales#63)#118 AS sum_sales#120, sum(number_sales#64)#119 AS number_sales#121]

(119) ReusedExchange [Reuses operator id: 117]
Output [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]

(120) HashAggregate [codegen id : 268]
Input [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]
Keys [4]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#118, sum(number_sales#64)#119]
Results [5]: [channel#62, i_brand_id#48, i_class_id#49, sum(sales#63)#118 AS sum_sales#120, sum(number_sales#64)#119 AS number_sales#121]

(121) HashAggregate [codegen id : 268]
Input [5]: [channel#62, i_brand_id#48, i_class_id#49, sum_sales#120, number_sales#121]
Keys [3]: [channel#62, i_brand_id#48, i_class_id#49]
Functions [2]: [partial_sum(sum_sales#120), partial_sum(number_sales#121)]
Aggregate Attributes [3]: [sum#122, isEmpty#123, sum#124]
Results [6]: [channel#62, i_brand_id#48, i_class_id#49, sum#125, isEmpty#126, sum#127]

(122) Exchange
Input [6]: [channel#62, i_brand_id#48, i_class_id#49, sum#125, isEmpty#126, sum#127]
Arguments: hashpartitioning(channel#62, i_brand_id#48, i_class_id#49, 5), ENSURE_REQUIREMENTS, [id=#128]

(123) HashAggregate [codegen id : 269]
Input [6]: [channel#62, i_brand_id#48, i_class_id#49, sum#125, isEmpty#126, sum#127]
Keys [3]: [channel#62, i_brand_id#48, i_class_id#49]
Functions [2]: [sum(sum_sales#120), sum(number_sales#121)]
Aggregate Attributes [2]: [sum(sum_sales#120)#129, sum(number_sales#121)#130]
Results [6]: [channel#62, i_brand_id#48, i_class_id#49, null AS i_category_id#131, sum(sum_sales#120)#129 AS sum(sum_sales)#132, sum(number_sales#121)#130 AS sum(number_sales)#133]

(124) ReusedExchange [Reuses operator id: 117]
Output [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]

(125) HashAggregate [codegen id : 403]
Input [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]
Keys [4]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#118, sum(number_sales#64)#119]
Results [4]: [channel#62, i_brand_id#48, sum(sales#63)#118 AS sum_sales#120, sum(number_sales#64)#119 AS number_sales#121]

(126) HashAggregate [codegen id : 403]
Input [4]: [channel#62, i_brand_id#48, sum_sales#120, number_sales#121]
Keys [2]: [channel#62, i_brand_id#48]
Functions [2]: [partial_sum(sum_sales#120), partial_sum(number_sales#121)]
Aggregate Attributes [3]: [sum#134, isEmpty#135, sum#136]
Results [5]: [channel#62, i_brand_id#48, sum#137, isEmpty#138, sum#139]

(127) Exchange
Input [5]: [channel#62, i_brand_id#48, sum#137, isEmpty#138, sum#139]
Arguments: hashpartitioning(channel#62, i_brand_id#48, 5), ENSURE_REQUIREMENTS, [id=#140]

(128) HashAggregate [codegen id : 404]
Input [5]: [channel#62, i_brand_id#48, sum#137, isEmpty#138, sum#139]
Keys [2]: [channel#62, i_brand_id#48]
Functions [2]: [sum(sum_sales#120), sum(number_sales#121)]
Aggregate Attributes [2]: [sum(sum_sales#120)#141, sum(number_sales#121)#142]
Results [6]: [channel#62, i_brand_id#48, null AS i_class_id#143, null AS i_category_id#144, sum(sum_sales#120)#141 AS sum(sum_sales)#145, sum(number_sales#121)#142 AS sum(number_sales)#146]

(129) ReusedExchange [Reuses operator id: 117]
Output [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]

(130) HashAggregate [codegen id : 538]
Input [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]
Keys [4]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#118, sum(number_sales#64)#119]
Results [3]: [channel#62, sum(sales#63)#118 AS sum_sales#120, sum(number_sales#64)#119 AS number_sales#121]

(131) HashAggregate [codegen id : 538]
Input [3]: [channel#62, sum_sales#120, number_sales#121]
Keys [1]: [channel#62]
Functions [2]: [partial_sum(sum_sales#120), partial_sum(number_sales#121)]
Aggregate Attributes [3]: [sum#147, isEmpty#148, sum#149]
Results [4]: [channel#62, sum#150, isEmpty#151, sum#152]

(132) Exchange
Input [4]: [channel#62, sum#150, isEmpty#151, sum#152]
Arguments: hashpartitioning(channel#62, 5), ENSURE_REQUIREMENTS, [id=#153]

(133) HashAggregate [codegen id : 539]
Input [4]: [channel#62, sum#150, isEmpty#151, sum#152]
Keys [1]: [channel#62]
Functions [2]: [sum(sum_sales#120), sum(number_sales#121)]
Aggregate Attributes [2]: [sum(sum_sales#120)#154, sum(number_sales#121)#155]
Results [6]: [channel#62, null AS i_brand_id#156, null AS i_class_id#157, null AS i_category_id#158, sum(sum_sales#120)#154 AS sum(sum_sales)#159, sum(number_sales#121)#155 AS sum(number_sales)#160]

(134) ReusedExchange [Reuses operator id: 117]
Output [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]

(135) HashAggregate [codegen id : 673]
Input [7]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum#114, isEmpty#115, sum#116]
Keys [4]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#118, sum(number_sales#64)#119]
Results [2]: [sum(sales#63)#118 AS sum_sales#120, sum(number_sales#64)#119 AS number_sales#121]

(136) HashAggregate [codegen id : 673]
Input [2]: [sum_sales#120, number_sales#121]
Keys: []
Functions [2]: [partial_sum(sum_sales#120), partial_sum(number_sales#121)]
Aggregate Attributes [3]: [sum#161, isEmpty#162, sum#163]
Results [3]: [sum#164, isEmpty#165, sum#166]

(137) Exchange
Input [3]: [sum#164, isEmpty#165, sum#166]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#167]

(138) HashAggregate [codegen id : 674]
Input [3]: [sum#164, isEmpty#165, sum#166]
Keys: []
Functions [2]: [sum(sum_sales#120), sum(number_sales#121)]
Aggregate Attributes [2]: [sum(sum_sales#120)#168, sum(number_sales#121)#169]
Results [6]: [null AS channel#170, null AS i_brand_id#171, null AS i_class_id#172, null AS i_category_id#173, sum(sum_sales#120)#168 AS sum(sum_sales)#174, sum(number_sales#121)#169 AS sum(number_sales)#175]

(139) Union

(140) HashAggregate [codegen id : 675]
Input [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#120, number_sales#121]
Keys [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#120, number_sales#121]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#120, number_sales#121]

(141) Exchange
Input [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#120, number_sales#121]
Arguments: hashpartitioning(channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#120, number_sales#121, 5), ENSURE_REQUIREMENTS, [id=#176]

(142) HashAggregate [codegen id : 676]
Input [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#120, number_sales#121]
Keys [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#120, number_sales#121]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#120, number_sales#121]

(143) TakeOrderedAndProject
Input [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#120, number_sales#121]
Arguments: 100, [channel#62 ASC NULLS FIRST, i_brand_id#48 ASC NULLS FIRST, i_class_id#49 ASC NULLS FIRST, i_category_id#50 ASC NULLS FIRST], [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#120, number_sales#121]

===== Subqueries =====

Subquery:1 Hosting operator id = 78 Hosting Expression = Subquery scalar-subquery#65, [id=#66]
* HashAggregate (162)
+- Exchange (161)
   +- * HashAggregate (160)
      +- Union (159)
         :- * Project (148)
         :  +- * BroadcastHashJoin Inner BuildRight (147)
         :     :- * ColumnarToRow (145)
         :     :  +- Scan parquet default.store_sales (144)
         :     +- ReusedExchange (146)
         :- * Project (153)
         :  +- * BroadcastHashJoin Inner BuildRight (152)
         :     :- * ColumnarToRow (150)
         :     :  +- Scan parquet default.catalog_sales (149)
         :     +- ReusedExchange (151)
         +- * Project (158)
            +- * BroadcastHashJoin Inner BuildRight (157)
               :- * ColumnarToRow (155)
               :  +- Scan parquet default.web_sales (154)
               +- ReusedExchange (156)


(144) Scan parquet default.store_sales
Output [3]: [ss_quantity#177, ss_list_price#178, ss_sold_date_sk#179]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#179), dynamicpruningexpression(ss_sold_date_sk#179 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(145) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#177, ss_list_price#178, ss_sold_date_sk#179]

(146) ReusedExchange [Reuses operator id: 177]
Output [1]: [d_date_sk#180]

(147) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#179]
Right keys [1]: [d_date_sk#180]
Join condition: None

(148) Project [codegen id : 2]
Output [2]: [ss_quantity#177 AS quantity#181, ss_list_price#178 AS list_price#182]
Input [4]: [ss_quantity#177, ss_list_price#178, ss_sold_date_sk#179, d_date_sk#180]

(149) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#183, cs_list_price#184, cs_sold_date_sk#185]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#185), dynamicpruningexpression(cs_sold_date_sk#185 IN dynamicpruning#186)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(150) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#183, cs_list_price#184, cs_sold_date_sk#185]

(151) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#187]

(152) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#185]
Right keys [1]: [d_date_sk#187]
Join condition: None

(153) Project [codegen id : 4]
Output [2]: [cs_quantity#183 AS quantity#188, cs_list_price#184 AS list_price#189]
Input [4]: [cs_quantity#183, cs_list_price#184, cs_sold_date_sk#185, d_date_sk#187]

(154) Scan parquet default.web_sales
Output [3]: [ws_quantity#190, ws_list_price#191, ws_sold_date_sk#192]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#192), dynamicpruningexpression(ws_sold_date_sk#192 IN dynamicpruning#186)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(155) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#190, ws_list_price#191, ws_sold_date_sk#192]

(156) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#193]

(157) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#192]
Right keys [1]: [d_date_sk#193]
Join condition: None

(158) Project [codegen id : 6]
Output [2]: [ws_quantity#190 AS quantity#194, ws_list_price#191 AS list_price#195]
Input [4]: [ws_quantity#190, ws_list_price#191, ws_sold_date_sk#192, d_date_sk#193]

(159) Union

(160) HashAggregate [codegen id : 7]
Input [2]: [quantity#181, list_price#182]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(quantity#181 as decimal(12,2))) * promote_precision(cast(list_price#182 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#196, count#197]
Results [2]: [sum#198, count#199]

(161) Exchange
Input [2]: [sum#198, count#199]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#200]

(162) HashAggregate [codegen id : 8]
Input [2]: [sum#198, count#199]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(quantity#181 as decimal(12,2))) * promote_precision(cast(list_price#182 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(quantity#181 as decimal(12,2))) * promote_precision(cast(list_price#182 as decimal(12,2)))), DecimalType(18,2)))#201]
Results [1]: [avg(CheckOverflow((promote_precision(cast(quantity#181 as decimal(12,2))) * promote_precision(cast(list_price#182 as decimal(12,2)))), DecimalType(18,2)))#201 AS average_sales#202]

Subquery:2 Hosting operator id = 144 Hosting Expression = ss_sold_date_sk#179 IN dynamicpruning#13

Subquery:3 Hosting operator id = 149 Hosting Expression = cs_sold_date_sk#185 IN dynamicpruning#186
BroadcastExchange (167)
+- * Project (166)
   +- * Filter (165)
      +- * ColumnarToRow (164)
         +- Scan parquet default.date_dim (163)


(163) Scan parquet default.date_dim
Output [2]: [d_date_sk#187, d_year#203]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(164) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#187, d_year#203]

(165) Filter [codegen id : 1]
Input [2]: [d_date_sk#187, d_year#203]
Condition : (((isnotnull(d_year#203) AND (d_year#203 >= 1998)) AND (d_year#203 <= 2000)) AND isnotnull(d_date_sk#187))

(166) Project [codegen id : 1]
Output [1]: [d_date_sk#187]
Input [2]: [d_date_sk#187, d_year#203]

(167) BroadcastExchange
Input [1]: [d_date_sk#187]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#204]

Subquery:4 Hosting operator id = 154 Hosting Expression = ws_sold_date_sk#192 IN dynamicpruning#186

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (172)
+- * Project (171)
   +- * Filter (170)
      +- * ColumnarToRow (169)
         +- Scan parquet default.date_dim (168)


(168) Scan parquet default.date_dim
Output [3]: [d_date_sk#46, d_year#205, d_moy#206]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(169) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#205, d_moy#206]

(170) Filter [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#205, d_moy#206]
Condition : ((((isnotnull(d_year#205) AND isnotnull(d_moy#206)) AND (d_year#205 = 2000)) AND (d_moy#206 = 11)) AND isnotnull(d_date_sk#46))

(171) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [3]: [d_date_sk#46, d_year#205, d_moy#206]

(172) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#207]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (177)
+- * Project (176)
   +- * Filter (175)
      +- * ColumnarToRow (174)
         +- Scan parquet default.date_dim (173)


(173) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#208]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(174) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#208]

(175) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#208]
Condition : (((isnotnull(d_year#208) AND (d_year#208 >= 1999)) AND (d_year#208 <= 2001)) AND isnotnull(d_date_sk#14))

(176) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#208]

(177) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#209]

Subquery:7 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:8 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#13

Subquery:9 Hosting operator id = 96 Hosting Expression = ReusedSubquery Subquery scalar-subquery#65, [id=#66]

Subquery:10 Hosting operator id = 79 Hosting Expression = cs_sold_date_sk#70 IN dynamicpruning#5

Subquery:11 Hosting operator id = 114 Hosting Expression = ReusedSubquery Subquery scalar-subquery#65, [id=#66]

Subquery:12 Hosting operator id = 97 Hosting Expression = ws_sold_date_sk#92 IN dynamicpruning#5


