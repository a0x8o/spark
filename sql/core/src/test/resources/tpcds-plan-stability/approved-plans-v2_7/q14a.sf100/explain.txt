== Physical Plan ==
TakeOrderedAndProject (154)
+- * HashAggregate (153)
   +- Exchange (152)
      +- * HashAggregate (151)
         +- Union (150)
            :- * HashAggregate (129)
            :  +- Exchange (128)
            :     +- * HashAggregate (127)
            :        +- Union (126)
            :           :- * Filter (89)
            :           :  +- * HashAggregate (88)
            :           :     +- Exchange (87)
            :           :        +- * HashAggregate (86)
            :           :           +- * Project (85)
            :           :              +- * BroadcastHashJoin Inner BuildRight (84)
            :           :                 :- * Project (74)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (73)
            :           :                 :     :- * SortMergeJoin LeftSemi (67)
            :           :                 :     :  :- * Sort (5)
            :           :                 :     :  :  +- Exchange (4)
            :           :                 :     :  :     +- * Filter (3)
            :           :                 :     :  :        +- * ColumnarToRow (2)
            :           :                 :     :  :           +- Scan parquet default.store_sales (1)
            :           :                 :     :  +- * Sort (66)
            :           :                 :     :     +- Exchange (65)
            :           :                 :     :        +- * Project (64)
            :           :                 :     :           +- * BroadcastHashJoin Inner BuildRight (63)
            :           :                 :     :              :- * Filter (8)
            :           :                 :     :              :  +- * ColumnarToRow (7)
            :           :                 :     :              :     +- Scan parquet default.item (6)
            :           :                 :     :              +- BroadcastExchange (62)
            :           :                 :     :                 +- * HashAggregate (61)
            :           :                 :     :                    +- Exchange (60)
            :           :                 :     :                       +- * HashAggregate (59)
            :           :                 :     :                          +- * SortMergeJoin LeftSemi (58)
            :           :                 :     :                             :- * Sort (46)
            :           :                 :     :                             :  +- Exchange (45)
            :           :                 :     :                             :     +- * HashAggregate (44)
            :           :                 :     :                             :        +- Exchange (43)
            :           :                 :     :                             :           +- * HashAggregate (42)
            :           :                 :     :                             :              +- * Project (41)
            :           :                 :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (40)
            :           :                 :     :                             :                    :- * Project (18)
            :           :                 :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (17)
            :           :                 :     :                             :                    :     :- * Filter (11)
            :           :                 :     :                             :                    :     :  +- * ColumnarToRow (10)
            :           :                 :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
            :           :                 :     :                             :                    :     +- BroadcastExchange (16)
            :           :                 :     :                             :                    :        +- * Project (15)
            :           :                 :     :                             :                    :           +- * Filter (14)
            :           :                 :     :                             :                    :              +- * ColumnarToRow (13)
            :           :                 :     :                             :                    :                 +- Scan parquet default.date_dim (12)
            :           :                 :     :                             :                    +- BroadcastExchange (39)
            :           :                 :     :                             :                       +- * SortMergeJoin LeftSemi (38)
            :           :                 :     :                             :                          :- * Sort (23)
            :           :                 :     :                             :                          :  +- Exchange (22)
            :           :                 :     :                             :                          :     +- * Filter (21)
            :           :                 :     :                             :                          :        +- * ColumnarToRow (20)
            :           :                 :     :                             :                          :           +- Scan parquet default.item (19)
            :           :                 :     :                             :                          +- * Sort (37)
            :           :                 :     :                             :                             +- Exchange (36)
            :           :                 :     :                             :                                +- * Project (35)
            :           :                 :     :                             :                                   +- * BroadcastHashJoin Inner BuildRight (34)
            :           :                 :     :                             :                                      :- * Project (29)
            :           :                 :     :                             :                                      :  +- * BroadcastHashJoin Inner BuildRight (28)
            :           :                 :     :                             :                                      :     :- * Filter (26)
            :           :                 :     :                             :                                      :     :  +- * ColumnarToRow (25)
            :           :                 :     :                             :                                      :     :     +- Scan parquet default.catalog_sales (24)
            :           :                 :     :                             :                                      :     +- ReusedExchange (27)
            :           :                 :     :                             :                                      +- BroadcastExchange (33)
            :           :                 :     :                             :                                         +- * Filter (32)
            :           :                 :     :                             :                                            +- * ColumnarToRow (31)
            :           :                 :     :                             :                                               +- Scan parquet default.item (30)
            :           :                 :     :                             +- * Sort (57)
            :           :                 :     :                                +- Exchange (56)
            :           :                 :     :                                   +- * Project (55)
            :           :                 :     :                                      +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                 :     :                                         :- * Project (52)
            :           :                 :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (51)
            :           :                 :     :                                         :     :- * Filter (49)
            :           :                 :     :                                         :     :  +- * ColumnarToRow (48)
            :           :                 :     :                                         :     :     +- Scan parquet default.web_sales (47)
            :           :                 :     :                                         :     +- ReusedExchange (50)
            :           :                 :     :                                         +- ReusedExchange (53)
            :           :                 :     +- BroadcastExchange (72)
            :           :                 :        +- * Project (71)
            :           :                 :           +- * Filter (70)
            :           :                 :              +- * ColumnarToRow (69)
            :           :                 :                 +- Scan parquet default.date_dim (68)
            :           :                 +- BroadcastExchange (83)
            :           :                    +- * SortMergeJoin LeftSemi (82)
            :           :                       :- * Sort (79)
            :           :                       :  +- Exchange (78)
            :           :                       :     +- * Filter (77)
            :           :                       :        +- * ColumnarToRow (76)
            :           :                       :           +- Scan parquet default.item (75)
            :           :                       +- * Sort (81)
            :           :                          +- ReusedExchange (80)
            :           :- * Filter (107)
            :           :  +- * HashAggregate (106)
            :           :     +- Exchange (105)
            :           :        +- * HashAggregate (104)
            :           :           +- * Project (103)
            :           :              +- * BroadcastHashJoin Inner BuildRight (102)
            :           :                 :- * Project (100)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (99)
            :           :                 :     :- * SortMergeJoin LeftSemi (97)
            :           :                 :     :  :- * Sort (94)
            :           :                 :     :  :  +- Exchange (93)
            :           :                 :     :  :     +- * Filter (92)
            :           :                 :     :  :        +- * ColumnarToRow (91)
            :           :                 :     :  :           +- Scan parquet default.catalog_sales (90)
            :           :                 :     :  +- * Sort (96)
            :           :                 :     :     +- ReusedExchange (95)
            :           :                 :     +- ReusedExchange (98)
            :           :                 +- ReusedExchange (101)
            :           +- * Filter (125)
            :              +- * HashAggregate (124)
            :                 +- Exchange (123)
            :                    +- * HashAggregate (122)
            :                       +- * Project (121)
            :                          +- * BroadcastHashJoin Inner BuildRight (120)
            :                             :- * Project (118)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (117)
            :                             :     :- * SortMergeJoin LeftSemi (115)
            :                             :     :  :- * Sort (112)
            :                             :     :  :  +- Exchange (111)
            :                             :     :  :     +- * Filter (110)
            :                             :     :  :        +- * ColumnarToRow (109)
            :                             :     :  :           +- Scan parquet default.web_sales (108)
            :                             :     :  +- * Sort (114)
            :                             :     :     +- ReusedExchange (113)
            :                             :     +- ReusedExchange (116)
            :                             +- ReusedExchange (119)
            :- * HashAggregate (134)
            :  +- Exchange (133)
            :     +- * HashAggregate (132)
            :        +- * HashAggregate (131)
            :           +- ReusedExchange (130)
            :- * HashAggregate (139)
            :  +- Exchange (138)
            :     +- * HashAggregate (137)
            :        +- * HashAggregate (136)
            :           +- ReusedExchange (135)
            :- * HashAggregate (144)
            :  +- Exchange (143)
            :     +- * HashAggregate (142)
            :        +- * HashAggregate (141)
            :           +- ReusedExchange (140)
            +- * HashAggregate (149)
               +- Exchange (148)
                  +- * HashAggregate (147)
                     +- * HashAggregate (146)
                        +- ReusedExchange (145)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(16) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(17) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(18) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(19) Scan parquet default.item
Output [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Condition : (((isnotnull(i_item_sk#17) AND isnotnull(i_brand_id#18)) AND isnotnull(i_class_id#19)) AND isnotnull(i_category_id#20))

(22) Exchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: hashpartitioning(coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20), 5), ENSURE_REQUIREMENTS, [id=#21]

(23) Sort [codegen id : 5]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: [coalesce(i_brand_id#18, 0) ASC NULLS FIRST, isnull(i_brand_id#18) ASC NULLS FIRST, coalesce(i_class_id#19, 0) ASC NULLS FIRST, isnull(i_class_id#19) ASC NULLS FIRST, coalesce(i_category_id#20, 0) ASC NULLS FIRST, isnull(i_category_id#20) ASC NULLS FIRST], false, 0

(24) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#22, cs_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#23), dynamicpruningexpression(cs_sold_date_sk#23 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(25) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#22, cs_sold_date_sk#23]

(26) Filter [codegen id : 8]
Input [2]: [cs_item_sk#22, cs_sold_date_sk#23]
Condition : isnotnull(cs_item_sk#22)

(27) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#24]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#23]
Right keys [1]: [d_date_sk#24]
Join condition: None

(29) Project [codegen id : 8]
Output [1]: [cs_item_sk#22]
Input [3]: [cs_item_sk#22, cs_sold_date_sk#23, d_date_sk#24]

(30) Scan parquet default.item
Output [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(31) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]

(32) Filter [codegen id : 7]
Input [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]
Condition : isnotnull(i_item_sk#25)

(33) BroadcastExchange
Input [4]: [i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#22]
Right keys [1]: [i_item_sk#25]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [i_brand_id#26, i_class_id#27, i_category_id#28]
Input [5]: [cs_item_sk#22, i_item_sk#25, i_brand_id#26, i_class_id#27, i_category_id#28]

(36) Exchange
Input [3]: [i_brand_id#26, i_class_id#27, i_category_id#28]
Arguments: hashpartitioning(coalesce(i_brand_id#26, 0), isnull(i_brand_id#26), coalesce(i_class_id#27, 0), isnull(i_class_id#27), coalesce(i_category_id#28, 0), isnull(i_category_id#28), 5), ENSURE_REQUIREMENTS, [id=#30]

(37) Sort [codegen id : 9]
Input [3]: [i_brand_id#26, i_class_id#27, i_category_id#28]
Arguments: [coalesce(i_brand_id#26, 0) ASC NULLS FIRST, isnull(i_brand_id#26) ASC NULLS FIRST, coalesce(i_class_id#27, 0) ASC NULLS FIRST, isnull(i_class_id#27) ASC NULLS FIRST, coalesce(i_category_id#28, 0) ASC NULLS FIRST, isnull(i_category_id#28) ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Right keys [6]: [coalesce(i_brand_id#26, 0), isnull(i_brand_id#26), coalesce(i_class_id#27, 0), isnull(i_class_id#27), coalesce(i_category_id#28, 0), isnull(i_category_id#28)]
Join condition: None

(39) BroadcastExchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(40) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#17]
Join condition: None

(41) Project [codegen id : 11]
Output [3]: [i_brand_id#18 AS brand_id#32, i_class_id#19 AS class_id#33, i_category_id#20 AS category_id#34]
Input [5]: [ss_item_sk#11, i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(42) HashAggregate [codegen id : 11]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(43) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#35]

(44) HashAggregate [codegen id : 12]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(45) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34), 5), ENSURE_REQUIREMENTS, [id=#36]

(46) Sort [codegen id : 13]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: [coalesce(brand_id#32, 0) ASC NULLS FIRST, isnull(brand_id#32) ASC NULLS FIRST, coalesce(class_id#33, 0) ASC NULLS FIRST, isnull(class_id#33) ASC NULLS FIRST, coalesce(category_id#34, 0) ASC NULLS FIRST, isnull(category_id#34) ASC NULLS FIRST], false, 0

(47) Scan parquet default.web_sales
Output [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#38), dynamicpruningexpression(ws_sold_date_sk#38 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(48) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]

(49) Filter [codegen id : 16]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Condition : isnotnull(ws_item_sk#37)

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#39]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#38]
Right keys [1]: [d_date_sk#39]
Join condition: None

(52) Project [codegen id : 16]
Output [1]: [ws_item_sk#37]
Input [3]: [ws_item_sk#37, ws_sold_date_sk#38, d_date_sk#39]

(53) ReusedExchange [Reuses operator id: 33]
Output [4]: [i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(54) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#37]
Right keys [1]: [i_item_sk#40]
Join condition: None

(55) Project [codegen id : 16]
Output [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Input [5]: [ws_item_sk#37, i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(56) Exchange
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: hashpartitioning(coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43), 5), ENSURE_REQUIREMENTS, [id=#44]

(57) Sort [codegen id : 17]
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: [coalesce(i_brand_id#41, 0) ASC NULLS FIRST, isnull(i_brand_id#41) ASC NULLS FIRST, coalesce(i_class_id#42, 0) ASC NULLS FIRST, isnull(i_class_id#42) ASC NULLS FIRST, coalesce(i_category_id#43, 0) ASC NULLS FIRST, isnull(i_category_id#43) ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34)]
Right keys [6]: [coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43)]
Join condition: None

(59) HashAggregate [codegen id : 18]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(60) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#45]

(61) HashAggregate [codegen id : 19]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(62) BroadcastExchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#46]

(63) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#32, class_id#33, category_id#34]
Join condition: None

(64) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#47]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#32, class_id#33, category_id#34]

(65) Exchange
Input [1]: [ss_item_sk#47]
Arguments: hashpartitioning(ss_item_sk#47, 5), ENSURE_REQUIREMENTS, [id=#48]

(66) Sort [codegen id : 21]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(68) Scan parquet default.date_dim
Output [3]: [d_date_sk#49, d_year#50, d_moy#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(69) ColumnarToRow [codegen id : 22]
Input [3]: [d_date_sk#49, d_year#50, d_moy#51]

(70) Filter [codegen id : 22]
Input [3]: [d_date_sk#49, d_year#50, d_moy#51]
Condition : ((((isnotnull(d_year#50) AND isnotnull(d_moy#51)) AND (d_year#50 = 2000)) AND (d_moy#51 = 11)) AND isnotnull(d_date_sk#49))

(71) Project [codegen id : 22]
Output [1]: [d_date_sk#49]
Input [3]: [d_date_sk#49, d_year#50, d_moy#51]

(72) BroadcastExchange
Input [1]: [d_date_sk#49]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#52]

(73) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#49]
Join condition: None

(74) Project [codegen id : 45]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#49]

(75) Scan parquet default.item
Output [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(76) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]

(77) Filter [codegen id : 23]
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Condition : isnotnull(i_item_sk#53)

(78) Exchange
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: hashpartitioning(i_item_sk#53, 5), ENSURE_REQUIREMENTS, [id=#57]

(79) Sort [codegen id : 24]
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: [i_item_sk#53 ASC NULLS FIRST], false, 0

(80) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#47]

(81) Sort [codegen id : 43]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(82) SortMergeJoin [codegen id : 44]
Left keys [1]: [i_item_sk#53]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(83) BroadcastExchange
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58]

(84) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#53]
Join condition: None

(85) Project [codegen id : 45]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#54, i_class_id#55, i_category_id#56]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]

(86) HashAggregate [codegen id : 45]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#54, i_class_id#55, i_category_id#56]
Keys [3]: [i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#59, isEmpty#60, count#61]
Results [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#62, isEmpty#63, count#64]

(87) Exchange
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#62, isEmpty#63, count#64]
Arguments: hashpartitioning(i_brand_id#54, i_class_id#55, i_category_id#56, 5), ENSURE_REQUIREMENTS, [id=#65]

(88) HashAggregate [codegen id : 46]
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#62, isEmpty#63, count#64]
Keys [3]: [i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66, count(1)#67]
Results [6]: [store AS channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66 AS sales#69, count(1)#67 AS number_sales#70]

(89) Filter [codegen id : 46]
Input [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sales#69, number_sales#70]
Condition : (isnotnull(sales#69) AND (cast(sales#69 as decimal(32,6)) > cast(Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(90) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#76), dynamicpruningexpression(cs_sold_date_sk#76 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(91) ColumnarToRow [codegen id : 47]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]

(92) Filter [codegen id : 47]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Condition : isnotnull(cs_item_sk#73)

(93) Exchange
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Arguments: hashpartitioning(cs_item_sk#73, 5), ENSURE_REQUIREMENTS, [id=#77]

(94) Sort [codegen id : 48]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Arguments: [cs_item_sk#73 ASC NULLS FIRST], false, 0

(95) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#47]

(96) Sort [codegen id : 67]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(97) SortMergeJoin [codegen id : 91]
Left keys [1]: [cs_item_sk#73]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(98) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#78]

(99) BroadcastHashJoin [codegen id : 91]
Left keys [1]: [cs_sold_date_sk#76]
Right keys [1]: [d_date_sk#78]
Join condition: None

(100) Project [codegen id : 91]
Output [3]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75]
Input [5]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76, d_date_sk#78]

(101) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(102) BroadcastHashJoin [codegen id : 91]
Left keys [1]: [cs_item_sk#73]
Right keys [1]: [i_item_sk#79]
Join condition: None

(103) Project [codegen id : 91]
Output [5]: [cs_quantity#74, cs_list_price#75, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [7]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(104) HashAggregate [codegen id : 91]
Input [5]: [cs_quantity#74, cs_list_price#75, i_brand_id#80, i_class_id#81, i_category_id#82]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, count#85]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]

(105) Exchange
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Arguments: hashpartitioning(i_brand_id#80, i_class_id#81, i_category_id#82, 5), ENSURE_REQUIREMENTS, [id=#89]

(106) HashAggregate [codegen id : 92]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90, count(1)#91]
Results [6]: [catalog AS channel#92, i_brand_id#80, i_class_id#81, i_category_id#82, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90 AS sales#93, count(1)#91 AS number_sales#94]

(107) Filter [codegen id : 92]
Input [6]: [channel#92, i_brand_id#80, i_class_id#81, i_category_id#82, sales#93, number_sales#94]
Condition : (isnotnull(sales#93) AND (cast(sales#93 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(108) Scan parquet default.web_sales
Output [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#98), dynamicpruningexpression(ws_sold_date_sk#98 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(109) ColumnarToRow [codegen id : 93]
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]

(110) Filter [codegen id : 93]
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Condition : isnotnull(ws_item_sk#95)

(111) Exchange
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Arguments: hashpartitioning(ws_item_sk#95, 5), ENSURE_REQUIREMENTS, [id=#99]

(112) Sort [codegen id : 94]
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Arguments: [ws_item_sk#95 ASC NULLS FIRST], false, 0

(113) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#47]

(114) Sort [codegen id : 113]
Input [1]: [ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(115) SortMergeJoin [codegen id : 137]
Left keys [1]: [ws_item_sk#95]
Right keys [1]: [ss_item_sk#47]
Join condition: None

(116) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#100]

(117) BroadcastHashJoin [codegen id : 137]
Left keys [1]: [ws_sold_date_sk#98]
Right keys [1]: [d_date_sk#100]
Join condition: None

(118) Project [codegen id : 137]
Output [3]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97]
Input [5]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98, d_date_sk#100]

(119) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#101, i_brand_id#102, i_class_id#103, i_category_id#104]

(120) BroadcastHashJoin [codegen id : 137]
Left keys [1]: [ws_item_sk#95]
Right keys [1]: [i_item_sk#101]
Join condition: None

(121) Project [codegen id : 137]
Output [5]: [ws_quantity#96, ws_list_price#97, i_brand_id#102, i_class_id#103, i_category_id#104]
Input [7]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, i_item_sk#101, i_brand_id#102, i_class_id#103, i_category_id#104]

(122) HashAggregate [codegen id : 137]
Input [5]: [ws_quantity#96, ws_list_price#97, i_brand_id#102, i_class_id#103, i_category_id#104]
Keys [3]: [i_brand_id#102, i_class_id#103, i_category_id#104]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#105, isEmpty#106, count#107]
Results [6]: [i_brand_id#102, i_class_id#103, i_category_id#104, sum#108, isEmpty#109, count#110]

(123) Exchange
Input [6]: [i_brand_id#102, i_class_id#103, i_category_id#104, sum#108, isEmpty#109, count#110]
Arguments: hashpartitioning(i_brand_id#102, i_class_id#103, i_category_id#104, 5), ENSURE_REQUIREMENTS, [id=#111]

(124) HashAggregate [codegen id : 138]
Input [6]: [i_brand_id#102, i_class_id#103, i_category_id#104, sum#108, isEmpty#109, count#110]
Keys [3]: [i_brand_id#102, i_class_id#103, i_category_id#104]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true))#112, count(1)#113]
Results [6]: [web AS channel#114, i_brand_id#102, i_class_id#103, i_category_id#104, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true))#112 AS sales#115, count(1)#113 AS number_sales#116]

(125) Filter [codegen id : 138]
Input [6]: [channel#114, i_brand_id#102, i_class_id#103, i_category_id#104, sales#115, number_sales#116]
Condition : (isnotnull(sales#115) AND (cast(sales#115 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(126) Union

(127) HashAggregate [codegen id : 139]
Input [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sales#69, number_sales#70]
Keys [4]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [partial_sum(sales#69), partial_sum(number_sales#70)]
Aggregate Attributes [3]: [sum#117, isEmpty#118, sum#119]
Results [7]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum#120, isEmpty#121, sum#122]

(128) Exchange
Input [7]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum#120, isEmpty#121, sum#122]
Arguments: hashpartitioning(channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, 5), ENSURE_REQUIREMENTS, [id=#123]

(129) HashAggregate [codegen id : 140]
Input [7]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum#120, isEmpty#121, sum#122]
Keys [4]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [sum(sales#69), sum(number_sales#70)]
Aggregate Attributes [2]: [sum(sales#69)#124, sum(number_sales#70)#125]
Results [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum(sales#69)#124 AS sum_sales#126, sum(number_sales#70)#125 AS number_sales#127]

(130) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#68, i_brand_id#128, i_class_id#129, i_category_id#130, sum#131, isEmpty#132, sum#133]

(131) HashAggregate [codegen id : 280]
Input [7]: [channel#68, i_brand_id#128, i_class_id#129, i_category_id#130, sum#131, isEmpty#132, sum#133]
Keys [4]: [channel#68, i_brand_id#128, i_class_id#129, i_category_id#130]
Functions [2]: [sum(sales#69), sum(number_sales#70)]
Aggregate Attributes [2]: [sum(sales#69)#134, sum(number_sales#70)#135]
Results [5]: [channel#68, i_brand_id#128, i_class_id#129, sum(sales#69)#134 AS sum_sales#126, sum(number_sales#70)#135 AS number_sales#127]

(132) HashAggregate [codegen id : 280]
Input [5]: [channel#68, i_brand_id#128, i_class_id#129, sum_sales#126, number_sales#127]
Keys [3]: [channel#68, i_brand_id#128, i_class_id#129]
Functions [2]: [partial_sum(sum_sales#126), partial_sum(number_sales#127)]
Aggregate Attributes [3]: [sum#136, isEmpty#137, sum#138]
Results [6]: [channel#68, i_brand_id#128, i_class_id#129, sum#139, isEmpty#140, sum#141]

(133) Exchange
Input [6]: [channel#68, i_brand_id#128, i_class_id#129, sum#139, isEmpty#140, sum#141]
Arguments: hashpartitioning(channel#68, i_brand_id#128, i_class_id#129, 5), ENSURE_REQUIREMENTS, [id=#142]

(134) HashAggregate [codegen id : 281]
Input [6]: [channel#68, i_brand_id#128, i_class_id#129, sum#139, isEmpty#140, sum#141]
Keys [3]: [channel#68, i_brand_id#128, i_class_id#129]
Functions [2]: [sum(sum_sales#126), sum(number_sales#127)]
Aggregate Attributes [2]: [sum(sum_sales#126)#143, sum(number_sales#127)#144]
Results [6]: [channel#68, i_brand_id#128, i_class_id#129, null AS i_category_id#145, sum(sum_sales#126)#143 AS sum(sum_sales)#146, sum(number_sales#127)#144 AS sum(number_sales)#147]

(135) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#68, i_brand_id#148, i_class_id#149, i_category_id#150, sum#151, isEmpty#152, sum#153]

(136) HashAggregate [codegen id : 421]
Input [7]: [channel#68, i_brand_id#148, i_class_id#149, i_category_id#150, sum#151, isEmpty#152, sum#153]
Keys [4]: [channel#68, i_brand_id#148, i_class_id#149, i_category_id#150]
Functions [2]: [sum(sales#69), sum(number_sales#70)]
Aggregate Attributes [2]: [sum(sales#69)#154, sum(number_sales#70)#155]
Results [4]: [channel#68, i_brand_id#148, sum(sales#69)#154 AS sum_sales#126, sum(number_sales#70)#155 AS number_sales#127]

(137) HashAggregate [codegen id : 421]
Input [4]: [channel#68, i_brand_id#148, sum_sales#126, number_sales#127]
Keys [2]: [channel#68, i_brand_id#148]
Functions [2]: [partial_sum(sum_sales#126), partial_sum(number_sales#127)]
Aggregate Attributes [3]: [sum#156, isEmpty#157, sum#158]
Results [5]: [channel#68, i_brand_id#148, sum#159, isEmpty#160, sum#161]

(138) Exchange
Input [5]: [channel#68, i_brand_id#148, sum#159, isEmpty#160, sum#161]
Arguments: hashpartitioning(channel#68, i_brand_id#148, 5), ENSURE_REQUIREMENTS, [id=#162]

(139) HashAggregate [codegen id : 422]
Input [5]: [channel#68, i_brand_id#148, sum#159, isEmpty#160, sum#161]
Keys [2]: [channel#68, i_brand_id#148]
Functions [2]: [sum(sum_sales#126), sum(number_sales#127)]
Aggregate Attributes [2]: [sum(sum_sales#126)#163, sum(number_sales#127)#164]
Results [6]: [channel#68, i_brand_id#148, null AS i_class_id#165, null AS i_category_id#166, sum(sum_sales#126)#163 AS sum(sum_sales)#167, sum(number_sales#127)#164 AS sum(number_sales)#168]

(140) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#68, i_brand_id#169, i_class_id#170, i_category_id#171, sum#172, isEmpty#173, sum#174]

(141) HashAggregate [codegen id : 562]
Input [7]: [channel#68, i_brand_id#169, i_class_id#170, i_category_id#171, sum#172, isEmpty#173, sum#174]
Keys [4]: [channel#68, i_brand_id#169, i_class_id#170, i_category_id#171]
Functions [2]: [sum(sales#69), sum(number_sales#70)]
Aggregate Attributes [2]: [sum(sales#69)#175, sum(number_sales#70)#176]
Results [3]: [channel#68, sum(sales#69)#175 AS sum_sales#126, sum(number_sales#70)#176 AS number_sales#127]

(142) HashAggregate [codegen id : 562]
Input [3]: [channel#68, sum_sales#126, number_sales#127]
Keys [1]: [channel#68]
Functions [2]: [partial_sum(sum_sales#126), partial_sum(number_sales#127)]
Aggregate Attributes [3]: [sum#177, isEmpty#178, sum#179]
Results [4]: [channel#68, sum#180, isEmpty#181, sum#182]

(143) Exchange
Input [4]: [channel#68, sum#180, isEmpty#181, sum#182]
Arguments: hashpartitioning(channel#68, 5), ENSURE_REQUIREMENTS, [id=#183]

(144) HashAggregate [codegen id : 563]
Input [4]: [channel#68, sum#180, isEmpty#181, sum#182]
Keys [1]: [channel#68]
Functions [2]: [sum(sum_sales#126), sum(number_sales#127)]
Aggregate Attributes [2]: [sum(sum_sales#126)#184, sum(number_sales#127)#185]
Results [6]: [channel#68, null AS i_brand_id#186, null AS i_class_id#187, null AS i_category_id#188, sum(sum_sales#126)#184 AS sum(sum_sales)#189, sum(number_sales#127)#185 AS sum(number_sales)#190]

(145) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#68, i_brand_id#191, i_class_id#192, i_category_id#193, sum#194, isEmpty#195, sum#196]

(146) HashAggregate [codegen id : 703]
Input [7]: [channel#68, i_brand_id#191, i_class_id#192, i_category_id#193, sum#194, isEmpty#195, sum#196]
Keys [4]: [channel#68, i_brand_id#191, i_class_id#192, i_category_id#193]
Functions [2]: [sum(sales#69), sum(number_sales#70)]
Aggregate Attributes [2]: [sum(sales#69)#197, sum(number_sales#70)#198]
Results [2]: [sum(sales#69)#197 AS sum_sales#126, sum(number_sales#70)#198 AS number_sales#127]

(147) HashAggregate [codegen id : 703]
Input [2]: [sum_sales#126, number_sales#127]
Keys: []
Functions [2]: [partial_sum(sum_sales#126), partial_sum(number_sales#127)]
Aggregate Attributes [3]: [sum#199, isEmpty#200, sum#201]
Results [3]: [sum#202, isEmpty#203, sum#204]

(148) Exchange
Input [3]: [sum#202, isEmpty#203, sum#204]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#205]

(149) HashAggregate [codegen id : 704]
Input [3]: [sum#202, isEmpty#203, sum#204]
Keys: []
Functions [2]: [sum(sum_sales#126), sum(number_sales#127)]
Aggregate Attributes [2]: [sum(sum_sales#126)#206, sum(number_sales#127)#207]
Results [6]: [null AS channel#208, null AS i_brand_id#209, null AS i_class_id#210, null AS i_category_id#211, sum(sum_sales#126)#206 AS sum(sum_sales)#212, sum(number_sales#127)#207 AS sum(number_sales)#213]

(150) Union

(151) HashAggregate [codegen id : 705]
Input [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#126, number_sales#127]
Keys [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#126, number_sales#127]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#126, number_sales#127]

(152) Exchange
Input [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#126, number_sales#127]
Arguments: hashpartitioning(channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#126, number_sales#127, 5), ENSURE_REQUIREMENTS, [id=#214]

(153) HashAggregate [codegen id : 706]
Input [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#126, number_sales#127]
Keys [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#126, number_sales#127]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#126, number_sales#127]

(154) TakeOrderedAndProject
Input [6]: [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#126, number_sales#127]
Arguments: 100, [channel#68 ASC NULLS FIRST, i_brand_id#54 ASC NULLS FIRST, i_class_id#55 ASC NULLS FIRST, i_category_id#56 ASC NULLS FIRST], [channel#68, i_brand_id#54, i_class_id#55, i_category_id#56, sum_sales#126, number_sales#127]

===== Subqueries =====

Subquery:1 Hosting operator id = 89 Hosting Expression = Subquery scalar-subquery#71, [id=#72]
* HashAggregate (181)
+- Exchange (180)
   +- * HashAggregate (179)
      +- Union (178)
         :- * Project (163)
         :  +- * BroadcastHashJoin Inner BuildRight (162)
         :     :- * ColumnarToRow (156)
         :     :  +- Scan parquet default.store_sales (155)
         :     +- BroadcastExchange (161)
         :        +- * Project (160)
         :           +- * Filter (159)
         :              +- * ColumnarToRow (158)
         :                 +- Scan parquet default.date_dim (157)
         :- * Project (172)
         :  +- * BroadcastHashJoin Inner BuildRight (171)
         :     :- * ColumnarToRow (165)
         :     :  +- Scan parquet default.catalog_sales (164)
         :     +- BroadcastExchange (170)
         :        +- * Project (169)
         :           +- * Filter (168)
         :              +- * ColumnarToRow (167)
         :                 +- Scan parquet default.date_dim (166)
         +- * Project (177)
            +- * BroadcastHashJoin Inner BuildRight (176)
               :- * ColumnarToRow (174)
               :  +- Scan parquet default.web_sales (173)
               +- ReusedExchange (175)


(155) Scan parquet default.store_sales
Output [3]: [ss_quantity#215, ss_list_price#216, ss_sold_date_sk#217]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#217), dynamicpruningexpression(ss_sold_date_sk#217 IN dynamicpruning#218)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(156) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#215, ss_list_price#216, ss_sold_date_sk#217]

(157) Scan parquet default.date_dim
Output [2]: [d_date_sk#219, d_year#220]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(158) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#219, d_year#220]

(159) Filter [codegen id : 1]
Input [2]: [d_date_sk#219, d_year#220]
Condition : (((isnotnull(d_year#220) AND (d_year#220 >= 1999)) AND (d_year#220 <= 2001)) AND isnotnull(d_date_sk#219))

(160) Project [codegen id : 1]
Output [1]: [d_date_sk#219]
Input [2]: [d_date_sk#219, d_year#220]

(161) BroadcastExchange
Input [1]: [d_date_sk#219]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#221]

(162) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#217]
Right keys [1]: [d_date_sk#219]
Join condition: None

(163) Project [codegen id : 2]
Output [2]: [ss_quantity#215 AS quantity#222, ss_list_price#216 AS list_price#223]
Input [4]: [ss_quantity#215, ss_list_price#216, ss_sold_date_sk#217, d_date_sk#219]

(164) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#224, cs_list_price#225, cs_sold_date_sk#226]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#226), dynamicpruningexpression(cs_sold_date_sk#226 IN dynamicpruning#227)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(165) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#224, cs_list_price#225, cs_sold_date_sk#226]

(166) Scan parquet default.date_dim
Output [2]: [d_date_sk#228, d_year#229]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(167) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#228, d_year#229]

(168) Filter [codegen id : 3]
Input [2]: [d_date_sk#228, d_year#229]
Condition : (((isnotnull(d_year#229) AND (d_year#229 >= 1998)) AND (d_year#229 <= 2000)) AND isnotnull(d_date_sk#228))

(169) Project [codegen id : 3]
Output [1]: [d_date_sk#228]
Input [2]: [d_date_sk#228, d_year#229]

(170) BroadcastExchange
Input [1]: [d_date_sk#228]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#230]

(171) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#226]
Right keys [1]: [d_date_sk#228]
Join condition: None

(172) Project [codegen id : 4]
Output [2]: [cs_quantity#224 AS quantity#231, cs_list_price#225 AS list_price#232]
Input [4]: [cs_quantity#224, cs_list_price#225, cs_sold_date_sk#226, d_date_sk#228]

(173) Scan parquet default.web_sales
Output [3]: [ws_quantity#233, ws_list_price#234, ws_sold_date_sk#235]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#235), dynamicpruningexpression(ws_sold_date_sk#235 IN dynamicpruning#227)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(174) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#233, ws_list_price#234, ws_sold_date_sk#235]

(175) ReusedExchange [Reuses operator id: 170]
Output [1]: [d_date_sk#236]

(176) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#235]
Right keys [1]: [d_date_sk#236]
Join condition: None

(177) Project [codegen id : 6]
Output [2]: [ws_quantity#233 AS quantity#237, ws_list_price#234 AS list_price#238]
Input [4]: [ws_quantity#233, ws_list_price#234, ws_sold_date_sk#235, d_date_sk#236]

(178) Union

(179) HashAggregate [codegen id : 7]
Input [2]: [quantity#222, list_price#223]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#222 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#223 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#239, count#240]
Results [2]: [sum#241, count#242]

(180) Exchange
Input [2]: [sum#241, count#242]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#243]

(181) HashAggregate [codegen id : 8]
Input [2]: [sum#241, count#242]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#222 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#223 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#222 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#223 as decimal(12,2)))), DecimalType(18,2), true))#244]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#222 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#223 as decimal(12,2)))), DecimalType(18,2), true))#244 AS average_sales#245]

Subquery:2 Hosting operator id = 155 Hosting Expression = ss_sold_date_sk#217 IN dynamicpruning#218
ReusedExchange (182)


(182) ReusedExchange [Reuses operator id: 161]
Output [1]: [d_date_sk#219]

Subquery:3 Hosting operator id = 164 Hosting Expression = cs_sold_date_sk#226 IN dynamicpruning#227
ReusedExchange (183)


(183) ReusedExchange [Reuses operator id: 170]
Output [1]: [d_date_sk#228]

Subquery:4 Hosting operator id = 173 Hosting Expression = ws_sold_date_sk#235 IN dynamicpruning#227

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (184)


(184) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#49]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
ReusedExchange (185)


(185) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#14]

Subquery:7 Hosting operator id = 24 Hosting Expression = cs_sold_date_sk#23 IN dynamicpruning#13

Subquery:8 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#38 IN dynamicpruning#13

Subquery:9 Hosting operator id = 107 Hosting Expression = ReusedSubquery Subquery scalar-subquery#71, [id=#72]

Subquery:10 Hosting operator id = 90 Hosting Expression = cs_sold_date_sk#76 IN dynamicpruning#5

Subquery:11 Hosting operator id = 125 Hosting Expression = ReusedSubquery Subquery scalar-subquery#71, [id=#72]

Subquery:12 Hosting operator id = 108 Hosting Expression = ws_sold_date_sk#98 IN dynamicpruning#5


