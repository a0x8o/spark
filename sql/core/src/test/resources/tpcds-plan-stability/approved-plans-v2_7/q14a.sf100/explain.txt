== Physical Plan ==
TakeOrderedAndProject (213)
+- * HashAggregate (212)
   +- Exchange (211)
      +- * HashAggregate (210)
         +- Union (209)
            :- * HashAggregate (132)
            :  +- Exchange (131)
            :     +- * HashAggregate (130)
            :        +- Union (129)
            :           :- * Project (90)
            :           :  +- * Filter (89)
            :           :     +- * HashAggregate (88)
            :           :        +- Exchange (87)
            :           :           +- * HashAggregate (86)
            :           :              +- * Project (85)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (84)
            :           :                    :- * Project (74)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (73)
            :           :                    :     :- SortMergeJoin LeftSemi (67)
            :           :                    :     :  :- * Sort (5)
            :           :                    :     :  :  +- Exchange (4)
            :           :                    :     :  :     +- * Filter (3)
            :           :                    :     :  :        +- * ColumnarToRow (2)
            :           :                    :     :  :           +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- * Sort (66)
            :           :                    :     :     +- Exchange (65)
            :           :                    :     :        +- * Project (64)
            :           :                    :     :           +- * BroadcastHashJoin Inner BuildRight (63)
            :           :                    :     :              :- * Filter (8)
            :           :                    :     :              :  +- * ColumnarToRow (7)
            :           :                    :     :              :     +- Scan parquet default.item (6)
            :           :                    :     :              +- BroadcastExchange (62)
            :           :                    :     :                 +- * HashAggregate (61)
            :           :                    :     :                    +- Exchange (60)
            :           :                    :     :                       +- * HashAggregate (59)
            :           :                    :     :                          +- SortMergeJoin LeftSemi (58)
            :           :                    :     :                             :- * Sort (46)
            :           :                    :     :                             :  +- Exchange (45)
            :           :                    :     :                             :     +- * HashAggregate (44)
            :           :                    :     :                             :        +- Exchange (43)
            :           :                    :     :                             :           +- * HashAggregate (42)
            :           :                    :     :                             :              +- SortMergeJoin LeftSemi (41)
            :           :                    :     :                             :                 :- * Sort (26)
            :           :                    :     :                             :                 :  +- Exchange (25)
            :           :                    :     :                             :                 :     +- * Project (24)
            :           :                    :     :                             :                 :        +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                    :     :                             :                 :           :- * Project (18)
            :           :                    :     :                             :                 :           :  +- * BroadcastHashJoin Inner BuildRight (17)
            :           :                    :     :                             :                 :           :     :- * Filter (11)
            :           :                    :     :                             :                 :           :     :  +- * ColumnarToRow (10)
            :           :                    :     :                             :                 :           :     :     +- Scan parquet default.store_sales (9)
            :           :                    :     :                             :                 :           :     +- BroadcastExchange (16)
            :           :                    :     :                             :                 :           :        +- * Project (15)
            :           :                    :     :                             :                 :           :           +- * Filter (14)
            :           :                    :     :                             :                 :           :              +- * ColumnarToRow (13)
            :           :                    :     :                             :                 :           :                 +- Scan parquet default.date_dim (12)
            :           :                    :     :                             :                 :           +- BroadcastExchange (22)
            :           :                    :     :                             :                 :              +- * Filter (21)
            :           :                    :     :                             :                 :                 +- * ColumnarToRow (20)
            :           :                    :     :                             :                 :                    +- Scan parquet default.item (19)
            :           :                    :     :                             :                 +- * Sort (40)
            :           :                    :     :                             :                    +- Exchange (39)
            :           :                    :     :                             :                       +- * Project (38)
            :           :                    :     :                             :                          +- * BroadcastHashJoin Inner BuildRight (37)
            :           :                    :     :                             :                             :- * Project (32)
            :           :                    :     :                             :                             :  +- * BroadcastHashJoin Inner BuildRight (31)
            :           :                    :     :                             :                             :     :- * Filter (29)
            :           :                    :     :                             :                             :     :  +- * ColumnarToRow (28)
            :           :                    :     :                             :                             :     :     +- Scan parquet default.catalog_sales (27)
            :           :                    :     :                             :                             :     +- ReusedExchange (30)
            :           :                    :     :                             :                             +- BroadcastExchange (36)
            :           :                    :     :                             :                                +- * Filter (35)
            :           :                    :     :                             :                                   +- * ColumnarToRow (34)
            :           :                    :     :                             :                                      +- Scan parquet default.item (33)
            :           :                    :     :                             +- * Sort (57)
            :           :                    :     :                                +- Exchange (56)
            :           :                    :     :                                   +- * Project (55)
            :           :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                    :     :                                         :- * Project (52)
            :           :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (51)
            :           :                    :     :                                         :     :- * Filter (49)
            :           :                    :     :                                         :     :  +- * ColumnarToRow (48)
            :           :                    :     :                                         :     :     +- Scan parquet default.web_sales (47)
            :           :                    :     :                                         :     +- ReusedExchange (50)
            :           :                    :     :                                         +- ReusedExchange (53)
            :           :                    :     +- BroadcastExchange (72)
            :           :                    :        +- * Project (71)
            :           :                    :           +- * Filter (70)
            :           :                    :              +- * ColumnarToRow (69)
            :           :                    :                 +- Scan parquet default.date_dim (68)
            :           :                    +- BroadcastExchange (83)
            :           :                       +- SortMergeJoin LeftSemi (82)
            :           :                          :- * Sort (79)
            :           :                          :  +- Exchange (78)
            :           :                          :     +- * Filter (77)
            :           :                          :        +- * ColumnarToRow (76)
            :           :                          :           +- Scan parquet default.item (75)
            :           :                          +- * Sort (81)
            :           :                             +- ReusedExchange (80)
            :           :- * Project (109)
            :           :  +- * Filter (108)
            :           :     +- * HashAggregate (107)
            :           :        +- Exchange (106)
            :           :           +- * HashAggregate (105)
            :           :              +- * Project (104)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (103)
            :           :                    :- * Project (101)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (100)
            :           :                    :     :- SortMergeJoin LeftSemi (98)
            :           :                    :     :  :- * Sort (95)
            :           :                    :     :  :  +- Exchange (94)
            :           :                    :     :  :     +- * Filter (93)
            :           :                    :     :  :        +- * ColumnarToRow (92)
            :           :                    :     :  :           +- Scan parquet default.catalog_sales (91)
            :           :                    :     :  +- * Sort (97)
            :           :                    :     :     +- ReusedExchange (96)
            :           :                    :     +- ReusedExchange (99)
            :           :                    +- ReusedExchange (102)
            :           +- * Project (128)
            :              +- * Filter (127)
            :                 +- * HashAggregate (126)
            :                    +- Exchange (125)
            :                       +- * HashAggregate (124)
            :                          +- * Project (123)
            :                             +- * BroadcastHashJoin Inner BuildRight (122)
            :                                :- * Project (120)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (119)
            :                                :     :- SortMergeJoin LeftSemi (117)
            :                                :     :  :- * Sort (114)
            :                                :     :  :  +- Exchange (113)
            :                                :     :  :     +- * Filter (112)
            :                                :     :  :        +- * ColumnarToRow (111)
            :                                :     :  :           +- Scan parquet default.web_sales (110)
            :                                :     :  +- * Sort (116)
            :                                :     :     +- ReusedExchange (115)
            :                                :     +- ReusedExchange (118)
            :                                +- ReusedExchange (121)
            :- * HashAggregate (151)
            :  +- Exchange (150)
            :     +- * HashAggregate (149)
            :        +- * HashAggregate (148)
            :           +- Exchange (147)
            :              +- * HashAggregate (146)
            :                 +- Union (145)
            :                    :- * Project (136)
            :                    :  +- * Filter (135)
            :                    :     +- * HashAggregate (134)
            :                    :        +- ReusedExchange (133)
            :                    :- * Project (140)
            :                    :  +- * Filter (139)
            :                    :     +- * HashAggregate (138)
            :                    :        +- ReusedExchange (137)
            :                    +- * Project (144)
            :                       +- * Filter (143)
            :                          +- * HashAggregate (142)
            :                             +- ReusedExchange (141)
            :- * HashAggregate (170)
            :  +- Exchange (169)
            :     +- * HashAggregate (168)
            :        +- * HashAggregate (167)
            :           +- Exchange (166)
            :              +- * HashAggregate (165)
            :                 +- Union (164)
            :                    :- * Project (155)
            :                    :  +- * Filter (154)
            :                    :     +- * HashAggregate (153)
            :                    :        +- ReusedExchange (152)
            :                    :- * Project (159)
            :                    :  +- * Filter (158)
            :                    :     +- * HashAggregate (157)
            :                    :        +- ReusedExchange (156)
            :                    +- * Project (163)
            :                       +- * Filter (162)
            :                          +- * HashAggregate (161)
            :                             +- ReusedExchange (160)
            :- * HashAggregate (189)
            :  +- Exchange (188)
            :     +- * HashAggregate (187)
            :        +- * HashAggregate (186)
            :           +- Exchange (185)
            :              +- * HashAggregate (184)
            :                 +- Union (183)
            :                    :- * Project (174)
            :                    :  +- * Filter (173)
            :                    :     +- * HashAggregate (172)
            :                    :        +- ReusedExchange (171)
            :                    :- * Project (178)
            :                    :  +- * Filter (177)
            :                    :     +- * HashAggregate (176)
            :                    :        +- ReusedExchange (175)
            :                    +- * Project (182)
            :                       +- * Filter (181)
            :                          +- * HashAggregate (180)
            :                             +- ReusedExchange (179)
            +- * HashAggregate (208)
               +- Exchange (207)
                  +- * HashAggregate (206)
                     +- * HashAggregate (205)
                        +- Exchange (204)
                           +- * HashAggregate (203)
                              +- Union (202)
                                 :- * Project (193)
                                 :  +- * Filter (192)
                                 :     +- * HashAggregate (191)
                                 :        +- ReusedExchange (190)
                                 :- * Project (197)
                                 :  +- * Filter (196)
                                 :     +- * HashAggregate (195)
                                 :        +- ReusedExchange (194)
                                 +- * Project (201)
                                    +- * Filter (200)
                                       +- * HashAggregate (199)
                                          +- ReusedExchange (198)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(11) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(16) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#2]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, d_date_sk#10]

(19) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(22) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#7 AS brand_id#14, i_class_id#8 AS class_id#15, i_category_id#9 AS category_id#16]
Input [5]: [ss_item_sk#2, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(25) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16), 5), ENSURE_REQUIREMENTS, [id=#17]

(26) Sort [codegen id : 6]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: [coalesce(brand_id#14, 0) ASC NULLS FIRST, isnull(brand_id#14) ASC NULLS FIRST, coalesce(class_id#15, 0) ASC NULLS FIRST, isnull(class_id#15) ASC NULLS FIRST, coalesce(category_id#16, 0) ASC NULLS FIRST, isnull(category_id#16) ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(28) ColumnarToRow [codegen id : 9]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]

(29) Filter [codegen id : 9]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(30) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(32) Project [codegen id : 9]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_sold_date_sk#18, cs_item_sk#19, d_date_sk#10]

(33) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(34) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(35) Filter [codegen id : 8]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(36) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(38) Project [codegen id : 9]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_item_sk#19, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(39) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [id=#21]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(42) HashAggregate [codegen id : 11]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(43) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(brand_id#14, class_id#15, category_id#16, 5), ENSURE_REQUIREMENTS, [id=#22]

(44) HashAggregate [codegen id : 12]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(45) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16), 5), ENSURE_REQUIREMENTS, [id=#23]

(46) Sort [codegen id : 13]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: [coalesce(brand_id#14, 0) ASC NULLS FIRST, isnull(brand_id#14) ASC NULLS FIRST, coalesce(class_id#15, 0) ASC NULLS FIRST, isnull(class_id#15) ASC NULLS FIRST, coalesce(category_id#16, 0) ASC NULLS FIRST, isnull(category_id#16) ASC NULLS FIRST], false, 0

(47) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#24, ws_item_sk#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(48) ColumnarToRow [codegen id : 16]
Input [2]: [ws_sold_date_sk#24, ws_item_sk#25]

(49) Filter [codegen id : 16]
Input [2]: [ws_sold_date_sk#24, ws_item_sk#25]
Condition : (isnotnull(ws_item_sk#25) AND isnotnull(ws_sold_date_sk#24))

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#10]
Join condition: None

(52) Project [codegen id : 16]
Output [1]: [ws_item_sk#25]
Input [3]: [ws_sold_date_sk#24, ws_item_sk#25, d_date_sk#10]

(53) ReusedExchange [Reuses operator id: 36]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(54) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#25]
Right keys [1]: [i_item_sk#6]
Join condition: None

(55) Project [codegen id : 16]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_item_sk#25, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(56) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [id=#26]

(57) Sort [codegen id : 17]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(58) SortMergeJoin
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(59) HashAggregate [codegen id : 18]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(60) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(brand_id#14, class_id#15, category_id#16, 5), ENSURE_REQUIREMENTS, [id=#27]

(61) HashAggregate [codegen id : 19]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(62) BroadcastExchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#28]

(63) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#14, class_id#15, category_id#16]
Join condition: None

(64) Project [codegen id : 20]
Output [1]: [i_item_sk#6 AS ss_item_sk#29]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#14, class_id#15, category_id#16]

(65) Exchange
Input [1]: [ss_item_sk#29]
Arguments: hashpartitioning(ss_item_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(66) Sort [codegen id : 21]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(67) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(68) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(69) ColumnarToRow [codegen id : 22]
Input [3]: [d_date_sk#10, d_year#11, d_moy#31]

(70) Filter [codegen id : 22]
Input [3]: [d_date_sk#10, d_year#11, d_moy#31]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#31)) AND (d_year#11 = 2000)) AND (d_moy#31 = 11)) AND isnotnull(d_date_sk#10))

(71) Project [codegen id : 22]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#31]

(72) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#32]

(73) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(74) Project [codegen id : 44]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(75) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(76) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(77) Filter [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(78) Exchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_item_sk#6, 5), ENSURE_REQUIREMENTS, [id=#33]

(79) Sort [codegen id : 24]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(80) ReusedExchange [Reuses operator id: 65]
Output [1]: [ss_item_sk#29]

(81) Sort [codegen id : 43]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(82) SortMergeJoin
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(83) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34]

(84) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(85) Project [codegen id : 44]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(86) HashAggregate [codegen id : 44]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#35, isEmpty#36, count#37]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]

(87) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#41]

(88) HashAggregate [codegen id : 45]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42, count(1)#43]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42 AS sales#44, count(1)#43 AS number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46]

(89) Filter [codegen id : 45]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46 as decimal(32,6)) > cast(Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(90) Project [codegen id : 45]
Output [6]: [store AS channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46]

(91) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 46]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51]

(93) Filter [codegen id : 46]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(94) Exchange
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51]
Arguments: hashpartitioning(cs_item_sk#19, 5), ENSURE_REQUIREMENTS, [id=#52]

(95) Sort [codegen id : 47]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51]
Arguments: [cs_item_sk#19 ASC NULLS FIRST], false, 0

(96) ReusedExchange [Reuses operator id: 65]
Output [1]: [ss_item_sk#29]

(97) Sort [codegen id : 66]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(98) SortMergeJoin
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(99) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#10]

(100) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(101) Project [codegen id : 89]
Output [3]: [cs_item_sk#19, cs_quantity#50, cs_list_price#51]
Input [5]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#50, cs_list_price#51, d_date_sk#10]

(102) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(103) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(104) Project [codegen id : 89]
Output [5]: [cs_quantity#50, cs_list_price#51, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_item_sk#19, cs_quantity#50, cs_list_price#51, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(105) HashAggregate [codegen id : 89]
Input [5]: [cs_quantity#50, cs_list_price#51, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#53, isEmpty#54, count#55]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#56, isEmpty#57, count#58]

(106) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#56, isEmpty#57, count#58]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#59]

(107) HashAggregate [codegen id : 90]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#56, isEmpty#57, count#58]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#60, count(1)#61]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#60 AS sales#62, count(1)#61 AS number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#60 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#64]

(108) Filter [codegen id : 90]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#64]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#64) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#64 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(109) Project [codegen id : 90]
Output [6]: [catalog AS channel#65, i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#64]

(110) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(111) ColumnarToRow [codegen id : 91]
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67]

(112) Filter [codegen id : 91]
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67]
Condition : (isnotnull(ws_item_sk#25) AND isnotnull(ws_sold_date_sk#24))

(113) Exchange
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67]
Arguments: hashpartitioning(ws_item_sk#25, 5), ENSURE_REQUIREMENTS, [id=#68]

(114) Sort [codegen id : 92]
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67]
Arguments: [ws_item_sk#25 ASC NULLS FIRST], false, 0

(115) ReusedExchange [Reuses operator id: 65]
Output [1]: [ss_item_sk#29]

(116) Sort [codegen id : 111]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(117) SortMergeJoin
Left keys [1]: [ws_item_sk#25]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(118) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#10]

(119) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#10]
Join condition: None

(120) Project [codegen id : 134]
Output [3]: [ws_item_sk#25, ws_quantity#66, ws_list_price#67]
Input [5]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#66, ws_list_price#67, d_date_sk#10]

(121) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(122) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_item_sk#25]
Right keys [1]: [i_item_sk#6]
Join condition: None

(123) Project [codegen id : 134]
Output [5]: [ws_quantity#66, ws_list_price#67, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_item_sk#25, ws_quantity#66, ws_list_price#67, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(124) HashAggregate [codegen id : 134]
Input [5]: [ws_quantity#66, ws_list_price#67, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#69, isEmpty#70, count#71]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#72, isEmpty#73, count#74]

(125) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#72, isEmpty#73, count#74]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#75]

(126) HashAggregate [codegen id : 135]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#72, isEmpty#73, count#74]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#76, count(1)#77]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#76 AS sales#78, count(1)#77 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#76 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#80]

(127) Filter [codegen id : 135]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#80]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#80) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#80 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(128) Project [codegen id : 135]
Output [6]: [web AS channel#81, i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#80]

(129) Union

(130) HashAggregate [codegen id : 136]
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Keys [4]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#44), partial_sum(number_sales#45)]
Aggregate Attributes [3]: [sum#82, isEmpty#83, sum#84]
Results [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#85, isEmpty#86, sum#87]

(131) Exchange
Input [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#85, isEmpty#86, sum#87]
Arguments: hashpartitioning(channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#88]

(132) HashAggregate [codegen id : 137]
Input [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#85, isEmpty#86, sum#87]
Keys [4]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#44), sum(number_sales#45)]
Aggregate Attributes [2]: [sum(sales#44)#89, sum(number_sales#45)#90]
Results [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum(sales#44)#89 AS sum_sales#91, sum(number_sales#45)#90 AS number_sales#92]

(133) ReusedExchange [Reuses operator id: 87]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#93, isEmpty#94, count#95]

(134) HashAggregate [codegen id : 182]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#93, isEmpty#94, count#95]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#96, count(1)#97]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#96 AS sales#44, count(1)#97 AS number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#96 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#98]

(135) Filter [codegen id : 182]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#98]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#98) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#98 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(136) Project [codegen id : 182]
Output [6]: [store AS channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#98]

(137) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#99, isEmpty#100, count#101]

(138) HashAggregate [codegen id : 227]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#99, isEmpty#100, count#101]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#102, count(1)#103]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#102 AS sales#62, count(1)#103 AS number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#102 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#104]

(139) Filter [codegen id : 227]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#104]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#104) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#104 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(140) Project [codegen id : 227]
Output [6]: [catalog AS channel#105, i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#104]

(141) ReusedExchange [Reuses operator id: 125]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#106, isEmpty#107, count#108]

(142) HashAggregate [codegen id : 272]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#106, isEmpty#107, count#108]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#109, count(1)#110]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#109 AS sales#78, count(1)#110 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#109 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#111]

(143) Filter [codegen id : 272]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#111]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#111) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#111 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(144) Project [codegen id : 272]
Output [6]: [web AS channel#112, i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#111]

(145) Union

(146) HashAggregate [codegen id : 273]
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Keys [4]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#44), partial_sum(number_sales#45)]
Aggregate Attributes [3]: [sum#113, isEmpty#114, sum#115]
Results [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#116, isEmpty#117, sum#118]

(147) Exchange
Input [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#116, isEmpty#117, sum#118]
Arguments: hashpartitioning(channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#119]

(148) HashAggregate [codegen id : 274]
Input [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#116, isEmpty#117, sum#118]
Keys [4]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#44), sum(number_sales#45)]
Aggregate Attributes [2]: [sum(sales#44)#120, sum(number_sales#45)#121]
Results [5]: [channel#49, i_brand_id#7, i_class_id#8, sum(sales#44)#120 AS sum_sales#91, sum(number_sales#45)#121 AS number_sales#92]

(149) HashAggregate [codegen id : 274]
Input [5]: [channel#49, i_brand_id#7, i_class_id#8, sum_sales#91, number_sales#92]
Keys [3]: [channel#49, i_brand_id#7, i_class_id#8]
Functions [2]: [partial_sum(sum_sales#91), partial_sum(number_sales#92)]
Aggregate Attributes [3]: [sum#122, isEmpty#123, sum#124]
Results [6]: [channel#49, i_brand_id#7, i_class_id#8, sum#125, isEmpty#126, sum#127]

(150) Exchange
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, sum#125, isEmpty#126, sum#127]
Arguments: hashpartitioning(channel#49, i_brand_id#7, i_class_id#8, 5), ENSURE_REQUIREMENTS, [id=#128]

(151) HashAggregate [codegen id : 275]
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, sum#125, isEmpty#126, sum#127]
Keys [3]: [channel#49, i_brand_id#7, i_class_id#8]
Functions [2]: [sum(sum_sales#91), sum(number_sales#92)]
Aggregate Attributes [2]: [sum(sum_sales#91)#129, sum(number_sales#92)#130]
Results [6]: [channel#49, i_brand_id#7, i_class_id#8, null AS i_category_id#131, sum(sum_sales#91)#129 AS sum(sum_sales)#132, sum(number_sales#92)#130 AS sum(number_sales)#133]

(152) ReusedExchange [Reuses operator id: 87]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#134, isEmpty#135, count#136]

(153) HashAggregate [codegen id : 320]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#134, isEmpty#135, count#136]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#137, count(1)#138]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#137 AS sales#44, count(1)#138 AS number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#137 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#139]

(154) Filter [codegen id : 320]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#139]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#139) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#139 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(155) Project [codegen id : 320]
Output [6]: [store AS channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#139]

(156) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#140, isEmpty#141, count#142]

(157) HashAggregate [codegen id : 365]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#140, isEmpty#141, count#142]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#143, count(1)#144]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#143 AS sales#62, count(1)#144 AS number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#143 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#145]

(158) Filter [codegen id : 365]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#145]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#145) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#145 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(159) Project [codegen id : 365]
Output [6]: [catalog AS channel#146, i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#145]

(160) ReusedExchange [Reuses operator id: 125]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#147, isEmpty#148, count#149]

(161) HashAggregate [codegen id : 410]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#147, isEmpty#148, count#149]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#150, count(1)#151]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#150 AS sales#78, count(1)#151 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#150 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#152]

(162) Filter [codegen id : 410]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#152]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#152) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#152 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(163) Project [codegen id : 410]
Output [6]: [web AS channel#153, i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#152]

(164) Union

(165) HashAggregate [codegen id : 411]
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Keys [4]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#44), partial_sum(number_sales#45)]
Aggregate Attributes [3]: [sum#154, isEmpty#155, sum#156]
Results [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#157, isEmpty#158, sum#159]

(166) Exchange
Input [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#157, isEmpty#158, sum#159]
Arguments: hashpartitioning(channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#160]

(167) HashAggregate [codegen id : 412]
Input [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#157, isEmpty#158, sum#159]
Keys [4]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#44), sum(number_sales#45)]
Aggregate Attributes [2]: [sum(sales#44)#161, sum(number_sales#45)#162]
Results [4]: [channel#49, i_brand_id#7, sum(sales#44)#161 AS sum_sales#91, sum(number_sales#45)#162 AS number_sales#92]

(168) HashAggregate [codegen id : 412]
Input [4]: [channel#49, i_brand_id#7, sum_sales#91, number_sales#92]
Keys [2]: [channel#49, i_brand_id#7]
Functions [2]: [partial_sum(sum_sales#91), partial_sum(number_sales#92)]
Aggregate Attributes [3]: [sum#163, isEmpty#164, sum#165]
Results [5]: [channel#49, i_brand_id#7, sum#166, isEmpty#167, sum#168]

(169) Exchange
Input [5]: [channel#49, i_brand_id#7, sum#166, isEmpty#167, sum#168]
Arguments: hashpartitioning(channel#49, i_brand_id#7, 5), ENSURE_REQUIREMENTS, [id=#169]

(170) HashAggregate [codegen id : 413]
Input [5]: [channel#49, i_brand_id#7, sum#166, isEmpty#167, sum#168]
Keys [2]: [channel#49, i_brand_id#7]
Functions [2]: [sum(sum_sales#91), sum(number_sales#92)]
Aggregate Attributes [2]: [sum(sum_sales#91)#170, sum(number_sales#92)#171]
Results [6]: [channel#49, i_brand_id#7, null AS i_class_id#172, null AS i_category_id#173, sum(sum_sales#91)#170 AS sum(sum_sales)#174, sum(number_sales#92)#171 AS sum(number_sales)#175]

(171) ReusedExchange [Reuses operator id: 87]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#176, isEmpty#177, count#178]

(172) HashAggregate [codegen id : 458]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#176, isEmpty#177, count#178]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#179, count(1)#180]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#179 AS sales#44, count(1)#180 AS number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#179 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#181]

(173) Filter [codegen id : 458]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#181]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#181) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#181 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(174) Project [codegen id : 458]
Output [6]: [store AS channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#181]

(175) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#182, isEmpty#183, count#184]

(176) HashAggregate [codegen id : 503]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#182, isEmpty#183, count#184]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#185, count(1)#186]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#185 AS sales#62, count(1)#186 AS number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#185 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#187]

(177) Filter [codegen id : 503]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#187]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#187) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#187 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(178) Project [codegen id : 503]
Output [6]: [catalog AS channel#188, i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#187]

(179) ReusedExchange [Reuses operator id: 125]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#189, isEmpty#190, count#191]

(180) HashAggregate [codegen id : 548]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#189, isEmpty#190, count#191]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#192, count(1)#193]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#192 AS sales#78, count(1)#193 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#192 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#194]

(181) Filter [codegen id : 548]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#194]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#194) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#194 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(182) Project [codegen id : 548]
Output [6]: [web AS channel#195, i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#194]

(183) Union

(184) HashAggregate [codegen id : 549]
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Keys [4]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#44), partial_sum(number_sales#45)]
Aggregate Attributes [3]: [sum#196, isEmpty#197, sum#198]
Results [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#199, isEmpty#200, sum#201]

(185) Exchange
Input [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#199, isEmpty#200, sum#201]
Arguments: hashpartitioning(channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#202]

(186) HashAggregate [codegen id : 550]
Input [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#199, isEmpty#200, sum#201]
Keys [4]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#44), sum(number_sales#45)]
Aggregate Attributes [2]: [sum(sales#44)#203, sum(number_sales#45)#204]
Results [3]: [channel#49, sum(sales#44)#203 AS sum_sales#91, sum(number_sales#45)#204 AS number_sales#92]

(187) HashAggregate [codegen id : 550]
Input [3]: [channel#49, sum_sales#91, number_sales#92]
Keys [1]: [channel#49]
Functions [2]: [partial_sum(sum_sales#91), partial_sum(number_sales#92)]
Aggregate Attributes [3]: [sum#205, isEmpty#206, sum#207]
Results [4]: [channel#49, sum#208, isEmpty#209, sum#210]

(188) Exchange
Input [4]: [channel#49, sum#208, isEmpty#209, sum#210]
Arguments: hashpartitioning(channel#49, 5), ENSURE_REQUIREMENTS, [id=#211]

(189) HashAggregate [codegen id : 551]
Input [4]: [channel#49, sum#208, isEmpty#209, sum#210]
Keys [1]: [channel#49]
Functions [2]: [sum(sum_sales#91), sum(number_sales#92)]
Aggregate Attributes [2]: [sum(sum_sales#91)#212, sum(number_sales#92)#213]
Results [6]: [channel#49, null AS i_brand_id#214, null AS i_class_id#215, null AS i_category_id#216, sum(sum_sales#91)#212 AS sum(sum_sales)#217, sum(number_sales#92)#213 AS sum(number_sales)#218]

(190) ReusedExchange [Reuses operator id: 87]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#219, isEmpty#220, count#221]

(191) HashAggregate [codegen id : 596]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#219, isEmpty#220, count#221]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#222, count(1)#223]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#222 AS sales#44, count(1)#223 AS number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#222 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#224]

(192) Filter [codegen id : 596]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#224]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#224) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#224 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(193) Project [codegen id : 596]
Output [6]: [store AS channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#224]

(194) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#225, isEmpty#226, count#227]

(195) HashAggregate [codegen id : 641]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#225, isEmpty#226, count#227]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#228, count(1)#229]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#228 AS sales#62, count(1)#229 AS number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#228 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#230]

(196) Filter [codegen id : 641]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#230]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#230) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#230 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(197) Project [codegen id : 641]
Output [6]: [catalog AS channel#231, i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#50 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#51 as decimal(12,2)))), DecimalType(18,2), true))#230]

(198) ReusedExchange [Reuses operator id: 125]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#232, isEmpty#233, count#234]

(199) HashAggregate [codegen id : 686]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#232, isEmpty#233, count#234]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#235, count(1)#236]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#235 AS sales#78, count(1)#236 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#235 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#237]

(200) Filter [codegen id : 686]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#237]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#237) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#237 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(201) Project [codegen id : 686]
Output [6]: [web AS channel#238, i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#66 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67 as decimal(12,2)))), DecimalType(18,2), true))#237]

(202) Union

(203) HashAggregate [codegen id : 687]
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Keys [4]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#44), partial_sum(number_sales#45)]
Aggregate Attributes [3]: [sum#239, isEmpty#240, sum#241]
Results [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#242, isEmpty#243, sum#244]

(204) Exchange
Input [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#242, isEmpty#243, sum#244]
Arguments: hashpartitioning(channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#245]

(205) HashAggregate [codegen id : 688]
Input [7]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum#242, isEmpty#243, sum#244]
Keys [4]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#44), sum(number_sales#45)]
Aggregate Attributes [2]: [sum(sales#44)#246, sum(number_sales#45)#247]
Results [2]: [sum(sales#44)#246 AS sum_sales#91, sum(number_sales#45)#247 AS number_sales#92]

(206) HashAggregate [codegen id : 688]
Input [2]: [sum_sales#91, number_sales#92]
Keys: []
Functions [2]: [partial_sum(sum_sales#91), partial_sum(number_sales#92)]
Aggregate Attributes [3]: [sum#248, isEmpty#249, sum#250]
Results [3]: [sum#251, isEmpty#252, sum#253]

(207) Exchange
Input [3]: [sum#251, isEmpty#252, sum#253]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#254]

(208) HashAggregate [codegen id : 689]
Input [3]: [sum#251, isEmpty#252, sum#253]
Keys: []
Functions [2]: [sum(sum_sales#91), sum(number_sales#92)]
Aggregate Attributes [2]: [sum(sum_sales#91)#255, sum(number_sales#92)#256]
Results [6]: [null AS channel#257, null AS i_brand_id#258, null AS i_class_id#259, null AS i_category_id#260, sum(sum_sales#91)#255 AS sum(sum_sales)#261, sum(number_sales#92)#256 AS sum(number_sales)#262]

(209) Union

(210) HashAggregate [codegen id : 690]
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#91, number_sales#92]
Keys [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#91, number_sales#92]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#91, number_sales#92]

(211) Exchange
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#91, number_sales#92]
Arguments: hashpartitioning(channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#91, number_sales#92, 5), ENSURE_REQUIREMENTS, [id=#263]

(212) HashAggregate [codegen id : 691]
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#91, number_sales#92]
Keys [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#91, number_sales#92]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#91, number_sales#92]

(213) TakeOrderedAndProject
Input [6]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#91, number_sales#92]
Arguments: 100, [channel#49 ASC NULLS FIRST, i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#91, number_sales#92]

===== Subqueries =====

Subquery:1 Hosting operator id = 89 Hosting Expression = Subquery scalar-subquery#47, [id=#48]
* HashAggregate (243)
+- Exchange (242)
   +- * HashAggregate (241)
      +- Union (240)
         :- * Project (223)
         :  +- * BroadcastHashJoin Inner BuildRight (222)
         :     :- * Filter (216)
         :     :  +- * ColumnarToRow (215)
         :     :     +- Scan parquet default.store_sales (214)
         :     +- BroadcastExchange (221)
         :        +- * Project (220)
         :           +- * Filter (219)
         :              +- * ColumnarToRow (218)
         :                 +- Scan parquet default.date_dim (217)
         :- * Project (233)
         :  +- * BroadcastHashJoin Inner BuildRight (232)
         :     :- * Filter (226)
         :     :  +- * ColumnarToRow (225)
         :     :     +- Scan parquet default.catalog_sales (224)
         :     +- BroadcastExchange (231)
         :        +- * Project (230)
         :           +- * Filter (229)
         :              +- * ColumnarToRow (228)
         :                 +- Scan parquet default.date_dim (227)
         +- * Project (239)
            +- * BroadcastHashJoin Inner BuildRight (238)
               :- * Filter (236)
               :  +- * ColumnarToRow (235)
               :     +- Scan parquet default.web_sales (234)
               +- ReusedExchange (237)


(214) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(215) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(216) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(217) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(218) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(219) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(220) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(221) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#264]

(222) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(223) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#265, ss_list_price#4 AS list_price#266]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(224) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#18, cs_quantity#50, cs_list_price#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(225) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#50, cs_list_price#51]

(226) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#50, cs_list_price#51]
Condition : isnotnull(cs_sold_date_sk#18)

(227) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(228) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(229) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(230) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(231) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#267]

(232) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(233) Project [codegen id : 4]
Output [2]: [cs_quantity#50 AS quantity#268, cs_list_price#51 AS list_price#269]
Input [4]: [cs_sold_date_sk#18, cs_quantity#50, cs_list_price#51, d_date_sk#10]

(234) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#24, ws_quantity#66, ws_list_price#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(235) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#24, ws_quantity#66, ws_list_price#67]

(236) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#24, ws_quantity#66, ws_list_price#67]
Condition : isnotnull(ws_sold_date_sk#24)

(237) ReusedExchange [Reuses operator id: 231]
Output [1]: [d_date_sk#10]

(238) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#10]
Join condition: None

(239) Project [codegen id : 6]
Output [2]: [ws_quantity#66 AS quantity#270, ws_list_price#67 AS list_price#271]
Input [4]: [ws_sold_date_sk#24, ws_quantity#66, ws_list_price#67, d_date_sk#10]

(240) Union

(241) HashAggregate [codegen id : 7]
Input [2]: [quantity#265, list_price#266]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#265 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#266 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#272, count#273]
Results [2]: [sum#274, count#275]

(242) Exchange
Input [2]: [sum#274, count#275]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#276]

(243) HashAggregate [codegen id : 8]
Input [2]: [sum#274, count#275]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#265 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#266 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#265 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#266 as decimal(12,2)))), DecimalType(18,2), true))#277]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#265 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#266 as decimal(12,2)))), DecimalType(18,2), true))#277 AS average_sales#278]

Subquery:2 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:3 Hosting operator id = 127 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:4 Hosting operator id = 135 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:5 Hosting operator id = 139 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:6 Hosting operator id = 143 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:7 Hosting operator id = 154 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:8 Hosting operator id = 158 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:9 Hosting operator id = 162 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:10 Hosting operator id = 173 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:11 Hosting operator id = 177 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:12 Hosting operator id = 181 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:13 Hosting operator id = 192 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:14 Hosting operator id = 196 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:15 Hosting operator id = 200 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]


