== Physical Plan ==
TakeOrderedAndProject (213)
+- * HashAggregate (212)
   +- Exchange (211)
      +- * HashAggregate (210)
         +- Union (209)
            :- * HashAggregate (132)
            :  +- Exchange (131)
            :     +- * HashAggregate (130)
            :        +- Union (129)
            :           :- * Project (90)
            :           :  +- * Filter (89)
            :           :     +- * HashAggregate (88)
            :           :        +- Exchange (87)
            :           :           +- * HashAggregate (86)
            :           :              +- * Project (85)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (84)
            :           :                    :- * Project (74)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (73)
            :           :                    :     :- SortMergeJoin LeftSemi (67)
            :           :                    :     :  :- * Sort (5)
            :           :                    :     :  :  +- Exchange (4)
            :           :                    :     :  :     +- * Filter (3)
            :           :                    :     :  :        +- * ColumnarToRow (2)
            :           :                    :     :  :           +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- * Sort (66)
            :           :                    :     :     +- Exchange (65)
            :           :                    :     :        +- * Project (64)
            :           :                    :     :           +- * BroadcastHashJoin Inner BuildRight (63)
            :           :                    :     :              :- * Filter (8)
            :           :                    :     :              :  +- * ColumnarToRow (7)
            :           :                    :     :              :     +- Scan parquet default.item (6)
            :           :                    :     :              +- BroadcastExchange (62)
            :           :                    :     :                 +- * HashAggregate (61)
            :           :                    :     :                    +- Exchange (60)
            :           :                    :     :                       +- * HashAggregate (59)
            :           :                    :     :                          +- SortMergeJoin LeftSemi (58)
            :           :                    :     :                             :- * Sort (46)
            :           :                    :     :                             :  +- Exchange (45)
            :           :                    :     :                             :     +- * HashAggregate (44)
            :           :                    :     :                             :        +- Exchange (43)
            :           :                    :     :                             :           +- * HashAggregate (42)
            :           :                    :     :                             :              +- SortMergeJoin LeftSemi (41)
            :           :                    :     :                             :                 :- * Sort (26)
            :           :                    :     :                             :                 :  +- Exchange (25)
            :           :                    :     :                             :                 :     +- * Project (24)
            :           :                    :     :                             :                 :        +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                    :     :                             :                 :           :- * Project (18)
            :           :                    :     :                             :                 :           :  +- * BroadcastHashJoin Inner BuildRight (17)
            :           :                    :     :                             :                 :           :     :- * Filter (11)
            :           :                    :     :                             :                 :           :     :  +- * ColumnarToRow (10)
            :           :                    :     :                             :                 :           :     :     +- Scan parquet default.store_sales (9)
            :           :                    :     :                             :                 :           :     +- BroadcastExchange (16)
            :           :                    :     :                             :                 :           :        +- * Project (15)
            :           :                    :     :                             :                 :           :           +- * Filter (14)
            :           :                    :     :                             :                 :           :              +- * ColumnarToRow (13)
            :           :                    :     :                             :                 :           :                 +- Scan parquet default.date_dim (12)
            :           :                    :     :                             :                 :           +- BroadcastExchange (22)
            :           :                    :     :                             :                 :              +- * Filter (21)
            :           :                    :     :                             :                 :                 +- * ColumnarToRow (20)
            :           :                    :     :                             :                 :                    +- Scan parquet default.item (19)
            :           :                    :     :                             :                 +- * Sort (40)
            :           :                    :     :                             :                    +- Exchange (39)
            :           :                    :     :                             :                       +- * Project (38)
            :           :                    :     :                             :                          +- * BroadcastHashJoin Inner BuildRight (37)
            :           :                    :     :                             :                             :- * Project (32)
            :           :                    :     :                             :                             :  +- * BroadcastHashJoin Inner BuildRight (31)
            :           :                    :     :                             :                             :     :- * Filter (29)
            :           :                    :     :                             :                             :     :  +- * ColumnarToRow (28)
            :           :                    :     :                             :                             :     :     +- Scan parquet default.catalog_sales (27)
            :           :                    :     :                             :                             :     +- ReusedExchange (30)
            :           :                    :     :                             :                             +- BroadcastExchange (36)
            :           :                    :     :                             :                                +- * Filter (35)
            :           :                    :     :                             :                                   +- * ColumnarToRow (34)
            :           :                    :     :                             :                                      +- Scan parquet default.item (33)
            :           :                    :     :                             +- * Sort (57)
            :           :                    :     :                                +- Exchange (56)
            :           :                    :     :                                   +- * Project (55)
            :           :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                    :     :                                         :- * Project (52)
            :           :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (51)
            :           :                    :     :                                         :     :- * Filter (49)
            :           :                    :     :                                         :     :  +- * ColumnarToRow (48)
            :           :                    :     :                                         :     :     +- Scan parquet default.web_sales (47)
            :           :                    :     :                                         :     +- ReusedExchange (50)
            :           :                    :     :                                         +- ReusedExchange (53)
            :           :                    :     +- BroadcastExchange (72)
            :           :                    :        +- * Project (71)
            :           :                    :           +- * Filter (70)
            :           :                    :              +- * ColumnarToRow (69)
            :           :                    :                 +- Scan parquet default.date_dim (68)
            :           :                    +- BroadcastExchange (83)
            :           :                       +- SortMergeJoin LeftSemi (82)
            :           :                          :- * Sort (79)
            :           :                          :  +- Exchange (78)
            :           :                          :     +- * Filter (77)
            :           :                          :        +- * ColumnarToRow (76)
            :           :                          :           +- Scan parquet default.item (75)
            :           :                          +- * Sort (81)
            :           :                             +- ReusedExchange (80)
            :           :- * Project (109)
            :           :  +- * Filter (108)
            :           :     +- * HashAggregate (107)
            :           :        +- Exchange (106)
            :           :           +- * HashAggregate (105)
            :           :              +- * Project (104)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (103)
            :           :                    :- * Project (101)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (100)
            :           :                    :     :- SortMergeJoin LeftSemi (98)
            :           :                    :     :  :- * Sort (95)
            :           :                    :     :  :  +- Exchange (94)
            :           :                    :     :  :     +- * Filter (93)
            :           :                    :     :  :        +- * ColumnarToRow (92)
            :           :                    :     :  :           +- Scan parquet default.catalog_sales (91)
            :           :                    :     :  +- * Sort (97)
            :           :                    :     :     +- ReusedExchange (96)
            :           :                    :     +- ReusedExchange (99)
            :           :                    +- ReusedExchange (102)
            :           +- * Project (128)
            :              +- * Filter (127)
            :                 +- * HashAggregate (126)
            :                    +- Exchange (125)
            :                       +- * HashAggregate (124)
            :                          +- * Project (123)
            :                             +- * BroadcastHashJoin Inner BuildRight (122)
            :                                :- * Project (120)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (119)
            :                                :     :- SortMergeJoin LeftSemi (117)
            :                                :     :  :- * Sort (114)
            :                                :     :  :  +- Exchange (113)
            :                                :     :  :     +- * Filter (112)
            :                                :     :  :        +- * ColumnarToRow (111)
            :                                :     :  :           +- Scan parquet default.web_sales (110)
            :                                :     :  +- * Sort (116)
            :                                :     :     +- ReusedExchange (115)
            :                                :     +- ReusedExchange (118)
            :                                +- ReusedExchange (121)
            :- * HashAggregate (151)
            :  +- Exchange (150)
            :     +- * HashAggregate (149)
            :        +- * HashAggregate (148)
            :           +- Exchange (147)
            :              +- * HashAggregate (146)
            :                 +- Union (145)
            :                    :- * Project (136)
            :                    :  +- * Filter (135)
            :                    :     +- * HashAggregate (134)
            :                    :        +- ReusedExchange (133)
            :                    :- * Project (140)
            :                    :  +- * Filter (139)
            :                    :     +- * HashAggregate (138)
            :                    :        +- ReusedExchange (137)
            :                    +- * Project (144)
            :                       +- * Filter (143)
            :                          +- * HashAggregate (142)
            :                             +- ReusedExchange (141)
            :- * HashAggregate (170)
            :  +- Exchange (169)
            :     +- * HashAggregate (168)
            :        +- * HashAggregate (167)
            :           +- Exchange (166)
            :              +- * HashAggregate (165)
            :                 +- Union (164)
            :                    :- * Project (155)
            :                    :  +- * Filter (154)
            :                    :     +- * HashAggregate (153)
            :                    :        +- ReusedExchange (152)
            :                    :- * Project (159)
            :                    :  +- * Filter (158)
            :                    :     +- * HashAggregate (157)
            :                    :        +- ReusedExchange (156)
            :                    +- * Project (163)
            :                       +- * Filter (162)
            :                          +- * HashAggregate (161)
            :                             +- ReusedExchange (160)
            :- * HashAggregate (189)
            :  +- Exchange (188)
            :     +- * HashAggregate (187)
            :        +- * HashAggregate (186)
            :           +- Exchange (185)
            :              +- * HashAggregate (184)
            :                 +- Union (183)
            :                    :- * Project (174)
            :                    :  +- * Filter (173)
            :                    :     +- * HashAggregate (172)
            :                    :        +- ReusedExchange (171)
            :                    :- * Project (178)
            :                    :  +- * Filter (177)
            :                    :     +- * HashAggregate (176)
            :                    :        +- ReusedExchange (175)
            :                    +- * Project (182)
            :                       +- * Filter (181)
            :                          +- * HashAggregate (180)
            :                             +- ReusedExchange (179)
            +- * HashAggregate (208)
               +- Exchange (207)
                  +- * HashAggregate (206)
                     +- * HashAggregate (205)
                        +- Exchange (204)
                           +- * HashAggregate (203)
                              +- Union (202)
                                 :- * Project (193)
                                 :  +- * Filter (192)
                                 :     +- * HashAggregate (191)
                                 :        +- ReusedExchange (190)
                                 :- * Project (197)
                                 :  +- * Filter (196)
                                 :     +- * HashAggregate (195)
                                 :        +- ReusedExchange (194)
                                 +- * Project (201)
                                    +- * Filter (200)
                                       +- * HashAggregate (199)
                                          +- ReusedExchange (198)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(11) Filter [codegen id : 5]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(16) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#1]
Input [3]: [ss_item_sk#1, ss_sold_date_sk#4, d_date_sk#12]

(19) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(22) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#8 AS brand_id#16, i_class_id#9 AS class_id#17, i_category_id#10 AS category_id#18]
Input [5]: [ss_item_sk#1, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(25) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(26) Sort [codegen id : 6]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: [coalesce(brand_id#16, 0) ASC NULLS FIRST, isnull(brand_id#16) ASC NULLS FIRST, coalesce(class_id#17, 0) ASC NULLS FIRST, isnull(class_id#17) ASC NULLS FIRST, coalesce(category_id#18, 0) ASC NULLS FIRST, isnull(category_id#18) ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(28) ColumnarToRow [codegen id : 9]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(29) Filter [codegen id : 9]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(30) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#12]
Join condition: None

(32) Project [codegen id : 9]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#12]

(33) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(34) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(35) Filter [codegen id : 8]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(36) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#7]
Join condition: None

(38) Project [codegen id : 9]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [cs_item_sk#20, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(39) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), ENSURE_REQUIREMENTS, [id=#23]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(42) HashAggregate [codegen id : 11]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(43) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(brand_id#16, class_id#17, category_id#18, 5), ENSURE_REQUIREMENTS, [id=#24]

(44) HashAggregate [codegen id : 12]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(45) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18), 5), ENSURE_REQUIREMENTS, [id=#25]

(46) Sort [codegen id : 13]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: [coalesce(brand_id#16, 0) ASC NULLS FIRST, isnull(brand_id#16) ASC NULLS FIRST, coalesce(class_id#17, 0) ASC NULLS FIRST, isnull(class_id#17) ASC NULLS FIRST, coalesce(category_id#18, 0) ASC NULLS FIRST, isnull(category_id#18) ASC NULLS FIRST], false, 0

(47) Scan parquet default.web_sales
Output [2]: [ws_item_sk#26, ws_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#27), dynamicpruningexpression(ws_sold_date_sk#27 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(48) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#26, ws_sold_date_sk#27]

(49) Filter [codegen id : 16]
Input [2]: [ws_item_sk#26, ws_sold_date_sk#27]
Condition : isnotnull(ws_item_sk#26)

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#27]
Right keys [1]: [d_date_sk#12]
Join condition: None

(52) Project [codegen id : 16]
Output [1]: [ws_item_sk#26]
Input [3]: [ws_item_sk#26, ws_sold_date_sk#27, d_date_sk#12]

(53) ReusedExchange [Reuses operator id: 36]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(54) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#26]
Right keys [1]: [i_item_sk#7]
Join condition: None

(55) Project [codegen id : 16]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [ws_item_sk#26, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(56) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), ENSURE_REQUIREMENTS, [id=#28]

(57) Sort [codegen id : 17]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(58) SortMergeJoin
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(59) HashAggregate [codegen id : 18]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(60) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(brand_id#16, class_id#17, category_id#18, 5), ENSURE_REQUIREMENTS, [id=#29]

(61) HashAggregate [codegen id : 19]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(62) BroadcastExchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#30]

(63) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#16, class_id#17, category_id#18]
Join condition: None

(64) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#31]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#16, class_id#17, category_id#18]

(65) Exchange
Input [1]: [ss_item_sk#31]
Arguments: hashpartitioning(ss_item_sk#31, 5), ENSURE_REQUIREMENTS, [id=#32]

(66) Sort [codegen id : 21]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(67) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(68) Scan parquet default.date_dim
Output [3]: [d_date_sk#12, d_year#13, d_moy#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(69) ColumnarToRow [codegen id : 22]
Input [3]: [d_date_sk#12, d_year#13, d_moy#33]

(70) Filter [codegen id : 22]
Input [3]: [d_date_sk#12, d_year#13, d_moy#33]
Condition : ((((isnotnull(d_year#13) AND isnotnull(d_moy#33)) AND (d_year#13 = 2000)) AND (d_moy#33 = 11)) AND isnotnull(d_date_sk#12))

(71) Project [codegen id : 22]
Output [1]: [d_date_sk#12]
Input [3]: [d_date_sk#12, d_year#13, d_moy#33]

(72) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34]

(73) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(74) Project [codegen id : 44]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(75) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(76) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(77) Filter [codegen id : 23]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(78) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#35]

(79) Sort [codegen id : 24]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(80) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#31]

(81) Sort [codegen id : 43]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(82) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(83) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36]

(84) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(85) Project [codegen id : 44]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(86) HashAggregate [codegen id : 44]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#37, isEmpty#38, count#39]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#40, isEmpty#41, count#42]

(87) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#40, isEmpty#41, count#42]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#43]

(88) HashAggregate [codegen id : 45]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#40, isEmpty#41, count#42]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#44, count(1)#45]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#44 AS sales#46, count(1)#45 AS number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#44 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#48]

(89) Filter [codegen id : 45]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#48]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#48) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#48 as decimal(32,6)) > cast(Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(90) Project [codegen id : 45]
Output [6]: [store AS channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#48]

(91) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 46]
Input [4]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]

(93) Filter [codegen id : 46]
Input [4]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(94) Exchange
Input [4]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]
Arguments: hashpartitioning(cs_item_sk#20, 5), ENSURE_REQUIREMENTS, [id=#54]

(95) Sort [codegen id : 47]
Input [4]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]
Arguments: [cs_item_sk#20 ASC NULLS FIRST], false, 0

(96) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#31]

(97) Sort [codegen id : 66]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(98) SortMergeJoin
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(99) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#12]

(100) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#12]
Join condition: None

(101) Project [codegen id : 89]
Output [3]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53]
Input [5]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21, d_date_sk#12]

(102) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(103) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#7]
Join condition: None

(104) Project [codegen id : 89]
Output [5]: [cs_quantity#52, cs_list_price#53, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [cs_item_sk#20, cs_quantity#52, cs_list_price#53, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(105) HashAggregate [codegen id : 89]
Input [5]: [cs_quantity#52, cs_list_price#53, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#55, isEmpty#56, count#57]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#58, isEmpty#59, count#60]

(106) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#58, isEmpty#59, count#60]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#61]

(107) HashAggregate [codegen id : 90]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#58, isEmpty#59, count#60]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#62, count(1)#63]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#62 AS sales#64, count(1)#63 AS number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#62 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#66]

(108) Filter [codegen id : 90]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#66]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#66) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#66 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(109) Project [codegen id : 90]
Output [6]: [catalog AS channel#67, i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#66]

(110) Scan parquet default.web_sales
Output [4]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#27), dynamicpruningexpression(ws_sold_date_sk#27 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(111) ColumnarToRow [codegen id : 91]
Input [4]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]

(112) Filter [codegen id : 91]
Input [4]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]
Condition : isnotnull(ws_item_sk#26)

(113) Exchange
Input [4]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]
Arguments: hashpartitioning(ws_item_sk#26, 5), ENSURE_REQUIREMENTS, [id=#70]

(114) Sort [codegen id : 92]
Input [4]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]
Arguments: [ws_item_sk#26 ASC NULLS FIRST], false, 0

(115) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#31]

(116) Sort [codegen id : 111]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(117) SortMergeJoin
Left keys [1]: [ws_item_sk#26]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(118) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#12]

(119) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_sold_date_sk#27]
Right keys [1]: [d_date_sk#12]
Join condition: None

(120) Project [codegen id : 134]
Output [3]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69]
Input [5]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27, d_date_sk#12]

(121) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(122) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_item_sk#26]
Right keys [1]: [i_item_sk#7]
Join condition: None

(123) Project [codegen id : 134]
Output [5]: [ws_quantity#68, ws_list_price#69, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ws_item_sk#26, ws_quantity#68, ws_list_price#69, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(124) HashAggregate [codegen id : 134]
Input [5]: [ws_quantity#68, ws_list_price#69, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#71, isEmpty#72, count#73]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#74, isEmpty#75, count#76]

(125) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#74, isEmpty#75, count#76]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#77]

(126) HashAggregate [codegen id : 135]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#74, isEmpty#75, count#76]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#78, count(1)#79]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#78 AS sales#80, count(1)#79 AS number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#78 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82]

(127) Filter [codegen id : 135]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(128) Project [codegen id : 135]
Output [6]: [web AS channel#83, i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#82]

(129) Union

(130) HashAggregate [codegen id : 136]
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47]
Keys [4]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#46), partial_sum(number_sales#47)]
Aggregate Attributes [3]: [sum#84, isEmpty#85, sum#86]
Results [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#87, isEmpty#88, sum#89]

(131) Exchange
Input [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#87, isEmpty#88, sum#89]
Arguments: hashpartitioning(channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#90]

(132) HashAggregate [codegen id : 137]
Input [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#87, isEmpty#88, sum#89]
Keys [4]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#46), sum(number_sales#47)]
Aggregate Attributes [2]: [sum(sales#46)#91, sum(number_sales#47)#92]
Results [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum(sales#46)#91 AS sum_sales#93, sum(number_sales#47)#92 AS number_sales#94]

(133) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#95, isEmpty#96, count#97]

(134) HashAggregate [codegen id : 182]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#95, isEmpty#96, count#97]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#98, count(1)#99]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#98 AS sales#46, count(1)#99 AS number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#98 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#100]

(135) Filter [codegen id : 182]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#100]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#100) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#100 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(136) Project [codegen id : 182]
Output [6]: [store AS channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#100]

(137) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#101, isEmpty#102, count#103]

(138) HashAggregate [codegen id : 227]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#101, isEmpty#102, count#103]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#104, count(1)#105]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#104 AS sales#64, count(1)#105 AS number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#104 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#106]

(139) Filter [codegen id : 227]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#106]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#106) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#106 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(140) Project [codegen id : 227]
Output [6]: [catalog AS channel#107, i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#106]

(141) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#108, isEmpty#109, count#110]

(142) HashAggregate [codegen id : 272]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#108, isEmpty#109, count#110]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#111, count(1)#112]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#111 AS sales#80, count(1)#112 AS number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#111 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#113]

(143) Filter [codegen id : 272]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#113]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#113) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#113 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(144) Project [codegen id : 272]
Output [6]: [web AS channel#114, i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#113]

(145) Union

(146) HashAggregate [codegen id : 273]
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47]
Keys [4]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#46), partial_sum(number_sales#47)]
Aggregate Attributes [3]: [sum#115, isEmpty#116, sum#117]
Results [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#118, isEmpty#119, sum#120]

(147) Exchange
Input [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#118, isEmpty#119, sum#120]
Arguments: hashpartitioning(channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#121]

(148) HashAggregate [codegen id : 274]
Input [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#118, isEmpty#119, sum#120]
Keys [4]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#46), sum(number_sales#47)]
Aggregate Attributes [2]: [sum(sales#46)#122, sum(number_sales#47)#123]
Results [5]: [channel#51, i_brand_id#8, i_class_id#9, sum(sales#46)#122 AS sum_sales#93, sum(number_sales#47)#123 AS number_sales#94]

(149) HashAggregate [codegen id : 274]
Input [5]: [channel#51, i_brand_id#8, i_class_id#9, sum_sales#93, number_sales#94]
Keys [3]: [channel#51, i_brand_id#8, i_class_id#9]
Functions [2]: [partial_sum(sum_sales#93), partial_sum(number_sales#94)]
Aggregate Attributes [3]: [sum#124, isEmpty#125, sum#126]
Results [6]: [channel#51, i_brand_id#8, i_class_id#9, sum#127, isEmpty#128, sum#129]

(150) Exchange
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, sum#127, isEmpty#128, sum#129]
Arguments: hashpartitioning(channel#51, i_brand_id#8, i_class_id#9, 5), ENSURE_REQUIREMENTS, [id=#130]

(151) HashAggregate [codegen id : 275]
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, sum#127, isEmpty#128, sum#129]
Keys [3]: [channel#51, i_brand_id#8, i_class_id#9]
Functions [2]: [sum(sum_sales#93), sum(number_sales#94)]
Aggregate Attributes [2]: [sum(sum_sales#93)#131, sum(number_sales#94)#132]
Results [6]: [channel#51, i_brand_id#8, i_class_id#9, null AS i_category_id#133, sum(sum_sales#93)#131 AS sum(sum_sales)#134, sum(number_sales#94)#132 AS sum(number_sales)#135]

(152) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#136, isEmpty#137, count#138]

(153) HashAggregate [codegen id : 320]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#136, isEmpty#137, count#138]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#139, count(1)#140]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#139 AS sales#46, count(1)#140 AS number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#139 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#141]

(154) Filter [codegen id : 320]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#141]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#141) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#141 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(155) Project [codegen id : 320]
Output [6]: [store AS channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#141]

(156) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#142, isEmpty#143, count#144]

(157) HashAggregate [codegen id : 365]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#142, isEmpty#143, count#144]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#145, count(1)#146]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#145 AS sales#64, count(1)#146 AS number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#145 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#147]

(158) Filter [codegen id : 365]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#147]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#147) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#147 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(159) Project [codegen id : 365]
Output [6]: [catalog AS channel#148, i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#147]

(160) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#149, isEmpty#150, count#151]

(161) HashAggregate [codegen id : 410]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#149, isEmpty#150, count#151]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#152, count(1)#153]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#152 AS sales#80, count(1)#153 AS number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#152 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#154]

(162) Filter [codegen id : 410]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#154]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#154) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#154 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(163) Project [codegen id : 410]
Output [6]: [web AS channel#155, i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#154]

(164) Union

(165) HashAggregate [codegen id : 411]
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47]
Keys [4]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#46), partial_sum(number_sales#47)]
Aggregate Attributes [3]: [sum#156, isEmpty#157, sum#158]
Results [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#159, isEmpty#160, sum#161]

(166) Exchange
Input [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#159, isEmpty#160, sum#161]
Arguments: hashpartitioning(channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#162]

(167) HashAggregate [codegen id : 412]
Input [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#159, isEmpty#160, sum#161]
Keys [4]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#46), sum(number_sales#47)]
Aggregate Attributes [2]: [sum(sales#46)#163, sum(number_sales#47)#164]
Results [4]: [channel#51, i_brand_id#8, sum(sales#46)#163 AS sum_sales#93, sum(number_sales#47)#164 AS number_sales#94]

(168) HashAggregate [codegen id : 412]
Input [4]: [channel#51, i_brand_id#8, sum_sales#93, number_sales#94]
Keys [2]: [channel#51, i_brand_id#8]
Functions [2]: [partial_sum(sum_sales#93), partial_sum(number_sales#94)]
Aggregate Attributes [3]: [sum#165, isEmpty#166, sum#167]
Results [5]: [channel#51, i_brand_id#8, sum#168, isEmpty#169, sum#170]

(169) Exchange
Input [5]: [channel#51, i_brand_id#8, sum#168, isEmpty#169, sum#170]
Arguments: hashpartitioning(channel#51, i_brand_id#8, 5), ENSURE_REQUIREMENTS, [id=#171]

(170) HashAggregate [codegen id : 413]
Input [5]: [channel#51, i_brand_id#8, sum#168, isEmpty#169, sum#170]
Keys [2]: [channel#51, i_brand_id#8]
Functions [2]: [sum(sum_sales#93), sum(number_sales#94)]
Aggregate Attributes [2]: [sum(sum_sales#93)#172, sum(number_sales#94)#173]
Results [6]: [channel#51, i_brand_id#8, null AS i_class_id#174, null AS i_category_id#175, sum(sum_sales#93)#172 AS sum(sum_sales)#176, sum(number_sales#94)#173 AS sum(number_sales)#177]

(171) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#178, isEmpty#179, count#180]

(172) HashAggregate [codegen id : 458]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#178, isEmpty#179, count#180]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#181, count(1)#182]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#181 AS sales#46, count(1)#182 AS number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#181 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#183]

(173) Filter [codegen id : 458]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#183]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#183) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#183 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(174) Project [codegen id : 458]
Output [6]: [store AS channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#183]

(175) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#184, isEmpty#185, count#186]

(176) HashAggregate [codegen id : 503]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#184, isEmpty#185, count#186]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#187, count(1)#188]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#187 AS sales#64, count(1)#188 AS number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#187 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#189]

(177) Filter [codegen id : 503]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#189]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#189) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#189 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(178) Project [codegen id : 503]
Output [6]: [catalog AS channel#190, i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#189]

(179) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#191, isEmpty#192, count#193]

(180) HashAggregate [codegen id : 548]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#191, isEmpty#192, count#193]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#194, count(1)#195]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#194 AS sales#80, count(1)#195 AS number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#194 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#196]

(181) Filter [codegen id : 548]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#196]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#196) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#196 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(182) Project [codegen id : 548]
Output [6]: [web AS channel#197, i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#196]

(183) Union

(184) HashAggregate [codegen id : 549]
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47]
Keys [4]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#46), partial_sum(number_sales#47)]
Aggregate Attributes [3]: [sum#198, isEmpty#199, sum#200]
Results [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#201, isEmpty#202, sum#203]

(185) Exchange
Input [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#201, isEmpty#202, sum#203]
Arguments: hashpartitioning(channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#204]

(186) HashAggregate [codegen id : 550]
Input [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#201, isEmpty#202, sum#203]
Keys [4]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#46), sum(number_sales#47)]
Aggregate Attributes [2]: [sum(sales#46)#205, sum(number_sales#47)#206]
Results [3]: [channel#51, sum(sales#46)#205 AS sum_sales#93, sum(number_sales#47)#206 AS number_sales#94]

(187) HashAggregate [codegen id : 550]
Input [3]: [channel#51, sum_sales#93, number_sales#94]
Keys [1]: [channel#51]
Functions [2]: [partial_sum(sum_sales#93), partial_sum(number_sales#94)]
Aggregate Attributes [3]: [sum#207, isEmpty#208, sum#209]
Results [4]: [channel#51, sum#210, isEmpty#211, sum#212]

(188) Exchange
Input [4]: [channel#51, sum#210, isEmpty#211, sum#212]
Arguments: hashpartitioning(channel#51, 5), ENSURE_REQUIREMENTS, [id=#213]

(189) HashAggregate [codegen id : 551]
Input [4]: [channel#51, sum#210, isEmpty#211, sum#212]
Keys [1]: [channel#51]
Functions [2]: [sum(sum_sales#93), sum(number_sales#94)]
Aggregate Attributes [2]: [sum(sum_sales#93)#214, sum(number_sales#94)#215]
Results [6]: [channel#51, null AS i_brand_id#216, null AS i_class_id#217, null AS i_category_id#218, sum(sum_sales#93)#214 AS sum(sum_sales)#219, sum(number_sales#94)#215 AS sum(number_sales)#220]

(190) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#221, isEmpty#222, count#223]

(191) HashAggregate [codegen id : 596]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#221, isEmpty#222, count#223]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#224, count(1)#225]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#224 AS sales#46, count(1)#225 AS number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#224 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#226]

(192) Filter [codegen id : 596]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#226]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#226) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#226 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(193) Project [codegen id : 596]
Output [6]: [store AS channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#226]

(194) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#227, isEmpty#228, count#229]

(195) HashAggregate [codegen id : 641]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#227, isEmpty#228, count#229]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#230, count(1)#231]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#230 AS sales#64, count(1)#231 AS number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#230 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#232]

(196) Filter [codegen id : 641]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#232]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#232) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#232 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(197) Project [codegen id : 641]
Output [6]: [catalog AS channel#233, i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#64, number_sales#65, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#52 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#53 as decimal(12,2)))), DecimalType(18,2), true))#232]

(198) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#234, isEmpty#235, count#236]

(199) HashAggregate [codegen id : 686]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#234, isEmpty#235, count#236]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#237, count(1)#238]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#237 AS sales#80, count(1)#238 AS number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#237 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#239]

(200) Filter [codegen id : 686]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#239]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#239) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#239 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#49, [id=#50] as decimal(32,6))))

(201) Project [codegen id : 686]
Output [6]: [web AS channel#240, i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#80, number_sales#81, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#68 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#69 as decimal(12,2)))), DecimalType(18,2), true))#239]

(202) Union

(203) HashAggregate [codegen id : 687]
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sales#46, number_sales#47]
Keys [4]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#46), partial_sum(number_sales#47)]
Aggregate Attributes [3]: [sum#241, isEmpty#242, sum#243]
Results [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#244, isEmpty#245, sum#246]

(204) Exchange
Input [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#244, isEmpty#245, sum#246]
Arguments: hashpartitioning(channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#247]

(205) HashAggregate [codegen id : 688]
Input [7]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum#244, isEmpty#245, sum#246]
Keys [4]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#46), sum(number_sales#47)]
Aggregate Attributes [2]: [sum(sales#46)#248, sum(number_sales#47)#249]
Results [2]: [sum(sales#46)#248 AS sum_sales#93, sum(number_sales#47)#249 AS number_sales#94]

(206) HashAggregate [codegen id : 688]
Input [2]: [sum_sales#93, number_sales#94]
Keys: []
Functions [2]: [partial_sum(sum_sales#93), partial_sum(number_sales#94)]
Aggregate Attributes [3]: [sum#250, isEmpty#251, sum#252]
Results [3]: [sum#253, isEmpty#254, sum#255]

(207) Exchange
Input [3]: [sum#253, isEmpty#254, sum#255]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#256]

(208) HashAggregate [codegen id : 689]
Input [3]: [sum#253, isEmpty#254, sum#255]
Keys: []
Functions [2]: [sum(sum_sales#93), sum(number_sales#94)]
Aggregate Attributes [2]: [sum(sum_sales#93)#257, sum(number_sales#94)#258]
Results [6]: [null AS channel#259, null AS i_brand_id#260, null AS i_class_id#261, null AS i_category_id#262, sum(sum_sales#93)#257 AS sum(sum_sales)#263, sum(number_sales#94)#258 AS sum(number_sales)#264]

(209) Union

(210) HashAggregate [codegen id : 690]
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#93, number_sales#94]
Keys [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#93, number_sales#94]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#93, number_sales#94]

(211) Exchange
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#93, number_sales#94]
Arguments: hashpartitioning(channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#93, number_sales#94, 5), ENSURE_REQUIREMENTS, [id=#265]

(212) HashAggregate [codegen id : 691]
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#93, number_sales#94]
Keys [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#93, number_sales#94]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#93, number_sales#94]

(213) TakeOrderedAndProject
Input [6]: [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#93, number_sales#94]
Arguments: 100, [channel#51 ASC NULLS FIRST, i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST], [channel#51, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#93, number_sales#94]

===== Subqueries =====

Subquery:1 Hosting operator id = 89 Hosting Expression = Subquery scalar-subquery#49, [id=#50]
* HashAggregate (240)
+- Exchange (239)
   +- * HashAggregate (238)
      +- Union (237)
         :- * Project (222)
         :  +- * BroadcastHashJoin Inner BuildRight (221)
         :     :- * ColumnarToRow (215)
         :     :  +- Scan parquet default.store_sales (214)
         :     +- BroadcastExchange (220)
         :        +- * Project (219)
         :           +- * Filter (218)
         :              +- * ColumnarToRow (217)
         :                 +- Scan parquet default.date_dim (216)
         :- * Project (231)
         :  +- * BroadcastHashJoin Inner BuildRight (230)
         :     :- * ColumnarToRow (224)
         :     :  +- Scan parquet default.catalog_sales (223)
         :     +- BroadcastExchange (229)
         :        +- * Project (228)
         :           +- * Filter (227)
         :              +- * ColumnarToRow (226)
         :                 +- Scan parquet default.date_dim (225)
         +- * Project (236)
            +- * BroadcastHashJoin Inner BuildRight (235)
               :- * ColumnarToRow (233)
               :  +- Scan parquet default.web_sales (232)
               +- ReusedExchange (234)


(214) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#266)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(215) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(216) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(217) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]

(218) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(219) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(220) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#267]

(221) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(222) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#268, ss_list_price#3 AS list_price#269]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(223) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#270)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(224) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21]

(225) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(226) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]

(227) Filter [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1998)) AND (d_year#13 <= 2000)) AND isnotnull(d_date_sk#12))

(228) Project [codegen id : 3]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(229) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#271]

(230) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#12]
Join condition: None

(231) Project [codegen id : 4]
Output [2]: [cs_quantity#52 AS quantity#272, cs_list_price#53 AS list_price#273]
Input [4]: [cs_quantity#52, cs_list_price#53, cs_sold_date_sk#21, d_date_sk#12]

(232) Scan parquet default.web_sales
Output [3]: [ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#27), dynamicpruningexpression(ws_sold_date_sk#27 IN dynamicpruning#270)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(233) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27]

(234) ReusedExchange [Reuses operator id: 229]
Output [1]: [d_date_sk#12]

(235) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#27]
Right keys [1]: [d_date_sk#12]
Join condition: None

(236) Project [codegen id : 6]
Output [2]: [ws_quantity#68 AS quantity#274, ws_list_price#69 AS list_price#275]
Input [4]: [ws_quantity#68, ws_list_price#69, ws_sold_date_sk#27, d_date_sk#12]

(237) Union

(238) HashAggregate [codegen id : 7]
Input [2]: [quantity#268, list_price#269]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#268 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#269 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#276, count#277]
Results [2]: [sum#278, count#279]

(239) Exchange
Input [2]: [sum#278, count#279]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#280]

(240) HashAggregate [codegen id : 8]
Input [2]: [sum#278, count#279]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#268 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#269 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#268 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#269 as decimal(12,2)))), DecimalType(18,2), true))#281]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#268 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#269 as decimal(12,2)))), DecimalType(18,2), true))#281 AS average_sales#282]

Subquery:2 Hosting operator id = 214 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#266
ReusedExchange (241)


(241) ReusedExchange [Reuses operator id: 220]
Output [1]: [d_date_sk#12]

Subquery:3 Hosting operator id = 223 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#270
ReusedExchange (242)


(242) ReusedExchange [Reuses operator id: 229]
Output [1]: [d_date_sk#12]

Subquery:4 Hosting operator id = 232 Hosting Expression = ws_sold_date_sk#27 IN dynamicpruning#270

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (243)


(243) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#12]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#11
ReusedExchange (244)


(244) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

Subquery:7 Hosting operator id = 27 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#11

Subquery:8 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#27 IN dynamicpruning#11

Subquery:9 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:10 Hosting operator id = 91 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#5

Subquery:11 Hosting operator id = 127 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:12 Hosting operator id = 110 Hosting Expression = ws_sold_date_sk#27 IN dynamicpruning#5

Subquery:13 Hosting operator id = 135 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:14 Hosting operator id = 139 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:15 Hosting operator id = 143 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:16 Hosting operator id = 154 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:17 Hosting operator id = 158 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:18 Hosting operator id = 162 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:19 Hosting operator id = 173 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:20 Hosting operator id = 177 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:21 Hosting operator id = 181 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:22 Hosting operator id = 192 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:23 Hosting operator id = 196 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]

Subquery:24 Hosting operator id = 200 Hosting Expression = ReusedSubquery Subquery scalar-subquery#49, [id=#50]


