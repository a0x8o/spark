== Physical Plan ==
TakeOrderedAndProject (57)
+- * HashAggregate (56)
   +- Exchange (55)
      +- * HashAggregate (54)
         +- * Project (53)
            +- * SortMergeJoin Inner (52)
               :- * Sort (46)
               :  +- Exchange (45)
               :     +- * Project (44)
               :        +- * SortMergeJoin Inner (43)
               :           :- * Sort (37)
               :           :  +- Exchange (36)
               :           :     +- * Project (35)
               :           :        +- * Filter (34)
               :           :           +- SortMergeJoin ExistenceJoin(exists#1) (33)
               :           :              :- SortMergeJoin ExistenceJoin(exists#2) (25)
               :           :              :  :- SortMergeJoin LeftSemi (17)
               :           :              :  :  :- * Sort (5)
               :           :              :  :  :  +- Exchange (4)
               :           :              :  :  :     +- * Filter (3)
               :           :              :  :  :        +- * ColumnarToRow (2)
               :           :              :  :  :           +- Scan parquet default.customer (1)
               :           :              :  :  +- * Sort (16)
               :           :              :  :     +- Exchange (15)
               :           :              :  :        +- * Project (14)
               :           :              :  :           +- * BroadcastHashJoin Inner BuildRight (13)
               :           :              :  :              :- * ColumnarToRow (7)
               :           :              :  :              :  +- Scan parquet default.store_sales (6)
               :           :              :  :              +- BroadcastExchange (12)
               :           :              :  :                 +- * Project (11)
               :           :              :  :                    +- * Filter (10)
               :           :              :  :                       +- * ColumnarToRow (9)
               :           :              :  :                          +- Scan parquet default.date_dim (8)
               :           :              :  +- * Sort (24)
               :           :              :     +- Exchange (23)
               :           :              :        +- * Project (22)
               :           :              :           +- * BroadcastHashJoin Inner BuildRight (21)
               :           :              :              :- * ColumnarToRow (19)
               :           :              :              :  +- Scan parquet default.web_sales (18)
               :           :              :              +- ReusedExchange (20)
               :           :              +- * Sort (32)
               :           :                 +- Exchange (31)
               :           :                    +- * Project (30)
               :           :                       +- * BroadcastHashJoin Inner BuildRight (29)
               :           :                          :- * ColumnarToRow (27)
               :           :                          :  +- Scan parquet default.catalog_sales (26)
               :           :                          +- ReusedExchange (28)
               :           +- * Sort (42)
               :              +- Exchange (41)
               :                 +- * Filter (40)
               :                    +- * ColumnarToRow (39)
               :                       +- Scan parquet default.customer_address (38)
               +- * Sort (51)
                  +- Exchange (50)
                     +- * Filter (49)
                        +- * ColumnarToRow (48)
                           +- Scan parquet default.customer_demographics (47)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4))

(4) Exchange
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_customer_sk#3, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_customer_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
ReadSchema: struct<ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_customer_sk#7, ss_sold_date_sk#8]

(8) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_qoy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,2002), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(9) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#10, d_year#11, d_qoy#12]

(10) Filter [codegen id : 3]
Input [3]: [d_date_sk#10, d_year#11, d_qoy#12]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_qoy#12)) AND (d_year#11 = 2002)) AND (d_qoy#12 < 4)) AND isnotnull(d_date_sk#10))

(11) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_qoy#12]

(12) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(13) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(14) Project [codegen id : 4]
Output [1]: [ss_customer_sk#7]
Input [3]: [ss_customer_sk#7, ss_sold_date_sk#8, d_date_sk#10]

(15) Exchange
Input [1]: [ss_customer_sk#7]
Arguments: hashpartitioning(ss_customer_sk#7, 5), ENSURE_REQUIREMENTS, [id=#14]

(16) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#7]
Arguments: [ss_customer_sk#7 ASC NULLS FIRST], false, 0

(17) SortMergeJoin
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#7]
Join condition: None

(18) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#15, ws_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#16), dynamicpruningexpression(ws_sold_date_sk#16 IN dynamicpruning#9)]
ReadSchema: struct<ws_bill_customer_sk:int>

(19) ColumnarToRow [codegen id : 7]
Input [2]: [ws_bill_customer_sk#15, ws_sold_date_sk#16]

(20) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#10]

(21) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ws_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(22) Project [codegen id : 7]
Output [1]: [ws_bill_customer_sk#15]
Input [3]: [ws_bill_customer_sk#15, ws_sold_date_sk#16, d_date_sk#10]

(23) Exchange
Input [1]: [ws_bill_customer_sk#15]
Arguments: hashpartitioning(ws_bill_customer_sk#15, 5), ENSURE_REQUIREMENTS, [id=#17]

(24) Sort [codegen id : 8]
Input [1]: [ws_bill_customer_sk#15]
Arguments: [ws_bill_customer_sk#15 ASC NULLS FIRST], false, 0

(25) SortMergeJoin
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#15]
Join condition: None

(26) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#9)]
ReadSchema: struct<cs_ship_customer_sk:int>

(27) ColumnarToRow [codegen id : 10]
Input [2]: [cs_ship_customer_sk#18, cs_sold_date_sk#19]

(28) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#10]

(29) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#10]
Join condition: None

(30) Project [codegen id : 10]
Output [1]: [cs_ship_customer_sk#18]
Input [3]: [cs_ship_customer_sk#18, cs_sold_date_sk#19, d_date_sk#10]

(31) Exchange
Input [1]: [cs_ship_customer_sk#18]
Arguments: hashpartitioning(cs_ship_customer_sk#18, 5), ENSURE_REQUIREMENTS, [id=#20]

(32) Sort [codegen id : 11]
Input [1]: [cs_ship_customer_sk#18]
Arguments: [cs_ship_customer_sk#18 ASC NULLS FIRST], false, 0

(33) SortMergeJoin
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#18]
Join condition: None

(34) Filter [codegen id : 12]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(35) Project [codegen id : 12]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(36) Exchange
Input [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_current_addr_sk#5, 5), ENSURE_REQUIREMENTS, [id=#21]

(37) Sort [codegen id : 13]
Input [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_current_addr_sk#5 ASC NULLS FIRST], false, 0

(38) Scan parquet default.customer_address
Output [2]: [ca_address_sk#22, ca_state#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(39) ColumnarToRow [codegen id : 14]
Input [2]: [ca_address_sk#22, ca_state#23]

(40) Filter [codegen id : 14]
Input [2]: [ca_address_sk#22, ca_state#23]
Condition : isnotnull(ca_address_sk#22)

(41) Exchange
Input [2]: [ca_address_sk#22, ca_state#23]
Arguments: hashpartitioning(ca_address_sk#22, 5), ENSURE_REQUIREMENTS, [id=#24]

(42) Sort [codegen id : 15]
Input [2]: [ca_address_sk#22, ca_state#23]
Arguments: [ca_address_sk#22 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#22]
Join condition: None

(44) Project [codegen id : 16]
Output [2]: [c_current_cdemo_sk#4, ca_state#23]
Input [4]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#22, ca_state#23]

(45) Exchange
Input [2]: [c_current_cdemo_sk#4, ca_state#23]
Arguments: hashpartitioning(c_current_cdemo_sk#4, 5), ENSURE_REQUIREMENTS, [id=#25]

(46) Sort [codegen id : 17]
Input [2]: [c_current_cdemo_sk#4, ca_state#23]
Arguments: [c_current_cdemo_sk#4 ASC NULLS FIRST], false, 0

(47) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(48) ColumnarToRow [codegen id : 18]
Input [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]

(49) Filter [codegen id : 18]
Input [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Condition : isnotnull(cd_demo_sk#26)

(50) Exchange
Input [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Arguments: hashpartitioning(cd_demo_sk#26, 5), ENSURE_REQUIREMENTS, [id=#32]

(51) Sort [codegen id : 19]
Input [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Arguments: [cd_demo_sk#26 ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 20]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#26]
Join condition: None

(53) Project [codegen id : 20]
Output [6]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Input [8]: [c_current_cdemo_sk#4, ca_state#23, cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]

(54) HashAggregate [codegen id : 20]
Input [6]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Keys [6]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Functions [10]: [partial_count(1), partial_avg(cd_dep_count#29), partial_max(cd_dep_count#29), partial_sum(cd_dep_count#29), partial_avg(cd_dep_employed_count#30), partial_max(cd_dep_employed_count#30), partial_sum(cd_dep_employed_count#30), partial_avg(cd_dep_college_count#31), partial_max(cd_dep_college_count#31), partial_sum(cd_dep_college_count#31)]
Aggregate Attributes [13]: [count#33, sum#34, count#35, max#36, sum#37, sum#38, count#39, max#40, sum#41, sum#42, count#43, max#44, sum#45]
Results [19]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, count#46, sum#47, count#48, max#49, sum#50, sum#51, count#52, max#53, sum#54, sum#55, count#56, max#57, sum#58]

(55) Exchange
Input [19]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, count#46, sum#47, count#48, max#49, sum#50, sum#51, count#52, max#53, sum#54, sum#55, count#56, max#57, sum#58]
Arguments: hashpartitioning(ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, 5), ENSURE_REQUIREMENTS, [id=#59]

(56) HashAggregate [codegen id : 21]
Input [19]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, count#46, sum#47, count#48, max#49, sum#50, sum#51, count#52, max#53, sum#54, sum#55, count#56, max#57, sum#58]
Keys [6]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Functions [10]: [count(1), avg(cd_dep_count#29), max(cd_dep_count#29), sum(cd_dep_count#29), avg(cd_dep_employed_count#30), max(cd_dep_employed_count#30), sum(cd_dep_employed_count#30), avg(cd_dep_college_count#31), max(cd_dep_college_count#31), sum(cd_dep_college_count#31)]
Aggregate Attributes [10]: [count(1)#60, avg(cd_dep_count#29)#61, max(cd_dep_count#29)#62, sum(cd_dep_count#29)#63, avg(cd_dep_employed_count#30)#64, max(cd_dep_employed_count#30)#65, sum(cd_dep_employed_count#30)#66, avg(cd_dep_college_count#31)#67, max(cd_dep_college_count#31)#68, sum(cd_dep_college_count#31)#69]
Results [18]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, count(1)#60 AS cnt1#70, avg(cd_dep_count#29)#61 AS avg(cd_dep_count)#71, max(cd_dep_count#29)#62 AS max(cd_dep_count)#72, sum(cd_dep_count#29)#63 AS sum(cd_dep_count)#73, cd_dep_employed_count#30, count(1)#60 AS cnt2#74, avg(cd_dep_employed_count#30)#64 AS avg(cd_dep_employed_count)#75, max(cd_dep_employed_count#30)#65 AS max(cd_dep_employed_count)#76, sum(cd_dep_employed_count#30)#66 AS sum(cd_dep_employed_count)#77, cd_dep_college_count#31, count(1)#60 AS cnt3#78, avg(cd_dep_college_count#31)#67 AS avg(cd_dep_college_count)#79, max(cd_dep_college_count#31)#68 AS max(cd_dep_college_count)#80, sum(cd_dep_college_count#31)#69 AS sum(cd_dep_college_count)#81]

(57) TakeOrderedAndProject
Input [18]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cnt1#70, avg(cd_dep_count)#71, max(cd_dep_count)#72, sum(cd_dep_count)#73, cd_dep_employed_count#30, cnt2#74, avg(cd_dep_employed_count)#75, max(cd_dep_employed_count)#76, sum(cd_dep_employed_count)#77, cd_dep_college_count#31, cnt3#78, avg(cd_dep_college_count)#79, max(cd_dep_college_count)#80, sum(cd_dep_college_count)#81]
Arguments: 100, [ca_state#23 ASC NULLS FIRST, cd_gender#27 ASC NULLS FIRST, cd_marital_status#28 ASC NULLS FIRST, cd_dep_count#29 ASC NULLS FIRST, cd_dep_employed_count#30 ASC NULLS FIRST, cd_dep_college_count#31 ASC NULLS FIRST], [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cnt1#70, avg(cd_dep_count)#71, max(cd_dep_count)#72, sum(cd_dep_count)#73, cd_dep_employed_count#30, cnt2#74, avg(cd_dep_employed_count)#75, max(cd_dep_employed_count)#76, sum(cd_dep_employed_count)#77, cd_dep_college_count#31, cnt3#78, avg(cd_dep_college_count)#79, max(cd_dep_college_count)#80, sum(cd_dep_college_count)#81]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
ReusedExchange (58)


(58) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#10]

Subquery:2 Hosting operator id = 18 Hosting Expression = ws_sold_date_sk#16 IN dynamicpruning#9

Subquery:3 Hosting operator id = 26 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#9


