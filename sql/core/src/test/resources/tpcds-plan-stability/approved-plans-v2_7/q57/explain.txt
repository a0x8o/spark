== Physical Plan ==
TakeOrderedAndProject (45)
+- * Project (44)
   +- * BroadcastHashJoin Inner BuildRight (43)
      :- * Project (37)
      :  +- * BroadcastHashJoin Inner BuildRight (36)
      :     :- * Project (28)
      :     :  +- * Filter (27)
      :     :     +- Window (26)
      :     :        +- * Filter (25)
      :     :           +- Window (24)
      :     :              +- * Sort (23)
      :     :                 +- Exchange (22)
      :     :                    +- * HashAggregate (21)
      :     :                       +- Exchange (20)
      :     :                          +- * HashAggregate (19)
      :     :                             +- * Project (18)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (17)
      :     :                                   :- * Project (12)
      :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (11)
      :     :                                   :     :- * Project (9)
      :     :                                   :     :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                                   :     :     :- * Filter (3)
      :     :                                   :     :     :  +- * ColumnarToRow (2)
      :     :                                   :     :     :     +- Scan parquet default.item (1)
      :     :                                   :     :     +- BroadcastExchange (7)
      :     :                                   :     :        +- * Filter (6)
      :     :                                   :     :           +- * ColumnarToRow (5)
      :     :                                   :     :              +- Scan parquet default.catalog_sales (4)
      :     :                                   :     +- ReusedExchange (10)
      :     :                                   +- BroadcastExchange (16)
      :     :                                      +- * Filter (15)
      :     :                                         +- * ColumnarToRow (14)
      :     :                                            +- Scan parquet default.call_center (13)
      :     +- BroadcastExchange (35)
      :        +- * Project (34)
      :           +- Window (33)
      :              +- * Sort (32)
      :                 +- Exchange (31)
      :                    +- * HashAggregate (30)
      :                       +- ReusedExchange (29)
      +- BroadcastExchange (42)
         +- * Project (41)
            +- Window (40)
               +- * Sort (39)
                  +- ReusedExchange (38)


(1) Scan parquet default.item
Output [3]: [i_item_sk#1, i_brand#2, i_category#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]

(3) Filter [codegen id : 4]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Condition : ((isnotnull(i_item_sk#1) AND isnotnull(i_category#3)) AND isnotnull(i_brand#2))

(4) Scan parquet default.catalog_sales
Output [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#7), dynamicpruningexpression(cs_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]

(6) Filter [codegen id : 1]
Input [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]
Condition : (isnotnull(cs_item_sk#5) AND isnotnull(cs_call_center_sk#4))

(7) BroadcastExchange
Input [4]: [cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#9]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [cs_item_sk#5]
Join condition: None

(9) Project [codegen id : 4]
Output [5]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, cs_sold_date_sk#7]
Input [7]: [i_item_sk#1, i_brand#2, i_category#3, cs_call_center_sk#4, cs_item_sk#5, cs_sales_price#6, cs_sold_date_sk#7]

(10) ReusedExchange [Reuses operator id: 49]
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#7]
Right keys [1]: [d_date_sk#10]
Join condition: None

(12) Project [codegen id : 4]
Output [6]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, d_year#11, d_moy#12]
Input [8]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, cs_sold_date_sk#7, d_date_sk#10, d_year#11, d_moy#12]

(13) Scan parquet default.call_center
Output [2]: [cc_call_center_sk#13, cc_name#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)]
ReadSchema: struct<cc_call_center_sk:int,cc_name:string>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cc_call_center_sk#13, cc_name#14]

(15) Filter [codegen id : 3]
Input [2]: [cc_call_center_sk#13, cc_name#14]
Condition : (isnotnull(cc_call_center_sk#13) AND isnotnull(cc_name#14))

(16) BroadcastExchange
Input [2]: [cc_call_center_sk#13, cc_name#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_call_center_sk#4]
Right keys [1]: [cc_call_center_sk#13]
Join condition: None

(18) Project [codegen id : 4]
Output [6]: [i_brand#2, i_category#3, cs_sales_price#6, d_year#11, d_moy#12, cc_name#14]
Input [8]: [i_brand#2, i_category#3, cs_call_center_sk#4, cs_sales_price#6, d_year#11, d_moy#12, cc_call_center_sk#13, cc_name#14]

(19) HashAggregate [codegen id : 4]
Input [6]: [i_brand#2, i_category#3, cs_sales_price#6, d_year#11, d_moy#12, cc_name#14]
Keys [5]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#6))]
Aggregate Attributes [1]: [sum#16]
Results [6]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum#17]

(20) Exchange
Input [6]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum#17]
Arguments: hashpartitioning(i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, 5), ENSURE_REQUIREMENTS, [id=#18]

(21) HashAggregate [codegen id : 5]
Input [6]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum#17]
Keys [5]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12]
Functions [1]: [sum(UnscaledValue(cs_sales_price#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#6))#19]
Results [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, MakeDecimal(sum(UnscaledValue(cs_sales_price#6))#19,17,2) AS sum_sales#20, MakeDecimal(sum(UnscaledValue(cs_sales_price#6))#19,17,2) AS _w0#21]

(22) Exchange
Input [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21]
Arguments: hashpartitioning(i_category#3, i_brand#2, cc_name#14, 5), ENSURE_REQUIREMENTS, [id=#22]

(23) Sort [codegen id : 6]
Input [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21]
Arguments: [i_category#3 ASC NULLS FIRST, i_brand#2 ASC NULLS FIRST, cc_name#14 ASC NULLS FIRST, d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST], false, 0

(24) Window
Input [7]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21]
Arguments: [rank(d_year#11, d_moy#12) windowspecdefinition(i_category#3, i_brand#2, cc_name#14, d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#23], [i_category#3, i_brand#2, cc_name#14], [d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST]

(25) Filter [codegen id : 7]
Input [8]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21, rn#23]
Condition : (isnotnull(d_year#11) AND (d_year#11 = 1999))

(26) Window
Input [8]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21, rn#23]
Arguments: [avg(_w0#21) windowspecdefinition(i_category#3, i_brand#2, cc_name#14, d_year#11, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#24], [i_category#3, i_brand#2, cc_name#14, d_year#11]

(27) Filter [codegen id : 22]
Input [9]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21, rn#23, avg_monthly_sales#24]
Condition : ((isnotnull(avg_monthly_sales#24) AND (avg_monthly_sales#24 > 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#20 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(22,6), true), false)) / promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000))

(28) Project [codegen id : 22]
Output [8]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#24, rn#23]
Input [9]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, _w0#21, rn#23, avg_monthly_sales#24]

(29) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_category#25, i_brand#26, cc_name#27, d_year#28, d_moy#29, sum#30]

(30) HashAggregate [codegen id : 12]
Input [6]: [i_category#25, i_brand#26, cc_name#27, d_year#28, d_moy#29, sum#30]
Keys [5]: [i_category#25, i_brand#26, cc_name#27, d_year#28, d_moy#29]
Functions [1]: [sum(UnscaledValue(cs_sales_price#31))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#31))#32]
Results [6]: [i_category#25, i_brand#26, cc_name#27, d_year#28, d_moy#29, MakeDecimal(sum(UnscaledValue(cs_sales_price#31))#32,17,2) AS sum_sales#33]

(31) Exchange
Input [6]: [i_category#25, i_brand#26, cc_name#27, d_year#28, d_moy#29, sum_sales#33]
Arguments: hashpartitioning(i_category#25, i_brand#26, cc_name#27, 5), ENSURE_REQUIREMENTS, [id=#34]

(32) Sort [codegen id : 13]
Input [6]: [i_category#25, i_brand#26, cc_name#27, d_year#28, d_moy#29, sum_sales#33]
Arguments: [i_category#25 ASC NULLS FIRST, i_brand#26 ASC NULLS FIRST, cc_name#27 ASC NULLS FIRST, d_year#28 ASC NULLS FIRST, d_moy#29 ASC NULLS FIRST], false, 0

(33) Window
Input [6]: [i_category#25, i_brand#26, cc_name#27, d_year#28, d_moy#29, sum_sales#33]
Arguments: [rank(d_year#28, d_moy#29) windowspecdefinition(i_category#25, i_brand#26, cc_name#27, d_year#28 ASC NULLS FIRST, d_moy#29 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#35], [i_category#25, i_brand#26, cc_name#27], [d_year#28 ASC NULLS FIRST, d_moy#29 ASC NULLS FIRST]

(34) Project [codegen id : 14]
Output [5]: [i_category#25, i_brand#26, cc_name#27, sum_sales#33, rn#35]
Input [7]: [i_category#25, i_brand#26, cc_name#27, d_year#28, d_moy#29, sum_sales#33, rn#35]

(35) BroadcastExchange
Input [5]: [i_category#25, i_brand#26, cc_name#27, sum_sales#33, rn#35]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] + 1)),false), [id=#36]

(36) BroadcastHashJoin [codegen id : 22]
Left keys [4]: [i_category#3, i_brand#2, cc_name#14, rn#23]
Right keys [4]: [i_category#25, i_brand#26, cc_name#27, (rn#35 + 1)]
Join condition: None

(37) Project [codegen id : 22]
Output [9]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#24, rn#23, sum_sales#33]
Input [13]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#24, rn#23, i_category#25, i_brand#26, cc_name#27, sum_sales#33, rn#35]

(38) ReusedExchange [Reuses operator id: 31]
Output [6]: [i_category#37, i_brand#38, cc_name#39, d_year#40, d_moy#41, sum_sales#42]

(39) Sort [codegen id : 20]
Input [6]: [i_category#37, i_brand#38, cc_name#39, d_year#40, d_moy#41, sum_sales#42]
Arguments: [i_category#37 ASC NULLS FIRST, i_brand#38 ASC NULLS FIRST, cc_name#39 ASC NULLS FIRST, d_year#40 ASC NULLS FIRST, d_moy#41 ASC NULLS FIRST], false, 0

(40) Window
Input [6]: [i_category#37, i_brand#38, cc_name#39, d_year#40, d_moy#41, sum_sales#42]
Arguments: [rank(d_year#40, d_moy#41) windowspecdefinition(i_category#37, i_brand#38, cc_name#39, d_year#40 ASC NULLS FIRST, d_moy#41 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#43], [i_category#37, i_brand#38, cc_name#39], [d_year#40 ASC NULLS FIRST, d_moy#41 ASC NULLS FIRST]

(41) Project [codegen id : 21]
Output [5]: [i_category#37, i_brand#38, cc_name#39, sum_sales#42, rn#43]
Input [7]: [i_category#37, i_brand#38, cc_name#39, d_year#40, d_moy#41, sum_sales#42, rn#43]

(42) BroadcastExchange
Input [5]: [i_category#37, i_brand#38, cc_name#39, sum_sales#42, rn#43]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] - 1)),false), [id=#44]

(43) BroadcastHashJoin [codegen id : 22]
Left keys [4]: [i_category#3, i_brand#2, cc_name#14, rn#23]
Right keys [4]: [i_category#37, i_brand#38, cc_name#39, (rn#43 - 1)]
Join condition: None

(44) Project [codegen id : 22]
Output [8]: [i_category#3, i_brand#2, d_year#11, d_moy#12, avg_monthly_sales#24, sum_sales#20, sum_sales#33 AS psum#45, sum_sales#42 AS nsum#46]
Input [14]: [i_category#3, i_brand#2, cc_name#14, d_year#11, d_moy#12, sum_sales#20, avg_monthly_sales#24, rn#23, sum_sales#33, i_category#37, i_brand#38, cc_name#39, sum_sales#42, rn#43]

(45) TakeOrderedAndProject
Input [8]: [i_category#3, i_brand#2, d_year#11, d_moy#12, avg_monthly_sales#24, sum_sales#20, psum#45, nsum#46]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#20 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, d_year#11 ASC NULLS FIRST], [i_category#3, i_brand#2, d_year#11, d_moy#12, avg_monthly_sales#24, sum_sales#20, psum#45, nsum#46]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = cs_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (49)
+- * Filter (48)
   +- * ColumnarToRow (47)
      +- Scan parquet default.date_dim (46)


(46) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(47) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(48) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((d_year#11 = 1999) OR ((d_year#11 = 1998) AND (d_moy#12 = 12))) OR ((d_year#11 = 2000) AND (d_moy#12 = 1))) AND isnotnull(d_date_sk#10))

(49) BroadcastExchange
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47]


