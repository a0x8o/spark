== Physical Plan ==
TakeOrderedAndProject (120)
+- * HashAggregate (119)
   +- Exchange (118)
      +- * HashAggregate (117)
         +- Union (116)
            :- * HashAggregate (105)
            :  +- Exchange (104)
            :     +- * HashAggregate (103)
            :        +- Union (102)
            :           :- * HashAggregate (39)
            :           :  +- Exchange (38)
            :           :     +- * HashAggregate (37)
            :           :        +- * Project (36)
            :           :           +- * BroadcastHashJoin Inner BuildRight (35)
            :           :              :- * Project (29)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (28)
            :           :              :     :- * Project (22)
            :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (21)
            :           :              :     :     :- * Project (16)
            :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (15)
            :           :              :     :     :     :- * Project (13)
            :           :              :     :     :     :  +- * SortMergeJoin LeftOuter (12)
            :           :              :     :     :     :     :- * Sort (5)
            :           :              :     :     :     :     :  +- Exchange (4)
            :           :              :     :     :     :     :     +- * Filter (3)
            :           :              :     :     :     :     :        +- * ColumnarToRow (2)
            :           :              :     :     :     :     :           +- Scan parquet default.store_sales (1)
            :           :              :     :     :     :     +- * Sort (11)
            :           :              :     :     :     :        +- Exchange (10)
            :           :              :     :     :     :           +- * Project (9)
            :           :              :     :     :     :              +- * Filter (8)
            :           :              :     :     :     :                 +- * ColumnarToRow (7)
            :           :              :     :     :     :                    +- Scan parquet default.store_returns (6)
            :           :              :     :     :     +- ReusedExchange (14)
            :           :              :     :     +- BroadcastExchange (20)
            :           :              :     :        +- * Filter (19)
            :           :              :     :           +- * ColumnarToRow (18)
            :           :              :     :              +- Scan parquet default.store (17)
            :           :              :     +- BroadcastExchange (27)
            :           :              :        +- * Project (26)
            :           :              :           +- * Filter (25)
            :           :              :              +- * ColumnarToRow (24)
            :           :              :                 +- Scan parquet default.item (23)
            :           :              +- BroadcastExchange (34)
            :           :                 +- * Project (33)
            :           :                    +- * Filter (32)
            :           :                       +- * ColumnarToRow (31)
            :           :                          +- Scan parquet default.promotion (30)
            :           :- * HashAggregate (70)
            :           :  +- Exchange (69)
            :           :     +- * HashAggregate (68)
            :           :        +- * Project (67)
            :           :           +- * BroadcastHashJoin Inner BuildRight (66)
            :           :              :- * Project (64)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (63)
            :           :              :     :- * Project (61)
            :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (60)
            :           :              :     :     :- * Project (55)
            :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (54)
            :           :              :     :     :     :- * Project (52)
            :           :              :     :     :     :  +- * SortMergeJoin LeftOuter (51)
            :           :              :     :     :     :     :- * Sort (44)
            :           :              :     :     :     :     :  +- Exchange (43)
            :           :              :     :     :     :     :     +- * Filter (42)
            :           :              :     :     :     :     :        +- * ColumnarToRow (41)
            :           :              :     :     :     :     :           +- Scan parquet default.catalog_sales (40)
            :           :              :     :     :     :     +- * Sort (50)
            :           :              :     :     :     :        +- Exchange (49)
            :           :              :     :     :     :           +- * Project (48)
            :           :              :     :     :     :              +- * Filter (47)
            :           :              :     :     :     :                 +- * ColumnarToRow (46)
            :           :              :     :     :     :                    +- Scan parquet default.catalog_returns (45)
            :           :              :     :     :     +- ReusedExchange (53)
            :           :              :     :     +- BroadcastExchange (59)
            :           :              :     :        +- * Filter (58)
            :           :              :     :           +- * ColumnarToRow (57)
            :           :              :     :              +- Scan parquet default.catalog_page (56)
            :           :              :     +- ReusedExchange (62)
            :           :              +- ReusedExchange (65)
            :           +- * HashAggregate (101)
            :              +- Exchange (100)
            :                 +- * HashAggregate (99)
            :                    +- * Project (98)
            :                       +- * BroadcastHashJoin Inner BuildRight (97)
            :                          :- * Project (95)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (94)
            :                          :     :- * Project (92)
            :                          :     :  +- * BroadcastHashJoin Inner BuildRight (91)
            :                          :     :     :- * Project (86)
            :                          :     :     :  +- * BroadcastHashJoin Inner BuildRight (85)
            :                          :     :     :     :- * Project (83)
            :                          :     :     :     :  +- * SortMergeJoin LeftOuter (82)
            :                          :     :     :     :     :- * Sort (75)
            :                          :     :     :     :     :  +- Exchange (74)
            :                          :     :     :     :     :     +- * Filter (73)
            :                          :     :     :     :     :        +- * ColumnarToRow (72)
            :                          :     :     :     :     :           +- Scan parquet default.web_sales (71)
            :                          :     :     :     :     +- * Sort (81)
            :                          :     :     :     :        +- Exchange (80)
            :                          :     :     :     :           +- * Project (79)
            :                          :     :     :     :              +- * Filter (78)
            :                          :     :     :     :                 +- * ColumnarToRow (77)
            :                          :     :     :     :                    +- Scan parquet default.web_returns (76)
            :                          :     :     :     +- ReusedExchange (84)
            :                          :     :     +- BroadcastExchange (90)
            :                          :     :        +- * Filter (89)
            :                          :     :           +- * ColumnarToRow (88)
            :                          :     :              +- Scan parquet default.web_site (87)
            :                          :     +- ReusedExchange (93)
            :                          +- ReusedExchange (96)
            :- * HashAggregate (110)
            :  +- Exchange (109)
            :     +- * HashAggregate (108)
            :        +- * HashAggregate (107)
            :           +- ReusedExchange (106)
            +- * HashAggregate (115)
               +- Exchange (114)
                  +- * HashAggregate (113)
                     +- * HashAggregate (112)
                        +- ReusedExchange (111)


(1) Scan parquet default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(4) Exchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, [id=#9]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]

(8) Filter [codegen id : 3]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Condition : (isnotnull(sr_item_sk#10) AND isnotnull(sr_ticket_number#11))

(9) Project [codegen id : 3]
Output [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]

(10) Exchange
Input [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Arguments: hashpartitioning(sr_item_sk#10, sr_ticket_number#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(11) Sort [codegen id : 4]
Input [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Arguments: [sr_item_sk#10 ASC NULLS FIRST, sr_ticket_number#11 ASC NULLS FIRST], false, 0

(12) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#4]
Right keys [2]: [sr_item_sk#10, sr_ticket_number#11]
Join condition: None

(13) Project [codegen id : 9]
Output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13]
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]

(14) ReusedExchange [Reuses operator id: 125]
Output [1]: [d_date_sk#16]

(15) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#16]
Join condition: None

(16) Project [codegen id : 9]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13, d_date_sk#16]

(17) Scan parquet default.store
Output [2]: [s_store_sk#17, s_store_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(18) ColumnarToRow [codegen id : 6]
Input [2]: [s_store_sk#17, s_store_id#18]

(19) Filter [codegen id : 6]
Input [2]: [s_store_sk#17, s_store_id#18]
Condition : isnotnull(s_store_sk#17)

(20) BroadcastExchange
Input [2]: [s_store_sk#17, s_store_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(21) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#17]
Join condition: None

(22) Project [codegen id : 9]
Output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#18]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_sk#17, s_store_id#18]

(23) Scan parquet default.item
Output [2]: [i_item_sk#20, i_current_price#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(24) ColumnarToRow [codegen id : 7]
Input [2]: [i_item_sk#20, i_current_price#21]

(25) Filter [codegen id : 7]
Input [2]: [i_item_sk#20, i_current_price#21]
Condition : ((isnotnull(i_current_price#21) AND (i_current_price#21 > 50.00)) AND isnotnull(i_item_sk#20))

(26) Project [codegen id : 7]
Output [1]: [i_item_sk#20]
Input [2]: [i_item_sk#20, i_current_price#21]

(27) BroadcastExchange
Input [1]: [i_item_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(28) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#20]
Join condition: None

(29) Project [codegen id : 9]
Output [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#18]
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#18, i_item_sk#20]

(30) Scan parquet default.promotion
Output [2]: [p_promo_sk#23, p_channel_tv#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(31) ColumnarToRow [codegen id : 8]
Input [2]: [p_promo_sk#23, p_channel_tv#24]

(32) Filter [codegen id : 8]
Input [2]: [p_promo_sk#23, p_channel_tv#24]
Condition : ((isnotnull(p_channel_tv#24) AND (p_channel_tv#24 = N)) AND isnotnull(p_promo_sk#23))

(33) Project [codegen id : 8]
Output [1]: [p_promo_sk#23]
Input [2]: [p_promo_sk#23, p_channel_tv#24]

(34) BroadcastExchange
Input [1]: [p_promo_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(35) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_promo_sk#3]
Right keys [1]: [p_promo_sk#23]
Join condition: None

(36) Project [codegen id : 9]
Output [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#18]
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#18, p_promo_sk#23]

(37) HashAggregate [codegen id : 9]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#18]
Keys [1]: [s_store_id#18]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#26, sum#27, isEmpty#28, sum#29, isEmpty#30]
Results [6]: [s_store_id#18, sum#31, sum#32, isEmpty#33, sum#34, isEmpty#35]

(38) Exchange
Input [6]: [s_store_id#18, sum#31, sum#32, isEmpty#33, sum#34, isEmpty#35]
Arguments: hashpartitioning(s_store_id#18, 5), ENSURE_REQUIREMENTS, [id=#36]

(39) HashAggregate [codegen id : 10]
Input [6]: [s_store_id#18, sum#31, sum#32, isEmpty#33, sum#34, isEmpty#35]
Keys [1]: [s_store_id#18]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#37, sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00))#38, sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#39]
Results [5]: [store channel AS channel#40, concat(store, s_store_id#18) AS id#41, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#37,17,2) AS sales#42, sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00))#38 AS returns#43, sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#39 AS profit#44]

(40) Scan parquet default.catalog_sales
Output [7]: [cs_catalog_page_sk#45, cs_item_sk#46, cs_promo_sk#47, cs_order_number#48, cs_ext_sales_price#49, cs_net_profit#50, cs_sold_date_sk#51]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#51), dynamicpruningexpression(cs_sold_date_sk#51 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(41) ColumnarToRow [codegen id : 11]
Input [7]: [cs_catalog_page_sk#45, cs_item_sk#46, cs_promo_sk#47, cs_order_number#48, cs_ext_sales_price#49, cs_net_profit#50, cs_sold_date_sk#51]

(42) Filter [codegen id : 11]
Input [7]: [cs_catalog_page_sk#45, cs_item_sk#46, cs_promo_sk#47, cs_order_number#48, cs_ext_sales_price#49, cs_net_profit#50, cs_sold_date_sk#51]
Condition : ((isnotnull(cs_catalog_page_sk#45) AND isnotnull(cs_item_sk#46)) AND isnotnull(cs_promo_sk#47))

(43) Exchange
Input [7]: [cs_catalog_page_sk#45, cs_item_sk#46, cs_promo_sk#47, cs_order_number#48, cs_ext_sales_price#49, cs_net_profit#50, cs_sold_date_sk#51]
Arguments: hashpartitioning(cs_item_sk#46, cs_order_number#48, 5), ENSURE_REQUIREMENTS, [id=#52]

(44) Sort [codegen id : 12]
Input [7]: [cs_catalog_page_sk#45, cs_item_sk#46, cs_promo_sk#47, cs_order_number#48, cs_ext_sales_price#49, cs_net_profit#50, cs_sold_date_sk#51]
Arguments: [cs_item_sk#46 ASC NULLS FIRST, cs_order_number#48 ASC NULLS FIRST], false, 0

(45) Scan parquet default.catalog_returns
Output [5]: [cr_item_sk#53, cr_order_number#54, cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(46) ColumnarToRow [codegen id : 13]
Input [5]: [cr_item_sk#53, cr_order_number#54, cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57]

(47) Filter [codegen id : 13]
Input [5]: [cr_item_sk#53, cr_order_number#54, cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57]
Condition : (isnotnull(cr_item_sk#53) AND isnotnull(cr_order_number#54))

(48) Project [codegen id : 13]
Output [4]: [cr_item_sk#53, cr_order_number#54, cr_return_amount#55, cr_net_loss#56]
Input [5]: [cr_item_sk#53, cr_order_number#54, cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57]

(49) Exchange
Input [4]: [cr_item_sk#53, cr_order_number#54, cr_return_amount#55, cr_net_loss#56]
Arguments: hashpartitioning(cr_item_sk#53, cr_order_number#54, 5), ENSURE_REQUIREMENTS, [id=#58]

(50) Sort [codegen id : 14]
Input [4]: [cr_item_sk#53, cr_order_number#54, cr_return_amount#55, cr_net_loss#56]
Arguments: [cr_item_sk#53 ASC NULLS FIRST, cr_order_number#54 ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 19]
Left keys [2]: [cs_item_sk#46, cs_order_number#48]
Right keys [2]: [cr_item_sk#53, cr_order_number#54]
Join condition: None

(52) Project [codegen id : 19]
Output [8]: [cs_catalog_page_sk#45, cs_item_sk#46, cs_promo_sk#47, cs_ext_sales_price#49, cs_net_profit#50, cs_sold_date_sk#51, cr_return_amount#55, cr_net_loss#56]
Input [11]: [cs_catalog_page_sk#45, cs_item_sk#46, cs_promo_sk#47, cs_order_number#48, cs_ext_sales_price#49, cs_net_profit#50, cs_sold_date_sk#51, cr_item_sk#53, cr_order_number#54, cr_return_amount#55, cr_net_loss#56]

(53) ReusedExchange [Reuses operator id: 125]
Output [1]: [d_date_sk#59]

(54) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#51]
Right keys [1]: [d_date_sk#59]
Join condition: None

(55) Project [codegen id : 19]
Output [7]: [cs_catalog_page_sk#45, cs_item_sk#46, cs_promo_sk#47, cs_ext_sales_price#49, cs_net_profit#50, cr_return_amount#55, cr_net_loss#56]
Input [9]: [cs_catalog_page_sk#45, cs_item_sk#46, cs_promo_sk#47, cs_ext_sales_price#49, cs_net_profit#50, cs_sold_date_sk#51, cr_return_amount#55, cr_net_loss#56, d_date_sk#59]

(56) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#60, cp_catalog_page_id#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(57) ColumnarToRow [codegen id : 16]
Input [2]: [cp_catalog_page_sk#60, cp_catalog_page_id#61]

(58) Filter [codegen id : 16]
Input [2]: [cp_catalog_page_sk#60, cp_catalog_page_id#61]
Condition : isnotnull(cp_catalog_page_sk#60)

(59) BroadcastExchange
Input [2]: [cp_catalog_page_sk#60, cp_catalog_page_id#61]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#62]

(60) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_catalog_page_sk#45]
Right keys [1]: [cp_catalog_page_sk#60]
Join condition: None

(61) Project [codegen id : 19]
Output [7]: [cs_item_sk#46, cs_promo_sk#47, cs_ext_sales_price#49, cs_net_profit#50, cr_return_amount#55, cr_net_loss#56, cp_catalog_page_id#61]
Input [9]: [cs_catalog_page_sk#45, cs_item_sk#46, cs_promo_sk#47, cs_ext_sales_price#49, cs_net_profit#50, cr_return_amount#55, cr_net_loss#56, cp_catalog_page_sk#60, cp_catalog_page_id#61]

(62) ReusedExchange [Reuses operator id: 27]
Output [1]: [i_item_sk#63]

(63) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_item_sk#46]
Right keys [1]: [i_item_sk#63]
Join condition: None

(64) Project [codegen id : 19]
Output [6]: [cs_promo_sk#47, cs_ext_sales_price#49, cs_net_profit#50, cr_return_amount#55, cr_net_loss#56, cp_catalog_page_id#61]
Input [8]: [cs_item_sk#46, cs_promo_sk#47, cs_ext_sales_price#49, cs_net_profit#50, cr_return_amount#55, cr_net_loss#56, cp_catalog_page_id#61, i_item_sk#63]

(65) ReusedExchange [Reuses operator id: 34]
Output [1]: [p_promo_sk#64]

(66) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_promo_sk#47]
Right keys [1]: [p_promo_sk#64]
Join condition: None

(67) Project [codegen id : 19]
Output [5]: [cs_ext_sales_price#49, cs_net_profit#50, cr_return_amount#55, cr_net_loss#56, cp_catalog_page_id#61]
Input [7]: [cs_promo_sk#47, cs_ext_sales_price#49, cs_net_profit#50, cr_return_amount#55, cr_net_loss#56, cp_catalog_page_id#61, p_promo_sk#64]

(68) HashAggregate [codegen id : 19]
Input [5]: [cs_ext_sales_price#49, cs_net_profit#50, cr_return_amount#55, cr_net_loss#56, cp_catalog_page_id#61]
Keys [1]: [cp_catalog_page_id#61]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#49)), partial_sum(coalesce(cast(cr_return_amount#55 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#50 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#56 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#65, sum#66, isEmpty#67, sum#68, isEmpty#69]
Results [6]: [cp_catalog_page_id#61, sum#70, sum#71, isEmpty#72, sum#73, isEmpty#74]

(69) Exchange
Input [6]: [cp_catalog_page_id#61, sum#70, sum#71, isEmpty#72, sum#73, isEmpty#74]
Arguments: hashpartitioning(cp_catalog_page_id#61, 5), ENSURE_REQUIREMENTS, [id=#75]

(70) HashAggregate [codegen id : 20]
Input [6]: [cp_catalog_page_id#61, sum#70, sum#71, isEmpty#72, sum#73, isEmpty#74]
Keys [1]: [cp_catalog_page_id#61]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#49)), sum(coalesce(cast(cr_return_amount#55 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#50 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#56 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#49))#76, sum(coalesce(cast(cr_return_amount#55 as decimal(12,2)), 0.00))#77, sum(CheckOverflow((promote_precision(cast(cs_net_profit#50 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#56 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#78]
Results [5]: [catalog channel AS channel#79, concat(catalog_page, cp_catalog_page_id#61) AS id#80, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#49))#76,17,2) AS sales#81, sum(coalesce(cast(cr_return_amount#55 as decimal(12,2)), 0.00))#77 AS returns#82, sum(CheckOverflow((promote_precision(cast(cs_net_profit#50 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#56 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#78 AS profit#83]

(71) Scan parquet default.web_sales
Output [7]: [ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89, ws_sold_date_sk#90]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#90), dynamicpruningexpression(ws_sold_date_sk#90 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(72) ColumnarToRow [codegen id : 21]
Input [7]: [ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89, ws_sold_date_sk#90]

(73) Filter [codegen id : 21]
Input [7]: [ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89, ws_sold_date_sk#90]
Condition : ((isnotnull(ws_web_site_sk#85) AND isnotnull(ws_item_sk#84)) AND isnotnull(ws_promo_sk#86))

(74) Exchange
Input [7]: [ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89, ws_sold_date_sk#90]
Arguments: hashpartitioning(ws_item_sk#84, ws_order_number#87, 5), ENSURE_REQUIREMENTS, [id=#91]

(75) Sort [codegen id : 22]
Input [7]: [ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89, ws_sold_date_sk#90]
Arguments: [ws_item_sk#84 ASC NULLS FIRST, ws_order_number#87 ASC NULLS FIRST], false, 0

(76) Scan parquet default.web_returns
Output [5]: [wr_item_sk#92, wr_order_number#93, wr_return_amt#94, wr_net_loss#95, wr_returned_date_sk#96]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(77) ColumnarToRow [codegen id : 23]
Input [5]: [wr_item_sk#92, wr_order_number#93, wr_return_amt#94, wr_net_loss#95, wr_returned_date_sk#96]

(78) Filter [codegen id : 23]
Input [5]: [wr_item_sk#92, wr_order_number#93, wr_return_amt#94, wr_net_loss#95, wr_returned_date_sk#96]
Condition : (isnotnull(wr_item_sk#92) AND isnotnull(wr_order_number#93))

(79) Project [codegen id : 23]
Output [4]: [wr_item_sk#92, wr_order_number#93, wr_return_amt#94, wr_net_loss#95]
Input [5]: [wr_item_sk#92, wr_order_number#93, wr_return_amt#94, wr_net_loss#95, wr_returned_date_sk#96]

(80) Exchange
Input [4]: [wr_item_sk#92, wr_order_number#93, wr_return_amt#94, wr_net_loss#95]
Arguments: hashpartitioning(wr_item_sk#92, wr_order_number#93, 5), ENSURE_REQUIREMENTS, [id=#97]

(81) Sort [codegen id : 24]
Input [4]: [wr_item_sk#92, wr_order_number#93, wr_return_amt#94, wr_net_loss#95]
Arguments: [wr_item_sk#92 ASC NULLS FIRST, wr_order_number#93 ASC NULLS FIRST], false, 0

(82) SortMergeJoin [codegen id : 29]
Left keys [2]: [ws_item_sk#84, ws_order_number#87]
Right keys [2]: [wr_item_sk#92, wr_order_number#93]
Join condition: None

(83) Project [codegen id : 29]
Output [8]: [ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, ws_sold_date_sk#90, wr_return_amt#94, wr_net_loss#95]
Input [11]: [ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89, ws_sold_date_sk#90, wr_item_sk#92, wr_order_number#93, wr_return_amt#94, wr_net_loss#95]

(84) ReusedExchange [Reuses operator id: 125]
Output [1]: [d_date_sk#98]

(85) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_sold_date_sk#90]
Right keys [1]: [d_date_sk#98]
Join condition: None

(86) Project [codegen id : 29]
Output [7]: [ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#94, wr_net_loss#95]
Input [9]: [ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, ws_sold_date_sk#90, wr_return_amt#94, wr_net_loss#95, d_date_sk#98]

(87) Scan parquet default.web_site
Output [2]: [web_site_sk#99, web_site_id#100]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(88) ColumnarToRow [codegen id : 26]
Input [2]: [web_site_sk#99, web_site_id#100]

(89) Filter [codegen id : 26]
Input [2]: [web_site_sk#99, web_site_id#100]
Condition : isnotnull(web_site_sk#99)

(90) BroadcastExchange
Input [2]: [web_site_sk#99, web_site_id#100]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#101]

(91) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_web_site_sk#85]
Right keys [1]: [web_site_sk#99]
Join condition: None

(92) Project [codegen id : 29]
Output [7]: [ws_item_sk#84, ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#94, wr_net_loss#95, web_site_id#100]
Input [9]: [ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#94, wr_net_loss#95, web_site_sk#99, web_site_id#100]

(93) ReusedExchange [Reuses operator id: 27]
Output [1]: [i_item_sk#102]

(94) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_item_sk#84]
Right keys [1]: [i_item_sk#102]
Join condition: None

(95) Project [codegen id : 29]
Output [6]: [ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#94, wr_net_loss#95, web_site_id#100]
Input [8]: [ws_item_sk#84, ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#94, wr_net_loss#95, web_site_id#100, i_item_sk#102]

(96) ReusedExchange [Reuses operator id: 34]
Output [1]: [p_promo_sk#103]

(97) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_promo_sk#86]
Right keys [1]: [p_promo_sk#103]
Join condition: None

(98) Project [codegen id : 29]
Output [5]: [ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#94, wr_net_loss#95, web_site_id#100]
Input [7]: [ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#94, wr_net_loss#95, web_site_id#100, p_promo_sk#103]

(99) HashAggregate [codegen id : 29]
Input [5]: [ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#94, wr_net_loss#95, web_site_id#100]
Keys [1]: [web_site_id#100]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#88)), partial_sum(coalesce(cast(wr_return_amt#94 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#89 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#95 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Results [6]: [web_site_id#100, sum#109, sum#110, isEmpty#111, sum#112, isEmpty#113]

(100) Exchange
Input [6]: [web_site_id#100, sum#109, sum#110, isEmpty#111, sum#112, isEmpty#113]
Arguments: hashpartitioning(web_site_id#100, 5), ENSURE_REQUIREMENTS, [id=#114]

(101) HashAggregate [codegen id : 30]
Input [6]: [web_site_id#100, sum#109, sum#110, isEmpty#111, sum#112, isEmpty#113]
Keys [1]: [web_site_id#100]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#88)), sum(coalesce(cast(wr_return_amt#94 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#89 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#95 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#88))#115, sum(coalesce(cast(wr_return_amt#94 as decimal(12,2)), 0.00))#116, sum(CheckOverflow((promote_precision(cast(ws_net_profit#89 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#95 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#117]
Results [5]: [web channel AS channel#118, concat(web_site, web_site_id#100) AS id#119, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#88))#115,17,2) AS sales#120, sum(coalesce(cast(wr_return_amt#94 as decimal(12,2)), 0.00))#116 AS returns#121, sum(CheckOverflow((promote_precision(cast(ws_net_profit#89 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#95 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#117 AS profit#122]

(102) Union

(103) HashAggregate [codegen id : 31]
Input [5]: [channel#40, id#41, sales#42, returns#43, profit#44]
Keys [2]: [channel#40, id#41]
Functions [3]: [partial_sum(sales#42), partial_sum(returns#43), partial_sum(profit#44)]
Aggregate Attributes [6]: [sum#123, isEmpty#124, sum#125, isEmpty#126, sum#127, isEmpty#128]
Results [8]: [channel#40, id#41, sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]

(104) Exchange
Input [8]: [channel#40, id#41, sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Arguments: hashpartitioning(channel#40, id#41, 5), ENSURE_REQUIREMENTS, [id=#135]

(105) HashAggregate [codegen id : 32]
Input [8]: [channel#40, id#41, sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Keys [2]: [channel#40, id#41]
Functions [3]: [sum(sales#42), sum(returns#43), sum(profit#44)]
Aggregate Attributes [3]: [sum(sales#42)#136, sum(returns#43)#137, sum(profit#44)#138]
Results [5]: [channel#40, id#41, cast(sum(sales#42)#136 as decimal(37,2)) AS sales#139, cast(sum(returns#43)#137 as decimal(38,2)) AS returns#140, cast(sum(profit#44)#138 as decimal(38,2)) AS profit#141]

(106) ReusedExchange [Reuses operator id: 104]
Output [8]: [channel#40, id#41, sum#142, isEmpty#143, sum#144, isEmpty#145, sum#146, isEmpty#147]

(107) HashAggregate [codegen id : 64]
Input [8]: [channel#40, id#41, sum#142, isEmpty#143, sum#144, isEmpty#145, sum#146, isEmpty#147]
Keys [2]: [channel#40, id#41]
Functions [3]: [sum(sales#42), sum(returns#43), sum(profit#44)]
Aggregate Attributes [3]: [sum(sales#42)#148, sum(returns#43)#149, sum(profit#44)#150]
Results [4]: [channel#40, sum(sales#42)#148 AS sales#151, sum(returns#43)#149 AS returns#152, sum(profit#44)#150 AS profit#153]

(108) HashAggregate [codegen id : 64]
Input [4]: [channel#40, sales#151, returns#152, profit#153]
Keys [1]: [channel#40]
Functions [3]: [partial_sum(sales#151), partial_sum(returns#152), partial_sum(profit#153)]
Aggregate Attributes [6]: [sum#154, isEmpty#155, sum#156, isEmpty#157, sum#158, isEmpty#159]
Results [7]: [channel#40, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]

(109) Exchange
Input [7]: [channel#40, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]
Arguments: hashpartitioning(channel#40, 5), ENSURE_REQUIREMENTS, [id=#166]

(110) HashAggregate [codegen id : 65]
Input [7]: [channel#40, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]
Keys [1]: [channel#40]
Functions [3]: [sum(sales#151), sum(returns#152), sum(profit#153)]
Aggregate Attributes [3]: [sum(sales#151)#167, sum(returns#152)#168, sum(profit#153)#169]
Results [5]: [channel#40, null AS id#170, sum(sales#151)#167 AS sales#171, sum(returns#152)#168 AS returns#172, sum(profit#153)#169 AS profit#173]

(111) ReusedExchange [Reuses operator id: 104]
Output [8]: [channel#40, id#41, sum#174, isEmpty#175, sum#176, isEmpty#177, sum#178, isEmpty#179]

(112) HashAggregate [codegen id : 97]
Input [8]: [channel#40, id#41, sum#174, isEmpty#175, sum#176, isEmpty#177, sum#178, isEmpty#179]
Keys [2]: [channel#40, id#41]
Functions [3]: [sum(sales#42), sum(returns#43), sum(profit#44)]
Aggregate Attributes [3]: [sum(sales#42)#180, sum(returns#43)#181, sum(profit#44)#182]
Results [3]: [sum(sales#42)#180 AS sales#151, sum(returns#43)#181 AS returns#152, sum(profit#44)#182 AS profit#153]

(113) HashAggregate [codegen id : 97]
Input [3]: [sales#151, returns#152, profit#153]
Keys: []
Functions [3]: [partial_sum(sales#151), partial_sum(returns#152), partial_sum(profit#153)]
Aggregate Attributes [6]: [sum#183, isEmpty#184, sum#185, isEmpty#186, sum#187, isEmpty#188]
Results [6]: [sum#189, isEmpty#190, sum#191, isEmpty#192, sum#193, isEmpty#194]

(114) Exchange
Input [6]: [sum#189, isEmpty#190, sum#191, isEmpty#192, sum#193, isEmpty#194]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#195]

(115) HashAggregate [codegen id : 98]
Input [6]: [sum#189, isEmpty#190, sum#191, isEmpty#192, sum#193, isEmpty#194]
Keys: []
Functions [3]: [sum(sales#151), sum(returns#152), sum(profit#153)]
Aggregate Attributes [3]: [sum(sales#151)#196, sum(returns#152)#197, sum(profit#153)#198]
Results [5]: [null AS channel#199, null AS id#200, sum(sales#151)#196 AS sales#201, sum(returns#152)#197 AS returns#202, sum(profit#153)#198 AS profit#203]

(116) Union

(117) HashAggregate [codegen id : 99]
Input [5]: [channel#40, id#41, sales#139, returns#140, profit#141]
Keys [5]: [channel#40, id#41, sales#139, returns#140, profit#141]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#40, id#41, sales#139, returns#140, profit#141]

(118) Exchange
Input [5]: [channel#40, id#41, sales#139, returns#140, profit#141]
Arguments: hashpartitioning(channel#40, id#41, sales#139, returns#140, profit#141, 5), ENSURE_REQUIREMENTS, [id=#204]

(119) HashAggregate [codegen id : 100]
Input [5]: [channel#40, id#41, sales#139, returns#140, profit#141]
Keys [5]: [channel#40, id#41, sales#139, returns#140, profit#141]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#40, id#41, sales#139, returns#140, profit#141]

(120) TakeOrderedAndProject
Input [5]: [channel#40, id#41, sales#139, returns#140, profit#141]
Arguments: 100, [channel#40 ASC NULLS FIRST, id#41 ASC NULLS FIRST], [channel#40, id#41, sales#139, returns#140, profit#141]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (125)
+- * Project (124)
   +- * Filter (123)
      +- * ColumnarToRow (122)
         +- Scan parquet default.date_dim (121)


(121) Scan parquet default.date_dim
Output [2]: [d_date_sk#16, d_date#205]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(122) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#16, d_date#205]

(123) Filter [codegen id : 1]
Input [2]: [d_date_sk#16, d_date#205]
Condition : (((isnotnull(d_date#205) AND (d_date#205 >= 1998-08-04)) AND (d_date#205 <= 1998-09-03)) AND isnotnull(d_date_sk#16))

(124) Project [codegen id : 1]
Output [1]: [d_date_sk#16]
Input [2]: [d_date_sk#16, d_date#205]

(125) BroadcastExchange
Input [1]: [d_date_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#206]

Subquery:2 Hosting operator id = 40 Hosting Expression = cs_sold_date_sk#51 IN dynamicpruning#8

Subquery:3 Hosting operator id = 71 Hosting Expression = ws_sold_date_sk#90 IN dynamicpruning#8


