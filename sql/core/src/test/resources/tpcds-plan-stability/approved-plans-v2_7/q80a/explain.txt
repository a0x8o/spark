== Physical Plan ==
TakeOrderedAndProject (124)
+- * HashAggregate (123)
   +- Exchange (122)
      +- * HashAggregate (121)
         +- Union (120)
            :- * HashAggregate (109)
            :  +- Exchange (108)
            :     +- * HashAggregate (107)
            :        +- Union (106)
            :           :- * HashAggregate (43)
            :           :  +- Exchange (42)
            :           :     +- * HashAggregate (41)
            :           :        +- * Project (40)
            :           :           +- * BroadcastHashJoin Inner BuildRight (39)
            :           :              :- * Project (33)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (32)
            :           :              :     :- * Project (26)
            :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (25)
            :           :              :     :     :- * Project (20)
            :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (19)
            :           :              :     :     :     :- * Project (13)
            :           :              :     :     :     :  +- SortMergeJoin LeftOuter (12)
            :           :              :     :     :     :     :- * Sort (5)
            :           :              :     :     :     :     :  +- Exchange (4)
            :           :              :     :     :     :     :     +- * Filter (3)
            :           :              :     :     :     :     :        +- * ColumnarToRow (2)
            :           :              :     :     :     :     :           +- Scan parquet default.store_sales (1)
            :           :              :     :     :     :     +- * Sort (11)
            :           :              :     :     :     :        +- Exchange (10)
            :           :              :     :     :     :           +- * Project (9)
            :           :              :     :     :     :              +- * Filter (8)
            :           :              :     :     :     :                 +- * ColumnarToRow (7)
            :           :              :     :     :     :                    +- Scan parquet default.store_returns (6)
            :           :              :     :     :     +- BroadcastExchange (18)
            :           :              :     :     :        +- * Project (17)
            :           :              :     :     :           +- * Filter (16)
            :           :              :     :     :              +- * ColumnarToRow (15)
            :           :              :     :     :                 +- Scan parquet default.date_dim (14)
            :           :              :     :     +- BroadcastExchange (24)
            :           :              :     :        +- * Filter (23)
            :           :              :     :           +- * ColumnarToRow (22)
            :           :              :     :              +- Scan parquet default.store (21)
            :           :              :     +- BroadcastExchange (31)
            :           :              :        +- * Project (30)
            :           :              :           +- * Filter (29)
            :           :              :              +- * ColumnarToRow (28)
            :           :              :                 +- Scan parquet default.item (27)
            :           :              +- BroadcastExchange (38)
            :           :                 +- * Project (37)
            :           :                    +- * Filter (36)
            :           :                       +- * ColumnarToRow (35)
            :           :                          +- Scan parquet default.promotion (34)
            :           :- * HashAggregate (74)
            :           :  +- Exchange (73)
            :           :     +- * HashAggregate (72)
            :           :        +- * Project (71)
            :           :           +- * BroadcastHashJoin Inner BuildRight (70)
            :           :              :- * Project (68)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (67)
            :           :              :     :- * Project (65)
            :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (64)
            :           :              :     :     :- * Project (59)
            :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (58)
            :           :              :     :     :     :- * Project (56)
            :           :              :     :     :     :  +- SortMergeJoin LeftOuter (55)
            :           :              :     :     :     :     :- * Sort (48)
            :           :              :     :     :     :     :  +- Exchange (47)
            :           :              :     :     :     :     :     +- * Filter (46)
            :           :              :     :     :     :     :        +- * ColumnarToRow (45)
            :           :              :     :     :     :     :           +- Scan parquet default.catalog_sales (44)
            :           :              :     :     :     :     +- * Sort (54)
            :           :              :     :     :     :        +- Exchange (53)
            :           :              :     :     :     :           +- * Project (52)
            :           :              :     :     :     :              +- * Filter (51)
            :           :              :     :     :     :                 +- * ColumnarToRow (50)
            :           :              :     :     :     :                    +- Scan parquet default.catalog_returns (49)
            :           :              :     :     :     +- ReusedExchange (57)
            :           :              :     :     +- BroadcastExchange (63)
            :           :              :     :        +- * Filter (62)
            :           :              :     :           +- * ColumnarToRow (61)
            :           :              :     :              +- Scan parquet default.catalog_page (60)
            :           :              :     +- ReusedExchange (66)
            :           :              +- ReusedExchange (69)
            :           +- * HashAggregate (105)
            :              +- Exchange (104)
            :                 +- * HashAggregate (103)
            :                    +- * Project (102)
            :                       +- * BroadcastHashJoin Inner BuildRight (101)
            :                          :- * Project (99)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (98)
            :                          :     :- * Project (96)
            :                          :     :  +- * BroadcastHashJoin Inner BuildRight (95)
            :                          :     :     :- * Project (90)
            :                          :     :     :  +- * BroadcastHashJoin Inner BuildRight (89)
            :                          :     :     :     :- * Project (87)
            :                          :     :     :     :  +- SortMergeJoin LeftOuter (86)
            :                          :     :     :     :     :- * Sort (79)
            :                          :     :     :     :     :  +- Exchange (78)
            :                          :     :     :     :     :     +- * Filter (77)
            :                          :     :     :     :     :        +- * ColumnarToRow (76)
            :                          :     :     :     :     :           +- Scan parquet default.web_sales (75)
            :                          :     :     :     :     +- * Sort (85)
            :                          :     :     :     :        +- Exchange (84)
            :                          :     :     :     :           +- * Project (83)
            :                          :     :     :     :              +- * Filter (82)
            :                          :     :     :     :                 +- * ColumnarToRow (81)
            :                          :     :     :     :                    +- Scan parquet default.web_returns (80)
            :                          :     :     :     +- ReusedExchange (88)
            :                          :     :     +- BroadcastExchange (94)
            :                          :     :        +- * Filter (93)
            :                          :     :           +- * ColumnarToRow (92)
            :                          :     :              +- Scan parquet default.web_site (91)
            :                          :     +- ReusedExchange (97)
            :                          +- ReusedExchange (100)
            :- * HashAggregate (114)
            :  +- Exchange (113)
            :     +- * HashAggregate (112)
            :        +- * HashAggregate (111)
            :           +- ReusedExchange (110)
            +- * HashAggregate (119)
               +- Exchange (118)
                  +- * HashAggregate (117)
                     +- * HashAggregate (116)
                        +- ReusedExchange (115)


(1) Scan parquet default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(4) Exchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(cast(ss_item_sk#1 as bigint), cast(ss_ticket_number#4 as bigint), 5), ENSURE_REQUIREMENTS, [id=#9]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [cast(ss_item_sk#1 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]

(8) Filter [codegen id : 3]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Condition : (isnotnull(sr_item_sk#10) AND isnotnull(sr_ticket_number#11))

(9) Project [codegen id : 3]
Output [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]

(10) Exchange
Input [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Arguments: hashpartitioning(sr_item_sk#10, sr_ticket_number#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(11) Sort [codegen id : 4]
Input [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Arguments: [sr_item_sk#10 ASC NULLS FIRST, sr_ticket_number#11 ASC NULLS FIRST], false, 0

(12) SortMergeJoin
Left keys [2]: [cast(ss_item_sk#1 as bigint), cast(ss_ticket_number#4 as bigint)]
Right keys [2]: [sr_item_sk#10, sr_ticket_number#11]
Join condition: None

(13) Project [codegen id : 9]
Output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13]
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]

(14) Scan parquet default.date_dim
Output [2]: [d_date_sk#16, d_date#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(15) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#16, d_date#17]

(16) Filter [codegen id : 5]
Input [2]: [d_date_sk#16, d_date#17]
Condition : (((isnotnull(d_date#17) AND (d_date#17 >= 10442)) AND (d_date#17 <= 10472)) AND isnotnull(d_date_sk#16))

(17) Project [codegen id : 5]
Output [1]: [d_date_sk#16]
Input [2]: [d_date_sk#16, d_date#17]

(18) BroadcastExchange
Input [1]: [d_date_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(19) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#16]
Join condition: None

(20) Project [codegen id : 9]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13, d_date_sk#16]

(21) Scan parquet default.store
Output [2]: [s_store_sk#19, s_store_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(22) ColumnarToRow [codegen id : 6]
Input [2]: [s_store_sk#19, s_store_id#20]

(23) Filter [codegen id : 6]
Input [2]: [s_store_sk#19, s_store_id#20]
Condition : isnotnull(s_store_sk#19)

(24) BroadcastExchange
Input [2]: [s_store_sk#19, s_store_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(25) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#19]
Join condition: None

(26) Project [codegen id : 9]
Output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#20]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_sk#19, s_store_id#20]

(27) Scan parquet default.item
Output [2]: [i_item_sk#22, i_current_price#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(28) ColumnarToRow [codegen id : 7]
Input [2]: [i_item_sk#22, i_current_price#23]

(29) Filter [codegen id : 7]
Input [2]: [i_item_sk#22, i_current_price#23]
Condition : ((isnotnull(i_current_price#23) AND (i_current_price#23 > 50.00)) AND isnotnull(i_item_sk#22))

(30) Project [codegen id : 7]
Output [1]: [i_item_sk#22]
Input [2]: [i_item_sk#22, i_current_price#23]

(31) BroadcastExchange
Input [1]: [i_item_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(32) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#22]
Join condition: None

(33) Project [codegen id : 9]
Output [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#20]
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#20, i_item_sk#22]

(34) Scan parquet default.promotion
Output [2]: [p_promo_sk#25, p_channel_tv#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(35) ColumnarToRow [codegen id : 8]
Input [2]: [p_promo_sk#25, p_channel_tv#26]

(36) Filter [codegen id : 8]
Input [2]: [p_promo_sk#25, p_channel_tv#26]
Condition : ((isnotnull(p_channel_tv#26) AND (p_channel_tv#26 = N)) AND isnotnull(p_promo_sk#25))

(37) Project [codegen id : 8]
Output [1]: [p_promo_sk#25]
Input [2]: [p_promo_sk#25, p_channel_tv#26]

(38) BroadcastExchange
Input [1]: [p_promo_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27]

(39) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_promo_sk#3]
Right keys [1]: [p_promo_sk#25]
Join condition: None

(40) Project [codegen id : 9]
Output [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#20]
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#20, p_promo_sk#25]

(41) HashAggregate [codegen id : 9]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#20]
Keys [1]: [s_store_id#20]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#28, sum#29, isEmpty#30, sum#31, isEmpty#32]
Results [6]: [s_store_id#20, sum#33, sum#34, isEmpty#35, sum#36, isEmpty#37]

(42) Exchange
Input [6]: [s_store_id#20, sum#33, sum#34, isEmpty#35, sum#36, isEmpty#37]
Arguments: hashpartitioning(s_store_id#20, 5), ENSURE_REQUIREMENTS, [id=#38]

(43) HashAggregate [codegen id : 10]
Input [6]: [s_store_id#20, sum#33, sum#34, isEmpty#35, sum#36, isEmpty#37]
Keys [1]: [s_store_id#20]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#39, sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00))#40, sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#41]
Results [5]: [store channel AS channel#42, concat(store, s_store_id#20) AS id#43, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#39,17,2) AS sales#44, sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00))#40 AS returns#45, sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#41 AS profit#46]

(44) Scan parquet default.catalog_sales
Output [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#53), dynamicpruningexpression(cs_sold_date_sk#53 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(45) ColumnarToRow [codegen id : 11]
Input [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53]

(46) Filter [codegen id : 11]
Input [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53]
Condition : ((isnotnull(cs_catalog_page_sk#47) AND isnotnull(cs_item_sk#48)) AND isnotnull(cs_promo_sk#49))

(47) Exchange
Input [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53]
Arguments: hashpartitioning(cs_item_sk#48, cs_order_number#50, 5), ENSURE_REQUIREMENTS, [id=#54]

(48) Sort [codegen id : 12]
Input [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53]
Arguments: [cs_item_sk#48 ASC NULLS FIRST, cs_order_number#50 ASC NULLS FIRST], false, 0

(49) Scan parquet default.catalog_returns
Output [5]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(50) ColumnarToRow [codegen id : 13]
Input [5]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]

(51) Filter [codegen id : 13]
Input [5]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]
Condition : (isnotnull(cr_item_sk#55) AND isnotnull(cr_order_number#56))

(52) Project [codegen id : 13]
Output [4]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58]
Input [5]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]

(53) Exchange
Input [4]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58]
Arguments: hashpartitioning(cr_item_sk#55, cr_order_number#56, 5), ENSURE_REQUIREMENTS, [id=#60]

(54) Sort [codegen id : 14]
Input [4]: [cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58]
Arguments: [cr_item_sk#55 ASC NULLS FIRST, cr_order_number#56 ASC NULLS FIRST], false, 0

(55) SortMergeJoin
Left keys [2]: [cs_item_sk#48, cs_order_number#50]
Right keys [2]: [cr_item_sk#55, cr_order_number#56]
Join condition: None

(56) Project [codegen id : 19]
Output [8]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53, cr_return_amount#57, cr_net_loss#58]
Input [11]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53, cr_item_sk#55, cr_order_number#56, cr_return_amount#57, cr_net_loss#58]

(57) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#16]

(58) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#53]
Right keys [1]: [d_date_sk#16]
Join condition: None

(59) Project [codegen id : 19]
Output [7]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58]
Input [9]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cs_sold_date_sk#53, cr_return_amount#57, cr_net_loss#58, d_date_sk#16]

(60) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#61, cp_catalog_page_id#62]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(61) ColumnarToRow [codegen id : 16]
Input [2]: [cp_catalog_page_sk#61, cp_catalog_page_id#62]

(62) Filter [codegen id : 16]
Input [2]: [cp_catalog_page_sk#61, cp_catalog_page_id#62]
Condition : isnotnull(cp_catalog_page_sk#61)

(63) BroadcastExchange
Input [2]: [cp_catalog_page_sk#61, cp_catalog_page_id#62]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63]

(64) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_catalog_page_sk#47]
Right keys [1]: [cp_catalog_page_sk#61]
Join condition: None

(65) Project [codegen id : 19]
Output [7]: [cs_item_sk#48, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58, cp_catalog_page_id#62]
Input [9]: [cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58, cp_catalog_page_sk#61, cp_catalog_page_id#62]

(66) ReusedExchange [Reuses operator id: 31]
Output [1]: [i_item_sk#22]

(67) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_item_sk#48]
Right keys [1]: [i_item_sk#22]
Join condition: None

(68) Project [codegen id : 19]
Output [6]: [cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58, cp_catalog_page_id#62]
Input [8]: [cs_item_sk#48, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58, cp_catalog_page_id#62, i_item_sk#22]

(69) ReusedExchange [Reuses operator id: 38]
Output [1]: [p_promo_sk#25]

(70) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_promo_sk#49]
Right keys [1]: [p_promo_sk#25]
Join condition: None

(71) Project [codegen id : 19]
Output [5]: [cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58, cp_catalog_page_id#62]
Input [7]: [cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58, cp_catalog_page_id#62, p_promo_sk#25]

(72) HashAggregate [codegen id : 19]
Input [5]: [cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#57, cr_net_loss#58, cp_catalog_page_id#62]
Keys [1]: [cp_catalog_page_id#62]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#51)), partial_sum(coalesce(cast(cr_return_amount#57 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#58 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#64, sum#65, isEmpty#66, sum#67, isEmpty#68]
Results [6]: [cp_catalog_page_id#62, sum#69, sum#70, isEmpty#71, sum#72, isEmpty#73]

(73) Exchange
Input [6]: [cp_catalog_page_id#62, sum#69, sum#70, isEmpty#71, sum#72, isEmpty#73]
Arguments: hashpartitioning(cp_catalog_page_id#62, 5), ENSURE_REQUIREMENTS, [id=#74]

(74) HashAggregate [codegen id : 20]
Input [6]: [cp_catalog_page_id#62, sum#69, sum#70, isEmpty#71, sum#72, isEmpty#73]
Keys [1]: [cp_catalog_page_id#62]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#51)), sum(coalesce(cast(cr_return_amount#57 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#58 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#51))#75, sum(coalesce(cast(cr_return_amount#57 as decimal(12,2)), 0.00))#76, sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#58 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#77]
Results [5]: [catalog channel AS channel#78, concat(catalog_page, cp_catalog_page_id#62) AS id#79, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#51))#75,17,2) AS sales#80, sum(coalesce(cast(cr_return_amount#57 as decimal(12,2)), 0.00))#76 AS returns#81, sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#58 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#77 AS profit#82]

(75) Scan parquet default.web_sales
Output [7]: [ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#89), dynamicpruningexpression(ws_sold_date_sk#89 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(76) ColumnarToRow [codegen id : 21]
Input [7]: [ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89]

(77) Filter [codegen id : 21]
Input [7]: [ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89]
Condition : ((isnotnull(ws_web_site_sk#84) AND isnotnull(ws_item_sk#83)) AND isnotnull(ws_promo_sk#85))

(78) Exchange
Input [7]: [ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89]
Arguments: hashpartitioning(cast(ws_item_sk#83 as bigint), cast(ws_order_number#86 as bigint), 5), ENSURE_REQUIREMENTS, [id=#90]

(79) Sort [codegen id : 22]
Input [7]: [ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89]
Arguments: [cast(ws_item_sk#83 as bigint) ASC NULLS FIRST, cast(ws_order_number#86 as bigint) ASC NULLS FIRST], false, 0

(80) Scan parquet default.web_returns
Output [5]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94, wr_returned_date_sk#95]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(81) ColumnarToRow [codegen id : 23]
Input [5]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94, wr_returned_date_sk#95]

(82) Filter [codegen id : 23]
Input [5]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94, wr_returned_date_sk#95]
Condition : (isnotnull(wr_item_sk#91) AND isnotnull(wr_order_number#92))

(83) Project [codegen id : 23]
Output [4]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94]
Input [5]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94, wr_returned_date_sk#95]

(84) Exchange
Input [4]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94]
Arguments: hashpartitioning(wr_item_sk#91, wr_order_number#92, 5), ENSURE_REQUIREMENTS, [id=#96]

(85) Sort [codegen id : 24]
Input [4]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94]
Arguments: [wr_item_sk#91 ASC NULLS FIRST, wr_order_number#92 ASC NULLS FIRST], false, 0

(86) SortMergeJoin
Left keys [2]: [cast(ws_item_sk#83 as bigint), cast(ws_order_number#86 as bigint)]
Right keys [2]: [wr_item_sk#91, wr_order_number#92]
Join condition: None

(87) Project [codegen id : 29]
Output [8]: [ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89, wr_return_amt#93, wr_net_loss#94]
Input [11]: [ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89, wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94]

(88) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#16]

(89) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_sold_date_sk#89]
Right keys [1]: [d_date_sk#16]
Join condition: None

(90) Project [codegen id : 29]
Output [7]: [ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#93, wr_net_loss#94]
Input [9]: [ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89, wr_return_amt#93, wr_net_loss#94, d_date_sk#16]

(91) Scan parquet default.web_site
Output [2]: [web_site_sk#97, web_site_id#98]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(92) ColumnarToRow [codegen id : 26]
Input [2]: [web_site_sk#97, web_site_id#98]

(93) Filter [codegen id : 26]
Input [2]: [web_site_sk#97, web_site_id#98]
Condition : isnotnull(web_site_sk#97)

(94) BroadcastExchange
Input [2]: [web_site_sk#97, web_site_id#98]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#99]

(95) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_web_site_sk#84]
Right keys [1]: [web_site_sk#97]
Join condition: None

(96) Project [codegen id : 29]
Output [7]: [ws_item_sk#83, ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#93, wr_net_loss#94, web_site_id#98]
Input [9]: [ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#93, wr_net_loss#94, web_site_sk#97, web_site_id#98]

(97) ReusedExchange [Reuses operator id: 31]
Output [1]: [i_item_sk#22]

(98) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_item_sk#83]
Right keys [1]: [i_item_sk#22]
Join condition: None

(99) Project [codegen id : 29]
Output [6]: [ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#93, wr_net_loss#94, web_site_id#98]
Input [8]: [ws_item_sk#83, ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#93, wr_net_loss#94, web_site_id#98, i_item_sk#22]

(100) ReusedExchange [Reuses operator id: 38]
Output [1]: [p_promo_sk#25]

(101) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_promo_sk#85]
Right keys [1]: [p_promo_sk#25]
Join condition: None

(102) Project [codegen id : 29]
Output [5]: [ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#93, wr_net_loss#94, web_site_id#98]
Input [7]: [ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#93, wr_net_loss#94, web_site_id#98, p_promo_sk#25]

(103) HashAggregate [codegen id : 29]
Input [5]: [ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#93, wr_net_loss#94, web_site_id#98]
Keys [1]: [web_site_id#98]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#87)), partial_sum(coalesce(cast(wr_return_amt#93 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#88 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#94 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#100, sum#101, isEmpty#102, sum#103, isEmpty#104]
Results [6]: [web_site_id#98, sum#105, sum#106, isEmpty#107, sum#108, isEmpty#109]

(104) Exchange
Input [6]: [web_site_id#98, sum#105, sum#106, isEmpty#107, sum#108, isEmpty#109]
Arguments: hashpartitioning(web_site_id#98, 5), ENSURE_REQUIREMENTS, [id=#110]

(105) HashAggregate [codegen id : 30]
Input [6]: [web_site_id#98, sum#105, sum#106, isEmpty#107, sum#108, isEmpty#109]
Keys [1]: [web_site_id#98]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#87)), sum(coalesce(cast(wr_return_amt#93 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#88 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#94 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#87))#111, sum(coalesce(cast(wr_return_amt#93 as decimal(12,2)), 0.00))#112, sum(CheckOverflow((promote_precision(cast(ws_net_profit#88 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#94 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#113]
Results [5]: [web channel AS channel#114, concat(web_site, web_site_id#98) AS id#115, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#87))#111,17,2) AS sales#116, sum(coalesce(cast(wr_return_amt#93 as decimal(12,2)), 0.00))#112 AS returns#117, sum(CheckOverflow((promote_precision(cast(ws_net_profit#88 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#94 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#113 AS profit#118]

(106) Union

(107) HashAggregate [codegen id : 31]
Input [5]: [channel#42, id#43, sales#44, returns#45, profit#46]
Keys [2]: [channel#42, id#43]
Functions [3]: [partial_sum(sales#44), partial_sum(returns#45), partial_sum(profit#46)]
Aggregate Attributes [6]: [sum#119, isEmpty#120, sum#121, isEmpty#122, sum#123, isEmpty#124]
Results [8]: [channel#42, id#43, sum#125, isEmpty#126, sum#127, isEmpty#128, sum#129, isEmpty#130]

(108) Exchange
Input [8]: [channel#42, id#43, sum#125, isEmpty#126, sum#127, isEmpty#128, sum#129, isEmpty#130]
Arguments: hashpartitioning(channel#42, id#43, 5), ENSURE_REQUIREMENTS, [id=#131]

(109) HashAggregate [codegen id : 32]
Input [8]: [channel#42, id#43, sum#125, isEmpty#126, sum#127, isEmpty#128, sum#129, isEmpty#130]
Keys [2]: [channel#42, id#43]
Functions [3]: [sum(sales#44), sum(returns#45), sum(profit#46)]
Aggregate Attributes [3]: [sum(sales#44)#132, sum(returns#45)#133, sum(profit#46)#134]
Results [5]: [channel#42, id#43, cast(sum(sales#44)#132 as decimal(37,2)) AS sales#135, cast(sum(returns#45)#133 as decimal(38,2)) AS returns#136, cast(sum(profit#46)#134 as decimal(38,2)) AS profit#137]

(110) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#42, id#43, sum#138, isEmpty#139, sum#140, isEmpty#141, sum#142, isEmpty#143]

(111) HashAggregate [codegen id : 64]
Input [8]: [channel#42, id#43, sum#138, isEmpty#139, sum#140, isEmpty#141, sum#142, isEmpty#143]
Keys [2]: [channel#42, id#43]
Functions [3]: [sum(sales#44), sum(returns#45), sum(profit#46)]
Aggregate Attributes [3]: [sum(sales#44)#144, sum(returns#45)#145, sum(profit#46)#146]
Results [4]: [channel#42, sum(sales#44)#144 AS sales#147, sum(returns#45)#145 AS returns#148, sum(profit#46)#146 AS profit#149]

(112) HashAggregate [codegen id : 64]
Input [4]: [channel#42, sales#147, returns#148, profit#149]
Keys [1]: [channel#42]
Functions [3]: [partial_sum(sales#147), partial_sum(returns#148), partial_sum(profit#149)]
Aggregate Attributes [6]: [sum#150, isEmpty#151, sum#152, isEmpty#153, sum#154, isEmpty#155]
Results [7]: [channel#42, sum#156, isEmpty#157, sum#158, isEmpty#159, sum#160, isEmpty#161]

(113) Exchange
Input [7]: [channel#42, sum#156, isEmpty#157, sum#158, isEmpty#159, sum#160, isEmpty#161]
Arguments: hashpartitioning(channel#42, 5), ENSURE_REQUIREMENTS, [id=#162]

(114) HashAggregate [codegen id : 65]
Input [7]: [channel#42, sum#156, isEmpty#157, sum#158, isEmpty#159, sum#160, isEmpty#161]
Keys [1]: [channel#42]
Functions [3]: [sum(sales#147), sum(returns#148), sum(profit#149)]
Aggregate Attributes [3]: [sum(sales#147)#163, sum(returns#148)#164, sum(profit#149)#165]
Results [5]: [channel#42, null AS id#166, sum(sales#147)#163 AS sales#167, sum(returns#148)#164 AS returns#168, sum(profit#149)#165 AS profit#169]

(115) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#42, id#43, sum#170, isEmpty#171, sum#172, isEmpty#173, sum#174, isEmpty#175]

(116) HashAggregate [codegen id : 97]
Input [8]: [channel#42, id#43, sum#170, isEmpty#171, sum#172, isEmpty#173, sum#174, isEmpty#175]
Keys [2]: [channel#42, id#43]
Functions [3]: [sum(sales#44), sum(returns#45), sum(profit#46)]
Aggregate Attributes [3]: [sum(sales#44)#176, sum(returns#45)#177, sum(profit#46)#178]
Results [3]: [sum(sales#44)#176 AS sales#147, sum(returns#45)#177 AS returns#148, sum(profit#46)#178 AS profit#149]

(117) HashAggregate [codegen id : 97]
Input [3]: [sales#147, returns#148, profit#149]
Keys: []
Functions [3]: [partial_sum(sales#147), partial_sum(returns#148), partial_sum(profit#149)]
Aggregate Attributes [6]: [sum#179, isEmpty#180, sum#181, isEmpty#182, sum#183, isEmpty#184]
Results [6]: [sum#185, isEmpty#186, sum#187, isEmpty#188, sum#189, isEmpty#190]

(118) Exchange
Input [6]: [sum#185, isEmpty#186, sum#187, isEmpty#188, sum#189, isEmpty#190]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#191]

(119) HashAggregate [codegen id : 98]
Input [6]: [sum#185, isEmpty#186, sum#187, isEmpty#188, sum#189, isEmpty#190]
Keys: []
Functions [3]: [sum(sales#147), sum(returns#148), sum(profit#149)]
Aggregate Attributes [3]: [sum(sales#147)#192, sum(returns#148)#193, sum(profit#149)#194]
Results [5]: [null AS channel#195, null AS id#196, sum(sales#147)#192 AS sales#197, sum(returns#148)#193 AS returns#198, sum(profit#149)#194 AS profit#199]

(120) Union

(121) HashAggregate [codegen id : 99]
Input [5]: [channel#42, id#43, sales#135, returns#136, profit#137]
Keys [5]: [channel#42, id#43, sales#135, returns#136, profit#137]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#42, id#43, sales#135, returns#136, profit#137]

(122) Exchange
Input [5]: [channel#42, id#43, sales#135, returns#136, profit#137]
Arguments: hashpartitioning(channel#42, id#43, sales#135, returns#136, profit#137, 5), ENSURE_REQUIREMENTS, [id=#200]

(123) HashAggregate [codegen id : 100]
Input [5]: [channel#42, id#43, sales#135, returns#136, profit#137]
Keys [5]: [channel#42, id#43, sales#135, returns#136, profit#137]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#42, id#43, sales#135, returns#136, profit#137]

(124) TakeOrderedAndProject
Input [5]: [channel#42, id#43, sales#135, returns#136, profit#137]
Arguments: 100, [channel#42 ASC NULLS FIRST, id#43 ASC NULLS FIRST], [channel#42, id#43, sales#135, returns#136, profit#137]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
ReusedExchange (125)


(125) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#16]

Subquery:2 Hosting operator id = 44 Hosting Expression = cs_sold_date_sk#53 IN dynamicpruning#8

Subquery:3 Hosting operator id = 75 Hosting Expression = ws_sold_date_sk#89 IN dynamicpruning#8


