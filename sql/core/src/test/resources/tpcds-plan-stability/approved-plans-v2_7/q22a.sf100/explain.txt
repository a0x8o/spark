== Physical Plan ==
TakeOrderedAndProject (48)
+- Union (47)
   :- * HashAggregate (26)
   :  +- * HashAggregate (25)
   :     +- * HashAggregate (24)
   :        +- Exchange (23)
   :           +- * HashAggregate (22)
   :              +- * Project (21)
   :                 +- * SortMergeJoin Inner (20)
   :                    :- * Sort (14)
   :                    :  +- Exchange (13)
   :                    :     +- * Project (12)
   :                    :        +- * BroadcastHashJoin Inner BuildRight (11)
   :                    :           :- * Project (9)
   :                    :           :  +- * BroadcastHashJoin Inner BuildRight (8)
   :                    :           :     :- * Filter (3)
   :                    :           :     :  +- * ColumnarToRow (2)
   :                    :           :     :     +- Scan parquet default.inventory (1)
   :                    :           :     +- BroadcastExchange (7)
   :                    :           :        +- * Filter (6)
   :                    :           :           +- * ColumnarToRow (5)
   :                    :           :              +- Scan parquet default.warehouse (4)
   :                    :           +- ReusedExchange (10)
   :                    +- * Sort (19)
   :                       +- Exchange (18)
   :                          +- * Filter (17)
   :                             +- * ColumnarToRow (16)
   :                                +- Scan parquet default.item (15)
   :- * HashAggregate (31)
   :  +- Exchange (30)
   :     +- * HashAggregate (29)
   :        +- * HashAggregate (28)
   :           +- ReusedExchange (27)
   :- * HashAggregate (36)
   :  +- Exchange (35)
   :     +- * HashAggregate (34)
   :        +- * HashAggregate (33)
   :           +- ReusedExchange (32)
   :- * HashAggregate (41)
   :  +- Exchange (40)
   :     +- * HashAggregate (39)
   :        +- * HashAggregate (38)
   :           +- ReusedExchange (37)
   +- * HashAggregate (46)
      +- Exchange (45)
         +- * HashAggregate (44)
            +- * HashAggregate (43)
               +- ReusedExchange (42)


(1) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(4) Scan parquet default.warehouse
Output [1]: [w_warehouse_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [w_warehouse_sk#6]

(6) Filter [codegen id : 1]
Input [1]: [w_warehouse_sk#6]
Condition : isnotnull(w_warehouse_sk#6)

(7) BroadcastExchange
Input [1]: [w_warehouse_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#6]
Join condition: None

(9) Project [codegen id : 3]
Output [3]: [inv_item_sk#1, inv_quantity_on_hand#3, inv_date_sk#4]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_sk#6]

(10) ReusedExchange [Reuses operator id: 53]
Output [1]: [d_date_sk#7]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#7]
Join condition: None

(12) Project [codegen id : 3]
Output [2]: [inv_item_sk#1, inv_quantity_on_hand#3]
Input [4]: [inv_item_sk#1, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#7]

(13) Exchange
Input [2]: [inv_item_sk#1, inv_quantity_on_hand#3]
Arguments: hashpartitioning(inv_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(14) Sort [codegen id : 4]
Input [2]: [inv_item_sk#1, inv_quantity_on_hand#3]
Arguments: [inv_item_sk#1 ASC NULLS FIRST], false, 0

(15) Scan parquet default.item
Output [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(16) ColumnarToRow [codegen id : 5]
Input [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]

(17) Filter [codegen id : 5]
Input [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Condition : isnotnull(i_item_sk#8)

(18) Exchange
Input [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Arguments: hashpartitioning(i_item_sk#8, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(19) Sort [codegen id : 6]
Input [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Arguments: [i_item_sk#8 ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 7]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#8]
Join condition: None

(21) Project [codegen id : 7]
Output [5]: [inv_quantity_on_hand#3, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Input [7]: [inv_item_sk#1, inv_quantity_on_hand#3, i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]

(22) HashAggregate [codegen id : 7]
Input [5]: [inv_quantity_on_hand#3, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [sum#13, count#14]
Results [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]

(23) Exchange
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]
Arguments: hashpartitioning(i_product_name#12, i_brand#9, i_class#10, i_category#11, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) HashAggregate [codegen id : 8]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(inv_quantity_on_hand#3)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#3)#17]
Results [5]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, avg(inv_quantity_on_hand#3)#17 AS qoh#18]

(25) HashAggregate [codegen id : 8]
Input [5]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, qoh#18]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [partial_avg(qoh#18)]
Aggregate Attributes [2]: [sum#19, count#20]
Results [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#21, count#22]

(26) HashAggregate [codegen id : 8]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#21, count#22]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(qoh#18)]
Aggregate Attributes [1]: [avg(qoh#18)#23]
Results [5]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, avg(qoh#18)#23 AS qoh#24]

(27) ReusedExchange [Reuses operator id: 23]
Output [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]

(28) HashAggregate [codegen id : 16]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(inv_quantity_on_hand#3)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#3)#17]
Results [4]: [i_product_name#12, i_brand#9, i_class#10, avg(inv_quantity_on_hand#3)#17 AS qoh#18]

(29) HashAggregate [codegen id : 16]
Input [4]: [i_product_name#12, i_brand#9, i_class#10, qoh#18]
Keys [3]: [i_product_name#12, i_brand#9, i_class#10]
Functions [1]: [partial_avg(qoh#18)]
Aggregate Attributes [2]: [sum#25, count#26]
Results [5]: [i_product_name#12, i_brand#9, i_class#10, sum#27, count#28]

(30) Exchange
Input [5]: [i_product_name#12, i_brand#9, i_class#10, sum#27, count#28]
Arguments: hashpartitioning(i_product_name#12, i_brand#9, i_class#10, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(31) HashAggregate [codegen id : 17]
Input [5]: [i_product_name#12, i_brand#9, i_class#10, sum#27, count#28]
Keys [3]: [i_product_name#12, i_brand#9, i_class#10]
Functions [1]: [avg(qoh#18)]
Aggregate Attributes [1]: [avg(qoh#18)#29]
Results [5]: [i_product_name#12, i_brand#9, i_class#10, null AS i_category#30, avg(qoh#18)#29 AS qoh#31]

(32) ReusedExchange [Reuses operator id: 23]
Output [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]

(33) HashAggregate [codegen id : 25]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(inv_quantity_on_hand#3)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#3)#17]
Results [3]: [i_product_name#12, i_brand#9, avg(inv_quantity_on_hand#3)#17 AS qoh#18]

(34) HashAggregate [codegen id : 25]
Input [3]: [i_product_name#12, i_brand#9, qoh#18]
Keys [2]: [i_product_name#12, i_brand#9]
Functions [1]: [partial_avg(qoh#18)]
Aggregate Attributes [2]: [sum#32, count#33]
Results [4]: [i_product_name#12, i_brand#9, sum#34, count#35]

(35) Exchange
Input [4]: [i_product_name#12, i_brand#9, sum#34, count#35]
Arguments: hashpartitioning(i_product_name#12, i_brand#9, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) HashAggregate [codegen id : 26]
Input [4]: [i_product_name#12, i_brand#9, sum#34, count#35]
Keys [2]: [i_product_name#12, i_brand#9]
Functions [1]: [avg(qoh#18)]
Aggregate Attributes [1]: [avg(qoh#18)#36]
Results [5]: [i_product_name#12, i_brand#9, null AS i_class#37, null AS i_category#38, avg(qoh#18)#36 AS qoh#39]

(37) ReusedExchange [Reuses operator id: 23]
Output [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]

(38) HashAggregate [codegen id : 34]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(inv_quantity_on_hand#3)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#3)#17]
Results [2]: [i_product_name#12, avg(inv_quantity_on_hand#3)#17 AS qoh#18]

(39) HashAggregate [codegen id : 34]
Input [2]: [i_product_name#12, qoh#18]
Keys [1]: [i_product_name#12]
Functions [1]: [partial_avg(qoh#18)]
Aggregate Attributes [2]: [sum#40, count#41]
Results [3]: [i_product_name#12, sum#42, count#43]

(40) Exchange
Input [3]: [i_product_name#12, sum#42, count#43]
Arguments: hashpartitioning(i_product_name#12, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(41) HashAggregate [codegen id : 35]
Input [3]: [i_product_name#12, sum#42, count#43]
Keys [1]: [i_product_name#12]
Functions [1]: [avg(qoh#18)]
Aggregate Attributes [1]: [avg(qoh#18)#44]
Results [5]: [i_product_name#12, null AS i_brand#45, null AS i_class#46, null AS i_category#47, avg(qoh#18)#44 AS qoh#48]

(42) ReusedExchange [Reuses operator id: 23]
Output [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]

(43) HashAggregate [codegen id : 43]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#15, count#16]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(inv_quantity_on_hand#3)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#3)#17]
Results [1]: [avg(inv_quantity_on_hand#3)#17 AS qoh#18]

(44) HashAggregate [codegen id : 43]
Input [1]: [qoh#18]
Keys: []
Functions [1]: [partial_avg(qoh#18)]
Aggregate Attributes [2]: [sum#49, count#50]
Results [2]: [sum#51, count#52]

(45) Exchange
Input [2]: [sum#51, count#52]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(46) HashAggregate [codegen id : 44]
Input [2]: [sum#51, count#52]
Keys: []
Functions [1]: [avg(qoh#18)]
Aggregate Attributes [1]: [avg(qoh#18)#53]
Results [5]: [null AS i_product_name#54, null AS i_brand#55, null AS i_class#56, null AS i_category#57, avg(qoh#18)#53 AS qoh#58]

(47) Union

(48) TakeOrderedAndProject
Input [5]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, qoh#24]
Arguments: 100, [qoh#24 ASC NULLS FIRST, i_product_name#12 ASC NULLS FIRST, i_brand#9 ASC NULLS FIRST, i_class#10 ASC NULLS FIRST, i_category#11 ASC NULLS FIRST], [i_product_name#12, i_brand#9, i_class#10, i_category#11, qoh#24]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
BroadcastExchange (53)
+- * Project (52)
   +- * Filter (51)
      +- * ColumnarToRow (50)
         +- Scan parquet default.date_dim (49)


(49) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_month_seq#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(50) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#7, d_month_seq#59]

(51) Filter [codegen id : 1]
Input [2]: [d_date_sk#7, d_month_seq#59]
Condition : (((isnotnull(d_month_seq#59) AND (d_month_seq#59 >= 1212)) AND (d_month_seq#59 <= 1223)) AND isnotnull(d_date_sk#7))

(52) Project [codegen id : 1]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_month_seq#59]

(53) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]


