== Physical Plan ==
TakeOrderedAndProject (135)
+- * HashAggregate (134)
   +- Exchange (133)
      +- * HashAggregate (132)
         +- Union (131)
            :- * HashAggregate (110)
            :  +- Exchange (109)
            :     +- * HashAggregate (108)
            :        +- Union (107)
            :           :- * Filter (76)
            :           :  +- * HashAggregate (75)
            :           :     +- Exchange (74)
            :           :        +- * HashAggregate (73)
            :           :           +- * Project (72)
            :           :              +- * BroadcastHashJoin Inner BuildRight (71)
            :           :                 :- * Project (65)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (64)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
            :           :                 :     :  :- * Filter (3)
            :           :                 :     :  :  +- * ColumnarToRow (2)
            :           :                 :     :  :     +- Scan parquet default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (56)
            :           :                 :     :     +- * Project (55)
            :           :                 :     :        +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                 :     :           :- * Filter (6)
            :           :                 :     :           :  +- * ColumnarToRow (5)
            :           :                 :     :           :     +- Scan parquet default.item (4)
            :           :                 :     :           +- BroadcastExchange (53)
            :           :                 :     :              +- * HashAggregate (52)
            :           :                 :     :                 +- * HashAggregate (51)
            :           :                 :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (50)
            :           :                 :     :                       :- * HashAggregate (39)
            :           :                 :     :                       :  +- Exchange (38)
            :           :                 :     :                       :     +- * HashAggregate (37)
            :           :                 :     :                       :        +- * Project (36)
            :           :                 :     :                       :           +- * BroadcastHashJoin Inner BuildRight (35)
            :           :                 :     :                       :              :- * Project (33)
            :           :                 :     :                       :              :  +- * BroadcastHashJoin Inner BuildRight (32)
            :           :                 :     :                       :              :     :- * Filter (9)
            :           :                 :     :                       :              :     :  +- * ColumnarToRow (8)
            :           :                 :     :                       :              :     :     +- Scan parquet default.store_sales (7)
            :           :                 :     :                       :              :     +- BroadcastExchange (31)
            :           :                 :     :                       :              :        +- * BroadcastHashJoin LeftSemi BuildRight (30)
            :           :                 :     :                       :              :           :- * Filter (12)
            :           :                 :     :                       :              :           :  +- * ColumnarToRow (11)
            :           :                 :     :                       :              :           :     +- Scan parquet default.item (10)
            :           :                 :     :                       :              :           +- BroadcastExchange (29)
            :           :                 :     :                       :              :              +- * Project (28)
            :           :                 :     :                       :              :                 +- * BroadcastHashJoin Inner BuildRight (27)
            :           :                 :     :                       :              :                    :- * Project (21)
            :           :                 :     :                       :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
            :           :                 :     :                       :              :                    :     :- * Filter (15)
            :           :                 :     :                       :              :                    :     :  +- * ColumnarToRow (14)
            :           :                 :     :                       :              :                    :     :     +- Scan parquet default.catalog_sales (13)
            :           :                 :     :                       :              :                    :     +- BroadcastExchange (19)
            :           :                 :     :                       :              :                    :        +- * Filter (18)
            :           :                 :     :                       :              :                    :           +- * ColumnarToRow (17)
            :           :                 :     :                       :              :                    :              +- Scan parquet default.item (16)
            :           :                 :     :                       :              :                    +- BroadcastExchange (26)
            :           :                 :     :                       :              :                       +- * Project (25)
            :           :                 :     :                       :              :                          +- * Filter (24)
            :           :                 :     :                       :              :                             +- * ColumnarToRow (23)
            :           :                 :     :                       :              :                                +- Scan parquet default.date_dim (22)
            :           :                 :     :                       :              +- ReusedExchange (34)
            :           :                 :     :                       +- BroadcastExchange (49)
            :           :                 :     :                          +- * Project (48)
            :           :                 :     :                             +- * BroadcastHashJoin Inner BuildRight (47)
            :           :                 :     :                                :- * Project (45)
            :           :                 :     :                                :  +- * BroadcastHashJoin Inner BuildRight (44)
            :           :                 :     :                                :     :- * Filter (42)
            :           :                 :     :                                :     :  +- * ColumnarToRow (41)
            :           :                 :     :                                :     :     +- Scan parquet default.web_sales (40)
            :           :                 :     :                                :     +- ReusedExchange (43)
            :           :                 :     :                                +- ReusedExchange (46)
            :           :                 :     +- BroadcastExchange (63)
            :           :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (62)
            :           :                 :           :- * Filter (60)
            :           :                 :           :  +- * ColumnarToRow (59)
            :           :                 :           :     +- Scan parquet default.item (58)
            :           :                 :           +- ReusedExchange (61)
            :           :                 +- BroadcastExchange (70)
            :           :                    +- * Project (69)
            :           :                       +- * Filter (68)
            :           :                          +- * ColumnarToRow (67)
            :           :                             +- Scan parquet default.date_dim (66)
            :           :- * Filter (91)
            :           :  +- * HashAggregate (90)
            :           :     +- Exchange (89)
            :           :        +- * HashAggregate (88)
            :           :           +- * Project (87)
            :           :              +- * BroadcastHashJoin Inner BuildRight (86)
            :           :                 :- * Project (84)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (83)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (81)
            :           :                 :     :  :- * Filter (79)
            :           :                 :     :  :  +- * ColumnarToRow (78)
            :           :                 :     :  :     +- Scan parquet default.catalog_sales (77)
            :           :                 :     :  +- ReusedExchange (80)
            :           :                 :     +- ReusedExchange (82)
            :           :                 +- ReusedExchange (85)
            :           +- * Filter (106)
            :              +- * HashAggregate (105)
            :                 +- Exchange (104)
            :                    +- * HashAggregate (103)
            :                       +- * Project (102)
            :                          +- * BroadcastHashJoin Inner BuildRight (101)
            :                             :- * Project (99)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (98)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (96)
            :                             :     :  :- * Filter (94)
            :                             :     :  :  +- * ColumnarToRow (93)
            :                             :     :  :     +- Scan parquet default.web_sales (92)
            :                             :     :  +- ReusedExchange (95)
            :                             :     +- ReusedExchange (97)
            :                             +- ReusedExchange (100)
            :- * HashAggregate (115)
            :  +- Exchange (114)
            :     +- * HashAggregate (113)
            :        +- * HashAggregate (112)
            :           +- ReusedExchange (111)
            :- * HashAggregate (120)
            :  +- Exchange (119)
            :     +- * HashAggregate (118)
            :        +- * HashAggregate (117)
            :           +- ReusedExchange (116)
            :- * HashAggregate (125)
            :  +- Exchange (124)
            :     +- * HashAggregate (123)
            :        +- * HashAggregate (122)
            :           +- ReusedExchange (121)
            +- * HashAggregate (130)
               +- Exchange (129)
                  +- * HashAggregate (128)
                     +- * HashAggregate (127)
                        +- ReusedExchange (126)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet default.item
Output [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Condition : isnotnull(i_item_sk#19)

(19) BroadcastExchange
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#19]
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(22) Scan parquet default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(23) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#24, d_year#25]

(24) Filter [codegen id : 2]
Input [2]: [d_date_sk#24, d_year#25]
Condition : (((isnotnull(d_year#25) AND (d_year#25 >= 1999)) AND (d_year#25 <= 2001)) AND isnotnull(d_date_sk#24))

(25) Project [codegen id : 2]
Output [1]: [d_date_sk#24]
Input [2]: [d_date_sk#24, d_year#25]

(26) BroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(27) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join condition: None

(28) Project [codegen id : 3]
Output [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Input [5]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22, d_date_sk#24]

(29) BroadcastExchange
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#20, 0), isnull(i_brand_id#20), coalesce(i_class_id#21, 0), isnull(i_class_id#21), coalesce(i_category_id#22, 0), isnull(i_category_id#22)]
Join condition: None

(31) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join condition: None

(33) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(34) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#29]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#29]
Join condition: None

(36) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#30, i_class_id#15 AS class_id#31, i_category_id#16 AS category_id#32]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#29]

(37) HashAggregate [codegen id : 6]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(38) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(39) HashAggregate [codegen id : 10]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(40) Scan parquet default.web_sales
Output [2]: [ws_item_sk#34, ws_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#35), dynamicpruningexpression(ws_sold_date_sk#35 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(41) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#34, ws_sold_date_sk#35]

(42) Filter [codegen id : 9]
Input [2]: [ws_item_sk#34, ws_sold_date_sk#35]
Condition : isnotnull(ws_item_sk#34)

(43) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(44) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#34]
Right keys [1]: [i_item_sk#36]
Join condition: None

(45) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#35, i_brand_id#37, i_class_id#38, i_category_id#39]
Input [6]: [ws_item_sk#34, ws_sold_date_sk#35, i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(46) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#40]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#35]
Right keys [1]: [d_date_sk#40]
Join condition: None

(48) Project [codegen id : 9]
Output [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Input [5]: [ws_sold_date_sk#35, i_brand_id#37, i_class_id#38, i_category_id#39, d_date_sk#40]

(49) BroadcastExchange
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#41]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#37, 0), isnull(i_brand_id#37), coalesce(i_class_id#38, 0), isnull(i_class_id#38), coalesce(i_category_id#39, 0), isnull(i_category_id#39)]
Join condition: None

(51) HashAggregate [codegen id : 10]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(52) HashAggregate [codegen id : 10]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(53) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#42]

(54) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(55) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#43]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#30, class_id#31, category_id#32]

(56) BroadcastExchange
Input [1]: [ss_item_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#44]

(57) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(58) Scan parquet default.item
Output [4]: [i_item_sk#45, i_brand_id#46, i_class_id#47, i_category_id#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(59) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#45, i_brand_id#46, i_class_id#47, i_category_id#48]

(60) Filter [codegen id : 23]
Input [4]: [i_item_sk#45, i_brand_id#46, i_class_id#47, i_category_id#48]
Condition : isnotnull(i_item_sk#45)

(61) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#43]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#45]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(63) BroadcastExchange
Input [4]: [i_item_sk#45, i_brand_id#46, i_class_id#47, i_category_id#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#49]

(64) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#45]
Join condition: None

(65) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#46, i_class_id#47, i_category_id#48]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#45, i_brand_id#46, i_class_id#47, i_category_id#48]

(66) Scan parquet default.date_dim
Output [3]: [d_date_sk#50, d_year#51, d_moy#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(67) ColumnarToRow [codegen id : 24]
Input [3]: [d_date_sk#50, d_year#51, d_moy#52]

(68) Filter [codegen id : 24]
Input [3]: [d_date_sk#50, d_year#51, d_moy#52]
Condition : ((((isnotnull(d_year#51) AND isnotnull(d_moy#52)) AND (d_year#51 = 2000)) AND (d_moy#52 = 11)) AND isnotnull(d_date_sk#50))

(69) Project [codegen id : 24]
Output [1]: [d_date_sk#50]
Input [3]: [d_date_sk#50, d_year#51, d_moy#52]

(70) BroadcastExchange
Input [1]: [d_date_sk#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#53]

(71) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#50]
Join condition: None

(72) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#46, i_class_id#47, i_category_id#48]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#46, i_class_id#47, i_category_id#48, d_date_sk#50]

(73) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#46, i_class_id#47, i_category_id#48]
Keys [3]: [i_brand_id#46, i_class_id#47, i_category_id#48]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#54, isEmpty#55, count#56]
Results [6]: [i_brand_id#46, i_class_id#47, i_category_id#48, sum#57, isEmpty#58, count#59]

(74) Exchange
Input [6]: [i_brand_id#46, i_class_id#47, i_category_id#48, sum#57, isEmpty#58, count#59]
Arguments: hashpartitioning(i_brand_id#46, i_class_id#47, i_category_id#48, 5), ENSURE_REQUIREMENTS, [id=#60]

(75) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#46, i_class_id#47, i_category_id#48, sum#57, isEmpty#58, count#59]
Keys [3]: [i_brand_id#46, i_class_id#47, i_category_id#48]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61, count(1)#62]
Results [6]: [store AS channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sales#64, count(1)#62 AS number_sales#65]

(76) Filter [codegen id : 26]
Input [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sales#64, number_sales#65]
Condition : (isnotnull(sales#64) AND (cast(sales#64 as decimal(32,6)) > cast(Subquery scalar-subquery#66, [id=#67] as decimal(32,6))))

(77) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#71), dynamicpruningexpression(cs_sold_date_sk#71 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(78) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71]

(79) Filter [codegen id : 51]
Input [4]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71]
Condition : isnotnull(cs_item_sk#68)

(80) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#43]

(81) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#68]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(82) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#72, i_brand_id#73, i_class_id#74, i_category_id#75]

(83) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#68]
Right keys [1]: [i_item_sk#72]
Join condition: None

(84) Project [codegen id : 51]
Output [6]: [cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71, i_brand_id#73, i_class_id#74, i_category_id#75]
Input [8]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71, i_item_sk#72, i_brand_id#73, i_class_id#74, i_category_id#75]

(85) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#76]

(86) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#71]
Right keys [1]: [d_date_sk#76]
Join condition: None

(87) Project [codegen id : 51]
Output [5]: [cs_quantity#69, cs_list_price#70, i_brand_id#73, i_class_id#74, i_category_id#75]
Input [7]: [cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71, i_brand_id#73, i_class_id#74, i_category_id#75, d_date_sk#76]

(88) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#69, cs_list_price#70, i_brand_id#73, i_class_id#74, i_category_id#75]
Keys [3]: [i_brand_id#73, i_class_id#74, i_category_id#75]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#70 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#77, isEmpty#78, count#79]
Results [6]: [i_brand_id#73, i_class_id#74, i_category_id#75, sum#80, isEmpty#81, count#82]

(89) Exchange
Input [6]: [i_brand_id#73, i_class_id#74, i_category_id#75, sum#80, isEmpty#81, count#82]
Arguments: hashpartitioning(i_brand_id#73, i_class_id#74, i_category_id#75, 5), ENSURE_REQUIREMENTS, [id=#83]

(90) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#73, i_class_id#74, i_category_id#75, sum#80, isEmpty#81, count#82]
Keys [3]: [i_brand_id#73, i_class_id#74, i_category_id#75]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#70 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#84, count(1)#85]
Results [6]: [catalog AS channel#86, i_brand_id#73, i_class_id#74, i_category_id#75, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#84 AS sales#87, count(1)#85 AS number_sales#88]

(91) Filter [codegen id : 52]
Input [6]: [channel#86, i_brand_id#73, i_class_id#74, i_category_id#75, sales#87, number_sales#88]
Condition : (isnotnull(sales#87) AND (cast(sales#87 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#66, [id=#67] as decimal(32,6))))

(92) Scan parquet default.web_sales
Output [4]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#92), dynamicpruningexpression(ws_sold_date_sk#92 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(93) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92]

(94) Filter [codegen id : 77]
Input [4]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92]
Condition : isnotnull(ws_item_sk#89)

(95) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#43]

(96) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#89]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(97) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#93, i_brand_id#94, i_class_id#95, i_category_id#96]

(98) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#89]
Right keys [1]: [i_item_sk#93]
Join condition: None

(99) Project [codegen id : 77]
Output [6]: [ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92, i_brand_id#94, i_class_id#95, i_category_id#96]
Input [8]: [ws_item_sk#89, ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92, i_item_sk#93, i_brand_id#94, i_class_id#95, i_category_id#96]

(100) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#97]

(101) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#92]
Right keys [1]: [d_date_sk#97]
Join condition: None

(102) Project [codegen id : 77]
Output [5]: [ws_quantity#90, ws_list_price#91, i_brand_id#94, i_class_id#95, i_category_id#96]
Input [7]: [ws_quantity#90, ws_list_price#91, ws_sold_date_sk#92, i_brand_id#94, i_class_id#95, i_category_id#96, d_date_sk#97]

(103) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#90, ws_list_price#91, i_brand_id#94, i_class_id#95, i_category_id#96]
Keys [3]: [i_brand_id#94, i_class_id#95, i_category_id#96]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#90 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#91 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#98, isEmpty#99, count#100]
Results [6]: [i_brand_id#94, i_class_id#95, i_category_id#96, sum#101, isEmpty#102, count#103]

(104) Exchange
Input [6]: [i_brand_id#94, i_class_id#95, i_category_id#96, sum#101, isEmpty#102, count#103]
Arguments: hashpartitioning(i_brand_id#94, i_class_id#95, i_category_id#96, 5), ENSURE_REQUIREMENTS, [id=#104]

(105) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#94, i_class_id#95, i_category_id#96, sum#101, isEmpty#102, count#103]
Keys [3]: [i_brand_id#94, i_class_id#95, i_category_id#96]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#90 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#91 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#90 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#91 as decimal(12,2)))), DecimalType(18,2), true))#105, count(1)#106]
Results [6]: [web AS channel#107, i_brand_id#94, i_class_id#95, i_category_id#96, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#90 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#91 as decimal(12,2)))), DecimalType(18,2), true))#105 AS sales#108, count(1)#106 AS number_sales#109]

(106) Filter [codegen id : 78]
Input [6]: [channel#107, i_brand_id#94, i_class_id#95, i_category_id#96, sales#108, number_sales#109]
Condition : (isnotnull(sales#108) AND (cast(sales#108 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#66, [id=#67] as decimal(32,6))))

(107) Union

(108) HashAggregate [codegen id : 79]
Input [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sales#64, number_sales#65]
Keys [4]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48]
Functions [2]: [partial_sum(sales#64), partial_sum(number_sales#65)]
Aggregate Attributes [3]: [sum#110, isEmpty#111, sum#112]
Results [7]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum#113, isEmpty#114, sum#115]

(109) Exchange
Input [7]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum#113, isEmpty#114, sum#115]
Arguments: hashpartitioning(channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, 5), ENSURE_REQUIREMENTS, [id=#116]

(110) HashAggregate [codegen id : 80]
Input [7]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum#113, isEmpty#114, sum#115]
Keys [4]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48]
Functions [2]: [sum(sales#64), sum(number_sales#65)]
Aggregate Attributes [2]: [sum(sales#64)#117, sum(number_sales#65)#118]
Results [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum(sales#64)#117 AS sum_sales#119, sum(number_sales#65)#118 AS number_sales#120]

(111) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#63, i_brand_id#121, i_class_id#122, i_category_id#123, sum#124, isEmpty#125, sum#126]

(112) HashAggregate [codegen id : 160]
Input [7]: [channel#63, i_brand_id#121, i_class_id#122, i_category_id#123, sum#124, isEmpty#125, sum#126]
Keys [4]: [channel#63, i_brand_id#121, i_class_id#122, i_category_id#123]
Functions [2]: [sum(sales#64), sum(number_sales#65)]
Aggregate Attributes [2]: [sum(sales#64)#127, sum(number_sales#65)#128]
Results [5]: [channel#63, i_brand_id#121, i_class_id#122, sum(sales#64)#127 AS sum_sales#119, sum(number_sales#65)#128 AS number_sales#120]

(113) HashAggregate [codegen id : 160]
Input [5]: [channel#63, i_brand_id#121, i_class_id#122, sum_sales#119, number_sales#120]
Keys [3]: [channel#63, i_brand_id#121, i_class_id#122]
Functions [2]: [partial_sum(sum_sales#119), partial_sum(number_sales#120)]
Aggregate Attributes [3]: [sum#129, isEmpty#130, sum#131]
Results [6]: [channel#63, i_brand_id#121, i_class_id#122, sum#132, isEmpty#133, sum#134]

(114) Exchange
Input [6]: [channel#63, i_brand_id#121, i_class_id#122, sum#132, isEmpty#133, sum#134]
Arguments: hashpartitioning(channel#63, i_brand_id#121, i_class_id#122, 5), ENSURE_REQUIREMENTS, [id=#135]

(115) HashAggregate [codegen id : 161]
Input [6]: [channel#63, i_brand_id#121, i_class_id#122, sum#132, isEmpty#133, sum#134]
Keys [3]: [channel#63, i_brand_id#121, i_class_id#122]
Functions [2]: [sum(sum_sales#119), sum(number_sales#120)]
Aggregate Attributes [2]: [sum(sum_sales#119)#136, sum(number_sales#120)#137]
Results [6]: [channel#63, i_brand_id#121, i_class_id#122, null AS i_category_id#138, sum(sum_sales#119)#136 AS sum(sum_sales)#139, sum(number_sales#120)#137 AS sum(number_sales)#140]

(116) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#63, i_brand_id#141, i_class_id#142, i_category_id#143, sum#144, isEmpty#145, sum#146]

(117) HashAggregate [codegen id : 241]
Input [7]: [channel#63, i_brand_id#141, i_class_id#142, i_category_id#143, sum#144, isEmpty#145, sum#146]
Keys [4]: [channel#63, i_brand_id#141, i_class_id#142, i_category_id#143]
Functions [2]: [sum(sales#64), sum(number_sales#65)]
Aggregate Attributes [2]: [sum(sales#64)#147, sum(number_sales#65)#148]
Results [4]: [channel#63, i_brand_id#141, sum(sales#64)#147 AS sum_sales#119, sum(number_sales#65)#148 AS number_sales#120]

(118) HashAggregate [codegen id : 241]
Input [4]: [channel#63, i_brand_id#141, sum_sales#119, number_sales#120]
Keys [2]: [channel#63, i_brand_id#141]
Functions [2]: [partial_sum(sum_sales#119), partial_sum(number_sales#120)]
Aggregate Attributes [3]: [sum#149, isEmpty#150, sum#151]
Results [5]: [channel#63, i_brand_id#141, sum#152, isEmpty#153, sum#154]

(119) Exchange
Input [5]: [channel#63, i_brand_id#141, sum#152, isEmpty#153, sum#154]
Arguments: hashpartitioning(channel#63, i_brand_id#141, 5), ENSURE_REQUIREMENTS, [id=#155]

(120) HashAggregate [codegen id : 242]
Input [5]: [channel#63, i_brand_id#141, sum#152, isEmpty#153, sum#154]
Keys [2]: [channel#63, i_brand_id#141]
Functions [2]: [sum(sum_sales#119), sum(number_sales#120)]
Aggregate Attributes [2]: [sum(sum_sales#119)#156, sum(number_sales#120)#157]
Results [6]: [channel#63, i_brand_id#141, null AS i_class_id#158, null AS i_category_id#159, sum(sum_sales#119)#156 AS sum(sum_sales)#160, sum(number_sales#120)#157 AS sum(number_sales)#161]

(121) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#63, i_brand_id#162, i_class_id#163, i_category_id#164, sum#165, isEmpty#166, sum#167]

(122) HashAggregate [codegen id : 322]
Input [7]: [channel#63, i_brand_id#162, i_class_id#163, i_category_id#164, sum#165, isEmpty#166, sum#167]
Keys [4]: [channel#63, i_brand_id#162, i_class_id#163, i_category_id#164]
Functions [2]: [sum(sales#64), sum(number_sales#65)]
Aggregate Attributes [2]: [sum(sales#64)#168, sum(number_sales#65)#169]
Results [3]: [channel#63, sum(sales#64)#168 AS sum_sales#119, sum(number_sales#65)#169 AS number_sales#120]

(123) HashAggregate [codegen id : 322]
Input [3]: [channel#63, sum_sales#119, number_sales#120]
Keys [1]: [channel#63]
Functions [2]: [partial_sum(sum_sales#119), partial_sum(number_sales#120)]
Aggregate Attributes [3]: [sum#170, isEmpty#171, sum#172]
Results [4]: [channel#63, sum#173, isEmpty#174, sum#175]

(124) Exchange
Input [4]: [channel#63, sum#173, isEmpty#174, sum#175]
Arguments: hashpartitioning(channel#63, 5), ENSURE_REQUIREMENTS, [id=#176]

(125) HashAggregate [codegen id : 323]
Input [4]: [channel#63, sum#173, isEmpty#174, sum#175]
Keys [1]: [channel#63]
Functions [2]: [sum(sum_sales#119), sum(number_sales#120)]
Aggregate Attributes [2]: [sum(sum_sales#119)#177, sum(number_sales#120)#178]
Results [6]: [channel#63, null AS i_brand_id#179, null AS i_class_id#180, null AS i_category_id#181, sum(sum_sales#119)#177 AS sum(sum_sales)#182, sum(number_sales#120)#178 AS sum(number_sales)#183]

(126) ReusedExchange [Reuses operator id: unknown]
Output [7]: [channel#63, i_brand_id#184, i_class_id#185, i_category_id#186, sum#187, isEmpty#188, sum#189]

(127) HashAggregate [codegen id : 403]
Input [7]: [channel#63, i_brand_id#184, i_class_id#185, i_category_id#186, sum#187, isEmpty#188, sum#189]
Keys [4]: [channel#63, i_brand_id#184, i_class_id#185, i_category_id#186]
Functions [2]: [sum(sales#64), sum(number_sales#65)]
Aggregate Attributes [2]: [sum(sales#64)#190, sum(number_sales#65)#191]
Results [2]: [sum(sales#64)#190 AS sum_sales#119, sum(number_sales#65)#191 AS number_sales#120]

(128) HashAggregate [codegen id : 403]
Input [2]: [sum_sales#119, number_sales#120]
Keys: []
Functions [2]: [partial_sum(sum_sales#119), partial_sum(number_sales#120)]
Aggregate Attributes [3]: [sum#192, isEmpty#193, sum#194]
Results [3]: [sum#195, isEmpty#196, sum#197]

(129) Exchange
Input [3]: [sum#195, isEmpty#196, sum#197]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#198]

(130) HashAggregate [codegen id : 404]
Input [3]: [sum#195, isEmpty#196, sum#197]
Keys: []
Functions [2]: [sum(sum_sales#119), sum(number_sales#120)]
Aggregate Attributes [2]: [sum(sum_sales#119)#199, sum(number_sales#120)#200]
Results [6]: [null AS channel#201, null AS i_brand_id#202, null AS i_class_id#203, null AS i_category_id#204, sum(sum_sales#119)#199 AS sum(sum_sales)#205, sum(number_sales#120)#200 AS sum(number_sales)#206]

(131) Union

(132) HashAggregate [codegen id : 405]
Input [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum_sales#119, number_sales#120]
Keys [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum_sales#119, number_sales#120]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum_sales#119, number_sales#120]

(133) Exchange
Input [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum_sales#119, number_sales#120]
Arguments: hashpartitioning(channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum_sales#119, number_sales#120, 5), ENSURE_REQUIREMENTS, [id=#207]

(134) HashAggregate [codegen id : 406]
Input [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum_sales#119, number_sales#120]
Keys [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum_sales#119, number_sales#120]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum_sales#119, number_sales#120]

(135) TakeOrderedAndProject
Input [6]: [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum_sales#119, number_sales#120]
Arguments: 100, [channel#63 ASC NULLS FIRST, i_brand_id#46 ASC NULLS FIRST, i_class_id#47 ASC NULLS FIRST, i_category_id#48 ASC NULLS FIRST], [channel#63, i_brand_id#46, i_class_id#47, i_category_id#48, sum_sales#119, number_sales#120]

===== Subqueries =====

Subquery:1 Hosting operator id = 76 Hosting Expression = Subquery scalar-subquery#66, [id=#67]
* HashAggregate (162)
+- Exchange (161)
   +- * HashAggregate (160)
      +- Union (159)
         :- * Project (144)
         :  +- * BroadcastHashJoin Inner BuildRight (143)
         :     :- * ColumnarToRow (137)
         :     :  +- Scan parquet default.store_sales (136)
         :     +- BroadcastExchange (142)
         :        +- * Project (141)
         :           +- * Filter (140)
         :              +- * ColumnarToRow (139)
         :                 +- Scan parquet default.date_dim (138)
         :- * Project (153)
         :  +- * BroadcastHashJoin Inner BuildRight (152)
         :     :- * ColumnarToRow (146)
         :     :  +- Scan parquet default.catalog_sales (145)
         :     +- BroadcastExchange (151)
         :        +- * Project (150)
         :           +- * Filter (149)
         :              +- * ColumnarToRow (148)
         :                 +- Scan parquet default.date_dim (147)
         +- * Project (158)
            +- * BroadcastHashJoin Inner BuildRight (157)
               :- * ColumnarToRow (155)
               :  +- Scan parquet default.web_sales (154)
               +- ReusedExchange (156)


(136) Scan parquet default.store_sales
Output [3]: [ss_quantity#208, ss_list_price#209, ss_sold_date_sk#210]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#210), dynamicpruningexpression(ss_sold_date_sk#210 IN dynamicpruning#211)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(137) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#208, ss_list_price#209, ss_sold_date_sk#210]

(138) Scan parquet default.date_dim
Output [2]: [d_date_sk#212, d_year#213]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(139) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#212, d_year#213]

(140) Filter [codegen id : 1]
Input [2]: [d_date_sk#212, d_year#213]
Condition : (((isnotnull(d_year#213) AND (d_year#213 >= 1999)) AND (d_year#213 <= 2001)) AND isnotnull(d_date_sk#212))

(141) Project [codegen id : 1]
Output [1]: [d_date_sk#212]
Input [2]: [d_date_sk#212, d_year#213]

(142) BroadcastExchange
Input [1]: [d_date_sk#212]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#214]

(143) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#210]
Right keys [1]: [d_date_sk#212]
Join condition: None

(144) Project [codegen id : 2]
Output [2]: [ss_quantity#208 AS quantity#215, ss_list_price#209 AS list_price#216]
Input [4]: [ss_quantity#208, ss_list_price#209, ss_sold_date_sk#210, d_date_sk#212]

(145) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#217, cs_list_price#218, cs_sold_date_sk#219]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#219), dynamicpruningexpression(cs_sold_date_sk#219 IN dynamicpruning#220)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(146) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#217, cs_list_price#218, cs_sold_date_sk#219]

(147) Scan parquet default.date_dim
Output [2]: [d_date_sk#221, d_year#222]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(148) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#221, d_year#222]

(149) Filter [codegen id : 3]
Input [2]: [d_date_sk#221, d_year#222]
Condition : (((isnotnull(d_year#222) AND (d_year#222 >= 1998)) AND (d_year#222 <= 2000)) AND isnotnull(d_date_sk#221))

(150) Project [codegen id : 3]
Output [1]: [d_date_sk#221]
Input [2]: [d_date_sk#221, d_year#222]

(151) BroadcastExchange
Input [1]: [d_date_sk#221]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#223]

(152) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#219]
Right keys [1]: [d_date_sk#221]
Join condition: None

(153) Project [codegen id : 4]
Output [2]: [cs_quantity#217 AS quantity#224, cs_list_price#218 AS list_price#225]
Input [4]: [cs_quantity#217, cs_list_price#218, cs_sold_date_sk#219, d_date_sk#221]

(154) Scan parquet default.web_sales
Output [3]: [ws_quantity#226, ws_list_price#227, ws_sold_date_sk#228]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#228), dynamicpruningexpression(ws_sold_date_sk#228 IN dynamicpruning#220)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(155) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#226, ws_list_price#227, ws_sold_date_sk#228]

(156) ReusedExchange [Reuses operator id: 151]
Output [1]: [d_date_sk#229]

(157) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#228]
Right keys [1]: [d_date_sk#229]
Join condition: None

(158) Project [codegen id : 6]
Output [2]: [ws_quantity#226 AS quantity#230, ws_list_price#227 AS list_price#231]
Input [4]: [ws_quantity#226, ws_list_price#227, ws_sold_date_sk#228, d_date_sk#229]

(159) Union

(160) HashAggregate [codegen id : 7]
Input [2]: [quantity#215, list_price#216]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#215 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#216 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#232, count#233]
Results [2]: [sum#234, count#235]

(161) Exchange
Input [2]: [sum#234, count#235]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#236]

(162) HashAggregate [codegen id : 8]
Input [2]: [sum#234, count#235]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#215 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#216 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#215 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#216 as decimal(12,2)))), DecimalType(18,2), true))#237]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#215 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#216 as decimal(12,2)))), DecimalType(18,2), true))#237 AS average_sales#238]

Subquery:2 Hosting operator id = 136 Hosting Expression = ss_sold_date_sk#210 IN dynamicpruning#211
ReusedExchange (163)


(163) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#212]

Subquery:3 Hosting operator id = 145 Hosting Expression = cs_sold_date_sk#219 IN dynamicpruning#220
ReusedExchange (164)


(164) ReusedExchange [Reuses operator id: 151]
Output [1]: [d_date_sk#221]

Subquery:4 Hosting operator id = 154 Hosting Expression = ws_sold_date_sk#228 IN dynamicpruning#220

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (165)


(165) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#50]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
ReusedExchange (166)


(166) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#29]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 40 Hosting Expression = ws_sold_date_sk#35 IN dynamicpruning#12

Subquery:9 Hosting operator id = 91 Hosting Expression = ReusedSubquery Subquery scalar-subquery#66, [id=#67]

Subquery:10 Hosting operator id = 77 Hosting Expression = cs_sold_date_sk#71 IN dynamicpruning#5

Subquery:11 Hosting operator id = 106 Hosting Expression = ReusedSubquery Subquery scalar-subquery#66, [id=#67]

Subquery:12 Hosting operator id = 92 Hosting Expression = ws_sold_date_sk#92 IN dynamicpruning#5


