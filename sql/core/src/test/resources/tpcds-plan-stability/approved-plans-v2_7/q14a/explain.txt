== Physical Plan ==
TakeOrderedAndProject (194)
+- * HashAggregate (193)
   +- Exchange (192)
      +- * HashAggregate (191)
         +- Union (190)
            :- * HashAggregate (113)
            :  +- Exchange (112)
            :     +- * HashAggregate (111)
            :        +- Union (110)
            :           :- * Project (77)
            :           :  +- * Filter (76)
            :           :     +- * HashAggregate (75)
            :           :        +- Exchange (74)
            :           :           +- * HashAggregate (73)
            :           :              +- * Project (72)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (71)
            :           :                    :- * Project (65)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (64)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
            :           :                    :     :  :- * Filter (3)
            :           :                    :     :  :  +- * ColumnarToRow (2)
            :           :                    :     :  :     +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- BroadcastExchange (56)
            :           :                    :     :     +- * Project (55)
            :           :                    :     :        +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                    :     :           :- * Filter (6)
            :           :                    :     :           :  +- * ColumnarToRow (5)
            :           :                    :     :           :     +- Scan parquet default.item (4)
            :           :                    :     :           +- BroadcastExchange (53)
            :           :                    :     :              +- * HashAggregate (52)
            :           :                    :     :                 +- * HashAggregate (51)
            :           :                    :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (50)
            :           :                    :     :                       :- * HashAggregate (39)
            :           :                    :     :                       :  +- Exchange (38)
            :           :                    :     :                       :     +- * HashAggregate (37)
            :           :                    :     :                       :        +- * BroadcastHashJoin LeftSemi BuildRight (36)
            :           :                    :     :                       :           :- * Project (22)
            :           :                    :     :                       :           :  +- * BroadcastHashJoin Inner BuildRight (21)
            :           :                    :     :                       :           :     :- * Project (15)
            :           :                    :     :                       :           :     :  +- * BroadcastHashJoin Inner BuildRight (14)
            :           :                    :     :                       :           :     :     :- * Filter (9)
            :           :                    :     :                       :           :     :     :  +- * ColumnarToRow (8)
            :           :                    :     :                       :           :     :     :     +- Scan parquet default.store_sales (7)
            :           :                    :     :                       :           :     :     +- BroadcastExchange (13)
            :           :                    :     :                       :           :     :        +- * Filter (12)
            :           :                    :     :                       :           :     :           +- * ColumnarToRow (11)
            :           :                    :     :                       :           :     :              +- Scan parquet default.item (10)
            :           :                    :     :                       :           :     +- BroadcastExchange (20)
            :           :                    :     :                       :           :        +- * Project (19)
            :           :                    :     :                       :           :           +- * Filter (18)
            :           :                    :     :                       :           :              +- * ColumnarToRow (17)
            :           :                    :     :                       :           :                 +- Scan parquet default.date_dim (16)
            :           :                    :     :                       :           +- BroadcastExchange (35)
            :           :                    :     :                       :              +- * Project (34)
            :           :                    :     :                       :                 +- * BroadcastHashJoin Inner BuildRight (33)
            :           :                    :     :                       :                    :- * Project (31)
            :           :                    :     :                       :                    :  +- * BroadcastHashJoin Inner BuildRight (30)
            :           :                    :     :                       :                    :     :- * Filter (25)
            :           :                    :     :                       :                    :     :  +- * ColumnarToRow (24)
            :           :                    :     :                       :                    :     :     +- Scan parquet default.catalog_sales (23)
            :           :                    :     :                       :                    :     +- BroadcastExchange (29)
            :           :                    :     :                       :                    :        +- * Filter (28)
            :           :                    :     :                       :                    :           +- * ColumnarToRow (27)
            :           :                    :     :                       :                    :              +- Scan parquet default.item (26)
            :           :                    :     :                       :                    +- ReusedExchange (32)
            :           :                    :     :                       +- BroadcastExchange (49)
            :           :                    :     :                          +- * Project (48)
            :           :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (47)
            :           :                    :     :                                :- * Project (45)
            :           :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (44)
            :           :                    :     :                                :     :- * Filter (42)
            :           :                    :     :                                :     :  +- * ColumnarToRow (41)
            :           :                    :     :                                :     :     +- Scan parquet default.web_sales (40)
            :           :                    :     :                                :     +- ReusedExchange (43)
            :           :                    :     :                                +- ReusedExchange (46)
            :           :                    :     +- BroadcastExchange (63)
            :           :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (62)
            :           :                    :           :- * Filter (60)
            :           :                    :           :  +- * ColumnarToRow (59)
            :           :                    :           :     +- Scan parquet default.item (58)
            :           :                    :           +- ReusedExchange (61)
            :           :                    +- BroadcastExchange (70)
            :           :                       +- * Project (69)
            :           :                          +- * Filter (68)
            :           :                             +- * ColumnarToRow (67)
            :           :                                +- Scan parquet default.date_dim (66)
            :           :- * Project (93)
            :           :  +- * Filter (92)
            :           :     +- * HashAggregate (91)
            :           :        +- Exchange (90)
            :           :           +- * HashAggregate (89)
            :           :              +- * Project (88)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (87)
            :           :                    :- * Project (85)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (84)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (82)
            :           :                    :     :  :- * Filter (80)
            :           :                    :     :  :  +- * ColumnarToRow (79)
            :           :                    :     :  :     +- Scan parquet default.catalog_sales (78)
            :           :                    :     :  +- ReusedExchange (81)
            :           :                    :     +- ReusedExchange (83)
            :           :                    +- ReusedExchange (86)
            :           +- * Project (109)
            :              +- * Filter (108)
            :                 +- * HashAggregate (107)
            :                    +- Exchange (106)
            :                       +- * HashAggregate (105)
            :                          +- * Project (104)
            :                             +- * BroadcastHashJoin Inner BuildRight (103)
            :                                :- * Project (101)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (100)
            :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (98)
            :                                :     :  :- * Filter (96)
            :                                :     :  :  +- * ColumnarToRow (95)
            :                                :     :  :     +- Scan parquet default.web_sales (94)
            :                                :     :  +- ReusedExchange (97)
            :                                :     +- ReusedExchange (99)
            :                                +- ReusedExchange (102)
            :- * HashAggregate (132)
            :  +- Exchange (131)
            :     +- * HashAggregate (130)
            :        +- * HashAggregate (129)
            :           +- Exchange (128)
            :              +- * HashAggregate (127)
            :                 +- Union (126)
            :                    :- * Project (117)
            :                    :  +- * Filter (116)
            :                    :     +- * HashAggregate (115)
            :                    :        +- ReusedExchange (114)
            :                    :- * Project (121)
            :                    :  +- * Filter (120)
            :                    :     +- * HashAggregate (119)
            :                    :        +- ReusedExchange (118)
            :                    +- * Project (125)
            :                       +- * Filter (124)
            :                          +- * HashAggregate (123)
            :                             +- ReusedExchange (122)
            :- * HashAggregate (151)
            :  +- Exchange (150)
            :     +- * HashAggregate (149)
            :        +- * HashAggregate (148)
            :           +- Exchange (147)
            :              +- * HashAggregate (146)
            :                 +- Union (145)
            :                    :- * Project (136)
            :                    :  +- * Filter (135)
            :                    :     +- * HashAggregate (134)
            :                    :        +- ReusedExchange (133)
            :                    :- * Project (140)
            :                    :  +- * Filter (139)
            :                    :     +- * HashAggregate (138)
            :                    :        +- ReusedExchange (137)
            :                    +- * Project (144)
            :                       +- * Filter (143)
            :                          +- * HashAggregate (142)
            :                             +- ReusedExchange (141)
            :- * HashAggregate (170)
            :  +- Exchange (169)
            :     +- * HashAggregate (168)
            :        +- * HashAggregate (167)
            :           +- Exchange (166)
            :              +- * HashAggregate (165)
            :                 +- Union (164)
            :                    :- * Project (155)
            :                    :  +- * Filter (154)
            :                    :     +- * HashAggregate (153)
            :                    :        +- ReusedExchange (152)
            :                    :- * Project (159)
            :                    :  +- * Filter (158)
            :                    :     +- * HashAggregate (157)
            :                    :        +- ReusedExchange (156)
            :                    +- * Project (163)
            :                       +- * Filter (162)
            :                          +- * HashAggregate (161)
            :                             +- ReusedExchange (160)
            +- * HashAggregate (189)
               +- Exchange (188)
                  +- * HashAggregate (187)
                     +- * HashAggregate (186)
                        +- Exchange (185)
                           +- * HashAggregate (184)
                              +- Union (183)
                                 :- * Project (174)
                                 :  +- * Filter (173)
                                 :     +- * HashAggregate (172)
                                 :        +- ReusedExchange (171)
                                 :- * Project (178)
                                 :  +- * Filter (177)
                                 :     +- * HashAggregate (176)
                                 :        +- ReusedExchange (175)
                                 +- * Project (182)
                                    +- * Filter (181)
                                       +- * HashAggregate (180)
                                          +- ReusedExchange (179)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(10) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(13) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(15) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [ss_item_sk#1, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#12, d_year#13]

(18) Filter [codegen id : 2]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(19) Project [codegen id : 2]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(20) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(21) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(22) Project [codegen id : 6]
Output [3]: [i_brand_id#7 AS brand_id#15, i_class_id#8 AS class_id#16, i_category_id#9 AS category_id#17]
Input [5]: [ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(23) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(24) ColumnarToRow [codegen id : 5]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]

(25) Filter [codegen id : 5]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(26) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(28) Filter [codegen id : 3]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(29) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(30) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#6]
Join condition: None

(31) Project [codegen id : 5]
Output [4]: [cs_sold_date_sk#19, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [cs_item_sk#18, cs_sold_date_sk#19, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(32) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#12]

(33) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#12]
Join condition: None

(34) Project [codegen id : 5]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_sold_date_sk#19, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(35) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#21]

(36) BroadcastHashJoin [codegen id : 6]
Left keys [6]: [coalesce(brand_id#15, 0), isnull(brand_id#15), coalesce(class_id#16, 0), isnull(class_id#16), coalesce(category_id#17, 0), isnull(category_id#17)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(37) HashAggregate [codegen id : 6]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(38) Exchange
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: hashpartitioning(brand_id#15, class_id#16, category_id#17, 5), ENSURE_REQUIREMENTS, [id=#22]

(39) HashAggregate [codegen id : 10]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(40) Scan parquet default.web_sales
Output [2]: [ws_item_sk#23, ws_sold_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#24), dynamicpruningexpression(ws_sold_date_sk#24 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(41) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#23, ws_sold_date_sk#24]

(42) Filter [codegen id : 9]
Input [2]: [ws_item_sk#23, ws_sold_date_sk#24]
Condition : isnotnull(ws_item_sk#23)

(43) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(44) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#6]
Join condition: None

(45) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#24, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [ws_item_sk#23, ws_sold_date_sk#24, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(46) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#12]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#12]
Join condition: None

(48) Project [codegen id : 9]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_sold_date_sk#24, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(49) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#15, 0), isnull(brand_id#15), coalesce(class_id#16, 0), isnull(class_id#16), coalesce(category_id#17, 0), isnull(category_id#17)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(51) HashAggregate [codegen id : 10]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(52) HashAggregate [codegen id : 10]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(53) BroadcastExchange
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#26]

(54) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#15, class_id#16, category_id#17]
Join condition: None

(55) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#27]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#15, class_id#16, category_id#17]

(56) BroadcastExchange
Input [1]: [ss_item_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(57) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(58) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(59) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(60) Filter [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(61) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#27]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(63) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(64) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(65) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(66) Scan parquet default.date_dim
Output [3]: [d_date_sk#12, d_year#13, d_moy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(67) ColumnarToRow [codegen id : 24]
Input [3]: [d_date_sk#12, d_year#13, d_moy#30]

(68) Filter [codegen id : 24]
Input [3]: [d_date_sk#12, d_year#13, d_moy#30]
Condition : ((((isnotnull(d_year#13) AND isnotnull(d_moy#30)) AND (d_year#13 = 2000)) AND (d_moy#30 = 11)) AND isnotnull(d_date_sk#12))

(69) Project [codegen id : 24]
Output [1]: [d_date_sk#12]
Input [3]: [d_date_sk#12, d_year#13, d_moy#30]

(70) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(71) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(72) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(73) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#32, isEmpty#33, count#34]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#35, isEmpty#36, count#37]

(74) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#35, isEmpty#36, count#37]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#38]

(75) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#35, isEmpty#36, count#37]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#39, count(1)#40]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#39 AS sales#41, count(1)#40 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#39 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43]

(76) Filter [codegen id : 26]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43 as decimal(32,6)) > cast(Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(77) Project [codegen id : 26]
Output [6]: [store AS channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43]

(78) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#18, cs_quantity#47, cs_list_price#48, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#18, cs_quantity#47, cs_list_price#48, cs_sold_date_sk#19]

(80) Filter [codegen id : 51]
Input [4]: [cs_item_sk#18, cs_quantity#47, cs_list_price#48, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(81) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#27]

(82) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(83) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(84) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#6]
Join condition: None

(85) Project [codegen id : 51]
Output [6]: [cs_quantity#47, cs_list_price#48, cs_sold_date_sk#19, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [cs_item_sk#18, cs_quantity#47, cs_list_price#48, cs_sold_date_sk#19, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(86) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#12]

(87) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#12]
Join condition: None

(88) Project [codegen id : 51]
Output [5]: [cs_quantity#47, cs_list_price#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_quantity#47, cs_list_price#48, cs_sold_date_sk#19, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(89) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#47, cs_list_price#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#49, isEmpty#50, count#51]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#52, isEmpty#53, count#54]

(90) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#52, isEmpty#53, count#54]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#55]

(91) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#52, isEmpty#53, count#54]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#56, count(1)#57]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sales#58, count(1)#57 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60]

(92) Filter [codegen id : 52]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(93) Project [codegen id : 52]
Output [6]: [catalog AS channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60]

(94) Scan parquet default.web_sales
Output [4]: [ws_item_sk#23, ws_quantity#62, ws_list_price#63, ws_sold_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#24), dynamicpruningexpression(ws_sold_date_sk#24 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#23, ws_quantity#62, ws_list_price#63, ws_sold_date_sk#24]

(96) Filter [codegen id : 77]
Input [4]: [ws_item_sk#23, ws_quantity#62, ws_list_price#63, ws_sold_date_sk#24]
Condition : isnotnull(ws_item_sk#23)

(97) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#27]

(98) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(99) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(100) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#6]
Join condition: None

(101) Project [codegen id : 77]
Output [6]: [ws_quantity#62, ws_list_price#63, ws_sold_date_sk#24, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ws_item_sk#23, ws_quantity#62, ws_list_price#63, ws_sold_date_sk#24, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(102) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#12]

(103) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#12]
Join condition: None

(104) Project [codegen id : 77]
Output [5]: [ws_quantity#62, ws_list_price#63, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_quantity#62, ws_list_price#63, ws_sold_date_sk#24, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(105) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#62, ws_list_price#63, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#64, isEmpty#65, count#66]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#67, isEmpty#68, count#69]

(106) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#67, isEmpty#68, count#69]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#70]

(107) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#67, isEmpty#68, count#69]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#71, count(1)#72]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#71 AS sales#73, count(1)#72 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#71 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75]

(108) Filter [codegen id : 78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(109) Project [codegen id : 78]
Output [6]: [web AS channel#76, i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75]

(110) Union

(111) HashAggregate [codegen id : 79]
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42]
Keys [4]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#77, isEmpty#78, sum#79]
Results [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#80, isEmpty#81, sum#82]

(112) Exchange
Input [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#80, isEmpty#81, sum#82]
Arguments: hashpartitioning(channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#83]

(113) HashAggregate [codegen id : 80]
Input [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#80, isEmpty#81, sum#82]
Keys [4]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#84, sum(number_sales#42)#85]
Results [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum(sales#41)#84 AS sum_sales#86, sum(number_sales#42)#85 AS number_sales#87]

(114) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#88, isEmpty#89, count#90]

(115) HashAggregate [codegen id : 106]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#88, isEmpty#89, count#90]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#91, count(1)#92]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#91 AS sales#41, count(1)#92 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#91 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#93]

(116) Filter [codegen id : 106]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#93]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#93) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#93 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(117) Project [codegen id : 106]
Output [6]: [store AS channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#93]

(118) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#94, isEmpty#95, count#96]

(119) HashAggregate [codegen id : 132]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#94, isEmpty#95, count#96]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#97, count(1)#98]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#97 AS sales#58, count(1)#98 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#97 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#99]

(120) Filter [codegen id : 132]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#99]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#99) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#99 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(121) Project [codegen id : 132]
Output [6]: [catalog AS channel#100, i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#99]

(122) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#101, isEmpty#102, count#103]

(123) HashAggregate [codegen id : 158]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#101, isEmpty#102, count#103]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#104, count(1)#105]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#104 AS sales#73, count(1)#105 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#104 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#106]

(124) Filter [codegen id : 158]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#106]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#106) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#106 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(125) Project [codegen id : 158]
Output [6]: [web AS channel#107, i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#106]

(126) Union

(127) HashAggregate [codegen id : 159]
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42]
Keys [4]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#108, isEmpty#109, sum#110]
Results [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#111, isEmpty#112, sum#113]

(128) Exchange
Input [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#111, isEmpty#112, sum#113]
Arguments: hashpartitioning(channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#114]

(129) HashAggregate [codegen id : 160]
Input [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#111, isEmpty#112, sum#113]
Keys [4]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#115, sum(number_sales#42)#116]
Results [5]: [channel#46, i_brand_id#7, i_class_id#8, sum(sales#41)#115 AS sum_sales#86, sum(number_sales#42)#116 AS number_sales#87]

(130) HashAggregate [codegen id : 160]
Input [5]: [channel#46, i_brand_id#7, i_class_id#8, sum_sales#86, number_sales#87]
Keys [3]: [channel#46, i_brand_id#7, i_class_id#8]
Functions [2]: [partial_sum(sum_sales#86), partial_sum(number_sales#87)]
Aggregate Attributes [3]: [sum#117, isEmpty#118, sum#119]
Results [6]: [channel#46, i_brand_id#7, i_class_id#8, sum#120, isEmpty#121, sum#122]

(131) Exchange
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, sum#120, isEmpty#121, sum#122]
Arguments: hashpartitioning(channel#46, i_brand_id#7, i_class_id#8, 5), ENSURE_REQUIREMENTS, [id=#123]

(132) HashAggregate [codegen id : 161]
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, sum#120, isEmpty#121, sum#122]
Keys [3]: [channel#46, i_brand_id#7, i_class_id#8]
Functions [2]: [sum(sum_sales#86), sum(number_sales#87)]
Aggregate Attributes [2]: [sum(sum_sales#86)#124, sum(number_sales#87)#125]
Results [6]: [channel#46, i_brand_id#7, i_class_id#8, null AS i_category_id#126, sum(sum_sales#86)#124 AS sum(sum_sales)#127, sum(number_sales#87)#125 AS sum(number_sales)#128]

(133) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#129, isEmpty#130, count#131]

(134) HashAggregate [codegen id : 187]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#129, isEmpty#130, count#131]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#132, count(1)#133]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#132 AS sales#41, count(1)#133 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#132 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#134]

(135) Filter [codegen id : 187]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#134]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#134) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#134 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(136) Project [codegen id : 187]
Output [6]: [store AS channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#134]

(137) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#135, isEmpty#136, count#137]

(138) HashAggregate [codegen id : 213]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#135, isEmpty#136, count#137]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#138, count(1)#139]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#138 AS sales#58, count(1)#139 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#138 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#140]

(139) Filter [codegen id : 213]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#140]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#140) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#140 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(140) Project [codegen id : 213]
Output [6]: [catalog AS channel#141, i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#140]

(141) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#142, isEmpty#143, count#144]

(142) HashAggregate [codegen id : 239]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#142, isEmpty#143, count#144]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#145, count(1)#146]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#145 AS sales#73, count(1)#146 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#145 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#147]

(143) Filter [codegen id : 239]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#147]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#147) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#147 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(144) Project [codegen id : 239]
Output [6]: [web AS channel#148, i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#147]

(145) Union

(146) HashAggregate [codegen id : 240]
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42]
Keys [4]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#149, isEmpty#150, sum#151]
Results [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#152, isEmpty#153, sum#154]

(147) Exchange
Input [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#152, isEmpty#153, sum#154]
Arguments: hashpartitioning(channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#155]

(148) HashAggregate [codegen id : 241]
Input [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#152, isEmpty#153, sum#154]
Keys [4]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#156, sum(number_sales#42)#157]
Results [4]: [channel#46, i_brand_id#7, sum(sales#41)#156 AS sum_sales#86, sum(number_sales#42)#157 AS number_sales#87]

(149) HashAggregate [codegen id : 241]
Input [4]: [channel#46, i_brand_id#7, sum_sales#86, number_sales#87]
Keys [2]: [channel#46, i_brand_id#7]
Functions [2]: [partial_sum(sum_sales#86), partial_sum(number_sales#87)]
Aggregate Attributes [3]: [sum#158, isEmpty#159, sum#160]
Results [5]: [channel#46, i_brand_id#7, sum#161, isEmpty#162, sum#163]

(150) Exchange
Input [5]: [channel#46, i_brand_id#7, sum#161, isEmpty#162, sum#163]
Arguments: hashpartitioning(channel#46, i_brand_id#7, 5), ENSURE_REQUIREMENTS, [id=#164]

(151) HashAggregate [codegen id : 242]
Input [5]: [channel#46, i_brand_id#7, sum#161, isEmpty#162, sum#163]
Keys [2]: [channel#46, i_brand_id#7]
Functions [2]: [sum(sum_sales#86), sum(number_sales#87)]
Aggregate Attributes [2]: [sum(sum_sales#86)#165, sum(number_sales#87)#166]
Results [6]: [channel#46, i_brand_id#7, null AS i_class_id#167, null AS i_category_id#168, sum(sum_sales#86)#165 AS sum(sum_sales)#169, sum(number_sales#87)#166 AS sum(number_sales)#170]

(152) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#171, isEmpty#172, count#173]

(153) HashAggregate [codegen id : 268]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#171, isEmpty#172, count#173]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#174, count(1)#175]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#174 AS sales#41, count(1)#175 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#174 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#176]

(154) Filter [codegen id : 268]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#176]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#176) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#176 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(155) Project [codegen id : 268]
Output [6]: [store AS channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#176]

(156) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#177, isEmpty#178, count#179]

(157) HashAggregate [codegen id : 294]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#177, isEmpty#178, count#179]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#180, count(1)#181]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#180 AS sales#58, count(1)#181 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#180 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#182]

(158) Filter [codegen id : 294]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#182]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#182) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#182 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(159) Project [codegen id : 294]
Output [6]: [catalog AS channel#183, i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#182]

(160) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#184, isEmpty#185, count#186]

(161) HashAggregate [codegen id : 320]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#184, isEmpty#185, count#186]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#187, count(1)#188]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#187 AS sales#73, count(1)#188 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#187 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#189]

(162) Filter [codegen id : 320]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#189]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#189) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#189 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(163) Project [codegen id : 320]
Output [6]: [web AS channel#190, i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#189]

(164) Union

(165) HashAggregate [codegen id : 321]
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42]
Keys [4]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#191, isEmpty#192, sum#193]
Results [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#194, isEmpty#195, sum#196]

(166) Exchange
Input [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#194, isEmpty#195, sum#196]
Arguments: hashpartitioning(channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#197]

(167) HashAggregate [codegen id : 322]
Input [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#194, isEmpty#195, sum#196]
Keys [4]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#198, sum(number_sales#42)#199]
Results [3]: [channel#46, sum(sales#41)#198 AS sum_sales#86, sum(number_sales#42)#199 AS number_sales#87]

(168) HashAggregate [codegen id : 322]
Input [3]: [channel#46, sum_sales#86, number_sales#87]
Keys [1]: [channel#46]
Functions [2]: [partial_sum(sum_sales#86), partial_sum(number_sales#87)]
Aggregate Attributes [3]: [sum#200, isEmpty#201, sum#202]
Results [4]: [channel#46, sum#203, isEmpty#204, sum#205]

(169) Exchange
Input [4]: [channel#46, sum#203, isEmpty#204, sum#205]
Arguments: hashpartitioning(channel#46, 5), ENSURE_REQUIREMENTS, [id=#206]

(170) HashAggregate [codegen id : 323]
Input [4]: [channel#46, sum#203, isEmpty#204, sum#205]
Keys [1]: [channel#46]
Functions [2]: [sum(sum_sales#86), sum(number_sales#87)]
Aggregate Attributes [2]: [sum(sum_sales#86)#207, sum(number_sales#87)#208]
Results [6]: [channel#46, null AS i_brand_id#209, null AS i_class_id#210, null AS i_category_id#211, sum(sum_sales#86)#207 AS sum(sum_sales)#212, sum(number_sales#87)#208 AS sum(number_sales)#213]

(171) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#214, isEmpty#215, count#216]

(172) HashAggregate [codegen id : 349]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#214, isEmpty#215, count#216]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#217, count(1)#218]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#217 AS sales#41, count(1)#218 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#217 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#219]

(173) Filter [codegen id : 349]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#219]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#219) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#219 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(174) Project [codegen id : 349]
Output [6]: [store AS channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#219]

(175) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#220, isEmpty#221, count#222]

(176) HashAggregate [codegen id : 375]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#220, isEmpty#221, count#222]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#223, count(1)#224]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#223 AS sales#58, count(1)#224 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#223 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#225]

(177) Filter [codegen id : 375]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#225]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#225) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#225 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(178) Project [codegen id : 375]
Output [6]: [catalog AS channel#226, i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#225]

(179) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#227, isEmpty#228, count#229]

(180) HashAggregate [codegen id : 401]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#227, isEmpty#228, count#229]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#230, count(1)#231]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#230 AS sales#73, count(1)#231 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#230 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#232]

(181) Filter [codegen id : 401]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#232]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#232) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#232 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(182) Project [codegen id : 401]
Output [6]: [web AS channel#233, i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#232]

(183) Union

(184) HashAggregate [codegen id : 402]
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sales#41, number_sales#42]
Keys [4]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#234, isEmpty#235, sum#236]
Results [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#237, isEmpty#238, sum#239]

(185) Exchange
Input [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#237, isEmpty#238, sum#239]
Arguments: hashpartitioning(channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#240]

(186) HashAggregate [codegen id : 403]
Input [7]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum#237, isEmpty#238, sum#239]
Keys [4]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#241, sum(number_sales#42)#242]
Results [2]: [sum(sales#41)#241 AS sum_sales#86, sum(number_sales#42)#242 AS number_sales#87]

(187) HashAggregate [codegen id : 403]
Input [2]: [sum_sales#86, number_sales#87]
Keys: []
Functions [2]: [partial_sum(sum_sales#86), partial_sum(number_sales#87)]
Aggregate Attributes [3]: [sum#243, isEmpty#244, sum#245]
Results [3]: [sum#246, isEmpty#247, sum#248]

(188) Exchange
Input [3]: [sum#246, isEmpty#247, sum#248]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#249]

(189) HashAggregate [codegen id : 404]
Input [3]: [sum#246, isEmpty#247, sum#248]
Keys: []
Functions [2]: [sum(sum_sales#86), sum(number_sales#87)]
Aggregate Attributes [2]: [sum(sum_sales#86)#250, sum(number_sales#87)#251]
Results [6]: [null AS channel#252, null AS i_brand_id#253, null AS i_class_id#254, null AS i_category_id#255, sum(sum_sales#86)#250 AS sum(sum_sales)#256, sum(number_sales#87)#251 AS sum(number_sales)#257]

(190) Union

(191) HashAggregate [codegen id : 405]
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#86, number_sales#87]
Keys [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#86, number_sales#87]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#86, number_sales#87]

(192) Exchange
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#86, number_sales#87]
Arguments: hashpartitioning(channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#86, number_sales#87, 5), ENSURE_REQUIREMENTS, [id=#258]

(193) HashAggregate [codegen id : 406]
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#86, number_sales#87]
Keys [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#86, number_sales#87]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#86, number_sales#87]

(194) TakeOrderedAndProject
Input [6]: [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#86, number_sales#87]
Arguments: 100, [channel#46 ASC NULLS FIRST, i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#46, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#86, number_sales#87]

===== Subqueries =====

Subquery:1 Hosting operator id = 76 Hosting Expression = Subquery scalar-subquery#44, [id=#45]
* HashAggregate (221)
+- Exchange (220)
   +- * HashAggregate (219)
      +- Union (218)
         :- * Project (203)
         :  +- * BroadcastHashJoin Inner BuildRight (202)
         :     :- * ColumnarToRow (196)
         :     :  +- Scan parquet default.store_sales (195)
         :     +- BroadcastExchange (201)
         :        +- * Project (200)
         :           +- * Filter (199)
         :              +- * ColumnarToRow (198)
         :                 +- Scan parquet default.date_dim (197)
         :- * Project (212)
         :  +- * BroadcastHashJoin Inner BuildRight (211)
         :     :- * ColumnarToRow (205)
         :     :  +- Scan parquet default.catalog_sales (204)
         :     +- BroadcastExchange (210)
         :        +- * Project (209)
         :           +- * Filter (208)
         :              +- * ColumnarToRow (207)
         :                 +- Scan parquet default.date_dim (206)
         +- * Project (217)
            +- * BroadcastHashJoin Inner BuildRight (216)
               :- * ColumnarToRow (214)
               :  +- Scan parquet default.web_sales (213)
               +- ReusedExchange (215)


(195) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#259)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(196) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(197) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(198) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]

(199) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(200) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(201) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#260]

(202) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(203) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#261, ss_list_price#3 AS list_price#262]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(204) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#47, cs_list_price#48, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#263)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(205) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#47, cs_list_price#48, cs_sold_date_sk#19]

(206) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(207) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]

(208) Filter [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1998)) AND (d_year#13 <= 2000)) AND isnotnull(d_date_sk#12))

(209) Project [codegen id : 3]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(210) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#264]

(211) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#12]
Join condition: None

(212) Project [codegen id : 4]
Output [2]: [cs_quantity#47 AS quantity#265, cs_list_price#48 AS list_price#266]
Input [4]: [cs_quantity#47, cs_list_price#48, cs_sold_date_sk#19, d_date_sk#12]

(213) Scan parquet default.web_sales
Output [3]: [ws_quantity#62, ws_list_price#63, ws_sold_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#24), dynamicpruningexpression(ws_sold_date_sk#24 IN dynamicpruning#263)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(214) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#62, ws_list_price#63, ws_sold_date_sk#24]

(215) ReusedExchange [Reuses operator id: 210]
Output [1]: [d_date_sk#12]

(216) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#12]
Join condition: None

(217) Project [codegen id : 6]
Output [2]: [ws_quantity#62 AS quantity#267, ws_list_price#63 AS list_price#268]
Input [4]: [ws_quantity#62, ws_list_price#63, ws_sold_date_sk#24, d_date_sk#12]

(218) Union

(219) HashAggregate [codegen id : 7]
Input [2]: [quantity#261, list_price#262]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#261 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#262 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#269, count#270]
Results [2]: [sum#271, count#272]

(220) Exchange
Input [2]: [sum#271, count#272]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#273]

(221) HashAggregate [codegen id : 8]
Input [2]: [sum#271, count#272]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#261 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#262 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#261 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#262 as decimal(12,2)))), DecimalType(18,2), true))#274]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#261 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#262 as decimal(12,2)))), DecimalType(18,2), true))#274 AS average_sales#275]

Subquery:2 Hosting operator id = 195 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#259
ReusedExchange (222)


(222) ReusedExchange [Reuses operator id: 201]
Output [1]: [d_date_sk#12]

Subquery:3 Hosting operator id = 204 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#263
ReusedExchange (223)


(223) ReusedExchange [Reuses operator id: 210]
Output [1]: [d_date_sk#12]

Subquery:4 Hosting operator id = 213 Hosting Expression = ws_sold_date_sk#24 IN dynamicpruning#263

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (224)


(224) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#12]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10
ReusedExchange (225)


(225) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#12]

Subquery:7 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#10

Subquery:8 Hosting operator id = 40 Hosting Expression = ws_sold_date_sk#24 IN dynamicpruning#10

Subquery:9 Hosting operator id = 92 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:10 Hosting operator id = 78 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#5

Subquery:11 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:12 Hosting operator id = 94 Hosting Expression = ws_sold_date_sk#24 IN dynamicpruning#5

Subquery:13 Hosting operator id = 116 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:14 Hosting operator id = 120 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:15 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:16 Hosting operator id = 135 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:17 Hosting operator id = 139 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:18 Hosting operator id = 143 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:19 Hosting operator id = 154 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:20 Hosting operator id = 158 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:21 Hosting operator id = 162 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:22 Hosting operator id = 173 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:23 Hosting operator id = 177 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:24 Hosting operator id = 181 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]


