== Physical Plan ==
TakeOrderedAndProject (194)
+- * HashAggregate (193)
   +- Exchange (192)
      +- * HashAggregate (191)
         +- Union (190)
            :- * HashAggregate (113)
            :  +- Exchange (112)
            :     +- * HashAggregate (111)
            :        +- Union (110)
            :           :- * Project (77)
            :           :  +- * Filter (76)
            :           :     +- * HashAggregate (75)
            :           :        +- Exchange (74)
            :           :           +- * HashAggregate (73)
            :           :              +- * Project (72)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (71)
            :           :                    :- * Project (65)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (64)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
            :           :                    :     :  :- * Filter (3)
            :           :                    :     :  :  +- * ColumnarToRow (2)
            :           :                    :     :  :     +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- BroadcastExchange (56)
            :           :                    :     :     +- * Project (55)
            :           :                    :     :        +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                    :     :           :- * Filter (6)
            :           :                    :     :           :  +- * ColumnarToRow (5)
            :           :                    :     :           :     +- Scan parquet default.item (4)
            :           :                    :     :           +- BroadcastExchange (53)
            :           :                    :     :              +- * HashAggregate (52)
            :           :                    :     :                 +- * HashAggregate (51)
            :           :                    :     :                    +- * HashAggregate (50)
            :           :                    :     :                       +- Exchange (49)
            :           :                    :     :                          +- * HashAggregate (48)
            :           :                    :     :                             +- * BroadcastHashJoin LeftSemi BuildRight (47)
            :           :                    :     :                                :- * BroadcastHashJoin LeftSemi BuildRight (36)
            :           :                    :     :                                :  :- * Project (22)
            :           :                    :     :                                :  :  +- * BroadcastHashJoin Inner BuildRight (21)
            :           :                    :     :                                :  :     :- * Project (15)
            :           :                    :     :                                :  :     :  +- * BroadcastHashJoin Inner BuildRight (14)
            :           :                    :     :                                :  :     :     :- * Filter (9)
            :           :                    :     :                                :  :     :     :  +- * ColumnarToRow (8)
            :           :                    :     :                                :  :     :     :     +- Scan parquet default.store_sales (7)
            :           :                    :     :                                :  :     :     +- BroadcastExchange (13)
            :           :                    :     :                                :  :     :        +- * Filter (12)
            :           :                    :     :                                :  :     :           +- * ColumnarToRow (11)
            :           :                    :     :                                :  :     :              +- Scan parquet default.item (10)
            :           :                    :     :                                :  :     +- BroadcastExchange (20)
            :           :                    :     :                                :  :        +- * Project (19)
            :           :                    :     :                                :  :           +- * Filter (18)
            :           :                    :     :                                :  :              +- * ColumnarToRow (17)
            :           :                    :     :                                :  :                 +- Scan parquet default.date_dim (16)
            :           :                    :     :                                :  +- BroadcastExchange (35)
            :           :                    :     :                                :     +- * Project (34)
            :           :                    :     :                                :        +- * BroadcastHashJoin Inner BuildRight (33)
            :           :                    :     :                                :           :- * Project (31)
            :           :                    :     :                                :           :  +- * BroadcastHashJoin Inner BuildRight (30)
            :           :                    :     :                                :           :     :- * Filter (25)
            :           :                    :     :                                :           :     :  +- * ColumnarToRow (24)
            :           :                    :     :                                :           :     :     +- Scan parquet default.catalog_sales (23)
            :           :                    :     :                                :           :     +- BroadcastExchange (29)
            :           :                    :     :                                :           :        +- * Filter (28)
            :           :                    :     :                                :           :           +- * ColumnarToRow (27)
            :           :                    :     :                                :           :              +- Scan parquet default.item (26)
            :           :                    :     :                                :           +- ReusedExchange (32)
            :           :                    :     :                                +- BroadcastExchange (46)
            :           :                    :     :                                   +- * Project (45)
            :           :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (44)
            :           :                    :     :                                         :- * Project (42)
            :           :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (41)
            :           :                    :     :                                         :     :- * Filter (39)
            :           :                    :     :                                         :     :  +- * ColumnarToRow (38)
            :           :                    :     :                                         :     :     +- Scan parquet default.web_sales (37)
            :           :                    :     :                                         :     +- ReusedExchange (40)
            :           :                    :     :                                         +- ReusedExchange (43)
            :           :                    :     +- BroadcastExchange (63)
            :           :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (62)
            :           :                    :           :- * Filter (60)
            :           :                    :           :  +- * ColumnarToRow (59)
            :           :                    :           :     +- Scan parquet default.item (58)
            :           :                    :           +- ReusedExchange (61)
            :           :                    +- BroadcastExchange (70)
            :           :                       +- * Project (69)
            :           :                          +- * Filter (68)
            :           :                             +- * ColumnarToRow (67)
            :           :                                +- Scan parquet default.date_dim (66)
            :           :- * Project (93)
            :           :  +- * Filter (92)
            :           :     +- * HashAggregate (91)
            :           :        +- Exchange (90)
            :           :           +- * HashAggregate (89)
            :           :              +- * Project (88)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (87)
            :           :                    :- * Project (85)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (84)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (82)
            :           :                    :     :  :- * Filter (80)
            :           :                    :     :  :  +- * ColumnarToRow (79)
            :           :                    :     :  :     +- Scan parquet default.catalog_sales (78)
            :           :                    :     :  +- ReusedExchange (81)
            :           :                    :     +- ReusedExchange (83)
            :           :                    +- ReusedExchange (86)
            :           +- * Project (109)
            :              +- * Filter (108)
            :                 +- * HashAggregate (107)
            :                    +- Exchange (106)
            :                       +- * HashAggregate (105)
            :                          +- * Project (104)
            :                             +- * BroadcastHashJoin Inner BuildRight (103)
            :                                :- * Project (101)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (100)
            :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (98)
            :                                :     :  :- * Filter (96)
            :                                :     :  :  +- * ColumnarToRow (95)
            :                                :     :  :     +- Scan parquet default.web_sales (94)
            :                                :     :  +- ReusedExchange (97)
            :                                :     +- ReusedExchange (99)
            :                                +- ReusedExchange (102)
            :- * HashAggregate (132)
            :  +- Exchange (131)
            :     +- * HashAggregate (130)
            :        +- * HashAggregate (129)
            :           +- Exchange (128)
            :              +- * HashAggregate (127)
            :                 +- Union (126)
            :                    :- * Project (117)
            :                    :  +- * Filter (116)
            :                    :     +- * HashAggregate (115)
            :                    :        +- ReusedExchange (114)
            :                    :- * Project (121)
            :                    :  +- * Filter (120)
            :                    :     +- * HashAggregate (119)
            :                    :        +- ReusedExchange (118)
            :                    +- * Project (125)
            :                       +- * Filter (124)
            :                          +- * HashAggregate (123)
            :                             +- ReusedExchange (122)
            :- * HashAggregate (151)
            :  +- Exchange (150)
            :     +- * HashAggregate (149)
            :        +- * HashAggregate (148)
            :           +- Exchange (147)
            :              +- * HashAggregate (146)
            :                 +- Union (145)
            :                    :- * Project (136)
            :                    :  +- * Filter (135)
            :                    :     +- * HashAggregate (134)
            :                    :        +- ReusedExchange (133)
            :                    :- * Project (140)
            :                    :  +- * Filter (139)
            :                    :     +- * HashAggregate (138)
            :                    :        +- ReusedExchange (137)
            :                    +- * Project (144)
            :                       +- * Filter (143)
            :                          +- * HashAggregate (142)
            :                             +- ReusedExchange (141)
            :- * HashAggregate (170)
            :  +- Exchange (169)
            :     +- * HashAggregate (168)
            :        +- * HashAggregate (167)
            :           +- Exchange (166)
            :              +- * HashAggregate (165)
            :                 +- Union (164)
            :                    :- * Project (155)
            :                    :  +- * Filter (154)
            :                    :     +- * HashAggregate (153)
            :                    :        +- ReusedExchange (152)
            :                    :- * Project (159)
            :                    :  +- * Filter (158)
            :                    :     +- * HashAggregate (157)
            :                    :        +- ReusedExchange (156)
            :                    +- * Project (163)
            :                       +- * Filter (162)
            :                          +- * HashAggregate (161)
            :                             +- ReusedExchange (160)
            +- * HashAggregate (189)
               +- Exchange (188)
                  +- * HashAggregate (187)
                     +- * HashAggregate (186)
                        +- Exchange (185)
                           +- * HashAggregate (184)
                              +- Union (183)
                                 :- * Project (174)
                                 :  +- * Filter (173)
                                 :     +- * HashAggregate (172)
                                 :        +- ReusedExchange (171)
                                 :- * Project (178)
                                 :  +- * Filter (177)
                                 :     +- * HashAggregate (176)
                                 :        +- ReusedExchange (175)
                                 +- * Project (182)
                                    +- * Filter (181)
                                       +- * HashAggregate (180)
                                          +- ReusedExchange (179)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : ((isnotnull(i_brand_id#6) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(7) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(8) ColumnarToRow [codegen id : 9]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(9) Filter [codegen id : 9]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(10) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : (((isnotnull(i_item_sk#5) AND isnotnull(i_brand_id#6)) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(13) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(14) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(15) Project [codegen id : 9]
Output [4]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]

(18) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(19) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(20) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(21) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(22) Project [codegen id : 9]
Output [3]: [i_brand_id#6 AS brand_id#13, i_class_id#7 AS class_id#14, i_category_id#8 AS category_id#15]
Input [5]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(23) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#16, cs_item_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(24) ColumnarToRow [codegen id : 5]
Input [2]: [cs_sold_date_sk#16, cs_item_sk#17]

(25) Filter [codegen id : 5]
Input [2]: [cs_sold_date_sk#16, cs_item_sk#17]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_sold_date_sk#16))

(26) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(28) Filter [codegen id : 3]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(29) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(30) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#5]
Join condition: None

(31) Project [codegen id : 5]
Output [4]: [cs_sold_date_sk#16, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [cs_sold_date_sk#16, cs_item_sk#17, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(32) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(33) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(34) Project [codegen id : 5]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [cs_sold_date_sk#16, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(35) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#19]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(37) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#20, ws_item_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(38) ColumnarToRow [codegen id : 8]
Input [2]: [ws_sold_date_sk#20, ws_item_sk#21]

(39) Filter [codegen id : 8]
Input [2]: [ws_sold_date_sk#20, ws_item_sk#21]
Condition : (isnotnull(ws_item_sk#21) AND isnotnull(ws_sold_date_sk#20))

(40) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(41) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [i_item_sk#5]
Join condition: None

(42) Project [codegen id : 8]
Output [4]: [ws_sold_date_sk#20, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ws_sold_date_sk#20, ws_item_sk#21, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(43) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(44) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(45) Project [codegen id : 8]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [ws_sold_date_sk#20, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(46) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#22]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(48) HashAggregate [codegen id : 9]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(49) Exchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: hashpartitioning(brand_id#13, class_id#14, category_id#15, 5), ENSURE_REQUIREMENTS, [id=#23]

(50) HashAggregate [codegen id : 10]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(51) HashAggregate [codegen id : 10]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(52) HashAggregate [codegen id : 10]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(53) BroadcastExchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#24]

(54) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Right keys [3]: [brand_id#13, class_id#14, category_id#15]
Join condition: None

(55) Project [codegen id : 11]
Output [1]: [i_item_sk#5 AS ss_item_sk#25]
Input [7]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8, brand_id#13, class_id#14, category_id#15]

(56) BroadcastExchange
Input [1]: [ss_item_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(57) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(58) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(59) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(60) Filter [codegen id : 23]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(61) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#25]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(63) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(64) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(65) Project [codegen id : 25]
Output [6]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(66) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(67) ColumnarToRow [codegen id : 24]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]

(68) Filter [codegen id : 24]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#28)) AND (d_year#11 = 2000)) AND (d_moy#28 = 11)) AND isnotnull(d_date_sk#10))

(69) Project [codegen id : 24]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]

(70) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(71) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(72) Project [codegen id : 25]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(73) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#30, isEmpty#31, count#32]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]

(74) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#36]

(75) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37, count(1)#38]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37 AS sales#39, count(1)#38 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41]

(76) Filter [codegen id : 26]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 as decimal(32,6)) > cast(Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(77) Project [codegen id : 26]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41]

(78) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 51]
Input [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]

(80) Filter [codegen id : 51]
Input [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_sold_date_sk#16))

(81) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#25]

(82) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(83) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(84) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#5]
Join condition: None

(85) Project [codegen id : 51]
Output [6]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(86) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#10]

(87) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(88) Project [codegen id : 51]
Output [5]: [cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(89) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#47, isEmpty#48, count#49]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]

(90) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#53]

(91) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54, count(1)#55]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sales#56, count(1)#55 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58]

(92) Filter [codegen id : 52]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(93) Project [codegen id : 52]
Output [6]: [catalog AS channel#59, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58]

(94) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 77]
Input [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]

(96) Filter [codegen id : 77]
Input [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]
Condition : (isnotnull(ws_item_sk#21) AND isnotnull(ws_sold_date_sk#20))

(97) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#25]

(98) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(99) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(100) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [i_item_sk#5]
Join condition: None

(101) Project [codegen id : 77]
Output [6]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(102) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#10]

(103) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(104) Project [codegen id : 77]
Output [5]: [ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(105) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#62, isEmpty#63, count#64]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]

(106) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#68]

(107) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69, count(1)#70]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69 AS sales#71, count(1)#70 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73]

(108) Filter [codegen id : 78]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(109) Project [codegen id : 78]
Output [6]: [web AS channel#74, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73]

(110) Union

(111) HashAggregate [codegen id : 79]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#75, isEmpty#76, sum#77]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]

(112) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#81]

(113) HashAggregate [codegen id : 80]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#82, sum(number_sales#40)#83]
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum(sales#39)#82 AS sum_sales#84, sum(number_sales#40)#83 AS number_sales#85]

(114) ReusedExchange [Reuses operator id: 74]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#86, isEmpty#87, count#88]

(115) HashAggregate [codegen id : 106]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#89, count(1)#90]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#89 AS sales#39, count(1)#90 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#89 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91]

(116) Filter [codegen id : 106]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(117) Project [codegen id : 106]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91]

(118) ReusedExchange [Reuses operator id: 90]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#92, isEmpty#93, count#94]

(119) HashAggregate [codegen id : 132]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#92, isEmpty#93, count#94]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#95, count(1)#96]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#95 AS sales#56, count(1)#96 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#95 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97]

(120) Filter [codegen id : 132]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(121) Project [codegen id : 132]
Output [6]: [catalog AS channel#98, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97]

(122) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#99, isEmpty#100, count#101]

(123) HashAggregate [codegen id : 158]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#99, isEmpty#100, count#101]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#102, count(1)#103]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#102 AS sales#71, count(1)#103 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#102 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#104]

(124) Filter [codegen id : 158]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#104]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#104) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#104 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(125) Project [codegen id : 158]
Output [6]: [web AS channel#105, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#104]

(126) Union

(127) HashAggregate [codegen id : 159]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#106, isEmpty#107, sum#108]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#109, isEmpty#110, sum#111]

(128) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#109, isEmpty#110, sum#111]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#112]

(129) HashAggregate [codegen id : 160]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#109, isEmpty#110, sum#111]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#113, sum(number_sales#40)#114]
Results [5]: [channel#44, i_brand_id#6, i_class_id#7, sum(sales#39)#113 AS sum_sales#84, sum(number_sales#40)#114 AS number_sales#85]

(130) HashAggregate [codegen id : 160]
Input [5]: [channel#44, i_brand_id#6, i_class_id#7, sum_sales#84, number_sales#85]
Keys [3]: [channel#44, i_brand_id#6, i_class_id#7]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#115, isEmpty#116, sum#117]
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, sum#118, isEmpty#119, sum#120]

(131) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, sum#118, isEmpty#119, sum#120]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, 5), ENSURE_REQUIREMENTS, [id=#121]

(132) HashAggregate [codegen id : 161]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, sum#118, isEmpty#119, sum#120]
Keys [3]: [channel#44, i_brand_id#6, i_class_id#7]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#122, sum(number_sales#85)#123]
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, null AS i_category_id#124, sum(sum_sales#84)#122 AS sum(sum_sales)#125, sum(number_sales#85)#123 AS sum(number_sales)#126]

(133) ReusedExchange [Reuses operator id: 74]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#127, isEmpty#128, count#129]

(134) HashAggregate [codegen id : 187]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#127, isEmpty#128, count#129]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#130, count(1)#131]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#130 AS sales#39, count(1)#131 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#130 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#132]

(135) Filter [codegen id : 187]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#132]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#132) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#132 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(136) Project [codegen id : 187]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#132]

(137) ReusedExchange [Reuses operator id: 90]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#133, isEmpty#134, count#135]

(138) HashAggregate [codegen id : 213]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#133, isEmpty#134, count#135]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#136, count(1)#137]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#136 AS sales#56, count(1)#137 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#136 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#138]

(139) Filter [codegen id : 213]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#138]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#138) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#138 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(140) Project [codegen id : 213]
Output [6]: [catalog AS channel#139, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#138]

(141) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#140, isEmpty#141, count#142]

(142) HashAggregate [codegen id : 239]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#140, isEmpty#141, count#142]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#143, count(1)#144]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#143 AS sales#71, count(1)#144 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#143 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#145]

(143) Filter [codegen id : 239]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#145]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#145) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#145 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(144) Project [codegen id : 239]
Output [6]: [web AS channel#146, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#145]

(145) Union

(146) HashAggregate [codegen id : 240]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#147, isEmpty#148, sum#149]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#150, isEmpty#151, sum#152]

(147) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#150, isEmpty#151, sum#152]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#153]

(148) HashAggregate [codegen id : 241]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#150, isEmpty#151, sum#152]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#154, sum(number_sales#40)#155]
Results [4]: [channel#44, i_brand_id#6, sum(sales#39)#154 AS sum_sales#84, sum(number_sales#40)#155 AS number_sales#85]

(149) HashAggregate [codegen id : 241]
Input [4]: [channel#44, i_brand_id#6, sum_sales#84, number_sales#85]
Keys [2]: [channel#44, i_brand_id#6]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#156, isEmpty#157, sum#158]
Results [5]: [channel#44, i_brand_id#6, sum#159, isEmpty#160, sum#161]

(150) Exchange
Input [5]: [channel#44, i_brand_id#6, sum#159, isEmpty#160, sum#161]
Arguments: hashpartitioning(channel#44, i_brand_id#6, 5), ENSURE_REQUIREMENTS, [id=#162]

(151) HashAggregate [codegen id : 242]
Input [5]: [channel#44, i_brand_id#6, sum#159, isEmpty#160, sum#161]
Keys [2]: [channel#44, i_brand_id#6]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#163, sum(number_sales#85)#164]
Results [6]: [channel#44, i_brand_id#6, null AS i_class_id#165, null AS i_category_id#166, sum(sum_sales#84)#163 AS sum(sum_sales)#167, sum(number_sales#85)#164 AS sum(number_sales)#168]

(152) ReusedExchange [Reuses operator id: 74]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#169, isEmpty#170, count#171]

(153) HashAggregate [codegen id : 268]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#169, isEmpty#170, count#171]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#172, count(1)#173]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#172 AS sales#39, count(1)#173 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#172 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174]

(154) Filter [codegen id : 268]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(155) Project [codegen id : 268]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174]

(156) ReusedExchange [Reuses operator id: 90]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#175, isEmpty#176, count#177]

(157) HashAggregate [codegen id : 294]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#175, isEmpty#176, count#177]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#178, count(1)#179]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#178 AS sales#56, count(1)#179 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#178 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#180]

(158) Filter [codegen id : 294]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#180]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#180) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#180 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(159) Project [codegen id : 294]
Output [6]: [catalog AS channel#181, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#180]

(160) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#182, isEmpty#183, count#184]

(161) HashAggregate [codegen id : 320]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#182, isEmpty#183, count#184]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#185, count(1)#186]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#185 AS sales#71, count(1)#186 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#185 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#187]

(162) Filter [codegen id : 320]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#187]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#187) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#187 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(163) Project [codegen id : 320]
Output [6]: [web AS channel#188, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#187]

(164) Union

(165) HashAggregate [codegen id : 321]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#189, isEmpty#190, sum#191]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#192, isEmpty#193, sum#194]

(166) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#192, isEmpty#193, sum#194]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#195]

(167) HashAggregate [codegen id : 322]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#192, isEmpty#193, sum#194]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#196, sum(number_sales#40)#197]
Results [3]: [channel#44, sum(sales#39)#196 AS sum_sales#84, sum(number_sales#40)#197 AS number_sales#85]

(168) HashAggregate [codegen id : 322]
Input [3]: [channel#44, sum_sales#84, number_sales#85]
Keys [1]: [channel#44]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#198, isEmpty#199, sum#200]
Results [4]: [channel#44, sum#201, isEmpty#202, sum#203]

(169) Exchange
Input [4]: [channel#44, sum#201, isEmpty#202, sum#203]
Arguments: hashpartitioning(channel#44, 5), ENSURE_REQUIREMENTS, [id=#204]

(170) HashAggregate [codegen id : 323]
Input [4]: [channel#44, sum#201, isEmpty#202, sum#203]
Keys [1]: [channel#44]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#205, sum(number_sales#85)#206]
Results [6]: [channel#44, null AS i_brand_id#207, null AS i_class_id#208, null AS i_category_id#209, sum(sum_sales#84)#205 AS sum(sum_sales)#210, sum(number_sales#85)#206 AS sum(number_sales)#211]

(171) ReusedExchange [Reuses operator id: 74]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#212, isEmpty#213, count#214]

(172) HashAggregate [codegen id : 349]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#212, isEmpty#213, count#214]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#215, count(1)#216]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#215 AS sales#39, count(1)#216 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#215 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#217]

(173) Filter [codegen id : 349]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#217]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#217) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#217 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(174) Project [codegen id : 349]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#217]

(175) ReusedExchange [Reuses operator id: 90]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#218, isEmpty#219, count#220]

(176) HashAggregate [codegen id : 375]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#218, isEmpty#219, count#220]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#221, count(1)#222]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#221 AS sales#56, count(1)#222 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#221 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#223]

(177) Filter [codegen id : 375]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#223]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#223) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#223 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(178) Project [codegen id : 375]
Output [6]: [catalog AS channel#224, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#223]

(179) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#225, isEmpty#226, count#227]

(180) HashAggregate [codegen id : 401]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#225, isEmpty#226, count#227]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#228, count(1)#229]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#228 AS sales#71, count(1)#229 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#228 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#230]

(181) Filter [codegen id : 401]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#230]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#230) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#230 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(182) Project [codegen id : 401]
Output [6]: [web AS channel#231, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#230]

(183) Union

(184) HashAggregate [codegen id : 402]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#232, isEmpty#233, sum#234]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#235, isEmpty#236, sum#237]

(185) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#235, isEmpty#236, sum#237]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#238]

(186) HashAggregate [codegen id : 403]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#235, isEmpty#236, sum#237]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#239, sum(number_sales#40)#240]
Results [2]: [sum(sales#39)#239 AS sum_sales#84, sum(number_sales#40)#240 AS number_sales#85]

(187) HashAggregate [codegen id : 403]
Input [2]: [sum_sales#84, number_sales#85]
Keys: []
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#241, isEmpty#242, sum#243]
Results [3]: [sum#244, isEmpty#245, sum#246]

(188) Exchange
Input [3]: [sum#244, isEmpty#245, sum#246]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#247]

(189) HashAggregate [codegen id : 404]
Input [3]: [sum#244, isEmpty#245, sum#246]
Keys: []
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#248, sum(number_sales#85)#249]
Results [6]: [null AS channel#250, null AS i_brand_id#251, null AS i_class_id#252, null AS i_category_id#253, sum(sum_sales#84)#248 AS sum(sum_sales)#254, sum(number_sales#85)#249 AS sum(number_sales)#255]

(190) Union

(191) HashAggregate [codegen id : 405]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(192) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), ENSURE_REQUIREMENTS, [id=#256]

(193) HashAggregate [codegen id : 406]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(194) TakeOrderedAndProject
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: 100, [channel#44 ASC NULLS FIRST, i_brand_id#6 ASC NULLS FIRST, i_class_id#7 ASC NULLS FIRST, i_category_id#8 ASC NULLS FIRST], [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

===== Subqueries =====

Subquery:1 Hosting operator id = 76 Hosting Expression = Subquery scalar-subquery#42, [id=#43]
* HashAggregate (224)
+- Exchange (223)
   +- * HashAggregate (222)
      +- Union (221)
         :- * Project (204)
         :  +- * BroadcastHashJoin Inner BuildRight (203)
         :     :- * Filter (197)
         :     :  +- * ColumnarToRow (196)
         :     :     +- Scan parquet default.store_sales (195)
         :     +- BroadcastExchange (202)
         :        +- * Project (201)
         :           +- * Filter (200)
         :              +- * ColumnarToRow (199)
         :                 +- Scan parquet default.date_dim (198)
         :- * Project (214)
         :  +- * BroadcastHashJoin Inner BuildRight (213)
         :     :- * Filter (207)
         :     :  +- * ColumnarToRow (206)
         :     :     +- Scan parquet default.catalog_sales (205)
         :     +- BroadcastExchange (212)
         :        +- * Project (211)
         :           +- * Filter (210)
         :              +- * ColumnarToRow (209)
         :                 +- Scan parquet default.date_dim (208)
         +- * Project (220)
            +- * BroadcastHashJoin Inner BuildRight (219)
               :- * Filter (217)
               :  +- * ColumnarToRow (216)
               :     +- Scan parquet default.web_sales (215)
               +- ReusedExchange (218)


(195) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(196) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(197) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(198) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(199) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(200) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(201) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(202) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#257]

(203) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(204) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#258, ss_list_price#4 AS list_price#259]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(205) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(206) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]

(207) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]
Condition : isnotnull(cs_sold_date_sk#16)

(208) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(209) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(210) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(211) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(212) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#260]

(213) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(214) Project [codegen id : 4]
Output [2]: [cs_quantity#45 AS quantity#261, cs_list_price#46 AS list_price#262]
Input [4]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, d_date_sk#10]

(215) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(216) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]

(217) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]
Condition : isnotnull(ws_sold_date_sk#20)

(218) ReusedExchange [Reuses operator id: 212]
Output [1]: [d_date_sk#10]

(219) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(220) Project [codegen id : 6]
Output [2]: [ws_quantity#60 AS quantity#263, ws_list_price#61 AS list_price#264]
Input [4]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, d_date_sk#10]

(221) Union

(222) HashAggregate [codegen id : 7]
Input [2]: [quantity#258, list_price#259]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#258 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#259 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#265, count#266]
Results [2]: [sum#267, count#268]

(223) Exchange
Input [2]: [sum#267, count#268]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#269]

(224) HashAggregate [codegen id : 8]
Input [2]: [sum#267, count#268]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#258 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#259 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#258 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#259 as decimal(12,2)))), DecimalType(18,2), true))#270]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#258 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#259 as decimal(12,2)))), DecimalType(18,2), true))#270 AS average_sales#271]

Subquery:2 Hosting operator id = 92 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:3 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:4 Hosting operator id = 116 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:5 Hosting operator id = 120 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:6 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:7 Hosting operator id = 135 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:8 Hosting operator id = 139 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:9 Hosting operator id = 143 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:10 Hosting operator id = 154 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:11 Hosting operator id = 158 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:12 Hosting operator id = 162 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:13 Hosting operator id = 173 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:14 Hosting operator id = 177 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:15 Hosting operator id = 181 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]


