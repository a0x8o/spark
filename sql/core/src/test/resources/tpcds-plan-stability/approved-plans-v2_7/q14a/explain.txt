== Physical Plan ==
TakeOrderedAndProject (206)
+- * HashAggregate (205)
   +- Exchange (204)
      +- * HashAggregate (203)
         +- Union (202)
            :- * HashAggregate (182)
            :  +- Exchange (181)
            :     +- * HashAggregate (180)
            :        +- Union (179)
            :           :- * HashAggregate (159)
            :           :  +- Exchange (158)
            :           :     +- * HashAggregate (157)
            :           :        +- Union (156)
            :           :           :- * HashAggregate (136)
            :           :           :  +- Exchange (135)
            :           :           :     +- * HashAggregate (134)
            :           :           :        +- Union (133)
            :           :           :           :- * HashAggregate (113)
            :           :           :           :  +- Exchange (112)
            :           :           :           :     +- * HashAggregate (111)
            :           :           :           :        +- Union (110)
            :           :           :           :           :- * Project (77)
            :           :           :           :           :  +- * Filter (76)
            :           :           :           :           :     +- * HashAggregate (75)
            :           :           :           :           :        +- Exchange (74)
            :           :           :           :           :           +- * HashAggregate (73)
            :           :           :           :           :              +- * Project (72)
            :           :           :           :           :                 +- * BroadcastHashJoin Inner BuildRight (71)
            :           :           :           :           :                    :- * Project (65)
            :           :           :           :           :                    :  +- * BroadcastHashJoin Inner BuildRight (64)
            :           :           :           :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
            :           :           :           :           :                    :     :  :- * Filter (3)
            :           :           :           :           :                    :     :  :  +- * ColumnarToRow (2)
            :           :           :           :           :                    :     :  :     +- Scan parquet default.store_sales (1)
            :           :           :           :           :                    :     :  +- BroadcastExchange (56)
            :           :           :           :           :                    :     :     +- * Project (55)
            :           :           :           :           :                    :     :        +- * BroadcastHashJoin Inner BuildRight (54)
            :           :           :           :           :                    :     :           :- * Filter (6)
            :           :           :           :           :                    :     :           :  +- * ColumnarToRow (5)
            :           :           :           :           :                    :     :           :     +- Scan parquet default.item (4)
            :           :           :           :           :                    :     :           +- BroadcastExchange (53)
            :           :           :           :           :                    :     :              +- * HashAggregate (52)
            :           :           :           :           :                    :     :                 +- * HashAggregate (51)
            :           :           :           :           :                    :     :                    +- * HashAggregate (50)
            :           :           :           :           :                    :     :                       +- Exchange (49)
            :           :           :           :           :                    :     :                          +- * HashAggregate (48)
            :           :           :           :           :                    :     :                             +- * BroadcastHashJoin LeftSemi BuildRight (47)
            :           :           :           :           :                    :     :                                :- * BroadcastHashJoin LeftSemi BuildRight (36)
            :           :           :           :           :                    :     :                                :  :- * Project (22)
            :           :           :           :           :                    :     :                                :  :  +- * BroadcastHashJoin Inner BuildRight (21)
            :           :           :           :           :                    :     :                                :  :     :- * Project (15)
            :           :           :           :           :                    :     :                                :  :     :  +- * BroadcastHashJoin Inner BuildRight (14)
            :           :           :           :           :                    :     :                                :  :     :     :- * Filter (9)
            :           :           :           :           :                    :     :                                :  :     :     :  +- * ColumnarToRow (8)
            :           :           :           :           :                    :     :                                :  :     :     :     +- Scan parquet default.store_sales (7)
            :           :           :           :           :                    :     :                                :  :     :     +- BroadcastExchange (13)
            :           :           :           :           :                    :     :                                :  :     :        +- * Filter (12)
            :           :           :           :           :                    :     :                                :  :     :           +- * ColumnarToRow (11)
            :           :           :           :           :                    :     :                                :  :     :              +- Scan parquet default.item (10)
            :           :           :           :           :                    :     :                                :  :     +- BroadcastExchange (20)
            :           :           :           :           :                    :     :                                :  :        +- * Project (19)
            :           :           :           :           :                    :     :                                :  :           +- * Filter (18)
            :           :           :           :           :                    :     :                                :  :              +- * ColumnarToRow (17)
            :           :           :           :           :                    :     :                                :  :                 +- Scan parquet default.date_dim (16)
            :           :           :           :           :                    :     :                                :  +- BroadcastExchange (35)
            :           :           :           :           :                    :     :                                :     +- * Project (34)
            :           :           :           :           :                    :     :                                :        +- * BroadcastHashJoin Inner BuildRight (33)
            :           :           :           :           :                    :     :                                :           :- * Project (31)
            :           :           :           :           :                    :     :                                :           :  +- * BroadcastHashJoin Inner BuildRight (30)
            :           :           :           :           :                    :     :                                :           :     :- * Filter (25)
            :           :           :           :           :                    :     :                                :           :     :  +- * ColumnarToRow (24)
            :           :           :           :           :                    :     :                                :           :     :     +- Scan parquet default.catalog_sales (23)
            :           :           :           :           :                    :     :                                :           :     +- BroadcastExchange (29)
            :           :           :           :           :                    :     :                                :           :        +- * Filter (28)
            :           :           :           :           :                    :     :                                :           :           +- * ColumnarToRow (27)
            :           :           :           :           :                    :     :                                :           :              +- Scan parquet default.item (26)
            :           :           :           :           :                    :     :                                :           +- ReusedExchange (32)
            :           :           :           :           :                    :     :                                +- BroadcastExchange (46)
            :           :           :           :           :                    :     :                                   +- * Project (45)
            :           :           :           :           :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (44)
            :           :           :           :           :                    :     :                                         :- * Project (42)
            :           :           :           :           :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (41)
            :           :           :           :           :                    :     :                                         :     :- * Filter (39)
            :           :           :           :           :                    :     :                                         :     :  +- * ColumnarToRow (38)
            :           :           :           :           :                    :     :                                         :     :     +- Scan parquet default.web_sales (37)
            :           :           :           :           :                    :     :                                         :     +- ReusedExchange (40)
            :           :           :           :           :                    :     :                                         +- ReusedExchange (43)
            :           :           :           :           :                    :     +- BroadcastExchange (63)
            :           :           :           :           :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (62)
            :           :           :           :           :                    :           :- * Filter (60)
            :           :           :           :           :                    :           :  +- * ColumnarToRow (59)
            :           :           :           :           :                    :           :     +- Scan parquet default.item (58)
            :           :           :           :           :                    :           +- ReusedExchange (61)
            :           :           :           :           :                    +- BroadcastExchange (70)
            :           :           :           :           :                       +- * Project (69)
            :           :           :           :           :                          +- * Filter (68)
            :           :           :           :           :                             +- * ColumnarToRow (67)
            :           :           :           :           :                                +- Scan parquet default.date_dim (66)
            :           :           :           :           :- * Project (93)
            :           :           :           :           :  +- * Filter (92)
            :           :           :           :           :     +- * HashAggregate (91)
            :           :           :           :           :        +- Exchange (90)
            :           :           :           :           :           +- * HashAggregate (89)
            :           :           :           :           :              +- * Project (88)
            :           :           :           :           :                 +- * BroadcastHashJoin Inner BuildRight (87)
            :           :           :           :           :                    :- * Project (85)
            :           :           :           :           :                    :  +- * BroadcastHashJoin Inner BuildRight (84)
            :           :           :           :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (82)
            :           :           :           :           :                    :     :  :- * Filter (80)
            :           :           :           :           :                    :     :  :  +- * ColumnarToRow (79)
            :           :           :           :           :                    :     :  :     +- Scan parquet default.catalog_sales (78)
            :           :           :           :           :                    :     :  +- ReusedExchange (81)
            :           :           :           :           :                    :     +- ReusedExchange (83)
            :           :           :           :           :                    +- ReusedExchange (86)
            :           :           :           :           +- * Project (109)
            :           :           :           :              +- * Filter (108)
            :           :           :           :                 +- * HashAggregate (107)
            :           :           :           :                    +- Exchange (106)
            :           :           :           :                       +- * HashAggregate (105)
            :           :           :           :                          +- * Project (104)
            :           :           :           :                             +- * BroadcastHashJoin Inner BuildRight (103)
            :           :           :           :                                :- * Project (101)
            :           :           :           :                                :  +- * BroadcastHashJoin Inner BuildRight (100)
            :           :           :           :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (98)
            :           :           :           :                                :     :  :- * Filter (96)
            :           :           :           :                                :     :  :  +- * ColumnarToRow (95)
            :           :           :           :                                :     :  :     +- Scan parquet default.web_sales (94)
            :           :           :           :                                :     :  +- ReusedExchange (97)
            :           :           :           :                                :     +- ReusedExchange (99)
            :           :           :           :                                +- ReusedExchange (102)
            :           :           :           +- * HashAggregate (132)
            :           :           :              +- Exchange (131)
            :           :           :                 +- * HashAggregate (130)
            :           :           :                    +- * HashAggregate (129)
            :           :           :                       +- Exchange (128)
            :           :           :                          +- * HashAggregate (127)
            :           :           :                             +- Union (126)
            :           :           :                                :- * Project (117)
            :           :           :                                :  +- * Filter (116)
            :           :           :                                :     +- * HashAggregate (115)
            :           :           :                                :        +- ReusedExchange (114)
            :           :           :                                :- * Project (121)
            :           :           :                                :  +- * Filter (120)
            :           :           :                                :     +- * HashAggregate (119)
            :           :           :                                :        +- ReusedExchange (118)
            :           :           :                                +- * Project (125)
            :           :           :                                   +- * Filter (124)
            :           :           :                                      +- * HashAggregate (123)
            :           :           :                                         +- ReusedExchange (122)
            :           :           +- * HashAggregate (155)
            :           :              +- Exchange (154)
            :           :                 +- * HashAggregate (153)
            :           :                    +- * HashAggregate (152)
            :           :                       +- Exchange (151)
            :           :                          +- * HashAggregate (150)
            :           :                             +- Union (149)
            :           :                                :- * Project (140)
            :           :                                :  +- * Filter (139)
            :           :                                :     +- * HashAggregate (138)
            :           :                                :        +- ReusedExchange (137)
            :           :                                :- * Project (144)
            :           :                                :  +- * Filter (143)
            :           :                                :     +- * HashAggregate (142)
            :           :                                :        +- ReusedExchange (141)
            :           :                                +- * Project (148)
            :           :                                   +- * Filter (147)
            :           :                                      +- * HashAggregate (146)
            :           :                                         +- ReusedExchange (145)
            :           +- * HashAggregate (178)
            :              +- Exchange (177)
            :                 +- * HashAggregate (176)
            :                    +- * HashAggregate (175)
            :                       +- Exchange (174)
            :                          +- * HashAggregate (173)
            :                             +- Union (172)
            :                                :- * Project (163)
            :                                :  +- * Filter (162)
            :                                :     +- * HashAggregate (161)
            :                                :        +- ReusedExchange (160)
            :                                :- * Project (167)
            :                                :  +- * Filter (166)
            :                                :     +- * HashAggregate (165)
            :                                :        +- ReusedExchange (164)
            :                                +- * Project (171)
            :                                   +- * Filter (170)
            :                                      +- * HashAggregate (169)
            :                                         +- ReusedExchange (168)
            +- * HashAggregate (201)
               +- Exchange (200)
                  +- * HashAggregate (199)
                     +- * HashAggregate (198)
                        +- Exchange (197)
                           +- * HashAggregate (196)
                              +- Union (195)
                                 :- * Project (186)
                                 :  +- * Filter (185)
                                 :     +- * HashAggregate (184)
                                 :        +- ReusedExchange (183)
                                 :- * Project (190)
                                 :  +- * Filter (189)
                                 :     +- * HashAggregate (188)
                                 :        +- ReusedExchange (187)
                                 +- * Project (194)
                                    +- * Filter (193)
                                       +- * HashAggregate (192)
                                          +- ReusedExchange (191)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : ((isnotnull(i_brand_id#6) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(7) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(8) ColumnarToRow [codegen id : 9]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(9) Filter [codegen id : 9]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(10) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : (((isnotnull(i_item_sk#5) AND isnotnull(i_brand_id#6)) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(13) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(14) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(15) Project [codegen id : 9]
Output [4]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]

(18) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(19) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(20) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(21) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(22) Project [codegen id : 9]
Output [3]: [i_brand_id#6 AS brand_id#13, i_class_id#7 AS class_id#14, i_category_id#8 AS category_id#15]
Input [5]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(23) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#16, cs_item_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(24) ColumnarToRow [codegen id : 5]
Input [2]: [cs_sold_date_sk#16, cs_item_sk#17]

(25) Filter [codegen id : 5]
Input [2]: [cs_sold_date_sk#16, cs_item_sk#17]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_sold_date_sk#16))

(26) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(28) Filter [codegen id : 3]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(29) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(30) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#5]
Join condition: None

(31) Project [codegen id : 5]
Output [4]: [cs_sold_date_sk#16, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [cs_sold_date_sk#16, cs_item_sk#17, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(32) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(33) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(34) Project [codegen id : 5]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [cs_sold_date_sk#16, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(35) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#19]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(37) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#20, ws_item_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(38) ColumnarToRow [codegen id : 8]
Input [2]: [ws_sold_date_sk#20, ws_item_sk#21]

(39) Filter [codegen id : 8]
Input [2]: [ws_sold_date_sk#20, ws_item_sk#21]
Condition : (isnotnull(ws_item_sk#21) AND isnotnull(ws_sold_date_sk#20))

(40) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(41) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [i_item_sk#5]
Join condition: None

(42) Project [codegen id : 8]
Output [4]: [ws_sold_date_sk#20, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ws_sold_date_sk#20, ws_item_sk#21, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(43) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(44) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(45) Project [codegen id : 8]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [ws_sold_date_sk#20, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(46) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#22]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(48) HashAggregate [codegen id : 9]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(49) Exchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: hashpartitioning(brand_id#13, class_id#14, category_id#15, 5), true, [id=#23]

(50) HashAggregate [codegen id : 10]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(51) HashAggregate [codegen id : 10]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(52) HashAggregate [codegen id : 10]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(53) BroadcastExchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#24]

(54) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Right keys [3]: [brand_id#13, class_id#14, category_id#15]
Join condition: None

(55) Project [codegen id : 11]
Output [1]: [i_item_sk#5 AS ss_item_sk#25]
Input [7]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8, brand_id#13, class_id#14, category_id#15]

(56) BroadcastExchange
Input [1]: [ss_item_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(57) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(58) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(59) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(60) Filter [codegen id : 23]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(61) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#25]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(63) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(64) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(65) Project [codegen id : 25]
Output [6]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(66) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(67) ColumnarToRow [codegen id : 24]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]

(68) Filter [codegen id : 24]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#28)) AND (d_year#11 = 2000)) AND (d_moy#28 = 11)) AND isnotnull(d_date_sk#10))

(69) Project [codegen id : 24]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]

(70) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(71) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(72) Project [codegen id : 25]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(73) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#30, isEmpty#31, count#32]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]

(74) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#36]

(75) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37, count(1)#38]
Results [7]: [store AS channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37 AS sales#40, count(1)#38 AS number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42]

(76) Filter [codegen id : 26]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42 as decimal(32,6)) > cast(Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(77) Project [codegen id : 26]
Output [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42]

(78) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 51]
Input [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]

(80) Filter [codegen id : 51]
Input [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_sold_date_sk#16))

(81) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#25]

(82) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(83) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(84) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#5]
Join condition: None

(85) Project [codegen id : 51]
Output [6]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(86) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#10]

(87) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(88) Project [codegen id : 51]
Output [5]: [cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(89) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#47, isEmpty#48, count#49]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]

(90) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#53]

(91) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54, count(1)#55]
Results [7]: [catalog AS channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sales#57, count(1)#55 AS number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#59]

(92) Filter [codegen id : 52]
Input [7]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#59]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#59) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#59 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(93) Project [codegen id : 52]
Output [6]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58]
Input [7]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#59]

(94) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 77]
Input [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]

(96) Filter [codegen id : 77]
Input [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]
Condition : (isnotnull(ws_item_sk#21) AND isnotnull(ws_sold_date_sk#20))

(97) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#25]

(98) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(99) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(100) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [i_item_sk#5]
Join condition: None

(101) Project [codegen id : 77]
Output [6]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(102) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#10]

(103) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(104) Project [codegen id : 77]
Output [5]: [ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(105) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#62, isEmpty#63, count#64]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]

(106) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#68]

(107) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69, count(1)#70]
Results [7]: [web AS channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69 AS sales#72, count(1)#70 AS number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#74]

(108) Filter [codegen id : 78]
Input [7]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#74]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#74) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#74 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(109) Project [codegen id : 78]
Output [6]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73]
Input [7]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#74]

(110) Union

(111) HashAggregate [codegen id : 79]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41]
Keys [4]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#40), partial_sum(number_sales#41)]
Aggregate Attributes [3]: [sum#75, isEmpty#76, sum#77]
Results [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]

(112) Exchange
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]
Arguments: hashpartitioning(channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#81]

(113) HashAggregate [codegen id : 80]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]
Keys [4]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#40), sum(number_sales#41)]
Aggregate Attributes [2]: [sum(sales#40)#82, sum(number_sales#41)#83]
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum(sales#40)#82 AS sum_sales#84, sum(number_sales#41)#83 AS number_sales#85]

(114) ReusedExchange [Reuses operator id: 74]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#86, isEmpty#87, count#88]

(115) HashAggregate [codegen id : 106]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#89, count(1)#90]
Results [7]: [store AS channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#89 AS sales#40, count(1)#90 AS number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#89 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91]

(116) Filter [codegen id : 106]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(117) Project [codegen id : 106]
Output [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91]

(118) ReusedExchange [Reuses operator id: 90]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#92, isEmpty#93, count#94]

(119) HashAggregate [codegen id : 132]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#92, isEmpty#93, count#94]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#95, count(1)#96]
Results [7]: [catalog AS channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#95 AS sales#57, count(1)#96 AS number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#95 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97]

(120) Filter [codegen id : 132]
Input [7]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(121) Project [codegen id : 132]
Output [6]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58]
Input [7]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97]

(122) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#98, isEmpty#99, count#100]

(123) HashAggregate [codegen id : 158]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#98, isEmpty#99, count#100]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#101, count(1)#102]
Results [7]: [web AS channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#101 AS sales#72, count(1)#102 AS number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#101 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#103]

(124) Filter [codegen id : 158]
Input [7]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#103]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#103) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#103 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(125) Project [codegen id : 158]
Output [6]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73]
Input [7]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#103]

(126) Union

(127) HashAggregate [codegen id : 159]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41]
Keys [4]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#40), partial_sum(number_sales#41)]
Aggregate Attributes [3]: [sum#104, isEmpty#105, sum#106]
Results [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#107, isEmpty#108, sum#109]

(128) Exchange
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#107, isEmpty#108, sum#109]
Arguments: hashpartitioning(channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#110]

(129) HashAggregate [codegen id : 160]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#107, isEmpty#108, sum#109]
Keys [4]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#40), sum(number_sales#41)]
Aggregate Attributes [2]: [sum(sales#40)#111, sum(number_sales#41)#112]
Results [5]: [channel#39, i_brand_id#6, i_class_id#7, sum(sales#40)#111 AS sum_sales#84, sum(number_sales#41)#112 AS number_sales#85]

(130) HashAggregate [codegen id : 160]
Input [5]: [channel#39, i_brand_id#6, i_class_id#7, sum_sales#84, number_sales#85]
Keys [3]: [channel#39, i_brand_id#6, i_class_id#7]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#113, isEmpty#114, sum#115]
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, sum#116, isEmpty#117, sum#118]

(131) Exchange
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, sum#116, isEmpty#117, sum#118]
Arguments: hashpartitioning(channel#39, i_brand_id#6, i_class_id#7, 5), true, [id=#119]

(132) HashAggregate [codegen id : 161]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, sum#116, isEmpty#117, sum#118]
Keys [3]: [channel#39, i_brand_id#6, i_class_id#7]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#120, sum(number_sales#85)#121]
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, null AS i_category_id#122, sum(sum_sales#84)#120 AS sum(sum_sales)#123, sum(number_sales#85)#121 AS sum(number_sales)#124]

(133) Union

(134) HashAggregate [codegen id : 162]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(135) Exchange
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#125]

(136) HashAggregate [codegen id : 163]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(137) ReusedExchange [Reuses operator id: 74]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#126, isEmpty#127, count#128]

(138) HashAggregate [codegen id : 189]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#126, isEmpty#127, count#128]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#129, count(1)#130]
Results [7]: [store AS channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#129 AS sales#40, count(1)#130 AS number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#129 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#131]

(139) Filter [codegen id : 189]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#131]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#131) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#131 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(140) Project [codegen id : 189]
Output [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#131]

(141) ReusedExchange [Reuses operator id: 90]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#132, isEmpty#133, count#134]

(142) HashAggregate [codegen id : 215]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#132, isEmpty#133, count#134]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#135, count(1)#136]
Results [7]: [catalog AS channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#135 AS sales#57, count(1)#136 AS number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#135 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#137]

(143) Filter [codegen id : 215]
Input [7]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#137]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#137) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#137 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(144) Project [codegen id : 215]
Output [6]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58]
Input [7]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#137]

(145) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#138, isEmpty#139, count#140]

(146) HashAggregate [codegen id : 241]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#138, isEmpty#139, count#140]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#141, count(1)#142]
Results [7]: [web AS channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#141 AS sales#72, count(1)#142 AS number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#141 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#143]

(147) Filter [codegen id : 241]
Input [7]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#143]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#143) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#143 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(148) Project [codegen id : 241]
Output [6]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73]
Input [7]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#143]

(149) Union

(150) HashAggregate [codegen id : 242]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41]
Keys [4]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#40), partial_sum(number_sales#41)]
Aggregate Attributes [3]: [sum#144, isEmpty#145, sum#146]
Results [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#147, isEmpty#148, sum#149]

(151) Exchange
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#147, isEmpty#148, sum#149]
Arguments: hashpartitioning(channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#150]

(152) HashAggregate [codegen id : 243]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#147, isEmpty#148, sum#149]
Keys [4]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#40), sum(number_sales#41)]
Aggregate Attributes [2]: [sum(sales#40)#151, sum(number_sales#41)#152]
Results [4]: [channel#39, i_brand_id#6, sum(sales#40)#151 AS sum_sales#84, sum(number_sales#41)#152 AS number_sales#85]

(153) HashAggregate [codegen id : 243]
Input [4]: [channel#39, i_brand_id#6, sum_sales#84, number_sales#85]
Keys [2]: [channel#39, i_brand_id#6]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#153, isEmpty#154, sum#155]
Results [5]: [channel#39, i_brand_id#6, sum#156, isEmpty#157, sum#158]

(154) Exchange
Input [5]: [channel#39, i_brand_id#6, sum#156, isEmpty#157, sum#158]
Arguments: hashpartitioning(channel#39, i_brand_id#6, 5), true, [id=#159]

(155) HashAggregate [codegen id : 244]
Input [5]: [channel#39, i_brand_id#6, sum#156, isEmpty#157, sum#158]
Keys [2]: [channel#39, i_brand_id#6]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#160, sum(number_sales#85)#161]
Results [6]: [channel#39, i_brand_id#6, null AS i_class_id#162, null AS i_category_id#163, sum(sum_sales#84)#160 AS sum(sum_sales)#164, sum(number_sales#85)#161 AS sum(number_sales)#165]

(156) Union

(157) HashAggregate [codegen id : 245]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(158) Exchange
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#166]

(159) HashAggregate [codegen id : 246]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(160) ReusedExchange [Reuses operator id: 74]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#167, isEmpty#168, count#169]

(161) HashAggregate [codegen id : 272]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#167, isEmpty#168, count#169]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#170, count(1)#171]
Results [7]: [store AS channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#170 AS sales#40, count(1)#171 AS number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#170 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#172]

(162) Filter [codegen id : 272]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#172]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#172) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#172 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(163) Project [codegen id : 272]
Output [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#172]

(164) ReusedExchange [Reuses operator id: 90]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#173, isEmpty#174, count#175]

(165) HashAggregate [codegen id : 298]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#173, isEmpty#174, count#175]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#176, count(1)#177]
Results [7]: [catalog AS channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#176 AS sales#57, count(1)#177 AS number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#176 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#178]

(166) Filter [codegen id : 298]
Input [7]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#178]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#178) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#178 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(167) Project [codegen id : 298]
Output [6]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58]
Input [7]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#178]

(168) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#179, isEmpty#180, count#181]

(169) HashAggregate [codegen id : 324]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#179, isEmpty#180, count#181]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#182, count(1)#183]
Results [7]: [web AS channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#182 AS sales#72, count(1)#183 AS number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#182 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#184]

(170) Filter [codegen id : 324]
Input [7]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#184]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#184) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#184 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(171) Project [codegen id : 324]
Output [6]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73]
Input [7]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#184]

(172) Union

(173) HashAggregate [codegen id : 325]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41]
Keys [4]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#40), partial_sum(number_sales#41)]
Aggregate Attributes [3]: [sum#185, isEmpty#186, sum#187]
Results [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#188, isEmpty#189, sum#190]

(174) Exchange
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#188, isEmpty#189, sum#190]
Arguments: hashpartitioning(channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#191]

(175) HashAggregate [codegen id : 326]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#188, isEmpty#189, sum#190]
Keys [4]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#40), sum(number_sales#41)]
Aggregate Attributes [2]: [sum(sales#40)#192, sum(number_sales#41)#193]
Results [3]: [channel#39, sum(sales#40)#192 AS sum_sales#84, sum(number_sales#41)#193 AS number_sales#85]

(176) HashAggregate [codegen id : 326]
Input [3]: [channel#39, sum_sales#84, number_sales#85]
Keys [1]: [channel#39]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#194, isEmpty#195, sum#196]
Results [4]: [channel#39, sum#197, isEmpty#198, sum#199]

(177) Exchange
Input [4]: [channel#39, sum#197, isEmpty#198, sum#199]
Arguments: hashpartitioning(channel#39, 5), true, [id=#200]

(178) HashAggregate [codegen id : 327]
Input [4]: [channel#39, sum#197, isEmpty#198, sum#199]
Keys [1]: [channel#39]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#201, sum(number_sales#85)#202]
Results [6]: [channel#39, null AS i_brand_id#203, null AS i_class_id#204, null AS i_category_id#205, sum(sum_sales#84)#201 AS sum(sum_sales)#206, sum(number_sales#85)#202 AS sum(number_sales)#207]

(179) Union

(180) HashAggregate [codegen id : 328]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(181) Exchange
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#208]

(182) HashAggregate [codegen id : 329]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(183) ReusedExchange [Reuses operator id: 74]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#209, isEmpty#210, count#211]

(184) HashAggregate [codegen id : 355]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#209, isEmpty#210, count#211]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#212, count(1)#213]
Results [7]: [store AS channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#212 AS sales#40, count(1)#213 AS number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#212 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#214]

(185) Filter [codegen id : 355]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#214]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#214) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#214 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(186) Project [codegen id : 355]
Output [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#214]

(187) ReusedExchange [Reuses operator id: 90]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#215, isEmpty#216, count#217]

(188) HashAggregate [codegen id : 381]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#215, isEmpty#216, count#217]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#218, count(1)#219]
Results [7]: [catalog AS channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#218 AS sales#57, count(1)#219 AS number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#218 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#220]

(189) Filter [codegen id : 381]
Input [7]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#220]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#220) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#220 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(190) Project [codegen id : 381]
Output [6]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58]
Input [7]: [channel#56, i_brand_id#6, i_class_id#7, i_category_id#8, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#220]

(191) ReusedExchange [Reuses operator id: 106]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#221, isEmpty#222, count#223]

(192) HashAggregate [codegen id : 407]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#221, isEmpty#222, count#223]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#224, count(1)#225]
Results [7]: [web AS channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#224 AS sales#72, count(1)#225 AS number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#224 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#226]

(193) Filter [codegen id : 407]
Input [7]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#226]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#226) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#226 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#43, [id=#44] as decimal(32,6))))

(194) Project [codegen id : 407]
Output [6]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73]
Input [7]: [channel#71, i_brand_id#6, i_class_id#7, i_category_id#8, sales#72, number_sales#73, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#226]

(195) Union

(196) HashAggregate [codegen id : 408]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sales#40, number_sales#41]
Keys [4]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#40), partial_sum(number_sales#41)]
Aggregate Attributes [3]: [sum#227, isEmpty#228, sum#229]
Results [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#230, isEmpty#231, sum#232]

(197) Exchange
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#230, isEmpty#231, sum#232]
Arguments: hashpartitioning(channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#233]

(198) HashAggregate [codegen id : 409]
Input [7]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum#230, isEmpty#231, sum#232]
Keys [4]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#40), sum(number_sales#41)]
Aggregate Attributes [2]: [sum(sales#40)#234, sum(number_sales#41)#235]
Results [2]: [sum(sales#40)#234 AS sum_sales#84, sum(number_sales#41)#235 AS number_sales#85]

(199) HashAggregate [codegen id : 409]
Input [2]: [sum_sales#84, number_sales#85]
Keys: []
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#236, isEmpty#237, sum#238]
Results [3]: [sum#239, isEmpty#240, sum#241]

(200) Exchange
Input [3]: [sum#239, isEmpty#240, sum#241]
Arguments: SinglePartition, true, [id=#242]

(201) HashAggregate [codegen id : 410]
Input [3]: [sum#239, isEmpty#240, sum#241]
Keys: []
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#243, sum(number_sales#85)#244]
Results [6]: [null AS channel#245, null AS i_brand_id#246, null AS i_class_id#247, null AS i_category_id#248, sum(sum_sales#84)#243 AS sum(sum_sales)#249, sum(number_sales#85)#244 AS sum(number_sales)#250]

(202) Union

(203) HashAggregate [codegen id : 411]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(204) Exchange
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#251]

(205) HashAggregate [codegen id : 412]
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(206) TakeOrderedAndProject
Input [6]: [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: 100, [channel#39 ASC NULLS FIRST, i_brand_id#6 ASC NULLS FIRST, i_class_id#7 ASC NULLS FIRST, i_category_id#8 ASC NULLS FIRST], [channel#39, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

===== Subqueries =====

Subquery:1 Hosting operator id = 76 Hosting Expression = Subquery scalar-subquery#43, [id=#44]
* HashAggregate (236)
+- Exchange (235)
   +- * HashAggregate (234)
      +- Union (233)
         :- * Project (216)
         :  +- * BroadcastHashJoin Inner BuildRight (215)
         :     :- * Filter (209)
         :     :  +- * ColumnarToRow (208)
         :     :     +- Scan parquet default.store_sales (207)
         :     +- BroadcastExchange (214)
         :        +- * Project (213)
         :           +- * Filter (212)
         :              +- * ColumnarToRow (211)
         :                 +- Scan parquet default.date_dim (210)
         :- * Project (226)
         :  +- * BroadcastHashJoin Inner BuildRight (225)
         :     :- * Filter (219)
         :     :  +- * ColumnarToRow (218)
         :     :     +- Scan parquet default.catalog_sales (217)
         :     +- BroadcastExchange (224)
         :        +- * Project (223)
         :           +- * Filter (222)
         :              +- * ColumnarToRow (221)
         :                 +- Scan parquet default.date_dim (220)
         +- * Project (232)
            +- * BroadcastHashJoin Inner BuildRight (231)
               :- * Filter (229)
               :  +- * ColumnarToRow (228)
               :     +- Scan parquet default.web_sales (227)
               +- ReusedExchange (230)


(207) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(208) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(209) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(210) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(211) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(212) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(213) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(214) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#252]

(215) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(216) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#253, ss_list_price#4 AS list_price#254]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(217) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(218) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]

(219) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]
Condition : isnotnull(cs_sold_date_sk#16)

(220) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(221) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(222) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(223) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(224) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#255]

(225) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(226) Project [codegen id : 4]
Output [2]: [cs_quantity#45 AS quantity#256, cs_list_price#46 AS list_price#257]
Input [4]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, d_date_sk#10]

(227) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(228) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]

(229) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]
Condition : isnotnull(ws_sold_date_sk#20)

(230) ReusedExchange [Reuses operator id: 224]
Output [1]: [d_date_sk#10]

(231) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(232) Project [codegen id : 6]
Output [2]: [ws_quantity#60 AS quantity#258, ws_list_price#61 AS list_price#259]
Input [4]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, d_date_sk#10]

(233) Union

(234) HashAggregate [codegen id : 7]
Input [2]: [quantity#253, list_price#254]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#253 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#254 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#260, count#261]
Results [2]: [sum#262, count#263]

(235) Exchange
Input [2]: [sum#262, count#263]
Arguments: SinglePartition, true, [id=#264]

(236) HashAggregate [codegen id : 8]
Input [2]: [sum#262, count#263]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#253 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#254 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#253 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#254 as decimal(12,2)))), DecimalType(18,2), true))#265]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#253 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#254 as decimal(12,2)))), DecimalType(18,2), true))#265 AS average_sales#266]

Subquery:2 Hosting operator id = 92 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:3 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:4 Hosting operator id = 116 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:5 Hosting operator id = 120 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:6 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:7 Hosting operator id = 139 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:8 Hosting operator id = 143 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:9 Hosting operator id = 147 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:10 Hosting operator id = 162 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:11 Hosting operator id = 166 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:12 Hosting operator id = 170 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:13 Hosting operator id = 185 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:14 Hosting operator id = 189 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]

Subquery:15 Hosting operator id = 193 Hosting Expression = ReusedSubquery Subquery scalar-subquery#43, [id=#44]


