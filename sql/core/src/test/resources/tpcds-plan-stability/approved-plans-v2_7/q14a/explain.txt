== Physical Plan ==
TakeOrderedAndProject (127)
+- * HashAggregate (126)
   +- Exchange (125)
      +- * HashAggregate (124)
         +- Union (123)
            :- * HashAggregate (102)
            :  +- Exchange (101)
            :     +- * HashAggregate (100)
            :        +- Union (99)
            :           :- * Filter (68)
            :           :  +- * HashAggregate (67)
            :           :     +- Exchange (66)
            :           :        +- * HashAggregate (65)
            :           :           +- * Project (64)
            :           :              +- * BroadcastHashJoin Inner BuildRight (63)
            :           :                 :- * Project (61)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (60)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (53)
            :           :                 :     :  :- * Filter (3)
            :           :                 :     :  :  +- * ColumnarToRow (2)
            :           :                 :     :  :     +- Scan parquet default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (52)
            :           :                 :     :     +- * Project (51)
            :           :                 :     :        +- * BroadcastHashJoin Inner BuildRight (50)
            :           :                 :     :           :- * Filter (6)
            :           :                 :     :           :  +- * ColumnarToRow (5)
            :           :                 :     :           :     +- Scan parquet default.item (4)
            :           :                 :     :           +- BroadcastExchange (49)
            :           :                 :     :              +- * HashAggregate (48)
            :           :                 :     :                 +- * HashAggregate (47)
            :           :                 :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (46)
            :           :                 :     :                       :- * HashAggregate (35)
            :           :                 :     :                       :  +- Exchange (34)
            :           :                 :     :                       :     +- * HashAggregate (33)
            :           :                 :     :                       :        +- * Project (32)
            :           :                 :     :                       :           +- * BroadcastHashJoin Inner BuildRight (31)
            :           :                 :     :                       :              :- * Project (29)
            :           :                 :     :                       :              :  +- * BroadcastHashJoin Inner BuildRight (28)
            :           :                 :     :                       :              :     :- * Filter (9)
            :           :                 :     :                       :              :     :  +- * ColumnarToRow (8)
            :           :                 :     :                       :              :     :     +- Scan parquet default.store_sales (7)
            :           :                 :     :                       :              :     +- BroadcastExchange (27)
            :           :                 :     :                       :              :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
            :           :                 :     :                       :              :           :- * Filter (12)
            :           :                 :     :                       :              :           :  +- * ColumnarToRow (11)
            :           :                 :     :                       :              :           :     +- Scan parquet default.item (10)
            :           :                 :     :                       :              :           +- BroadcastExchange (25)
            :           :                 :     :                       :              :              +- * Project (24)
            :           :                 :     :                       :              :                 +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                 :     :                       :              :                    :- * Project (21)
            :           :                 :     :                       :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
            :           :                 :     :                       :              :                    :     :- * Filter (15)
            :           :                 :     :                       :              :                    :     :  +- * ColumnarToRow (14)
            :           :                 :     :                       :              :                    :     :     +- Scan parquet default.catalog_sales (13)
            :           :                 :     :                       :              :                    :     +- BroadcastExchange (19)
            :           :                 :     :                       :              :                    :        +- * Filter (18)
            :           :                 :     :                       :              :                    :           +- * ColumnarToRow (17)
            :           :                 :     :                       :              :                    :              +- Scan parquet default.item (16)
            :           :                 :     :                       :              :                    +- ReusedExchange (22)
            :           :                 :     :                       :              +- ReusedExchange (30)
            :           :                 :     :                       +- BroadcastExchange (45)
            :           :                 :     :                          +- * Project (44)
            :           :                 :     :                             +- * BroadcastHashJoin Inner BuildRight (43)
            :           :                 :     :                                :- * Project (41)
            :           :                 :     :                                :  +- * BroadcastHashJoin Inner BuildRight (40)
            :           :                 :     :                                :     :- * Filter (38)
            :           :                 :     :                                :     :  +- * ColumnarToRow (37)
            :           :                 :     :                                :     :     +- Scan parquet default.web_sales (36)
            :           :                 :     :                                :     +- ReusedExchange (39)
            :           :                 :     :                                +- ReusedExchange (42)
            :           :                 :     +- BroadcastExchange (59)
            :           :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (58)
            :           :                 :           :- * Filter (56)
            :           :                 :           :  +- * ColumnarToRow (55)
            :           :                 :           :     +- Scan parquet default.item (54)
            :           :                 :           +- ReusedExchange (57)
            :           :                 +- ReusedExchange (62)
            :           :- * Filter (83)
            :           :  +- * HashAggregate (82)
            :           :     +- Exchange (81)
            :           :        +- * HashAggregate (80)
            :           :           +- * Project (79)
            :           :              +- * BroadcastHashJoin Inner BuildRight (78)
            :           :                 :- * Project (76)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (75)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (73)
            :           :                 :     :  :- * Filter (71)
            :           :                 :     :  :  +- * ColumnarToRow (70)
            :           :                 :     :  :     +- Scan parquet default.catalog_sales (69)
            :           :                 :     :  +- ReusedExchange (72)
            :           :                 :     +- ReusedExchange (74)
            :           :                 +- ReusedExchange (77)
            :           +- * Filter (98)
            :              +- * HashAggregate (97)
            :                 +- Exchange (96)
            :                    +- * HashAggregate (95)
            :                       +- * Project (94)
            :                          +- * BroadcastHashJoin Inner BuildRight (93)
            :                             :- * Project (91)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (90)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (88)
            :                             :     :  :- * Filter (86)
            :                             :     :  :  +- * ColumnarToRow (85)
            :                             :     :  :     +- Scan parquet default.web_sales (84)
            :                             :     :  +- ReusedExchange (87)
            :                             :     +- ReusedExchange (89)
            :                             +- ReusedExchange (92)
            :- * HashAggregate (107)
            :  +- Exchange (106)
            :     +- * HashAggregate (105)
            :        +- * HashAggregate (104)
            :           +- ReusedExchange (103)
            :- * HashAggregate (112)
            :  +- Exchange (111)
            :     +- * HashAggregate (110)
            :        +- * HashAggregate (109)
            :           +- ReusedExchange (108)
            :- * HashAggregate (117)
            :  +- Exchange (116)
            :     +- * HashAggregate (115)
            :        +- * HashAggregate (114)
            :           +- ReusedExchange (113)
            +- * HashAggregate (122)
               +- Exchange (121)
                  +- * HashAggregate (120)
                     +- * HashAggregate (119)
                        +- ReusedExchange (118)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet default.item
Output [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Condition : isnotnull(i_item_sk#19)

(19) BroadcastExchange
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#19]
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(22) ReusedExchange [Reuses operator id: 161]
Output [1]: [d_date_sk#24]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Input [5]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22, d_date_sk#24]

(25) BroadcastExchange
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#20, 0), isnull(i_brand_id#20), coalesce(i_class_id#21, 0), isnull(i_class_id#21), coalesce(i_category_id#22, 0), isnull(i_category_id#22)]
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 161]
Output [1]: [d_date_sk#27]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#27]
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#28, i_class_id#15 AS class_id#29, i_category_id#16 AS category_id#30]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#27]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(34) Exchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: hashpartitioning(brand_id#28, class_id#29, category_id#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(35) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(36) Scan parquet default.web_sales
Output [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]

(38) Filter [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Condition : isnotnull(ws_item_sk#32)

(39) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [i_item_sk#34]
Join condition: None

(41) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [6]: [ws_item_sk#32, ws_sold_date_sk#33, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(42) ReusedExchange [Reuses operator id: 161]
Output [1]: [d_date_sk#38]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#38]
Join condition: None

(44) Project [codegen id : 9]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#38]

(45) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#28, 0), isnull(brand_id#28), coalesce(class_id#29, 0), isnull(class_id#29), coalesce(category_id#30, 0), isnull(category_id#30)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(47) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(48) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(49) BroadcastExchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#40]

(50) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#28, class_id#29, category_id#30]
Join condition: None

(51) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#41]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#28, class_id#29, category_id#30]

(52) BroadcastExchange
Input [1]: [ss_item_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(53) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(54) Scan parquet default.item
Output [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(55) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]

(56) Filter [codegen id : 23]
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Condition : isnotnull(i_item_sk#43)

(57) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#41]

(58) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#43]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(59) BroadcastExchange
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47]

(60) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#43]
Join condition: None

(61) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#44, i_class_id#45, i_category_id#46]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]

(62) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#48]

(63) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#48]
Join condition: None

(64) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#44, i_class_id#45, i_category_id#46]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#44, i_class_id#45, i_category_id#46, d_date_sk#48]

(65) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#44, i_class_id#45, i_category_id#46]
Keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#49, isEmpty#50, count#51]
Results [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]

(66) Exchange
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]
Arguments: hashpartitioning(i_brand_id#44, i_class_id#45, i_category_id#46, 5), ENSURE_REQUIREMENTS, [id=#55]

(67) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]
Keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#56, count(1)#57]
Results [6]: [store AS channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sales#59, count(1)#57 AS number_sales#60]

(68) Filter [codegen id : 26]
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sales#59, number_sales#60]
Condition : (isnotnull(sales#59) AND (cast(sales#59 as decimal(32,6)) > cast(Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(69) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#63, cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#66), dynamicpruningexpression(cs_sold_date_sk#66 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(70) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#63, cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66]

(71) Filter [codegen id : 51]
Input [4]: [cs_item_sk#63, cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66]
Condition : isnotnull(cs_item_sk#63)

(72) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#41]

(73) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#63]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(74) ReusedExchange [Reuses operator id: 59]
Output [4]: [i_item_sk#67, i_brand_id#68, i_class_id#69, i_category_id#70]

(75) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#63]
Right keys [1]: [i_item_sk#67]
Join condition: None

(76) Project [codegen id : 51]
Output [6]: [cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66, i_brand_id#68, i_class_id#69, i_category_id#70]
Input [8]: [cs_item_sk#63, cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66, i_item_sk#67, i_brand_id#68, i_class_id#69, i_category_id#70]

(77) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#71]

(78) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#66]
Right keys [1]: [d_date_sk#71]
Join condition: None

(79) Project [codegen id : 51]
Output [5]: [cs_quantity#64, cs_list_price#65, i_brand_id#68, i_class_id#69, i_category_id#70]
Input [7]: [cs_quantity#64, cs_list_price#65, cs_sold_date_sk#66, i_brand_id#68, i_class_id#69, i_category_id#70, d_date_sk#71]

(80) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#64, cs_list_price#65, i_brand_id#68, i_class_id#69, i_category_id#70]
Keys [3]: [i_brand_id#68, i_class_id#69, i_category_id#70]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#72, isEmpty#73, count#74]
Results [6]: [i_brand_id#68, i_class_id#69, i_category_id#70, sum#75, isEmpty#76, count#77]

(81) Exchange
Input [6]: [i_brand_id#68, i_class_id#69, i_category_id#70, sum#75, isEmpty#76, count#77]
Arguments: hashpartitioning(i_brand_id#68, i_class_id#69, i_category_id#70, 5), ENSURE_REQUIREMENTS, [id=#78]

(82) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#68, i_class_id#69, i_category_id#70, sum#75, isEmpty#76, count#77]
Keys [3]: [i_brand_id#68, i_class_id#69, i_category_id#70]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#79, count(1)#80]
Results [6]: [catalog AS channel#81, i_brand_id#68, i_class_id#69, i_category_id#70, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#79 AS sales#82, count(1)#80 AS number_sales#83]

(83) Filter [codegen id : 52]
Input [6]: [channel#81, i_brand_id#68, i_class_id#69, i_category_id#70, sales#82, number_sales#83]
Condition : (isnotnull(sales#82) AND (cast(sales#82 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(84) Scan parquet default.web_sales
Output [4]: [ws_item_sk#84, ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#87), dynamicpruningexpression(ws_sold_date_sk#87 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(85) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#84, ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87]

(86) Filter [codegen id : 77]
Input [4]: [ws_item_sk#84, ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87]
Condition : isnotnull(ws_item_sk#84)

(87) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#41]

(88) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#84]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(89) ReusedExchange [Reuses operator id: 59]
Output [4]: [i_item_sk#88, i_brand_id#89, i_class_id#90, i_category_id#91]

(90) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#84]
Right keys [1]: [i_item_sk#88]
Join condition: None

(91) Project [codegen id : 77]
Output [6]: [ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87, i_brand_id#89, i_class_id#90, i_category_id#91]
Input [8]: [ws_item_sk#84, ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87, i_item_sk#88, i_brand_id#89, i_class_id#90, i_category_id#91]

(92) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#92]

(93) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#87]
Right keys [1]: [d_date_sk#92]
Join condition: None

(94) Project [codegen id : 77]
Output [5]: [ws_quantity#85, ws_list_price#86, i_brand_id#89, i_class_id#90, i_category_id#91]
Input [7]: [ws_quantity#85, ws_list_price#86, ws_sold_date_sk#87, i_brand_id#89, i_class_id#90, i_category_id#91, d_date_sk#92]

(95) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#85, ws_list_price#86, i_brand_id#89, i_class_id#90, i_category_id#91]
Keys [3]: [i_brand_id#89, i_class_id#90, i_category_id#91]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#85 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#86 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#93, isEmpty#94, count#95]
Results [6]: [i_brand_id#89, i_class_id#90, i_category_id#91, sum#96, isEmpty#97, count#98]

(96) Exchange
Input [6]: [i_brand_id#89, i_class_id#90, i_category_id#91, sum#96, isEmpty#97, count#98]
Arguments: hashpartitioning(i_brand_id#89, i_class_id#90, i_category_id#91, 5), ENSURE_REQUIREMENTS, [id=#99]

(97) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#89, i_class_id#90, i_category_id#91, sum#96, isEmpty#97, count#98]
Keys [3]: [i_brand_id#89, i_class_id#90, i_category_id#91]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#85 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#86 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#85 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#86 as decimal(12,2)))), DecimalType(18,2), true))#100, count(1)#101]
Results [6]: [web AS channel#102, i_brand_id#89, i_class_id#90, i_category_id#91, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#85 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#86 as decimal(12,2)))), DecimalType(18,2), true))#100 AS sales#103, count(1)#101 AS number_sales#104]

(98) Filter [codegen id : 78]
Input [6]: [channel#102, i_brand_id#89, i_class_id#90, i_category_id#91, sales#103, number_sales#104]
Condition : (isnotnull(sales#103) AND (cast(sales#103 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(99) Union

(100) HashAggregate [codegen id : 79]
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sales#59, number_sales#60]
Keys [4]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [partial_sum(sales#59), partial_sum(number_sales#60)]
Aggregate Attributes [3]: [sum#105, isEmpty#106, sum#107]
Results [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]

(101) Exchange
Input [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]
Arguments: hashpartitioning(channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, 5), ENSURE_REQUIREMENTS, [id=#111]

(102) HashAggregate [codegen id : 80]
Input [7]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum#108, isEmpty#109, sum#110]
Keys [4]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#59), sum(number_sales#60)]
Aggregate Attributes [2]: [sum(sales#59)#112, sum(number_sales#60)#113]
Results [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum(sales#59)#112 AS sum_sales#114, sum(number_sales#60)#113 AS number_sales#115]

(103) ReusedExchange [Reuses operator id: 101]
Output [7]: [channel#58, i_brand_id#116, i_class_id#117, i_category_id#118, sum#119, isEmpty#120, sum#121]

(104) HashAggregate [codegen id : 160]
Input [7]: [channel#58, i_brand_id#116, i_class_id#117, i_category_id#118, sum#119, isEmpty#120, sum#121]
Keys [4]: [channel#58, i_brand_id#116, i_class_id#117, i_category_id#118]
Functions [2]: [sum(sales#59), sum(number_sales#60)]
Aggregate Attributes [2]: [sum(sales#59)#122, sum(number_sales#60)#123]
Results [5]: [channel#58, i_brand_id#116, i_class_id#117, sum(sales#59)#122 AS sum_sales#114, sum(number_sales#60)#123 AS number_sales#115]

(105) HashAggregate [codegen id : 160]
Input [5]: [channel#58, i_brand_id#116, i_class_id#117, sum_sales#114, number_sales#115]
Keys [3]: [channel#58, i_brand_id#116, i_class_id#117]
Functions [2]: [partial_sum(sum_sales#114), partial_sum(number_sales#115)]
Aggregate Attributes [3]: [sum#124, isEmpty#125, sum#126]
Results [6]: [channel#58, i_brand_id#116, i_class_id#117, sum#127, isEmpty#128, sum#129]

(106) Exchange
Input [6]: [channel#58, i_brand_id#116, i_class_id#117, sum#127, isEmpty#128, sum#129]
Arguments: hashpartitioning(channel#58, i_brand_id#116, i_class_id#117, 5), ENSURE_REQUIREMENTS, [id=#130]

(107) HashAggregate [codegen id : 161]
Input [6]: [channel#58, i_brand_id#116, i_class_id#117, sum#127, isEmpty#128, sum#129]
Keys [3]: [channel#58, i_brand_id#116, i_class_id#117]
Functions [2]: [sum(sum_sales#114), sum(number_sales#115)]
Aggregate Attributes [2]: [sum(sum_sales#114)#131, sum(number_sales#115)#132]
Results [6]: [channel#58, i_brand_id#116, i_class_id#117, null AS i_category_id#133, sum(sum_sales#114)#131 AS sum(sum_sales)#134, sum(number_sales#115)#132 AS sum(number_sales)#135]

(108) ReusedExchange [Reuses operator id: 101]
Output [7]: [channel#58, i_brand_id#136, i_class_id#137, i_category_id#138, sum#139, isEmpty#140, sum#141]

(109) HashAggregate [codegen id : 241]
Input [7]: [channel#58, i_brand_id#136, i_class_id#137, i_category_id#138, sum#139, isEmpty#140, sum#141]
Keys [4]: [channel#58, i_brand_id#136, i_class_id#137, i_category_id#138]
Functions [2]: [sum(sales#59), sum(number_sales#60)]
Aggregate Attributes [2]: [sum(sales#59)#142, sum(number_sales#60)#143]
Results [4]: [channel#58, i_brand_id#136, sum(sales#59)#142 AS sum_sales#114, sum(number_sales#60)#143 AS number_sales#115]

(110) HashAggregate [codegen id : 241]
Input [4]: [channel#58, i_brand_id#136, sum_sales#114, number_sales#115]
Keys [2]: [channel#58, i_brand_id#136]
Functions [2]: [partial_sum(sum_sales#114), partial_sum(number_sales#115)]
Aggregate Attributes [3]: [sum#144, isEmpty#145, sum#146]
Results [5]: [channel#58, i_brand_id#136, sum#147, isEmpty#148, sum#149]

(111) Exchange
Input [5]: [channel#58, i_brand_id#136, sum#147, isEmpty#148, sum#149]
Arguments: hashpartitioning(channel#58, i_brand_id#136, 5), ENSURE_REQUIREMENTS, [id=#150]

(112) HashAggregate [codegen id : 242]
Input [5]: [channel#58, i_brand_id#136, sum#147, isEmpty#148, sum#149]
Keys [2]: [channel#58, i_brand_id#136]
Functions [2]: [sum(sum_sales#114), sum(number_sales#115)]
Aggregate Attributes [2]: [sum(sum_sales#114)#151, sum(number_sales#115)#152]
Results [6]: [channel#58, i_brand_id#136, null AS i_class_id#153, null AS i_category_id#154, sum(sum_sales#114)#151 AS sum(sum_sales)#155, sum(number_sales#115)#152 AS sum(number_sales)#156]

(113) ReusedExchange [Reuses operator id: 101]
Output [7]: [channel#58, i_brand_id#157, i_class_id#158, i_category_id#159, sum#160, isEmpty#161, sum#162]

(114) HashAggregate [codegen id : 322]
Input [7]: [channel#58, i_brand_id#157, i_class_id#158, i_category_id#159, sum#160, isEmpty#161, sum#162]
Keys [4]: [channel#58, i_brand_id#157, i_class_id#158, i_category_id#159]
Functions [2]: [sum(sales#59), sum(number_sales#60)]
Aggregate Attributes [2]: [sum(sales#59)#163, sum(number_sales#60)#164]
Results [3]: [channel#58, sum(sales#59)#163 AS sum_sales#114, sum(number_sales#60)#164 AS number_sales#115]

(115) HashAggregate [codegen id : 322]
Input [3]: [channel#58, sum_sales#114, number_sales#115]
Keys [1]: [channel#58]
Functions [2]: [partial_sum(sum_sales#114), partial_sum(number_sales#115)]
Aggregate Attributes [3]: [sum#165, isEmpty#166, sum#167]
Results [4]: [channel#58, sum#168, isEmpty#169, sum#170]

(116) Exchange
Input [4]: [channel#58, sum#168, isEmpty#169, sum#170]
Arguments: hashpartitioning(channel#58, 5), ENSURE_REQUIREMENTS, [id=#171]

(117) HashAggregate [codegen id : 323]
Input [4]: [channel#58, sum#168, isEmpty#169, sum#170]
Keys [1]: [channel#58]
Functions [2]: [sum(sum_sales#114), sum(number_sales#115)]
Aggregate Attributes [2]: [sum(sum_sales#114)#172, sum(number_sales#115)#173]
Results [6]: [channel#58, null AS i_brand_id#174, null AS i_class_id#175, null AS i_category_id#176, sum(sum_sales#114)#172 AS sum(sum_sales)#177, sum(number_sales#115)#173 AS sum(number_sales)#178]

(118) ReusedExchange [Reuses operator id: 101]
Output [7]: [channel#58, i_brand_id#179, i_class_id#180, i_category_id#181, sum#182, isEmpty#183, sum#184]

(119) HashAggregate [codegen id : 403]
Input [7]: [channel#58, i_brand_id#179, i_class_id#180, i_category_id#181, sum#182, isEmpty#183, sum#184]
Keys [4]: [channel#58, i_brand_id#179, i_class_id#180, i_category_id#181]
Functions [2]: [sum(sales#59), sum(number_sales#60)]
Aggregate Attributes [2]: [sum(sales#59)#185, sum(number_sales#60)#186]
Results [2]: [sum(sales#59)#185 AS sum_sales#114, sum(number_sales#60)#186 AS number_sales#115]

(120) HashAggregate [codegen id : 403]
Input [2]: [sum_sales#114, number_sales#115]
Keys: []
Functions [2]: [partial_sum(sum_sales#114), partial_sum(number_sales#115)]
Aggregate Attributes [3]: [sum#187, isEmpty#188, sum#189]
Results [3]: [sum#190, isEmpty#191, sum#192]

(121) Exchange
Input [3]: [sum#190, isEmpty#191, sum#192]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#193]

(122) HashAggregate [codegen id : 404]
Input [3]: [sum#190, isEmpty#191, sum#192]
Keys: []
Functions [2]: [sum(sum_sales#114), sum(number_sales#115)]
Aggregate Attributes [2]: [sum(sum_sales#114)#194, sum(number_sales#115)#195]
Results [6]: [null AS channel#196, null AS i_brand_id#197, null AS i_class_id#198, null AS i_category_id#199, sum(sum_sales#114)#194 AS sum(sum_sales)#200, sum(number_sales#115)#195 AS sum(number_sales)#201]

(123) Union

(124) HashAggregate [codegen id : 405]
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Keys [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]

(125) Exchange
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Arguments: hashpartitioning(channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115, 5), ENSURE_REQUIREMENTS, [id=#202]

(126) HashAggregate [codegen id : 406]
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Keys [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]

(127) TakeOrderedAndProject
Input [6]: [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]
Arguments: 100, [channel#58 ASC NULLS FIRST, i_brand_id#44 ASC NULLS FIRST, i_class_id#45 ASC NULLS FIRST, i_category_id#46 ASC NULLS FIRST], [channel#58, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#114, number_sales#115]

===== Subqueries =====

Subquery:1 Hosting operator id = 68 Hosting Expression = Subquery scalar-subquery#61, [id=#62]
* HashAggregate (146)
+- Exchange (145)
   +- * HashAggregate (144)
      +- Union (143)
         :- * Project (132)
         :  +- * BroadcastHashJoin Inner BuildRight (131)
         :     :- * ColumnarToRow (129)
         :     :  +- Scan parquet default.store_sales (128)
         :     +- ReusedExchange (130)
         :- * Project (137)
         :  +- * BroadcastHashJoin Inner BuildRight (136)
         :     :- * ColumnarToRow (134)
         :     :  +- Scan parquet default.catalog_sales (133)
         :     +- ReusedExchange (135)
         +- * Project (142)
            +- * BroadcastHashJoin Inner BuildRight (141)
               :- * ColumnarToRow (139)
               :  +- Scan parquet default.web_sales (138)
               +- ReusedExchange (140)


(128) Scan parquet default.store_sales
Output [3]: [ss_quantity#203, ss_list_price#204, ss_sold_date_sk#205]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#205), dynamicpruningexpression(ss_sold_date_sk#205 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(129) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#203, ss_list_price#204, ss_sold_date_sk#205]

(130) ReusedExchange [Reuses operator id: 161]
Output [1]: [d_date_sk#206]

(131) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#205]
Right keys [1]: [d_date_sk#206]
Join condition: None

(132) Project [codegen id : 2]
Output [2]: [ss_quantity#203 AS quantity#207, ss_list_price#204 AS list_price#208]
Input [4]: [ss_quantity#203, ss_list_price#204, ss_sold_date_sk#205, d_date_sk#206]

(133) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#209, cs_list_price#210, cs_sold_date_sk#211]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#211), dynamicpruningexpression(cs_sold_date_sk#211 IN dynamicpruning#212)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(134) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#209, cs_list_price#210, cs_sold_date_sk#211]

(135) ReusedExchange [Reuses operator id: 151]
Output [1]: [d_date_sk#213]

(136) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#211]
Right keys [1]: [d_date_sk#213]
Join condition: None

(137) Project [codegen id : 4]
Output [2]: [cs_quantity#209 AS quantity#214, cs_list_price#210 AS list_price#215]
Input [4]: [cs_quantity#209, cs_list_price#210, cs_sold_date_sk#211, d_date_sk#213]

(138) Scan parquet default.web_sales
Output [3]: [ws_quantity#216, ws_list_price#217, ws_sold_date_sk#218]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#218), dynamicpruningexpression(ws_sold_date_sk#218 IN dynamicpruning#212)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(139) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#216, ws_list_price#217, ws_sold_date_sk#218]

(140) ReusedExchange [Reuses operator id: 151]
Output [1]: [d_date_sk#219]

(141) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#218]
Right keys [1]: [d_date_sk#219]
Join condition: None

(142) Project [codegen id : 6]
Output [2]: [ws_quantity#216 AS quantity#220, ws_list_price#217 AS list_price#221]
Input [4]: [ws_quantity#216, ws_list_price#217, ws_sold_date_sk#218, d_date_sk#219]

(143) Union

(144) HashAggregate [codegen id : 7]
Input [2]: [quantity#207, list_price#208]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#207 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#208 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#222, count#223]
Results [2]: [sum#224, count#225]

(145) Exchange
Input [2]: [sum#224, count#225]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#226]

(146) HashAggregate [codegen id : 8]
Input [2]: [sum#224, count#225]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#207 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#208 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#207 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#208 as decimal(12,2)))), DecimalType(18,2), true))#227]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#207 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#208 as decimal(12,2)))), DecimalType(18,2), true))#227 AS average_sales#228]

Subquery:2 Hosting operator id = 128 Hosting Expression = ss_sold_date_sk#205 IN dynamicpruning#12

Subquery:3 Hosting operator id = 133 Hosting Expression = cs_sold_date_sk#211 IN dynamicpruning#212
BroadcastExchange (151)
+- * Project (150)
   +- * Filter (149)
      +- * ColumnarToRow (148)
         +- Scan parquet default.date_dim (147)


(147) Scan parquet default.date_dim
Output [2]: [d_date_sk#213, d_year#229]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(148) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#213, d_year#229]

(149) Filter [codegen id : 1]
Input [2]: [d_date_sk#213, d_year#229]
Condition : (((isnotnull(d_year#229) AND (d_year#229 >= 1998)) AND (d_year#229 <= 2000)) AND isnotnull(d_date_sk#213))

(150) Project [codegen id : 1]
Output [1]: [d_date_sk#213]
Input [2]: [d_date_sk#213, d_year#229]

(151) BroadcastExchange
Input [1]: [d_date_sk#213]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#230]

Subquery:4 Hosting operator id = 138 Hosting Expression = ws_sold_date_sk#218 IN dynamicpruning#212

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (156)
+- * Project (155)
   +- * Filter (154)
      +- * ColumnarToRow (153)
         +- Scan parquet default.date_dim (152)


(152) Scan parquet default.date_dim
Output [3]: [d_date_sk#48, d_year#231, d_moy#232]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(153) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#48, d_year#231, d_moy#232]

(154) Filter [codegen id : 1]
Input [3]: [d_date_sk#48, d_year#231, d_moy#232]
Condition : ((((isnotnull(d_year#231) AND isnotnull(d_moy#232)) AND (d_year#231 = 2000)) AND (d_moy#232 = 11)) AND isnotnull(d_date_sk#48))

(155) Project [codegen id : 1]
Output [1]: [d_date_sk#48]
Input [3]: [d_date_sk#48, d_year#231, d_moy#232]

(156) BroadcastExchange
Input [1]: [d_date_sk#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#233]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (161)
+- * Project (160)
   +- * Filter (159)
      +- * ColumnarToRow (158)
         +- Scan parquet default.date_dim (157)


(157) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_year#234]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(158) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#234]

(159) Filter [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#234]
Condition : (((isnotnull(d_year#234) AND (d_year#234 >= 1999)) AND (d_year#234 <= 2001)) AND isnotnull(d_date_sk#27))

(160) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_year#234]

(161) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#235]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#12

Subquery:9 Hosting operator id = 83 Hosting Expression = ReusedSubquery Subquery scalar-subquery#61, [id=#62]

Subquery:10 Hosting operator id = 69 Hosting Expression = cs_sold_date_sk#66 IN dynamicpruning#5

Subquery:11 Hosting operator id = 98 Hosting Expression = ReusedSubquery Subquery scalar-subquery#61, [id=#62]

Subquery:12 Hosting operator id = 84 Hosting Expression = ws_sold_date_sk#87 IN dynamicpruning#5


