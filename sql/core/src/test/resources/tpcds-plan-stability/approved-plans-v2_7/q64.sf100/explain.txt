== Physical Plan ==
* Sort (209)
+- Exchange (208)
   +- * Project (207)
      +- * SortMergeJoin Inner (206)
         :- * Sort (128)
         :  +- Exchange (127)
         :     +- * HashAggregate (126)
         :        +- Exchange (125)
         :           +- * HashAggregate (124)
         :              +- * Project (123)
         :                 +- * BroadcastHashJoin Inner BuildRight (122)
         :                    :- * Project (116)
         :                    :  +- * BroadcastHashJoin Inner BuildRight (115)
         :                    :     :- * Project (113)
         :                    :     :  +- * BroadcastHashJoin Inner BuildRight (112)
         :                    :     :     :- * Project (107)
         :                    :     :     :  +- * SortMergeJoin Inner (106)
         :                    :     :     :     :- * Sort (103)
         :                    :     :     :     :  +- Exchange (102)
         :                    :     :     :     :     +- * Project (101)
         :                    :     :     :     :        +- * SortMergeJoin Inner (100)
         :                    :     :     :     :           :- * Sort (94)
         :                    :     :     :     :           :  +- Exchange (93)
         :                    :     :     :     :           :     +- * Project (92)
         :                    :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (91)
         :                    :     :     :     :           :           :- * Project (89)
         :                    :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (88)
         :                    :     :     :     :           :           :     :- * Project (83)
         :                    :     :     :     :           :           :     :  +- * BroadcastHashJoin Inner BuildRight (82)
         :                    :     :     :     :           :           :     :     :- * Project (77)
         :                    :     :     :     :           :           :     :     :  +- * SortMergeJoin Inner (76)
         :                    :     :     :     :           :           :     :     :     :- * Sort (73)
         :                    :     :     :     :           :           :     :     :     :  +- Exchange (72)
         :                    :     :     :     :           :           :     :     :     :     +- * Project (71)
         :                    :     :     :     :           :           :     :     :     :        +- * SortMergeJoin Inner (70)
         :                    :     :     :     :           :           :     :     :     :           :- * Sort (64)
         :                    :     :     :     :           :           :     :     :     :           :  +- Exchange (63)
         :                    :     :     :     :           :           :     :     :     :           :     +- * Project (62)
         :                    :     :     :     :           :           :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (61)
         :                    :     :     :     :           :           :     :     :     :           :           :- * Project (59)
         :                    :     :     :     :           :           :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (58)
         :                    :     :     :     :           :           :     :     :     :           :           :     :- * Project (53)
         :                    :     :     :     :           :           :     :     :     :           :           :     :  +- * SortMergeJoin Inner (52)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :- * Sort (46)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :  +- Exchange (45)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :     +- * Project (44)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :        +- * BroadcastHashJoin Inner BuildRight (43)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :- * Project (38)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (37)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :- * Project (35)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (34)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :- * Project (13)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :  +- * SortMergeJoin Inner (12)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :- * Sort (5)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :  +- Exchange (4)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :     +- * Filter (3)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :        +- * ColumnarToRow (2)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :           +- Scan parquet default.store_sales (1)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     +- * Sort (11)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        +- Exchange (10)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :           +- * Project (9)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :              +- * Filter (8)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                 +- * ColumnarToRow (7)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                    +- Scan parquet default.store_returns (6)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     +- BroadcastExchange (33)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :        +- * Project (32)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :           +- * Filter (31)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :              +- * HashAggregate (30)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                 +- Exchange (29)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                    +- * HashAggregate (28)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                       +- * Project (27)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                          +- * SortMergeJoin Inner (26)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :- * Sort (19)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :  +- Exchange (18)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :     +- * Project (17)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :        +- * Filter (16)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :           +- * ColumnarToRow (15)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :              +- Scan parquet default.catalog_sales (14)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             +- * Sort (25)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                +- Exchange (24)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                   +- * Project (23)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                      +- * Filter (22)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                         +- * ColumnarToRow (21)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                            +- Scan parquet default.catalog_returns (20)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     +- ReusedExchange (36)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           +- BroadcastExchange (42)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :              +- * Filter (41)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                 +- * ColumnarToRow (40)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                    +- Scan parquet default.store (39)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     +- * Sort (51)
         :                    :     :     :     :           :           :     :     :     :           :           :     :        +- Exchange (50)
         :                    :     :     :     :           :           :     :     :     :           :           :     :           +- * Filter (49)
         :                    :     :     :     :           :           :     :     :     :           :           :     :              +- * ColumnarToRow (48)
         :                    :     :     :     :           :           :     :     :     :           :           :     :                 +- Scan parquet default.customer (47)
         :                    :     :     :     :           :           :     :     :     :           :           :     +- BroadcastExchange (57)
         :                    :     :     :     :           :           :     :     :     :           :           :        +- * Filter (56)
         :                    :     :     :     :           :           :     :     :     :           :           :           +- * ColumnarToRow (55)
         :                    :     :     :     :           :           :     :     :     :           :           :              +- Scan parquet default.date_dim (54)
         :                    :     :     :     :           :           :     :     :     :           :           +- ReusedExchange (60)
         :                    :     :     :     :           :           :     :     :     :           +- * Sort (69)
         :                    :     :     :     :           :           :     :     :     :              +- Exchange (68)
         :                    :     :     :     :           :           :     :     :     :                 +- * Filter (67)
         :                    :     :     :     :           :           :     :     :     :                    +- * ColumnarToRow (66)
         :                    :     :     :     :           :           :     :     :     :                       +- Scan parquet default.customer_demographics (65)
         :                    :     :     :     :           :           :     :     :     +- * Sort (75)
         :                    :     :     :     :           :           :     :     :        +- ReusedExchange (74)
         :                    :     :     :     :           :           :     :     +- BroadcastExchange (81)
         :                    :     :     :     :           :           :     :        +- * Filter (80)
         :                    :     :     :     :           :           :     :           +- * ColumnarToRow (79)
         :                    :     :     :     :           :           :     :              +- Scan parquet default.promotion (78)
         :                    :     :     :     :           :           :     +- BroadcastExchange (87)
         :                    :     :     :     :           :           :        +- * Filter (86)
         :                    :     :     :     :           :           :           +- * ColumnarToRow (85)
         :                    :     :     :     :           :           :              +- Scan parquet default.household_demographics (84)
         :                    :     :     :     :           :           +- ReusedExchange (90)
         :                    :     :     :     :           +- * Sort (99)
         :                    :     :     :     :              +- Exchange (98)
         :                    :     :     :     :                 +- * Filter (97)
         :                    :     :     :     :                    +- * ColumnarToRow (96)
         :                    :     :     :     :                       +- Scan parquet default.customer_address (95)
         :                    :     :     :     +- * Sort (105)
         :                    :     :     :        +- ReusedExchange (104)
         :                    :     :     +- BroadcastExchange (111)
         :                    :     :        +- * Filter (110)
         :                    :     :           +- * ColumnarToRow (109)
         :                    :     :              +- Scan parquet default.income_band (108)
         :                    :     +- ReusedExchange (114)
         :                    +- BroadcastExchange (121)
         :                       +- * Project (120)
         :                          +- * Filter (119)
         :                             +- * ColumnarToRow (118)
         :                                +- Scan parquet default.item (117)
         +- * Sort (205)
            +- Exchange (204)
               +- * HashAggregate (203)
                  +- Exchange (202)
                     +- * HashAggregate (201)
                        +- * Project (200)
                           +- * BroadcastHashJoin Inner BuildRight (199)
                              :- * Project (197)
                              :  +- * BroadcastHashJoin Inner BuildRight (196)
                              :     :- * Project (194)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (193)
                              :     :     :- * Project (191)
                              :     :     :  +- * SortMergeJoin Inner (190)
                              :     :     :     :- * Sort (187)
                              :     :     :     :  +- Exchange (186)
                              :     :     :     :     +- * Project (185)
                              :     :     :     :        +- * SortMergeJoin Inner (184)
                              :     :     :     :           :- * Sort (181)
                              :     :     :     :           :  +- Exchange (180)
                              :     :     :     :           :     +- * Project (179)
                              :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (178)
                              :     :     :     :           :           :- * Project (176)
                              :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (175)
                              :     :     :     :           :           :     :- * Project (173)
                              :     :     :     :           :           :     :  +- * BroadcastHashJoin Inner BuildRight (172)
                              :     :     :     :           :           :     :     :- * Project (170)
                              :     :     :     :           :           :     :     :  +- * SortMergeJoin Inner (169)
                              :     :     :     :           :           :     :     :     :- * Sort (166)
                              :     :     :     :           :           :     :     :     :  +- Exchange (165)
                              :     :     :     :           :           :     :     :     :     +- * Project (164)
                              :     :     :     :           :           :     :     :     :        +- * SortMergeJoin Inner (163)
                              :     :     :     :           :           :     :     :     :           :- * Sort (160)
                              :     :     :     :           :           :     :     :     :           :  +- Exchange (159)
                              :     :     :     :           :           :     :     :     :           :     +- * Project (158)
                              :     :     :     :           :           :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (157)
                              :     :     :     :           :           :     :     :     :           :           :- * Project (155)
                              :     :     :     :           :           :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (154)
                              :     :     :     :           :           :     :     :     :           :           :     :- * Project (152)
                              :     :     :     :           :           :     :     :     :           :           :     :  +- * SortMergeJoin Inner (151)
                              :     :     :     :           :           :     :     :     :           :           :     :     :- * Sort (148)
                              :     :     :     :           :           :     :     :     :           :           :     :     :  +- Exchange (147)
                              :     :     :     :           :           :     :     :     :           :           :     :     :     +- * Project (146)
                              :     :     :     :           :           :     :     :     :           :           :     :     :        +- * BroadcastHashJoin Inner BuildRight (145)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :- * Project (143)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (142)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :- * Project (140)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (139)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :- * Project (137)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :  +- * SortMergeJoin Inner (136)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :- * Sort (133)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :  +- Exchange (132)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :     +- * Filter (131)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :        +- * ColumnarToRow (130)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :           +- Scan parquet default.store_sales (129)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     +- * Sort (135)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        +- ReusedExchange (134)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     +- ReusedExchange (138)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     +- ReusedExchange (141)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           +- ReusedExchange (144)
                              :     :     :     :           :           :     :     :     :           :           :     :     +- * Sort (150)
                              :     :     :     :           :           :     :     :     :           :           :     :        +- ReusedExchange (149)
                              :     :     :     :           :           :     :     :     :           :           :     +- ReusedExchange (153)
                              :     :     :     :           :           :     :     :     :           :           +- ReusedExchange (156)
                              :     :     :     :           :           :     :     :     :           +- * Sort (162)
                              :     :     :     :           :           :     :     :     :              +- ReusedExchange (161)
                              :     :     :     :           :           :     :     :     +- * Sort (168)
                              :     :     :     :           :           :     :     :        +- ReusedExchange (167)
                              :     :     :     :           :           :     :     +- ReusedExchange (171)
                              :     :     :     :           :           :     +- ReusedExchange (174)
                              :     :     :     :           :           +- ReusedExchange (177)
                              :     :     :     :           +- * Sort (183)
                              :     :     :     :              +- ReusedExchange (182)
                              :     :     :     +- * Sort (189)
                              :     :     :        +- ReusedExchange (188)
                              :     :     +- ReusedExchange (192)
                              :     +- ReusedExchange (195)
                              +- ReusedExchange (198)


(1) Scan parquet default.store_sales
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]

(3) Filter [codegen id : 1]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Condition : ((((((((isnotnull(ss_item_sk#1) AND isnotnull(ss_ticket_number#8)) AND isnotnull(ss_store_sk#6)) AND isnotnull(ss_customer_sk#2)) AND isnotnull(ss_cdemo_sk#3)) AND isnotnull(ss_promo_sk#7)) AND isnotnull(ss_hdemo_sk#4)) AND isnotnull(ss_addr_sk#5)) AND might_contain(Subquery scalar-subquery#14, [id=#15], xxhash64(ss_item_sk#1, 42)))

(4) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#8, 5), ENSURE_REQUIREMENTS, [id=#16]

(5) Sort [codegen id : 2]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#8 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [3]: [sr_item_sk#17, sr_ticket_number#18, sr_returned_date_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) ColumnarToRow [codegen id : 3]
Input [3]: [sr_item_sk#17, sr_ticket_number#18, sr_returned_date_sk#19]

(8) Filter [codegen id : 3]
Input [3]: [sr_item_sk#17, sr_ticket_number#18, sr_returned_date_sk#19]
Condition : (isnotnull(sr_item_sk#17) AND isnotnull(sr_ticket_number#18))

(9) Project [codegen id : 3]
Output [2]: [sr_item_sk#17, sr_ticket_number#18]
Input [3]: [sr_item_sk#17, sr_ticket_number#18, sr_returned_date_sk#19]

(10) Exchange
Input [2]: [sr_item_sk#17, sr_ticket_number#18]
Arguments: hashpartitioning(sr_item_sk#17, sr_ticket_number#18, 5), ENSURE_REQUIREMENTS, [id=#20]

(11) Sort [codegen id : 4]
Input [2]: [sr_item_sk#17, sr_ticket_number#18]
Arguments: [sr_item_sk#17 ASC NULLS FIRST, sr_ticket_number#18 ASC NULLS FIRST], false, 0

(12) SortMergeJoin [codegen id : 13]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#8]
Right keys [2]: [sr_item_sk#17, sr_ticket_number#18]
Join condition: None

(13) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, sr_item_sk#17, sr_ticket_number#18]

(14) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#21, cs_order_number#22, cs_ext_list_price#23, cs_sold_date_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_order_number)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_ext_list_price:decimal(7,2)>

(15) ColumnarToRow [codegen id : 5]
Input [4]: [cs_item_sk#21, cs_order_number#22, cs_ext_list_price#23, cs_sold_date_sk#24]

(16) Filter [codegen id : 5]
Input [4]: [cs_item_sk#21, cs_order_number#22, cs_ext_list_price#23, cs_sold_date_sk#24]
Condition : (isnotnull(cs_item_sk#21) AND isnotnull(cs_order_number#22))

(17) Project [codegen id : 5]
Output [3]: [cs_item_sk#21, cs_order_number#22, cs_ext_list_price#23]
Input [4]: [cs_item_sk#21, cs_order_number#22, cs_ext_list_price#23, cs_sold_date_sk#24]

(18) Exchange
Input [3]: [cs_item_sk#21, cs_order_number#22, cs_ext_list_price#23]
Arguments: hashpartitioning(cs_item_sk#21, cs_order_number#22, 5), ENSURE_REQUIREMENTS, [id=#25]

(19) Sort [codegen id : 6]
Input [3]: [cs_item_sk#21, cs_order_number#22, cs_ext_list_price#23]
Arguments: [cs_item_sk#21 ASC NULLS FIRST, cs_order_number#22 ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_returns
Output [6]: [cr_item_sk#26, cr_order_number#27, cr_refunded_cash#28, cr_reversed_charge#29, cr_store_credit#30, cr_returned_date_sk#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2)>

(21) ColumnarToRow [codegen id : 7]
Input [6]: [cr_item_sk#26, cr_order_number#27, cr_refunded_cash#28, cr_reversed_charge#29, cr_store_credit#30, cr_returned_date_sk#31]

(22) Filter [codegen id : 7]
Input [6]: [cr_item_sk#26, cr_order_number#27, cr_refunded_cash#28, cr_reversed_charge#29, cr_store_credit#30, cr_returned_date_sk#31]
Condition : (isnotnull(cr_item_sk#26) AND isnotnull(cr_order_number#27))

(23) Project [codegen id : 7]
Output [5]: [cr_item_sk#26, cr_order_number#27, cr_refunded_cash#28, cr_reversed_charge#29, cr_store_credit#30]
Input [6]: [cr_item_sk#26, cr_order_number#27, cr_refunded_cash#28, cr_reversed_charge#29, cr_store_credit#30, cr_returned_date_sk#31]

(24) Exchange
Input [5]: [cr_item_sk#26, cr_order_number#27, cr_refunded_cash#28, cr_reversed_charge#29, cr_store_credit#30]
Arguments: hashpartitioning(cr_item_sk#26, cr_order_number#27, 5), ENSURE_REQUIREMENTS, [id=#32]

(25) Sort [codegen id : 8]
Input [5]: [cr_item_sk#26, cr_order_number#27, cr_refunded_cash#28, cr_reversed_charge#29, cr_store_credit#30]
Arguments: [cr_item_sk#26 ASC NULLS FIRST, cr_order_number#27 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 9]
Left keys [2]: [cs_item_sk#21, cs_order_number#22]
Right keys [2]: [cr_item_sk#26, cr_order_number#27]
Join condition: None

(27) Project [codegen id : 9]
Output [5]: [cs_item_sk#21, cs_ext_list_price#23, cr_refunded_cash#28, cr_reversed_charge#29, cr_store_credit#30]
Input [8]: [cs_item_sk#21, cs_order_number#22, cs_ext_list_price#23, cr_item_sk#26, cr_order_number#27, cr_refunded_cash#28, cr_reversed_charge#29, cr_store_credit#30]

(28) HashAggregate [codegen id : 9]
Input [5]: [cs_item_sk#21, cs_ext_list_price#23, cr_refunded_cash#28, cr_reversed_charge#29, cr_store_credit#30]
Keys [1]: [cs_item_sk#21]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_list_price#23)), partial_sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#28 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#29 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) + promote_precision(cast(cr_store_credit#30 as decimal(9,2)))), DecimalType(9,2)))]
Aggregate Attributes [3]: [sum#33, sum#34, isEmpty#35]
Results [4]: [cs_item_sk#21, sum#36, sum#37, isEmpty#38]

(29) Exchange
Input [4]: [cs_item_sk#21, sum#36, sum#37, isEmpty#38]
Arguments: hashpartitioning(cs_item_sk#21, 5), ENSURE_REQUIREMENTS, [id=#39]

(30) HashAggregate [codegen id : 10]
Input [4]: [cs_item_sk#21, sum#36, sum#37, isEmpty#38]
Keys [1]: [cs_item_sk#21]
Functions [2]: [sum(UnscaledValue(cs_ext_list_price#23)), sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#28 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#29 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) + promote_precision(cast(cr_store_credit#30 as decimal(9,2)))), DecimalType(9,2)))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_list_price#23))#40, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#28 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#29 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) + promote_precision(cast(cr_store_credit#30 as decimal(9,2)))), DecimalType(9,2)))#41]
Results [3]: [cs_item_sk#21, MakeDecimal(sum(UnscaledValue(cs_ext_list_price#23))#40,17,2) AS sale#42, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#28 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#29 as decimal(8,2)))), DecimalType(8,2)) as decimal(9,2))) + promote_precision(cast(cr_store_credit#30 as decimal(9,2)))), DecimalType(9,2)))#41 AS refund#43]

(31) Filter [codegen id : 10]
Input [3]: [cs_item_sk#21, sale#42, refund#43]
Condition : (isnotnull(sale#42) AND (cast(sale#42 as decimal(21,2)) > CheckOverflow((2.00 * promote_precision(refund#43)), DecimalType(21,2))))

(32) Project [codegen id : 10]
Output [1]: [cs_item_sk#21]
Input [3]: [cs_item_sk#21, sale#42, refund#43]

(33) BroadcastExchange
Input [1]: [cs_item_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#44]

(34) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [cs_item_sk#21]
Join condition: None

(35) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, cs_item_sk#21]

(36) ReusedExchange [Reuses operator id: 220]
Output [2]: [d_date_sk#45, d_year#46]

(37) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#45]
Join condition: None

(38) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46]
Input [13]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, d_date_sk#45, d_year#46]

(39) Scan parquet default.store
Output [3]: [s_store_sk#47, s_store_name#48, s_zip#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_name), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>

(40) ColumnarToRow [codegen id : 12]
Input [3]: [s_store_sk#47, s_store_name#48, s_zip#49]

(41) Filter [codegen id : 12]
Input [3]: [s_store_sk#47, s_store_name#48, s_zip#49]
Condition : ((isnotnull(s_store_sk#47) AND isnotnull(s_store_name#48)) AND isnotnull(s_zip#49))

(42) BroadcastExchange
Input [3]: [s_store_sk#47, s_store_name#48, s_zip#49]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50]

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_store_sk#6]
Right keys [1]: [s_store_sk#47]
Join condition: None

(44) Project [codegen id : 13]
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_sk#47, s_store_name#48, s_zip#49]

(45) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#51]

(46) Sort [codegen id : 14]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(47) Scan parquet default.customer
Output [6]: [c_customer_sk#52, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, c_first_shipto_date_sk#56, c_first_sales_date_sk#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_first_sales_date_sk), IsNotNull(c_first_shipto_date_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int>

(48) ColumnarToRow [codegen id : 15]
Input [6]: [c_customer_sk#52, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, c_first_shipto_date_sk#56, c_first_sales_date_sk#57]

(49) Filter [codegen id : 15]
Input [6]: [c_customer_sk#52, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, c_first_shipto_date_sk#56, c_first_sales_date_sk#57]
Condition : (((((isnotnull(c_customer_sk#52) AND isnotnull(c_first_sales_date_sk#57)) AND isnotnull(c_first_shipto_date_sk#56)) AND isnotnull(c_current_cdemo_sk#53)) AND isnotnull(c_current_hdemo_sk#54)) AND isnotnull(c_current_addr_sk#55))

(50) Exchange
Input [6]: [c_customer_sk#52, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, c_first_shipto_date_sk#56, c_first_sales_date_sk#57]
Arguments: hashpartitioning(c_customer_sk#52, 5), ENSURE_REQUIREMENTS, [id=#58]

(51) Sort [codegen id : 16]
Input [6]: [c_customer_sk#52, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, c_first_shipto_date_sk#56, c_first_sales_date_sk#57]
Arguments: [c_customer_sk#52 ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 19]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#52]
Join condition: None

(53) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, c_first_shipto_date_sk#56, c_first_sales_date_sk#57]
Input [18]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_customer_sk#52, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, c_first_shipto_date_sk#56, c_first_sales_date_sk#57]

(54) Scan parquet default.date_dim
Output [2]: [d_date_sk#59, d_year#60]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(55) ColumnarToRow [codegen id : 17]
Input [2]: [d_date_sk#59, d_year#60]

(56) Filter [codegen id : 17]
Input [2]: [d_date_sk#59, d_year#60]
Condition : isnotnull(d_date_sk#59)

(57) BroadcastExchange
Input [2]: [d_date_sk#59, d_year#60]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#61]

(58) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [c_first_sales_date_sk#57]
Right keys [1]: [d_date_sk#59]
Join condition: None

(59) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, c_first_shipto_date_sk#56, d_year#60]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, c_first_shipto_date_sk#56, c_first_sales_date_sk#57, d_date_sk#59, d_year#60]

(60) ReusedExchange [Reuses operator id: 57]
Output [2]: [d_date_sk#62, d_year#63]

(61) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [c_first_shipto_date_sk#56]
Right keys [1]: [d_date_sk#62]
Join condition: None

(62) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, c_first_shipto_date_sk#56, d_year#60, d_date_sk#62, d_year#63]

(63) Exchange
Input [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63]
Arguments: hashpartitioning(ss_cdemo_sk#3, 5), ENSURE_REQUIREMENTS, [id=#64]

(64) Sort [codegen id : 20]
Input [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63]
Arguments: [ss_cdemo_sk#3 ASC NULLS FIRST], false, 0

(65) Scan parquet default.customer_demographics
Output [2]: [cd_demo_sk#65, cd_marital_status#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(66) ColumnarToRow [codegen id : 21]
Input [2]: [cd_demo_sk#65, cd_marital_status#66]

(67) Filter [codegen id : 21]
Input [2]: [cd_demo_sk#65, cd_marital_status#66]
Condition : (isnotnull(cd_demo_sk#65) AND isnotnull(cd_marital_status#66))

(68) Exchange
Input [2]: [cd_demo_sk#65, cd_marital_status#66]
Arguments: hashpartitioning(cd_demo_sk#65, 5), ENSURE_REQUIREMENTS, [id=#67]

(69) Sort [codegen id : 22]
Input [2]: [cd_demo_sk#65, cd_marital_status#66]
Arguments: [cd_demo_sk#65 ASC NULLS FIRST], false, 0

(70) SortMergeJoin [codegen id : 23]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#65]
Join condition: None

(71) Project [codegen id : 23]
Output [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63, cd_marital_status#66]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63, cd_demo_sk#65, cd_marital_status#66]

(72) Exchange
Input [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63, cd_marital_status#66]
Arguments: hashpartitioning(c_current_cdemo_sk#53, 5), ENSURE_REQUIREMENTS, [id=#68]

(73) Sort [codegen id : 24]
Input [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63, cd_marital_status#66]
Arguments: [c_current_cdemo_sk#53 ASC NULLS FIRST], false, 0

(74) ReusedExchange [Reuses operator id: 68]
Output [2]: [cd_demo_sk#69, cd_marital_status#70]

(75) Sort [codegen id : 26]
Input [2]: [cd_demo_sk#69, cd_marital_status#70]
Arguments: [cd_demo_sk#69 ASC NULLS FIRST], false, 0

(76) SortMergeJoin [codegen id : 30]
Left keys [1]: [c_current_cdemo_sk#53]
Right keys [1]: [cd_demo_sk#69]
Join condition: NOT (cd_marital_status#66 = cd_marital_status#70)

(77) Project [codegen id : 30]
Output [14]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63]
Input [18]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_cdemo_sk#53, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63, cd_marital_status#66, cd_demo_sk#69, cd_marital_status#70]

(78) Scan parquet default.promotion
Output [1]: [p_promo_sk#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(79) ColumnarToRow [codegen id : 27]
Input [1]: [p_promo_sk#71]

(80) Filter [codegen id : 27]
Input [1]: [p_promo_sk#71]
Condition : isnotnull(p_promo_sk#71)

(81) BroadcastExchange
Input [1]: [p_promo_sk#71]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#72]

(82) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [ss_promo_sk#7]
Right keys [1]: [p_promo_sk#71]
Join condition: None

(83) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63]
Input [15]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63, p_promo_sk#71]

(84) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#73, hd_income_band_sk#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>

(85) ColumnarToRow [codegen id : 28]
Input [2]: [hd_demo_sk#73, hd_income_band_sk#74]

(86) Filter [codegen id : 28]
Input [2]: [hd_demo_sk#73, hd_income_band_sk#74]
Condition : (isnotnull(hd_demo_sk#73) AND isnotnull(hd_income_band_sk#74))

(87) BroadcastExchange
Input [2]: [hd_demo_sk#73, hd_income_band_sk#74]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#75]

(88) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [ss_hdemo_sk#4]
Right keys [1]: [hd_demo_sk#73]
Join condition: None

(89) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63, hd_income_band_sk#74]
Input [15]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63, hd_demo_sk#73, hd_income_band_sk#74]

(90) ReusedExchange [Reuses operator id: 87]
Output [2]: [hd_demo_sk#76, hd_income_band_sk#77]

(91) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [c_current_hdemo_sk#54]
Right keys [1]: [hd_demo_sk#76]
Join condition: None

(92) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_addr_sk#55, d_year#60, d_year#63, hd_income_band_sk#74, hd_income_band_sk#77]
Input [15]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_hdemo_sk#54, c_current_addr_sk#55, d_year#60, d_year#63, hd_income_band_sk#74, hd_demo_sk#76, hd_income_band_sk#77]

(93) Exchange
Input [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_addr_sk#55, d_year#60, d_year#63, hd_income_band_sk#74, hd_income_band_sk#77]
Arguments: hashpartitioning(ss_addr_sk#5, 5), ENSURE_REQUIREMENTS, [id=#78]

(94) Sort [codegen id : 31]
Input [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_addr_sk#55, d_year#60, d_year#63, hd_income_band_sk#74, hd_income_band_sk#77]
Arguments: [ss_addr_sk#5 ASC NULLS FIRST], false, 0

(95) Scan parquet default.customer_address
Output [5]: [ca_address_sk#79, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_city:string,ca_zip:string>

(96) ColumnarToRow [codegen id : 32]
Input [5]: [ca_address_sk#79, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83]

(97) Filter [codegen id : 32]
Input [5]: [ca_address_sk#79, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83]
Condition : isnotnull(ca_address_sk#79)

(98) Exchange
Input [5]: [ca_address_sk#79, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83]
Arguments: hashpartitioning(ca_address_sk#79, 5), ENSURE_REQUIREMENTS, [id=#84]

(99) Sort [codegen id : 33]
Input [5]: [ca_address_sk#79, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83]
Arguments: [ca_address_sk#79 ASC NULLS FIRST], false, 0

(100) SortMergeJoin [codegen id : 34]
Left keys [1]: [ss_addr_sk#5]
Right keys [1]: [ca_address_sk#79]
Join condition: None

(101) Project [codegen id : 34]
Output [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_addr_sk#55, d_year#60, d_year#63, hd_income_band_sk#74, hd_income_band_sk#77, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83]
Input [18]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_addr_sk#55, d_year#60, d_year#63, hd_income_band_sk#74, hd_income_band_sk#77, ca_address_sk#79, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83]

(102) Exchange
Input [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_addr_sk#55, d_year#60, d_year#63, hd_income_band_sk#74, hd_income_band_sk#77, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83]
Arguments: hashpartitioning(c_current_addr_sk#55, 5), ENSURE_REQUIREMENTS, [id=#85]

(103) Sort [codegen id : 35]
Input [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_addr_sk#55, d_year#60, d_year#63, hd_income_band_sk#74, hd_income_band_sk#77, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83]
Arguments: [c_current_addr_sk#55 ASC NULLS FIRST], false, 0

(104) ReusedExchange [Reuses operator id: 98]
Output [5]: [ca_address_sk#86, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90]

(105) Sort [codegen id : 37]
Input [5]: [ca_address_sk#86, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90]
Arguments: [ca_address_sk#86 ASC NULLS FIRST], false, 0

(106) SortMergeJoin [codegen id : 41]
Left keys [1]: [c_current_addr_sk#55]
Right keys [1]: [ca_address_sk#86]
Join condition: None

(107) Project [codegen id : 41]
Output [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, d_year#60, d_year#63, hd_income_band_sk#74, hd_income_band_sk#77, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90]
Input [21]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, c_current_addr_sk#55, d_year#60, d_year#63, hd_income_band_sk#74, hd_income_band_sk#77, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_address_sk#86, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90]

(108) Scan parquet default.income_band
Output [1]: [ib_income_band_sk#91]
Batched: true
Location [not included in comparison]/{warehouse_dir}/income_band]
PushedFilters: [IsNotNull(ib_income_band_sk)]
ReadSchema: struct<ib_income_band_sk:int>

(109) ColumnarToRow [codegen id : 38]
Input [1]: [ib_income_band_sk#91]

(110) Filter [codegen id : 38]
Input [1]: [ib_income_band_sk#91]
Condition : isnotnull(ib_income_band_sk#91)

(111) BroadcastExchange
Input [1]: [ib_income_band_sk#91]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#92]

(112) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [hd_income_band_sk#74]
Right keys [1]: [ib_income_band_sk#91]
Join condition: None

(113) Project [codegen id : 41]
Output [18]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, d_year#60, d_year#63, hd_income_band_sk#77, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90]
Input [20]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, d_year#60, d_year#63, hd_income_band_sk#74, hd_income_band_sk#77, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, ib_income_band_sk#91]

(114) ReusedExchange [Reuses operator id: 111]
Output [1]: [ib_income_band_sk#93]

(115) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [hd_income_band_sk#77]
Right keys [1]: [ib_income_band_sk#93]
Join condition: None

(116) Project [codegen id : 41]
Output [17]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, d_year#60, d_year#63, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90]
Input [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, d_year#60, d_year#63, hd_income_band_sk#77, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, ib_income_band_sk#93]

(117) Scan parquet default.item
Output [4]: [i_item_sk#94, i_current_price#95, i_color#96, i_product_name#97]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), In(i_color, [burlywood           ,floral              ,indian              ,medium              ,purple              ,spring              ]), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string,i_product_name:string>

(118) ColumnarToRow [codegen id : 40]
Input [4]: [i_item_sk#94, i_current_price#95, i_color#96, i_product_name#97]

(119) Filter [codegen id : 40]
Input [4]: [i_item_sk#94, i_current_price#95, i_color#96, i_product_name#97]
Condition : ((((((isnotnull(i_current_price#95) AND i_color#96 IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#95 >= 64.00)) AND (i_current_price#95 <= 74.00)) AND (i_current_price#95 >= 65.00)) AND (i_current_price#95 <= 79.00)) AND isnotnull(i_item_sk#94))

(120) Project [codegen id : 40]
Output [2]: [i_item_sk#94, i_product_name#97]
Input [4]: [i_item_sk#94, i_current_price#95, i_color#96, i_product_name#97]

(121) BroadcastExchange
Input [2]: [i_item_sk#94, i_product_name#97]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98]

(122) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#94]
Join condition: None

(123) Project [codegen id : 41]
Output [18]: [ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, d_year#60, d_year#63, s_store_name#48, s_zip#49, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, i_item_sk#94, i_product_name#97]
Input [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, s_store_name#48, s_zip#49, d_year#60, d_year#63, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, i_item_sk#94, i_product_name#97]

(124) HashAggregate [codegen id : 41]
Input [18]: [ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#46, d_year#60, d_year#63, s_store_name#48, s_zip#49, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, i_item_sk#94, i_product_name#97]
Keys [15]: [i_product_name#97, i_item_sk#94, s_store_name#48, s_zip#49, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, d_year#46, d_year#60, d_year#63]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#9)), partial_sum(UnscaledValue(ss_list_price#10)), partial_sum(UnscaledValue(ss_coupon_amt#11))]
Aggregate Attributes [4]: [count#99, sum#100, sum#101, sum#102]
Results [19]: [i_product_name#97, i_item_sk#94, s_store_name#48, s_zip#49, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, d_year#46, d_year#60, d_year#63, count#103, sum#104, sum#105, sum#106]

(125) Exchange
Input [19]: [i_product_name#97, i_item_sk#94, s_store_name#48, s_zip#49, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, d_year#46, d_year#60, d_year#63, count#103, sum#104, sum#105, sum#106]
Arguments: hashpartitioning(i_product_name#97, i_item_sk#94, s_store_name#48, s_zip#49, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, d_year#46, d_year#60, d_year#63, 5), ENSURE_REQUIREMENTS, [id=#107]

(126) HashAggregate [codegen id : 42]
Input [19]: [i_product_name#97, i_item_sk#94, s_store_name#48, s_zip#49, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, d_year#46, d_year#60, d_year#63, count#103, sum#104, sum#105, sum#106]
Keys [15]: [i_product_name#97, i_item_sk#94, s_store_name#48, s_zip#49, ca_street_number#80, ca_street_name#81, ca_city#82, ca_zip#83, ca_street_number#87, ca_street_name#88, ca_city#89, ca_zip#90, d_year#46, d_year#60, d_year#63]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#9)), sum(UnscaledValue(ss_list_price#10)), sum(UnscaledValue(ss_coupon_amt#11))]
Aggregate Attributes [4]: [count(1)#108, sum(UnscaledValue(ss_wholesale_cost#9))#109, sum(UnscaledValue(ss_list_price#10))#110, sum(UnscaledValue(ss_coupon_amt#11))#111]
Results [17]: [i_product_name#97 AS product_name#112, i_item_sk#94 AS item_sk#113, s_store_name#48 AS store_name#114, s_zip#49 AS store_zip#115, ca_street_number#80 AS b_street_number#116, ca_street_name#81 AS b_streen_name#117, ca_city#82 AS b_city#118, ca_zip#83 AS b_zip#119, ca_street_number#87 AS c_street_number#120, ca_street_name#88 AS c_street_name#121, ca_city#89 AS c_city#122, ca_zip#90 AS c_zip#123, d_year#46 AS syear#124, count(1)#108 AS cnt#125, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#9))#109,17,2) AS s1#126, MakeDecimal(sum(UnscaledValue(ss_list_price#10))#110,17,2) AS s2#127, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#11))#111,17,2) AS s3#128]

(127) Exchange
Input [17]: [product_name#112, item_sk#113, store_name#114, store_zip#115, b_street_number#116, b_streen_name#117, b_city#118, b_zip#119, c_street_number#120, c_street_name#121, c_city#122, c_zip#123, syear#124, cnt#125, s1#126, s2#127, s3#128]
Arguments: hashpartitioning(item_sk#113, store_name#114, store_zip#115, 5), ENSURE_REQUIREMENTS, [id=#129]

(128) Sort [codegen id : 43]
Input [17]: [product_name#112, item_sk#113, store_name#114, store_zip#115, b_street_number#116, b_streen_name#117, b_city#118, b_zip#119, c_street_number#120, c_street_name#121, c_city#122, c_zip#123, syear#124, cnt#125, s1#126, s2#127, s3#128]
Arguments: [item_sk#113 ASC NULLS FIRST, store_name#114 ASC NULLS FIRST, store_zip#115 ASC NULLS FIRST], false, 0

(129) Scan parquet default.store_sales
Output [12]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_ticket_number#137, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, ss_sold_date_sk#141]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#141), dynamicpruningexpression(ss_sold_date_sk#141 IN dynamicpruning#142)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(130) ColumnarToRow [codegen id : 44]
Input [12]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_ticket_number#137, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, ss_sold_date_sk#141]

(131) Filter [codegen id : 44]
Input [12]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_ticket_number#137, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, ss_sold_date_sk#141]
Condition : ((((((((isnotnull(ss_item_sk#130) AND isnotnull(ss_ticket_number#137)) AND isnotnull(ss_store_sk#135)) AND isnotnull(ss_customer_sk#131)) AND isnotnull(ss_cdemo_sk#132)) AND isnotnull(ss_promo_sk#136)) AND isnotnull(ss_hdemo_sk#133)) AND isnotnull(ss_addr_sk#134)) AND might_contain(ReusedSubquery Subquery scalar-subquery#14, [id=#15], xxhash64(ss_item_sk#130, 42)))

(132) Exchange
Input [12]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_ticket_number#137, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, ss_sold_date_sk#141]
Arguments: hashpartitioning(ss_item_sk#130, ss_ticket_number#137, 5), ENSURE_REQUIREMENTS, [id=#143]

(133) Sort [codegen id : 45]
Input [12]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_ticket_number#137, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, ss_sold_date_sk#141]
Arguments: [ss_item_sk#130 ASC NULLS FIRST, ss_ticket_number#137 ASC NULLS FIRST], false, 0

(134) ReusedExchange [Reuses operator id: 10]
Output [2]: [sr_item_sk#144, sr_ticket_number#145]

(135) Sort [codegen id : 47]
Input [2]: [sr_item_sk#144, sr_ticket_number#145]
Arguments: [sr_item_sk#144 ASC NULLS FIRST, sr_ticket_number#145 ASC NULLS FIRST], false, 0

(136) SortMergeJoin [codegen id : 56]
Left keys [2]: [ss_item_sk#130, ss_ticket_number#137]
Right keys [2]: [sr_item_sk#144, sr_ticket_number#145]
Join condition: None

(137) Project [codegen id : 56]
Output [11]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, ss_sold_date_sk#141]
Input [14]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_ticket_number#137, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, ss_sold_date_sk#141, sr_item_sk#144, sr_ticket_number#145]

(138) ReusedExchange [Reuses operator id: 33]
Output [1]: [cs_item_sk#146]

(139) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_item_sk#130]
Right keys [1]: [cs_item_sk#146]
Join condition: None

(140) Project [codegen id : 56]
Output [11]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, ss_sold_date_sk#141]
Input [12]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, ss_sold_date_sk#141, cs_item_sk#146]

(141) ReusedExchange [Reuses operator id: 224]
Output [2]: [d_date_sk#147, d_year#148]

(142) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_sold_date_sk#141]
Right keys [1]: [d_date_sk#147]
Join condition: None

(143) Project [codegen id : 56]
Output [11]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148]
Input [13]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, ss_sold_date_sk#141, d_date_sk#147, d_year#148]

(144) ReusedExchange [Reuses operator id: 42]
Output [3]: [s_store_sk#149, s_store_name#150, s_zip#151]

(145) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_store_sk#135]
Right keys [1]: [s_store_sk#149]
Join condition: None

(146) Project [codegen id : 56]
Output [12]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151]
Input [14]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_store_sk#135, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_sk#149, s_store_name#150, s_zip#151]

(147) Exchange
Input [12]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151]
Arguments: hashpartitioning(ss_customer_sk#131, 5), ENSURE_REQUIREMENTS, [id=#152]

(148) Sort [codegen id : 57]
Input [12]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151]
Arguments: [ss_customer_sk#131 ASC NULLS FIRST], false, 0

(149) ReusedExchange [Reuses operator id: 50]
Output [6]: [c_customer_sk#153, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, c_first_shipto_date_sk#157, c_first_sales_date_sk#158]

(150) Sort [codegen id : 59]
Input [6]: [c_customer_sk#153, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, c_first_shipto_date_sk#157, c_first_sales_date_sk#158]
Arguments: [c_customer_sk#153 ASC NULLS FIRST], false, 0

(151) SortMergeJoin [codegen id : 62]
Left keys [1]: [ss_customer_sk#131]
Right keys [1]: [c_customer_sk#153]
Join condition: None

(152) Project [codegen id : 62]
Output [16]: [ss_item_sk#130, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, c_first_shipto_date_sk#157, c_first_sales_date_sk#158]
Input [18]: [ss_item_sk#130, ss_customer_sk#131, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_customer_sk#153, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, c_first_shipto_date_sk#157, c_first_sales_date_sk#158]

(153) ReusedExchange [Reuses operator id: 57]
Output [2]: [d_date_sk#159, d_year#160]

(154) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [c_first_sales_date_sk#158]
Right keys [1]: [d_date_sk#159]
Join condition: None

(155) Project [codegen id : 62]
Output [16]: [ss_item_sk#130, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, c_first_shipto_date_sk#157, d_year#160]
Input [18]: [ss_item_sk#130, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, c_first_shipto_date_sk#157, c_first_sales_date_sk#158, d_date_sk#159, d_year#160]

(156) ReusedExchange [Reuses operator id: 57]
Output [2]: [d_date_sk#161, d_year#162]

(157) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [c_first_shipto_date_sk#157]
Right keys [1]: [d_date_sk#161]
Join condition: None

(158) Project [codegen id : 62]
Output [16]: [ss_item_sk#130, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162]
Input [18]: [ss_item_sk#130, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, c_first_shipto_date_sk#157, d_year#160, d_date_sk#161, d_year#162]

(159) Exchange
Input [16]: [ss_item_sk#130, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162]
Arguments: hashpartitioning(ss_cdemo_sk#132, 5), ENSURE_REQUIREMENTS, [id=#163]

(160) Sort [codegen id : 63]
Input [16]: [ss_item_sk#130, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162]
Arguments: [ss_cdemo_sk#132 ASC NULLS FIRST], false, 0

(161) ReusedExchange [Reuses operator id: 68]
Output [2]: [cd_demo_sk#164, cd_marital_status#165]

(162) Sort [codegen id : 65]
Input [2]: [cd_demo_sk#164, cd_marital_status#165]
Arguments: [cd_demo_sk#164 ASC NULLS FIRST], false, 0

(163) SortMergeJoin [codegen id : 66]
Left keys [1]: [ss_cdemo_sk#132]
Right keys [1]: [cd_demo_sk#164]
Join condition: None

(164) Project [codegen id : 66]
Output [16]: [ss_item_sk#130, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162, cd_marital_status#165]
Input [18]: [ss_item_sk#130, ss_cdemo_sk#132, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162, cd_demo_sk#164, cd_marital_status#165]

(165) Exchange
Input [16]: [ss_item_sk#130, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162, cd_marital_status#165]
Arguments: hashpartitioning(c_current_cdemo_sk#154, 5), ENSURE_REQUIREMENTS, [id=#166]

(166) Sort [codegen id : 67]
Input [16]: [ss_item_sk#130, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162, cd_marital_status#165]
Arguments: [c_current_cdemo_sk#154 ASC NULLS FIRST], false, 0

(167) ReusedExchange [Reuses operator id: 68]
Output [2]: [cd_demo_sk#167, cd_marital_status#168]

(168) Sort [codegen id : 69]
Input [2]: [cd_demo_sk#167, cd_marital_status#168]
Arguments: [cd_demo_sk#167 ASC NULLS FIRST], false, 0

(169) SortMergeJoin [codegen id : 73]
Left keys [1]: [c_current_cdemo_sk#154]
Right keys [1]: [cd_demo_sk#167]
Join condition: NOT (cd_marital_status#165 = cd_marital_status#168)

(170) Project [codegen id : 73]
Output [14]: [ss_item_sk#130, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162]
Input [18]: [ss_item_sk#130, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_cdemo_sk#154, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162, cd_marital_status#165, cd_demo_sk#167, cd_marital_status#168]

(171) ReusedExchange [Reuses operator id: 81]
Output [1]: [p_promo_sk#169]

(172) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [ss_promo_sk#136]
Right keys [1]: [p_promo_sk#169]
Join condition: None

(173) Project [codegen id : 73]
Output [13]: [ss_item_sk#130, ss_hdemo_sk#133, ss_addr_sk#134, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162]
Input [15]: [ss_item_sk#130, ss_hdemo_sk#133, ss_addr_sk#134, ss_promo_sk#136, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162, p_promo_sk#169]

(174) ReusedExchange [Reuses operator id: 87]
Output [2]: [hd_demo_sk#170, hd_income_band_sk#171]

(175) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [ss_hdemo_sk#133]
Right keys [1]: [hd_demo_sk#170]
Join condition: None

(176) Project [codegen id : 73]
Output [13]: [ss_item_sk#130, ss_addr_sk#134, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162, hd_income_band_sk#171]
Input [15]: [ss_item_sk#130, ss_hdemo_sk#133, ss_addr_sk#134, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162, hd_demo_sk#170, hd_income_band_sk#171]

(177) ReusedExchange [Reuses operator id: 87]
Output [2]: [hd_demo_sk#172, hd_income_band_sk#173]

(178) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [c_current_hdemo_sk#155]
Right keys [1]: [hd_demo_sk#172]
Join condition: None

(179) Project [codegen id : 73]
Output [13]: [ss_item_sk#130, ss_addr_sk#134, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_addr_sk#156, d_year#160, d_year#162, hd_income_band_sk#171, hd_income_band_sk#173]
Input [15]: [ss_item_sk#130, ss_addr_sk#134, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_hdemo_sk#155, c_current_addr_sk#156, d_year#160, d_year#162, hd_income_band_sk#171, hd_demo_sk#172, hd_income_band_sk#173]

(180) Exchange
Input [13]: [ss_item_sk#130, ss_addr_sk#134, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_addr_sk#156, d_year#160, d_year#162, hd_income_band_sk#171, hd_income_band_sk#173]
Arguments: hashpartitioning(ss_addr_sk#134, 5), ENSURE_REQUIREMENTS, [id=#174]

(181) Sort [codegen id : 74]
Input [13]: [ss_item_sk#130, ss_addr_sk#134, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_addr_sk#156, d_year#160, d_year#162, hd_income_band_sk#171, hd_income_band_sk#173]
Arguments: [ss_addr_sk#134 ASC NULLS FIRST], false, 0

(182) ReusedExchange [Reuses operator id: 98]
Output [5]: [ca_address_sk#175, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179]

(183) Sort [codegen id : 76]
Input [5]: [ca_address_sk#175, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179]
Arguments: [ca_address_sk#175 ASC NULLS FIRST], false, 0

(184) SortMergeJoin [codegen id : 77]
Left keys [1]: [ss_addr_sk#134]
Right keys [1]: [ca_address_sk#175]
Join condition: None

(185) Project [codegen id : 77]
Output [16]: [ss_item_sk#130, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_addr_sk#156, d_year#160, d_year#162, hd_income_band_sk#171, hd_income_band_sk#173, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179]
Input [18]: [ss_item_sk#130, ss_addr_sk#134, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_addr_sk#156, d_year#160, d_year#162, hd_income_band_sk#171, hd_income_band_sk#173, ca_address_sk#175, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179]

(186) Exchange
Input [16]: [ss_item_sk#130, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_addr_sk#156, d_year#160, d_year#162, hd_income_band_sk#171, hd_income_band_sk#173, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179]
Arguments: hashpartitioning(c_current_addr_sk#156, 5), ENSURE_REQUIREMENTS, [id=#180]

(187) Sort [codegen id : 78]
Input [16]: [ss_item_sk#130, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_addr_sk#156, d_year#160, d_year#162, hd_income_band_sk#171, hd_income_band_sk#173, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179]
Arguments: [c_current_addr_sk#156 ASC NULLS FIRST], false, 0

(188) ReusedExchange [Reuses operator id: 98]
Output [5]: [ca_address_sk#181, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185]

(189) Sort [codegen id : 80]
Input [5]: [ca_address_sk#181, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185]
Arguments: [ca_address_sk#181 ASC NULLS FIRST], false, 0

(190) SortMergeJoin [codegen id : 84]
Left keys [1]: [c_current_addr_sk#156]
Right keys [1]: [ca_address_sk#181]
Join condition: None

(191) Project [codegen id : 84]
Output [19]: [ss_item_sk#130, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, d_year#160, d_year#162, hd_income_band_sk#171, hd_income_band_sk#173, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185]
Input [21]: [ss_item_sk#130, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, c_current_addr_sk#156, d_year#160, d_year#162, hd_income_band_sk#171, hd_income_band_sk#173, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_address_sk#181, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185]

(192) ReusedExchange [Reuses operator id: 111]
Output [1]: [ib_income_band_sk#186]

(193) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [hd_income_band_sk#171]
Right keys [1]: [ib_income_band_sk#186]
Join condition: None

(194) Project [codegen id : 84]
Output [18]: [ss_item_sk#130, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, d_year#160, d_year#162, hd_income_band_sk#173, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185]
Input [20]: [ss_item_sk#130, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, d_year#160, d_year#162, hd_income_band_sk#171, hd_income_band_sk#173, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, ib_income_band_sk#186]

(195) ReusedExchange [Reuses operator id: 111]
Output [1]: [ib_income_band_sk#187]

(196) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [hd_income_band_sk#173]
Right keys [1]: [ib_income_band_sk#187]
Join condition: None

(197) Project [codegen id : 84]
Output [17]: [ss_item_sk#130, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, d_year#160, d_year#162, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185]
Input [19]: [ss_item_sk#130, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, d_year#160, d_year#162, hd_income_band_sk#173, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, ib_income_band_sk#187]

(198) ReusedExchange [Reuses operator id: 121]
Output [2]: [i_item_sk#188, i_product_name#189]

(199) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [ss_item_sk#130]
Right keys [1]: [i_item_sk#188]
Join condition: None

(200) Project [codegen id : 84]
Output [18]: [ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, d_year#160, d_year#162, s_store_name#150, s_zip#151, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, i_item_sk#188, i_product_name#189]
Input [19]: [ss_item_sk#130, ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, s_store_name#150, s_zip#151, d_year#160, d_year#162, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, i_item_sk#188, i_product_name#189]

(201) HashAggregate [codegen id : 84]
Input [18]: [ss_wholesale_cost#138, ss_list_price#139, ss_coupon_amt#140, d_year#148, d_year#160, d_year#162, s_store_name#150, s_zip#151, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, i_item_sk#188, i_product_name#189]
Keys [15]: [i_product_name#189, i_item_sk#188, s_store_name#150, s_zip#151, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, d_year#148, d_year#160, d_year#162]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#138)), partial_sum(UnscaledValue(ss_list_price#139)), partial_sum(UnscaledValue(ss_coupon_amt#140))]
Aggregate Attributes [4]: [count#99, sum#190, sum#191, sum#192]
Results [19]: [i_product_name#189, i_item_sk#188, s_store_name#150, s_zip#151, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, d_year#148, d_year#160, d_year#162, count#103, sum#193, sum#194, sum#195]

(202) Exchange
Input [19]: [i_product_name#189, i_item_sk#188, s_store_name#150, s_zip#151, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, d_year#148, d_year#160, d_year#162, count#103, sum#193, sum#194, sum#195]
Arguments: hashpartitioning(i_product_name#189, i_item_sk#188, s_store_name#150, s_zip#151, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, d_year#148, d_year#160, d_year#162, 5), ENSURE_REQUIREMENTS, [id=#196]

(203) HashAggregate [codegen id : 85]
Input [19]: [i_product_name#189, i_item_sk#188, s_store_name#150, s_zip#151, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, d_year#148, d_year#160, d_year#162, count#103, sum#193, sum#194, sum#195]
Keys [15]: [i_product_name#189, i_item_sk#188, s_store_name#150, s_zip#151, ca_street_number#176, ca_street_name#177, ca_city#178, ca_zip#179, ca_street_number#182, ca_street_name#183, ca_city#184, ca_zip#185, d_year#148, d_year#160, d_year#162]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#138)), sum(UnscaledValue(ss_list_price#139)), sum(UnscaledValue(ss_coupon_amt#140))]
Aggregate Attributes [4]: [count(1)#108, sum(UnscaledValue(ss_wholesale_cost#138))#109, sum(UnscaledValue(ss_list_price#139))#110, sum(UnscaledValue(ss_coupon_amt#140))#111]
Results [8]: [i_item_sk#188 AS item_sk#197, s_store_name#150 AS store_name#198, s_zip#151 AS store_zip#199, d_year#148 AS syear#200, count(1)#108 AS cnt#201, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#138))#109,17,2) AS s1#202, MakeDecimal(sum(UnscaledValue(ss_list_price#139))#110,17,2) AS s2#203, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#140))#111,17,2) AS s3#204]

(204) Exchange
Input [8]: [item_sk#197, store_name#198, store_zip#199, syear#200, cnt#201, s1#202, s2#203, s3#204]
Arguments: hashpartitioning(item_sk#197, store_name#198, store_zip#199, 5), ENSURE_REQUIREMENTS, [id=#205]

(205) Sort [codegen id : 86]
Input [8]: [item_sk#197, store_name#198, store_zip#199, syear#200, cnt#201, s1#202, s2#203, s3#204]
Arguments: [item_sk#197 ASC NULLS FIRST, store_name#198 ASC NULLS FIRST, store_zip#199 ASC NULLS FIRST], false, 0

(206) SortMergeJoin [codegen id : 87]
Left keys [3]: [item_sk#113, store_name#114, store_zip#115]
Right keys [3]: [item_sk#197, store_name#198, store_zip#199]
Join condition: (cnt#201 <= cnt#125)

(207) Project [codegen id : 87]
Output [21]: [product_name#112, store_name#114, store_zip#115, b_street_number#116, b_streen_name#117, b_city#118, b_zip#119, c_street_number#120, c_street_name#121, c_city#122, c_zip#123, syear#124, cnt#125, s1#126, s2#127, s3#128, s1#202, s2#203, s3#204, syear#200, cnt#201]
Input [25]: [product_name#112, item_sk#113, store_name#114, store_zip#115, b_street_number#116, b_streen_name#117, b_city#118, b_zip#119, c_street_number#120, c_street_name#121, c_city#122, c_zip#123, syear#124, cnt#125, s1#126, s2#127, s3#128, item_sk#197, store_name#198, store_zip#199, syear#200, cnt#201, s1#202, s2#203, s3#204]

(208) Exchange
Input [21]: [product_name#112, store_name#114, store_zip#115, b_street_number#116, b_streen_name#117, b_city#118, b_zip#119, c_street_number#120, c_street_name#121, c_city#122, c_zip#123, syear#124, cnt#125, s1#126, s2#127, s3#128, s1#202, s2#203, s3#204, syear#200, cnt#201]
Arguments: rangepartitioning(product_name#112 ASC NULLS FIRST, store_name#114 ASC NULLS FIRST, cnt#201 ASC NULLS FIRST, s1#126 ASC NULLS FIRST, s1#202 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#206]

(209) Sort [codegen id : 88]
Input [21]: [product_name#112, store_name#114, store_zip#115, b_street_number#116, b_streen_name#117, b_city#118, b_zip#119, c_street_number#120, c_street_name#121, c_city#122, c_zip#123, syear#124, cnt#125, s1#126, s2#127, s3#128, s1#202, s2#203, s3#204, syear#200, cnt#201]
Arguments: [product_name#112 ASC NULLS FIRST, store_name#114 ASC NULLS FIRST, cnt#201 ASC NULLS FIRST, s1#126 ASC NULLS FIRST, s1#202 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
ObjectHashAggregate (216)
+- Exchange (215)
   +- ObjectHashAggregate (214)
      +- * Project (213)
         +- * Filter (212)
            +- * ColumnarToRow (211)
               +- Scan parquet default.item (210)


(210) Scan parquet default.item
Output [3]: [i_item_sk#94, i_current_price#95, i_color#96]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), In(i_color, [burlywood           ,floral              ,indian              ,medium              ,purple              ,spring              ]), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string>

(211) ColumnarToRow [codegen id : 1]
Input [3]: [i_item_sk#94, i_current_price#95, i_color#96]

(212) Filter [codegen id : 1]
Input [3]: [i_item_sk#94, i_current_price#95, i_color#96]
Condition : ((((((isnotnull(i_current_price#95) AND i_color#96 IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#95 >= 64.00)) AND (i_current_price#95 <= 74.00)) AND (i_current_price#95 >= 65.00)) AND (i_current_price#95 <= 79.00)) AND isnotnull(i_item_sk#94))

(213) Project [codegen id : 1]
Output [1]: [i_item_sk#94]
Input [3]: [i_item_sk#94, i_current_price#95, i_color#96]

(214) ObjectHashAggregate
Input [1]: [i_item_sk#94]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#94, 42), 1250, 10000, 0, 0)]
Aggregate Attributes [1]: [buf#207]
Results [1]: [buf#208]

(215) Exchange
Input [1]: [buf#208]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#209]

(216) ObjectHashAggregate
Input [1]: [buf#208]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#94, 42), 1250, 10000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#94, 42), 1250, 10000, 0, 0)#210]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#94, 42), 1250, 10000, 0, 0)#210 AS bloomFilter#211]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (220)
+- * Filter (219)
   +- * ColumnarToRow (218)
      +- Scan parquet default.date_dim (217)


(217) Scan parquet default.date_dim
Output [2]: [d_date_sk#45, d_year#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(218) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#45, d_year#46]

(219) Filter [codegen id : 1]
Input [2]: [d_date_sk#45, d_year#46]
Condition : ((isnotnull(d_year#46) AND (d_year#46 = 1999)) AND isnotnull(d_date_sk#45))

(220) BroadcastExchange
Input [2]: [d_date_sk#45, d_year#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#212]

Subquery:3 Hosting operator id = 131 Hosting Expression = ReusedSubquery Subquery scalar-subquery#14, [id=#15]

Subquery:4 Hosting operator id = 129 Hosting Expression = ss_sold_date_sk#141 IN dynamicpruning#142
BroadcastExchange (224)
+- * Filter (223)
   +- * ColumnarToRow (222)
      +- Scan parquet default.date_dim (221)


(221) Scan parquet default.date_dim
Output [2]: [d_date_sk#147, d_year#148]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(222) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#147, d_year#148]

(223) Filter [codegen id : 1]
Input [2]: [d_date_sk#147, d_year#148]
Condition : ((isnotnull(d_year#148) AND (d_year#148 = 2000)) AND isnotnull(d_date_sk#147))

(224) BroadcastExchange
Input [2]: [d_date_sk#147, d_year#148]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#213]


