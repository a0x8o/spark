== Physical Plan ==
* Sort (209)
+- Exchange (208)
   +- * Project (207)
      +- * SortMergeJoin Inner (206)
         :- * Sort (128)
         :  +- Exchange (127)
         :     +- * HashAggregate (126)
         :        +- Exchange (125)
         :           +- * HashAggregate (124)
         :              +- * Project (123)
         :                 +- * BroadcastHashJoin Inner BuildRight (122)
         :                    :- * Project (116)
         :                    :  +- * BroadcastHashJoin Inner BuildRight (115)
         :                    :     :- * Project (113)
         :                    :     :  +- * BroadcastHashJoin Inner BuildRight (112)
         :                    :     :     :- * Project (107)
         :                    :     :     :  +- * SortMergeJoin Inner (106)
         :                    :     :     :     :- * Sort (103)
         :                    :     :     :     :  +- Exchange (102)
         :                    :     :     :     :     +- * Project (101)
         :                    :     :     :     :        +- * SortMergeJoin Inner (100)
         :                    :     :     :     :           :- * Sort (94)
         :                    :     :     :     :           :  +- Exchange (93)
         :                    :     :     :     :           :     +- * Project (92)
         :                    :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (91)
         :                    :     :     :     :           :           :- * Project (89)
         :                    :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (88)
         :                    :     :     :     :           :           :     :- * Project (83)
         :                    :     :     :     :           :           :     :  +- * BroadcastHashJoin Inner BuildRight (82)
         :                    :     :     :     :           :           :     :     :- * Project (77)
         :                    :     :     :     :           :           :     :     :  +- * SortMergeJoin Inner (76)
         :                    :     :     :     :           :           :     :     :     :- * Sort (73)
         :                    :     :     :     :           :           :     :     :     :  +- Exchange (72)
         :                    :     :     :     :           :           :     :     :     :     +- * Project (71)
         :                    :     :     :     :           :           :     :     :     :        +- * SortMergeJoin Inner (70)
         :                    :     :     :     :           :           :     :     :     :           :- * Sort (64)
         :                    :     :     :     :           :           :     :     :     :           :  +- Exchange (63)
         :                    :     :     :     :           :           :     :     :     :           :     +- * Project (62)
         :                    :     :     :     :           :           :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (61)
         :                    :     :     :     :           :           :     :     :     :           :           :- * Project (59)
         :                    :     :     :     :           :           :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (58)
         :                    :     :     :     :           :           :     :     :     :           :           :     :- * Project (53)
         :                    :     :     :     :           :           :     :     :     :           :           :     :  +- * SortMergeJoin Inner (52)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :- * Sort (46)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :  +- Exchange (45)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :     +- * Project (44)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :        +- * BroadcastHashJoin Inner BuildRight (43)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :- * Project (38)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (37)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :- * Project (35)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (34)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :- * Project (13)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :  +- * SortMergeJoin Inner (12)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :- * Sort (5)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :  +- Exchange (4)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :     +- * Filter (3)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :        +- * ColumnarToRow (2)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :           +- Scan parquet default.store_sales (1)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     +- * Sort (11)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        +- Exchange (10)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :           +- * Project (9)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :              +- * Filter (8)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                 +- * ColumnarToRow (7)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                    +- Scan parquet default.store_returns (6)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     +- BroadcastExchange (33)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :        +- * Project (32)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :           +- * Filter (31)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :              +- * HashAggregate (30)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                 +- Exchange (29)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                    +- * HashAggregate (28)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                       +- * Project (27)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                          +- * SortMergeJoin Inner (26)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :- * Sort (19)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :  +- Exchange (18)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :     +- * Project (17)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :        +- * Filter (16)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :           +- * ColumnarToRow (15)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :              +- Scan parquet default.catalog_sales (14)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             +- * Sort (25)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                +- Exchange (24)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                   +- * Project (23)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                      +- * Filter (22)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                         +- * ColumnarToRow (21)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                            +- Scan parquet default.catalog_returns (20)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     +- ReusedExchange (36)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           +- BroadcastExchange (42)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :              +- * Filter (41)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                 +- * ColumnarToRow (40)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                    +- Scan parquet default.store (39)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     +- * Sort (51)
         :                    :     :     :     :           :           :     :     :     :           :           :     :        +- Exchange (50)
         :                    :     :     :     :           :           :     :     :     :           :           :     :           +- * Filter (49)
         :                    :     :     :     :           :           :     :     :     :           :           :     :              +- * ColumnarToRow (48)
         :                    :     :     :     :           :           :     :     :     :           :           :     :                 +- Scan parquet default.customer (47)
         :                    :     :     :     :           :           :     :     :     :           :           :     +- BroadcastExchange (57)
         :                    :     :     :     :           :           :     :     :     :           :           :        +- * Filter (56)
         :                    :     :     :     :           :           :     :     :     :           :           :           +- * ColumnarToRow (55)
         :                    :     :     :     :           :           :     :     :     :           :           :              +- Scan parquet default.date_dim (54)
         :                    :     :     :     :           :           :     :     :     :           :           +- ReusedExchange (60)
         :                    :     :     :     :           :           :     :     :     :           +- * Sort (69)
         :                    :     :     :     :           :           :     :     :     :              +- Exchange (68)
         :                    :     :     :     :           :           :     :     :     :                 +- * Filter (67)
         :                    :     :     :     :           :           :     :     :     :                    +- * ColumnarToRow (66)
         :                    :     :     :     :           :           :     :     :     :                       +- Scan parquet default.customer_demographics (65)
         :                    :     :     :     :           :           :     :     :     +- * Sort (75)
         :                    :     :     :     :           :           :     :     :        +- ReusedExchange (74)
         :                    :     :     :     :           :           :     :     +- BroadcastExchange (81)
         :                    :     :     :     :           :           :     :        +- * Filter (80)
         :                    :     :     :     :           :           :     :           +- * ColumnarToRow (79)
         :                    :     :     :     :           :           :     :              +- Scan parquet default.promotion (78)
         :                    :     :     :     :           :           :     +- BroadcastExchange (87)
         :                    :     :     :     :           :           :        +- * Filter (86)
         :                    :     :     :     :           :           :           +- * ColumnarToRow (85)
         :                    :     :     :     :           :           :              +- Scan parquet default.household_demographics (84)
         :                    :     :     :     :           :           +- ReusedExchange (90)
         :                    :     :     :     :           +- * Sort (99)
         :                    :     :     :     :              +- Exchange (98)
         :                    :     :     :     :                 +- * Filter (97)
         :                    :     :     :     :                    +- * ColumnarToRow (96)
         :                    :     :     :     :                       +- Scan parquet default.customer_address (95)
         :                    :     :     :     +- * Sort (105)
         :                    :     :     :        +- ReusedExchange (104)
         :                    :     :     +- BroadcastExchange (111)
         :                    :     :        +- * Filter (110)
         :                    :     :           +- * ColumnarToRow (109)
         :                    :     :              +- Scan parquet default.income_band (108)
         :                    :     +- ReusedExchange (114)
         :                    +- BroadcastExchange (121)
         :                       +- * Project (120)
         :                          +- * Filter (119)
         :                             +- * ColumnarToRow (118)
         :                                +- Scan parquet default.item (117)
         +- * Sort (205)
            +- Exchange (204)
               +- * HashAggregate (203)
                  +- Exchange (202)
                     +- * HashAggregate (201)
                        +- * Project (200)
                           +- * BroadcastHashJoin Inner BuildRight (199)
                              :- * Project (197)
                              :  +- * BroadcastHashJoin Inner BuildRight (196)
                              :     :- * Project (194)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (193)
                              :     :     :- * Project (191)
                              :     :     :  +- * SortMergeJoin Inner (190)
                              :     :     :     :- * Sort (187)
                              :     :     :     :  +- Exchange (186)
                              :     :     :     :     +- * Project (185)
                              :     :     :     :        +- * SortMergeJoin Inner (184)
                              :     :     :     :           :- * Sort (181)
                              :     :     :     :           :  +- Exchange (180)
                              :     :     :     :           :     +- * Project (179)
                              :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (178)
                              :     :     :     :           :           :- * Project (176)
                              :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (175)
                              :     :     :     :           :           :     :- * Project (173)
                              :     :     :     :           :           :     :  +- * BroadcastHashJoin Inner BuildRight (172)
                              :     :     :     :           :           :     :     :- * Project (170)
                              :     :     :     :           :           :     :     :  +- * SortMergeJoin Inner (169)
                              :     :     :     :           :           :     :     :     :- * Sort (166)
                              :     :     :     :           :           :     :     :     :  +- Exchange (165)
                              :     :     :     :           :           :     :     :     :     +- * Project (164)
                              :     :     :     :           :           :     :     :     :        +- * SortMergeJoin Inner (163)
                              :     :     :     :           :           :     :     :     :           :- * Sort (160)
                              :     :     :     :           :           :     :     :     :           :  +- Exchange (159)
                              :     :     :     :           :           :     :     :     :           :     +- * Project (158)
                              :     :     :     :           :           :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (157)
                              :     :     :     :           :           :     :     :     :           :           :- * Project (155)
                              :     :     :     :           :           :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (154)
                              :     :     :     :           :           :     :     :     :           :           :     :- * Project (152)
                              :     :     :     :           :           :     :     :     :           :           :     :  +- * SortMergeJoin Inner (151)
                              :     :     :     :           :           :     :     :     :           :           :     :     :- * Sort (148)
                              :     :     :     :           :           :     :     :     :           :           :     :     :  +- Exchange (147)
                              :     :     :     :           :           :     :     :     :           :           :     :     :     +- * Project (146)
                              :     :     :     :           :           :     :     :     :           :           :     :     :        +- * BroadcastHashJoin Inner BuildRight (145)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :- * Project (143)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (142)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :- * Project (140)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (139)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :- * Project (137)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :  +- * SortMergeJoin Inner (136)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :- * Sort (133)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :  +- Exchange (132)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :     +- * Filter (131)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :        +- * ColumnarToRow (130)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :           +- Scan parquet default.store_sales (129)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     +- * Sort (135)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        +- ReusedExchange (134)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     +- ReusedExchange (138)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     +- ReusedExchange (141)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           +- ReusedExchange (144)
                              :     :     :     :           :           :     :     :     :           :           :     :     +- * Sort (150)
                              :     :     :     :           :           :     :     :     :           :           :     :        +- ReusedExchange (149)
                              :     :     :     :           :           :     :     :     :           :           :     +- ReusedExchange (153)
                              :     :     :     :           :           :     :     :     :           :           +- ReusedExchange (156)
                              :     :     :     :           :           :     :     :     :           +- * Sort (162)
                              :     :     :     :           :           :     :     :     :              +- ReusedExchange (161)
                              :     :     :     :           :           :     :     :     +- * Sort (168)
                              :     :     :     :           :           :     :     :        +- ReusedExchange (167)
                              :     :     :     :           :           :     :     +- ReusedExchange (171)
                              :     :     :     :           :           :     +- ReusedExchange (174)
                              :     :     :     :           :           +- ReusedExchange (177)
                              :     :     :     :           +- * Sort (183)
                              :     :     :     :              +- ReusedExchange (182)
                              :     :     :     +- * Sort (189)
                              :     :     :        +- ReusedExchange (188)
                              :     :     +- ReusedExchange (192)
                              :     +- ReusedExchange (195)
                              +- ReusedExchange (198)


(1) Scan parquet default.store_sales
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]

(3) Filter [codegen id : 1]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Condition : (((((((isnotnull(ss_item_sk#1) AND isnotnull(ss_ticket_number#8)) AND isnotnull(ss_store_sk#6)) AND isnotnull(ss_customer_sk#2)) AND isnotnull(ss_cdemo_sk#3)) AND isnotnull(ss_promo_sk#7)) AND isnotnull(ss_hdemo_sk#4)) AND isnotnull(ss_addr_sk#5))

(4) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#8, 5), ENSURE_REQUIREMENTS, [id=#14]

(5) Sort [codegen id : 2]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#8 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [3]: [sr_item_sk#15, sr_ticket_number#16, sr_returned_date_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) ColumnarToRow [codegen id : 3]
Input [3]: [sr_item_sk#15, sr_ticket_number#16, sr_returned_date_sk#17]

(8) Filter [codegen id : 3]
Input [3]: [sr_item_sk#15, sr_ticket_number#16, sr_returned_date_sk#17]
Condition : (isnotnull(sr_item_sk#15) AND isnotnull(sr_ticket_number#16))

(9) Project [codegen id : 3]
Output [2]: [sr_item_sk#15, sr_ticket_number#16]
Input [3]: [sr_item_sk#15, sr_ticket_number#16, sr_returned_date_sk#17]

(10) Exchange
Input [2]: [sr_item_sk#15, sr_ticket_number#16]
Arguments: hashpartitioning(sr_item_sk#15, sr_ticket_number#16, 5), ENSURE_REQUIREMENTS, [id=#18]

(11) Sort [codegen id : 4]
Input [2]: [sr_item_sk#15, sr_ticket_number#16]
Arguments: [sr_item_sk#15 ASC NULLS FIRST, sr_ticket_number#16 ASC NULLS FIRST], false, 0

(12) SortMergeJoin [codegen id : 13]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#8]
Right keys [2]: [sr_item_sk#15, sr_ticket_number#16]
Join condition: None

(13) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, sr_item_sk#15, sr_ticket_number#16]

(14) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#19, cs_order_number#20, cs_ext_list_price#21, cs_sold_date_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_order_number)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_ext_list_price:decimal(7,2)>

(15) ColumnarToRow [codegen id : 5]
Input [4]: [cs_item_sk#19, cs_order_number#20, cs_ext_list_price#21, cs_sold_date_sk#22]

(16) Filter [codegen id : 5]
Input [4]: [cs_item_sk#19, cs_order_number#20, cs_ext_list_price#21, cs_sold_date_sk#22]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_order_number#20))

(17) Project [codegen id : 5]
Output [3]: [cs_item_sk#19, cs_order_number#20, cs_ext_list_price#21]
Input [4]: [cs_item_sk#19, cs_order_number#20, cs_ext_list_price#21, cs_sold_date_sk#22]

(18) Exchange
Input [3]: [cs_item_sk#19, cs_order_number#20, cs_ext_list_price#21]
Arguments: hashpartitioning(cs_item_sk#19, cs_order_number#20, 5), ENSURE_REQUIREMENTS, [id=#23]

(19) Sort [codegen id : 6]
Input [3]: [cs_item_sk#19, cs_order_number#20, cs_ext_list_price#21]
Arguments: [cs_item_sk#19 ASC NULLS FIRST, cs_order_number#20 ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_returns
Output [6]: [cr_item_sk#24, cr_order_number#25, cr_refunded_cash#26, cr_reversed_charge#27, cr_store_credit#28, cr_returned_date_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2)>

(21) ColumnarToRow [codegen id : 7]
Input [6]: [cr_item_sk#24, cr_order_number#25, cr_refunded_cash#26, cr_reversed_charge#27, cr_store_credit#28, cr_returned_date_sk#29]

(22) Filter [codegen id : 7]
Input [6]: [cr_item_sk#24, cr_order_number#25, cr_refunded_cash#26, cr_reversed_charge#27, cr_store_credit#28, cr_returned_date_sk#29]
Condition : (isnotnull(cr_item_sk#24) AND isnotnull(cr_order_number#25))

(23) Project [codegen id : 7]
Output [5]: [cr_item_sk#24, cr_order_number#25, cr_refunded_cash#26, cr_reversed_charge#27, cr_store_credit#28]
Input [6]: [cr_item_sk#24, cr_order_number#25, cr_refunded_cash#26, cr_reversed_charge#27, cr_store_credit#28, cr_returned_date_sk#29]

(24) Exchange
Input [5]: [cr_item_sk#24, cr_order_number#25, cr_refunded_cash#26, cr_reversed_charge#27, cr_store_credit#28]
Arguments: hashpartitioning(cr_item_sk#24, cr_order_number#25, 5), ENSURE_REQUIREMENTS, [id=#30]

(25) Sort [codegen id : 8]
Input [5]: [cr_item_sk#24, cr_order_number#25, cr_refunded_cash#26, cr_reversed_charge#27, cr_store_credit#28]
Arguments: [cr_item_sk#24 ASC NULLS FIRST, cr_order_number#25 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 9]
Left keys [2]: [cs_item_sk#19, cs_order_number#20]
Right keys [2]: [cr_item_sk#24, cr_order_number#25]
Join condition: None

(27) Project [codegen id : 9]
Output [5]: [cs_item_sk#19, cs_ext_list_price#21, cr_refunded_cash#26, cr_reversed_charge#27, cr_store_credit#28]
Input [8]: [cs_item_sk#19, cs_order_number#20, cs_ext_list_price#21, cr_item_sk#24, cr_order_number#25, cr_refunded_cash#26, cr_reversed_charge#27, cr_store_credit#28]

(28) HashAggregate [codegen id : 9]
Input [5]: [cs_item_sk#19, cs_ext_list_price#21, cr_refunded_cash#26, cr_reversed_charge#27, cr_store_credit#28]
Keys [1]: [cs_item_sk#19]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_list_price#21)), partial_sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#26 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#27 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#28 as decimal(9,2)))), DecimalType(9,2), true))]
Aggregate Attributes [3]: [sum#31, sum#32, isEmpty#33]
Results [4]: [cs_item_sk#19, sum#34, sum#35, isEmpty#36]

(29) Exchange
Input [4]: [cs_item_sk#19, sum#34, sum#35, isEmpty#36]
Arguments: hashpartitioning(cs_item_sk#19, 5), ENSURE_REQUIREMENTS, [id=#37]

(30) HashAggregate [codegen id : 10]
Input [4]: [cs_item_sk#19, sum#34, sum#35, isEmpty#36]
Keys [1]: [cs_item_sk#19]
Functions [2]: [sum(UnscaledValue(cs_ext_list_price#21)), sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#26 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#27 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#28 as decimal(9,2)))), DecimalType(9,2), true))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_list_price#21))#38, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#26 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#27 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#28 as decimal(9,2)))), DecimalType(9,2), true))#39]
Results [3]: [cs_item_sk#19, MakeDecimal(sum(UnscaledValue(cs_ext_list_price#21))#38,17,2) AS sale#40, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#26 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#27 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#28 as decimal(9,2)))), DecimalType(9,2), true))#39 AS refund#41]

(31) Filter [codegen id : 10]
Input [3]: [cs_item_sk#19, sale#40, refund#41]
Condition : (isnotnull(sale#40) AND (cast(sale#40 as decimal(21,2)) > CheckOverflow((2.00 * promote_precision(refund#41)), DecimalType(21,2), true)))

(32) Project [codegen id : 10]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_item_sk#19, sale#40, refund#41]

(33) BroadcastExchange
Input [1]: [cs_item_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(34) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [cs_item_sk#19]
Join condition: None

(35) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, cs_item_sk#19]

(36) ReusedExchange [Reuses operator id: 213]
Output [2]: [d_date_sk#43, d_year#44]

(37) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#43]
Join condition: None

(38) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44]
Input [13]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, d_date_sk#43, d_year#44]

(39) Scan parquet default.store
Output [3]: [s_store_sk#45, s_store_name#46, s_zip#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_name), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>

(40) ColumnarToRow [codegen id : 12]
Input [3]: [s_store_sk#45, s_store_name#46, s_zip#47]

(41) Filter [codegen id : 12]
Input [3]: [s_store_sk#45, s_store_name#46, s_zip#47]
Condition : ((isnotnull(s_store_sk#45) AND isnotnull(s_store_name#46)) AND isnotnull(s_zip#47))

(42) BroadcastExchange
Input [3]: [s_store_sk#45, s_store_name#46, s_zip#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#48]

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_store_sk#6]
Right keys [1]: [s_store_sk#45]
Join condition: None

(44) Project [codegen id : 13]
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_sk#45, s_store_name#46, s_zip#47]

(45) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#49]

(46) Sort [codegen id : 14]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(47) Scan parquet default.customer
Output [6]: [c_customer_sk#50, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, c_first_shipto_date_sk#54, c_first_sales_date_sk#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_first_sales_date_sk), IsNotNull(c_first_shipto_date_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int>

(48) ColumnarToRow [codegen id : 15]
Input [6]: [c_customer_sk#50, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, c_first_shipto_date_sk#54, c_first_sales_date_sk#55]

(49) Filter [codegen id : 15]
Input [6]: [c_customer_sk#50, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, c_first_shipto_date_sk#54, c_first_sales_date_sk#55]
Condition : (((((isnotnull(c_customer_sk#50) AND isnotnull(c_first_sales_date_sk#55)) AND isnotnull(c_first_shipto_date_sk#54)) AND isnotnull(c_current_cdemo_sk#51)) AND isnotnull(c_current_hdemo_sk#52)) AND isnotnull(c_current_addr_sk#53))

(50) Exchange
Input [6]: [c_customer_sk#50, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, c_first_shipto_date_sk#54, c_first_sales_date_sk#55]
Arguments: hashpartitioning(c_customer_sk#50, 5), ENSURE_REQUIREMENTS, [id=#56]

(51) Sort [codegen id : 16]
Input [6]: [c_customer_sk#50, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, c_first_shipto_date_sk#54, c_first_sales_date_sk#55]
Arguments: [c_customer_sk#50 ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 19]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#50]
Join condition: None

(53) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, c_first_shipto_date_sk#54, c_first_sales_date_sk#55]
Input [18]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_customer_sk#50, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, c_first_shipto_date_sk#54, c_first_sales_date_sk#55]

(54) Scan parquet default.date_dim
Output [2]: [d_date_sk#57, d_year#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(55) ColumnarToRow [codegen id : 17]
Input [2]: [d_date_sk#57, d_year#58]

(56) Filter [codegen id : 17]
Input [2]: [d_date_sk#57, d_year#58]
Condition : isnotnull(d_date_sk#57)

(57) BroadcastExchange
Input [2]: [d_date_sk#57, d_year#58]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#59]

(58) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [c_first_sales_date_sk#55]
Right keys [1]: [d_date_sk#57]
Join condition: None

(59) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, c_first_shipto_date_sk#54, d_year#58]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, c_first_shipto_date_sk#54, c_first_sales_date_sk#55, d_date_sk#57, d_year#58]

(60) ReusedExchange [Reuses operator id: 57]
Output [2]: [d_date_sk#60, d_year#61]

(61) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [c_first_shipto_date_sk#54]
Right keys [1]: [d_date_sk#60]
Join condition: None

(62) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, c_first_shipto_date_sk#54, d_year#58, d_date_sk#60, d_year#61]

(63) Exchange
Input [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61]
Arguments: hashpartitioning(ss_cdemo_sk#3, 5), ENSURE_REQUIREMENTS, [id=#62]

(64) Sort [codegen id : 20]
Input [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61]
Arguments: [ss_cdemo_sk#3 ASC NULLS FIRST], false, 0

(65) Scan parquet default.customer_demographics
Output [2]: [cd_demo_sk#63, cd_marital_status#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(66) ColumnarToRow [codegen id : 21]
Input [2]: [cd_demo_sk#63, cd_marital_status#64]

(67) Filter [codegen id : 21]
Input [2]: [cd_demo_sk#63, cd_marital_status#64]
Condition : (isnotnull(cd_demo_sk#63) AND isnotnull(cd_marital_status#64))

(68) Exchange
Input [2]: [cd_demo_sk#63, cd_marital_status#64]
Arguments: hashpartitioning(cd_demo_sk#63, 5), ENSURE_REQUIREMENTS, [id=#65]

(69) Sort [codegen id : 22]
Input [2]: [cd_demo_sk#63, cd_marital_status#64]
Arguments: [cd_demo_sk#63 ASC NULLS FIRST], false, 0

(70) SortMergeJoin [codegen id : 23]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#63]
Join condition: None

(71) Project [codegen id : 23]
Output [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61, cd_marital_status#64]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61, cd_demo_sk#63, cd_marital_status#64]

(72) Exchange
Input [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61, cd_marital_status#64]
Arguments: hashpartitioning(c_current_cdemo_sk#51, 5), ENSURE_REQUIREMENTS, [id=#66]

(73) Sort [codegen id : 24]
Input [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61, cd_marital_status#64]
Arguments: [c_current_cdemo_sk#51 ASC NULLS FIRST], false, 0

(74) ReusedExchange [Reuses operator id: 68]
Output [2]: [cd_demo_sk#67, cd_marital_status#68]

(75) Sort [codegen id : 26]
Input [2]: [cd_demo_sk#67, cd_marital_status#68]
Arguments: [cd_demo_sk#67 ASC NULLS FIRST], false, 0

(76) SortMergeJoin [codegen id : 30]
Left keys [1]: [c_current_cdemo_sk#51]
Right keys [1]: [cd_demo_sk#67]
Join condition: NOT (cd_marital_status#64 = cd_marital_status#68)

(77) Project [codegen id : 30]
Output [14]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61]
Input [18]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#51, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61, cd_marital_status#64, cd_demo_sk#67, cd_marital_status#68]

(78) Scan parquet default.promotion
Output [1]: [p_promo_sk#69]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(79) ColumnarToRow [codegen id : 27]
Input [1]: [p_promo_sk#69]

(80) Filter [codegen id : 27]
Input [1]: [p_promo_sk#69]
Condition : isnotnull(p_promo_sk#69)

(81) BroadcastExchange
Input [1]: [p_promo_sk#69]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#70]

(82) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [ss_promo_sk#7]
Right keys [1]: [p_promo_sk#69]
Join condition: None

(83) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61]
Input [15]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61, p_promo_sk#69]

(84) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#71, hd_income_band_sk#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>

(85) ColumnarToRow [codegen id : 28]
Input [2]: [hd_demo_sk#71, hd_income_band_sk#72]

(86) Filter [codegen id : 28]
Input [2]: [hd_demo_sk#71, hd_income_band_sk#72]
Condition : (isnotnull(hd_demo_sk#71) AND isnotnull(hd_income_band_sk#72))

(87) BroadcastExchange
Input [2]: [hd_demo_sk#71, hd_income_band_sk#72]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#73]

(88) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [ss_hdemo_sk#4]
Right keys [1]: [hd_demo_sk#71]
Join condition: None

(89) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61, hd_income_band_sk#72]
Input [15]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61, hd_demo_sk#71, hd_income_band_sk#72]

(90) ReusedExchange [Reuses operator id: 87]
Output [2]: [hd_demo_sk#74, hd_income_band_sk#75]

(91) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [c_current_hdemo_sk#52]
Right keys [1]: [hd_demo_sk#74]
Join condition: None

(92) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#53, d_year#58, d_year#61, hd_income_band_sk#72, hd_income_band_sk#75]
Input [15]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#52, c_current_addr_sk#53, d_year#58, d_year#61, hd_income_band_sk#72, hd_demo_sk#74, hd_income_band_sk#75]

(93) Exchange
Input [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#53, d_year#58, d_year#61, hd_income_band_sk#72, hd_income_band_sk#75]
Arguments: hashpartitioning(ss_addr_sk#5, 5), ENSURE_REQUIREMENTS, [id=#76]

(94) Sort [codegen id : 31]
Input [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#53, d_year#58, d_year#61, hd_income_band_sk#72, hd_income_band_sk#75]
Arguments: [ss_addr_sk#5 ASC NULLS FIRST], false, 0

(95) Scan parquet default.customer_address
Output [5]: [ca_address_sk#77, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_city:string,ca_zip:string>

(96) ColumnarToRow [codegen id : 32]
Input [5]: [ca_address_sk#77, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]

(97) Filter [codegen id : 32]
Input [5]: [ca_address_sk#77, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]
Condition : isnotnull(ca_address_sk#77)

(98) Exchange
Input [5]: [ca_address_sk#77, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]
Arguments: hashpartitioning(ca_address_sk#77, 5), ENSURE_REQUIREMENTS, [id=#82]

(99) Sort [codegen id : 33]
Input [5]: [ca_address_sk#77, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]
Arguments: [ca_address_sk#77 ASC NULLS FIRST], false, 0

(100) SortMergeJoin [codegen id : 34]
Left keys [1]: [ss_addr_sk#5]
Right keys [1]: [ca_address_sk#77]
Join condition: None

(101) Project [codegen id : 34]
Output [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#53, d_year#58, d_year#61, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]
Input [18]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#53, d_year#58, d_year#61, hd_income_band_sk#72, hd_income_band_sk#75, ca_address_sk#77, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]

(102) Exchange
Input [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#53, d_year#58, d_year#61, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]
Arguments: hashpartitioning(c_current_addr_sk#53, 5), ENSURE_REQUIREMENTS, [id=#83]

(103) Sort [codegen id : 35]
Input [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#53, d_year#58, d_year#61, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]
Arguments: [c_current_addr_sk#53 ASC NULLS FIRST], false, 0

(104) ReusedExchange [Reuses operator id: 98]
Output [5]: [ca_address_sk#84, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88]

(105) Sort [codegen id : 37]
Input [5]: [ca_address_sk#84, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88]
Arguments: [ca_address_sk#84 ASC NULLS FIRST], false, 0

(106) SortMergeJoin [codegen id : 41]
Left keys [1]: [c_current_addr_sk#53]
Right keys [1]: [ca_address_sk#84]
Join condition: None

(107) Project [codegen id : 41]
Output [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#58, d_year#61, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88]
Input [21]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#53, d_year#58, d_year#61, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_address_sk#84, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88]

(108) Scan parquet default.income_band
Output [1]: [ib_income_band_sk#89]
Batched: true
Location [not included in comparison]/{warehouse_dir}/income_band]
PushedFilters: [IsNotNull(ib_income_band_sk)]
ReadSchema: struct<ib_income_band_sk:int>

(109) ColumnarToRow [codegen id : 38]
Input [1]: [ib_income_band_sk#89]

(110) Filter [codegen id : 38]
Input [1]: [ib_income_band_sk#89]
Condition : isnotnull(ib_income_band_sk#89)

(111) BroadcastExchange
Input [1]: [ib_income_band_sk#89]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#90]

(112) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [hd_income_band_sk#72]
Right keys [1]: [ib_income_band_sk#89]
Join condition: None

(113) Project [codegen id : 41]
Output [18]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#58, d_year#61, hd_income_band_sk#75, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88]
Input [20]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#58, d_year#61, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, ib_income_band_sk#89]

(114) ReusedExchange [Reuses operator id: 111]
Output [1]: [ib_income_band_sk#91]

(115) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [hd_income_band_sk#75]
Right keys [1]: [ib_income_band_sk#91]
Join condition: None

(116) Project [codegen id : 41]
Output [17]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#58, d_year#61, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88]
Input [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#58, d_year#61, hd_income_band_sk#75, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, ib_income_band_sk#91]

(117) Scan parquet default.item
Output [4]: [i_item_sk#92, i_current_price#93, i_color#94, i_product_name#95]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), In(i_color, [burlywood           ,floral              ,indian              ,medium              ,purple              ,spring              ]), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string,i_product_name:string>

(118) ColumnarToRow [codegen id : 40]
Input [4]: [i_item_sk#92, i_current_price#93, i_color#94, i_product_name#95]

(119) Filter [codegen id : 40]
Input [4]: [i_item_sk#92, i_current_price#93, i_color#94, i_product_name#95]
Condition : ((((((isnotnull(i_current_price#93) AND i_color#94 IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#93 >= 64.00)) AND (i_current_price#93 <= 74.00)) AND (i_current_price#93 >= 65.00)) AND (i_current_price#93 <= 79.00)) AND isnotnull(i_item_sk#92))

(120) Project [codegen id : 40]
Output [2]: [i_item_sk#92, i_product_name#95]
Input [4]: [i_item_sk#92, i_current_price#93, i_color#94, i_product_name#95]

(121) BroadcastExchange
Input [2]: [i_item_sk#92, i_product_name#95]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#96]

(122) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#92]
Join condition: None

(123) Project [codegen id : 41]
Output [18]: [ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, d_year#58, d_year#61, s_store_name#46, s_zip#47, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, i_item_sk#92, i_product_name#95]
Input [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#58, d_year#61, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, i_item_sk#92, i_product_name#95]

(124) HashAggregate [codegen id : 41]
Input [18]: [ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, d_year#58, d_year#61, s_store_name#46, s_zip#47, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, i_item_sk#92, i_product_name#95]
Keys [15]: [i_product_name#95, i_item_sk#92, s_store_name#46, s_zip#47, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, d_year#44, d_year#58, d_year#61]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#9)), partial_sum(UnscaledValue(ss_list_price#10)), partial_sum(UnscaledValue(ss_coupon_amt#11))]
Aggregate Attributes [4]: [count#97, sum#98, sum#99, sum#100]
Results [19]: [i_product_name#95, i_item_sk#92, s_store_name#46, s_zip#47, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, d_year#44, d_year#58, d_year#61, count#101, sum#102, sum#103, sum#104]

(125) Exchange
Input [19]: [i_product_name#95, i_item_sk#92, s_store_name#46, s_zip#47, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, d_year#44, d_year#58, d_year#61, count#101, sum#102, sum#103, sum#104]
Arguments: hashpartitioning(i_product_name#95, i_item_sk#92, s_store_name#46, s_zip#47, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, d_year#44, d_year#58, d_year#61, 5), ENSURE_REQUIREMENTS, [id=#105]

(126) HashAggregate [codegen id : 42]
Input [19]: [i_product_name#95, i_item_sk#92, s_store_name#46, s_zip#47, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, d_year#44, d_year#58, d_year#61, count#101, sum#102, sum#103, sum#104]
Keys [15]: [i_product_name#95, i_item_sk#92, s_store_name#46, s_zip#47, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81, ca_street_number#85, ca_street_name#86, ca_city#87, ca_zip#88, d_year#44, d_year#58, d_year#61]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#9)), sum(UnscaledValue(ss_list_price#10)), sum(UnscaledValue(ss_coupon_amt#11))]
Aggregate Attributes [4]: [count(1)#106, sum(UnscaledValue(ss_wholesale_cost#9))#107, sum(UnscaledValue(ss_list_price#10))#108, sum(UnscaledValue(ss_coupon_amt#11))#109]
Results [17]: [i_product_name#95 AS product_name#110, i_item_sk#92 AS item_sk#111, s_store_name#46 AS store_name#112, s_zip#47 AS store_zip#113, ca_street_number#78 AS b_street_number#114, ca_street_name#79 AS b_streen_name#115, ca_city#80 AS b_city#116, ca_zip#81 AS b_zip#117, ca_street_number#85 AS c_street_number#118, ca_street_name#86 AS c_street_name#119, ca_city#87 AS c_city#120, ca_zip#88 AS c_zip#121, d_year#44 AS syear#122, count(1)#106 AS cnt#123, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#9))#107,17,2) AS s1#124, MakeDecimal(sum(UnscaledValue(ss_list_price#10))#108,17,2) AS s2#125, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#11))#109,17,2) AS s3#126]

(127) Exchange
Input [17]: [product_name#110, item_sk#111, store_name#112, store_zip#113, b_street_number#114, b_streen_name#115, b_city#116, b_zip#117, c_street_number#118, c_street_name#119, c_city#120, c_zip#121, syear#122, cnt#123, s1#124, s2#125, s3#126]
Arguments: hashpartitioning(item_sk#111, store_name#112, store_zip#113, 5), ENSURE_REQUIREMENTS, [id=#127]

(128) Sort [codegen id : 43]
Input [17]: [product_name#110, item_sk#111, store_name#112, store_zip#113, b_street_number#114, b_streen_name#115, b_city#116, b_zip#117, c_street_number#118, c_street_name#119, c_city#120, c_zip#121, syear#122, cnt#123, s1#124, s2#125, s3#126]
Arguments: [item_sk#111 ASC NULLS FIRST, store_name#112 ASC NULLS FIRST, store_zip#113 ASC NULLS FIRST], false, 0

(129) Scan parquet default.store_sales
Output [12]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_ticket_number#135, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, ss_sold_date_sk#139]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#139), dynamicpruningexpression(ss_sold_date_sk#139 IN dynamicpruning#140)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(130) ColumnarToRow [codegen id : 44]
Input [12]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_ticket_number#135, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, ss_sold_date_sk#139]

(131) Filter [codegen id : 44]
Input [12]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_ticket_number#135, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, ss_sold_date_sk#139]
Condition : (((((((isnotnull(ss_item_sk#128) AND isnotnull(ss_ticket_number#135)) AND isnotnull(ss_store_sk#133)) AND isnotnull(ss_customer_sk#129)) AND isnotnull(ss_cdemo_sk#130)) AND isnotnull(ss_promo_sk#134)) AND isnotnull(ss_hdemo_sk#131)) AND isnotnull(ss_addr_sk#132))

(132) Exchange
Input [12]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_ticket_number#135, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, ss_sold_date_sk#139]
Arguments: hashpartitioning(ss_item_sk#128, ss_ticket_number#135, 5), ENSURE_REQUIREMENTS, [id=#141]

(133) Sort [codegen id : 45]
Input [12]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_ticket_number#135, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, ss_sold_date_sk#139]
Arguments: [ss_item_sk#128 ASC NULLS FIRST, ss_ticket_number#135 ASC NULLS FIRST], false, 0

(134) ReusedExchange [Reuses operator id: 10]
Output [2]: [sr_item_sk#142, sr_ticket_number#143]

(135) Sort [codegen id : 47]
Input [2]: [sr_item_sk#142, sr_ticket_number#143]
Arguments: [sr_item_sk#142 ASC NULLS FIRST, sr_ticket_number#143 ASC NULLS FIRST], false, 0

(136) SortMergeJoin [codegen id : 56]
Left keys [2]: [ss_item_sk#128, ss_ticket_number#135]
Right keys [2]: [sr_item_sk#142, sr_ticket_number#143]
Join condition: None

(137) Project [codegen id : 56]
Output [11]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, ss_sold_date_sk#139]
Input [14]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_ticket_number#135, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, ss_sold_date_sk#139, sr_item_sk#142, sr_ticket_number#143]

(138) ReusedExchange [Reuses operator id: 33]
Output [1]: [cs_item_sk#144]

(139) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_item_sk#128]
Right keys [1]: [cs_item_sk#144]
Join condition: None

(140) Project [codegen id : 56]
Output [11]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, ss_sold_date_sk#139]
Input [12]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, ss_sold_date_sk#139, cs_item_sk#144]

(141) ReusedExchange [Reuses operator id: 217]
Output [2]: [d_date_sk#145, d_year#146]

(142) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_sold_date_sk#139]
Right keys [1]: [d_date_sk#145]
Join condition: None

(143) Project [codegen id : 56]
Output [11]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146]
Input [13]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, ss_sold_date_sk#139, d_date_sk#145, d_year#146]

(144) ReusedExchange [Reuses operator id: 42]
Output [3]: [s_store_sk#147, s_store_name#148, s_zip#149]

(145) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_store_sk#133]
Right keys [1]: [s_store_sk#147]
Join condition: None

(146) Project [codegen id : 56]
Output [12]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149]
Input [14]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_store_sk#133, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_sk#147, s_store_name#148, s_zip#149]

(147) Exchange
Input [12]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149]
Arguments: hashpartitioning(ss_customer_sk#129, 5), ENSURE_REQUIREMENTS, [id=#150]

(148) Sort [codegen id : 57]
Input [12]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149]
Arguments: [ss_customer_sk#129 ASC NULLS FIRST], false, 0

(149) ReusedExchange [Reuses operator id: 50]
Output [6]: [c_customer_sk#151, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, c_first_shipto_date_sk#155, c_first_sales_date_sk#156]

(150) Sort [codegen id : 59]
Input [6]: [c_customer_sk#151, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, c_first_shipto_date_sk#155, c_first_sales_date_sk#156]
Arguments: [c_customer_sk#151 ASC NULLS FIRST], false, 0

(151) SortMergeJoin [codegen id : 62]
Left keys [1]: [ss_customer_sk#129]
Right keys [1]: [c_customer_sk#151]
Join condition: None

(152) Project [codegen id : 62]
Output [16]: [ss_item_sk#128, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, c_first_shipto_date_sk#155, c_first_sales_date_sk#156]
Input [18]: [ss_item_sk#128, ss_customer_sk#129, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_customer_sk#151, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, c_first_shipto_date_sk#155, c_first_sales_date_sk#156]

(153) ReusedExchange [Reuses operator id: 57]
Output [2]: [d_date_sk#157, d_year#158]

(154) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [c_first_sales_date_sk#156]
Right keys [1]: [d_date_sk#157]
Join condition: None

(155) Project [codegen id : 62]
Output [16]: [ss_item_sk#128, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, c_first_shipto_date_sk#155, d_year#158]
Input [18]: [ss_item_sk#128, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, c_first_shipto_date_sk#155, c_first_sales_date_sk#156, d_date_sk#157, d_year#158]

(156) ReusedExchange [Reuses operator id: 57]
Output [2]: [d_date_sk#159, d_year#160]

(157) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [c_first_shipto_date_sk#155]
Right keys [1]: [d_date_sk#159]
Join condition: None

(158) Project [codegen id : 62]
Output [16]: [ss_item_sk#128, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160]
Input [18]: [ss_item_sk#128, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, c_first_shipto_date_sk#155, d_year#158, d_date_sk#159, d_year#160]

(159) Exchange
Input [16]: [ss_item_sk#128, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160]
Arguments: hashpartitioning(ss_cdemo_sk#130, 5), ENSURE_REQUIREMENTS, [id=#161]

(160) Sort [codegen id : 63]
Input [16]: [ss_item_sk#128, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160]
Arguments: [ss_cdemo_sk#130 ASC NULLS FIRST], false, 0

(161) ReusedExchange [Reuses operator id: 68]
Output [2]: [cd_demo_sk#162, cd_marital_status#163]

(162) Sort [codegen id : 65]
Input [2]: [cd_demo_sk#162, cd_marital_status#163]
Arguments: [cd_demo_sk#162 ASC NULLS FIRST], false, 0

(163) SortMergeJoin [codegen id : 66]
Left keys [1]: [ss_cdemo_sk#130]
Right keys [1]: [cd_demo_sk#162]
Join condition: None

(164) Project [codegen id : 66]
Output [16]: [ss_item_sk#128, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160, cd_marital_status#163]
Input [18]: [ss_item_sk#128, ss_cdemo_sk#130, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160, cd_demo_sk#162, cd_marital_status#163]

(165) Exchange
Input [16]: [ss_item_sk#128, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160, cd_marital_status#163]
Arguments: hashpartitioning(c_current_cdemo_sk#152, 5), ENSURE_REQUIREMENTS, [id=#164]

(166) Sort [codegen id : 67]
Input [16]: [ss_item_sk#128, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160, cd_marital_status#163]
Arguments: [c_current_cdemo_sk#152 ASC NULLS FIRST], false, 0

(167) ReusedExchange [Reuses operator id: 68]
Output [2]: [cd_demo_sk#165, cd_marital_status#166]

(168) Sort [codegen id : 69]
Input [2]: [cd_demo_sk#165, cd_marital_status#166]
Arguments: [cd_demo_sk#165 ASC NULLS FIRST], false, 0

(169) SortMergeJoin [codegen id : 73]
Left keys [1]: [c_current_cdemo_sk#152]
Right keys [1]: [cd_demo_sk#165]
Join condition: NOT (cd_marital_status#163 = cd_marital_status#166)

(170) Project [codegen id : 73]
Output [14]: [ss_item_sk#128, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160]
Input [18]: [ss_item_sk#128, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_cdemo_sk#152, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160, cd_marital_status#163, cd_demo_sk#165, cd_marital_status#166]

(171) ReusedExchange [Reuses operator id: 81]
Output [1]: [p_promo_sk#167]

(172) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [ss_promo_sk#134]
Right keys [1]: [p_promo_sk#167]
Join condition: None

(173) Project [codegen id : 73]
Output [13]: [ss_item_sk#128, ss_hdemo_sk#131, ss_addr_sk#132, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160]
Input [15]: [ss_item_sk#128, ss_hdemo_sk#131, ss_addr_sk#132, ss_promo_sk#134, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160, p_promo_sk#167]

(174) ReusedExchange [Reuses operator id: 87]
Output [2]: [hd_demo_sk#168, hd_income_band_sk#169]

(175) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [ss_hdemo_sk#131]
Right keys [1]: [hd_demo_sk#168]
Join condition: None

(176) Project [codegen id : 73]
Output [13]: [ss_item_sk#128, ss_addr_sk#132, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160, hd_income_band_sk#169]
Input [15]: [ss_item_sk#128, ss_hdemo_sk#131, ss_addr_sk#132, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160, hd_demo_sk#168, hd_income_band_sk#169]

(177) ReusedExchange [Reuses operator id: 87]
Output [2]: [hd_demo_sk#170, hd_income_band_sk#171]

(178) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [c_current_hdemo_sk#153]
Right keys [1]: [hd_demo_sk#170]
Join condition: None

(179) Project [codegen id : 73]
Output [13]: [ss_item_sk#128, ss_addr_sk#132, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_addr_sk#154, d_year#158, d_year#160, hd_income_band_sk#169, hd_income_band_sk#171]
Input [15]: [ss_item_sk#128, ss_addr_sk#132, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_hdemo_sk#153, c_current_addr_sk#154, d_year#158, d_year#160, hd_income_band_sk#169, hd_demo_sk#170, hd_income_band_sk#171]

(180) Exchange
Input [13]: [ss_item_sk#128, ss_addr_sk#132, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_addr_sk#154, d_year#158, d_year#160, hd_income_band_sk#169, hd_income_band_sk#171]
Arguments: hashpartitioning(ss_addr_sk#132, 5), ENSURE_REQUIREMENTS, [id=#172]

(181) Sort [codegen id : 74]
Input [13]: [ss_item_sk#128, ss_addr_sk#132, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_addr_sk#154, d_year#158, d_year#160, hd_income_band_sk#169, hd_income_band_sk#171]
Arguments: [ss_addr_sk#132 ASC NULLS FIRST], false, 0

(182) ReusedExchange [Reuses operator id: 98]
Output [5]: [ca_address_sk#173, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177]

(183) Sort [codegen id : 76]
Input [5]: [ca_address_sk#173, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177]
Arguments: [ca_address_sk#173 ASC NULLS FIRST], false, 0

(184) SortMergeJoin [codegen id : 77]
Left keys [1]: [ss_addr_sk#132]
Right keys [1]: [ca_address_sk#173]
Join condition: None

(185) Project [codegen id : 77]
Output [16]: [ss_item_sk#128, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_addr_sk#154, d_year#158, d_year#160, hd_income_band_sk#169, hd_income_band_sk#171, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177]
Input [18]: [ss_item_sk#128, ss_addr_sk#132, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_addr_sk#154, d_year#158, d_year#160, hd_income_band_sk#169, hd_income_band_sk#171, ca_address_sk#173, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177]

(186) Exchange
Input [16]: [ss_item_sk#128, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_addr_sk#154, d_year#158, d_year#160, hd_income_band_sk#169, hd_income_band_sk#171, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177]
Arguments: hashpartitioning(c_current_addr_sk#154, 5), ENSURE_REQUIREMENTS, [id=#178]

(187) Sort [codegen id : 78]
Input [16]: [ss_item_sk#128, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_addr_sk#154, d_year#158, d_year#160, hd_income_band_sk#169, hd_income_band_sk#171, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177]
Arguments: [c_current_addr_sk#154 ASC NULLS FIRST], false, 0

(188) ReusedExchange [Reuses operator id: 98]
Output [5]: [ca_address_sk#179, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183]

(189) Sort [codegen id : 80]
Input [5]: [ca_address_sk#179, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183]
Arguments: [ca_address_sk#179 ASC NULLS FIRST], false, 0

(190) SortMergeJoin [codegen id : 84]
Left keys [1]: [c_current_addr_sk#154]
Right keys [1]: [ca_address_sk#179]
Join condition: None

(191) Project [codegen id : 84]
Output [19]: [ss_item_sk#128, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, d_year#158, d_year#160, hd_income_band_sk#169, hd_income_band_sk#171, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183]
Input [21]: [ss_item_sk#128, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, c_current_addr_sk#154, d_year#158, d_year#160, hd_income_band_sk#169, hd_income_band_sk#171, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_address_sk#179, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183]

(192) ReusedExchange [Reuses operator id: 111]
Output [1]: [ib_income_band_sk#184]

(193) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [hd_income_band_sk#169]
Right keys [1]: [ib_income_band_sk#184]
Join condition: None

(194) Project [codegen id : 84]
Output [18]: [ss_item_sk#128, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, d_year#158, d_year#160, hd_income_band_sk#171, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183]
Input [20]: [ss_item_sk#128, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, d_year#158, d_year#160, hd_income_band_sk#169, hd_income_band_sk#171, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, ib_income_band_sk#184]

(195) ReusedExchange [Reuses operator id: 111]
Output [1]: [ib_income_band_sk#185]

(196) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [hd_income_band_sk#171]
Right keys [1]: [ib_income_band_sk#185]
Join condition: None

(197) Project [codegen id : 84]
Output [17]: [ss_item_sk#128, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, d_year#158, d_year#160, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183]
Input [19]: [ss_item_sk#128, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, d_year#158, d_year#160, hd_income_band_sk#171, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, ib_income_band_sk#185]

(198) ReusedExchange [Reuses operator id: 121]
Output [2]: [i_item_sk#186, i_product_name#187]

(199) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [ss_item_sk#128]
Right keys [1]: [i_item_sk#186]
Join condition: None

(200) Project [codegen id : 84]
Output [18]: [ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, d_year#158, d_year#160, s_store_name#148, s_zip#149, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, i_item_sk#186, i_product_name#187]
Input [19]: [ss_item_sk#128, ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, s_store_name#148, s_zip#149, d_year#158, d_year#160, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, i_item_sk#186, i_product_name#187]

(201) HashAggregate [codegen id : 84]
Input [18]: [ss_wholesale_cost#136, ss_list_price#137, ss_coupon_amt#138, d_year#146, d_year#158, d_year#160, s_store_name#148, s_zip#149, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, i_item_sk#186, i_product_name#187]
Keys [15]: [i_product_name#187, i_item_sk#186, s_store_name#148, s_zip#149, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, d_year#146, d_year#158, d_year#160]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#136)), partial_sum(UnscaledValue(ss_list_price#137)), partial_sum(UnscaledValue(ss_coupon_amt#138))]
Aggregate Attributes [4]: [count#188, sum#189, sum#190, sum#191]
Results [19]: [i_product_name#187, i_item_sk#186, s_store_name#148, s_zip#149, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, d_year#146, d_year#158, d_year#160, count#192, sum#193, sum#194, sum#195]

(202) Exchange
Input [19]: [i_product_name#187, i_item_sk#186, s_store_name#148, s_zip#149, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, d_year#146, d_year#158, d_year#160, count#192, sum#193, sum#194, sum#195]
Arguments: hashpartitioning(i_product_name#187, i_item_sk#186, s_store_name#148, s_zip#149, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, d_year#146, d_year#158, d_year#160, 5), ENSURE_REQUIREMENTS, [id=#196]

(203) HashAggregate [codegen id : 85]
Input [19]: [i_product_name#187, i_item_sk#186, s_store_name#148, s_zip#149, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, d_year#146, d_year#158, d_year#160, count#192, sum#193, sum#194, sum#195]
Keys [15]: [i_product_name#187, i_item_sk#186, s_store_name#148, s_zip#149, ca_street_number#174, ca_street_name#175, ca_city#176, ca_zip#177, ca_street_number#180, ca_street_name#181, ca_city#182, ca_zip#183, d_year#146, d_year#158, d_year#160]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#136)), sum(UnscaledValue(ss_list_price#137)), sum(UnscaledValue(ss_coupon_amt#138))]
Aggregate Attributes [4]: [count(1)#197, sum(UnscaledValue(ss_wholesale_cost#136))#198, sum(UnscaledValue(ss_list_price#137))#199, sum(UnscaledValue(ss_coupon_amt#138))#200]
Results [8]: [i_item_sk#186 AS item_sk#201, s_store_name#148 AS store_name#202, s_zip#149 AS store_zip#203, d_year#146 AS syear#204, count(1)#197 AS cnt#205, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#136))#198,17,2) AS s1#206, MakeDecimal(sum(UnscaledValue(ss_list_price#137))#199,17,2) AS s2#207, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#138))#200,17,2) AS s3#208]

(204) Exchange
Input [8]: [item_sk#201, store_name#202, store_zip#203, syear#204, cnt#205, s1#206, s2#207, s3#208]
Arguments: hashpartitioning(item_sk#201, store_name#202, store_zip#203, 5), ENSURE_REQUIREMENTS, [id=#209]

(205) Sort [codegen id : 86]
Input [8]: [item_sk#201, store_name#202, store_zip#203, syear#204, cnt#205, s1#206, s2#207, s3#208]
Arguments: [item_sk#201 ASC NULLS FIRST, store_name#202 ASC NULLS FIRST, store_zip#203 ASC NULLS FIRST], false, 0

(206) SortMergeJoin [codegen id : 87]
Left keys [3]: [item_sk#111, store_name#112, store_zip#113]
Right keys [3]: [item_sk#201, store_name#202, store_zip#203]
Join condition: (cnt#205 <= cnt#123)

(207) Project [codegen id : 87]
Output [21]: [product_name#110, store_name#112, store_zip#113, b_street_number#114, b_streen_name#115, b_city#116, b_zip#117, c_street_number#118, c_street_name#119, c_city#120, c_zip#121, syear#122, cnt#123, s1#124, s2#125, s3#126, s1#206, s2#207, s3#208, syear#204, cnt#205]
Input [25]: [product_name#110, item_sk#111, store_name#112, store_zip#113, b_street_number#114, b_streen_name#115, b_city#116, b_zip#117, c_street_number#118, c_street_name#119, c_city#120, c_zip#121, syear#122, cnt#123, s1#124, s2#125, s3#126, item_sk#201, store_name#202, store_zip#203, syear#204, cnt#205, s1#206, s2#207, s3#208]

(208) Exchange
Input [21]: [product_name#110, store_name#112, store_zip#113, b_street_number#114, b_streen_name#115, b_city#116, b_zip#117, c_street_number#118, c_street_name#119, c_city#120, c_zip#121, syear#122, cnt#123, s1#124, s2#125, s3#126, s1#206, s2#207, s3#208, syear#204, cnt#205]
Arguments: rangepartitioning(product_name#110 ASC NULLS FIRST, store_name#112 ASC NULLS FIRST, cnt#205 ASC NULLS FIRST, s1#124 ASC NULLS FIRST, s1#206 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#210]

(209) Sort [codegen id : 88]
Input [21]: [product_name#110, store_name#112, store_zip#113, b_street_number#114, b_streen_name#115, b_city#116, b_zip#117, c_street_number#118, c_street_name#119, c_city#120, c_zip#121, syear#122, cnt#123, s1#124, s2#125, s3#126, s1#206, s2#207, s3#208, syear#204, cnt#205]
Arguments: [product_name#110 ASC NULLS FIRST, store_name#112 ASC NULLS FIRST, cnt#205 ASC NULLS FIRST, s1#124 ASC NULLS FIRST, s1#206 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (213)
+- * Filter (212)
   +- * ColumnarToRow (211)
      +- Scan parquet default.date_dim (210)


(210) Scan parquet default.date_dim
Output [2]: [d_date_sk#43, d_year#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(211) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#43, d_year#44]

(212) Filter [codegen id : 1]
Input [2]: [d_date_sk#43, d_year#44]
Condition : ((isnotnull(d_year#44) AND (d_year#44 = 1999)) AND isnotnull(d_date_sk#43))

(213) BroadcastExchange
Input [2]: [d_date_sk#43, d_year#44]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#211]

Subquery:2 Hosting operator id = 129 Hosting Expression = ss_sold_date_sk#139 IN dynamicpruning#140
BroadcastExchange (217)
+- * Filter (216)
   +- * ColumnarToRow (215)
      +- Scan parquet default.date_dim (214)


(214) Scan parquet default.date_dim
Output [2]: [d_date_sk#145, d_year#146]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(215) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#145, d_year#146]

(216) Filter [codegen id : 1]
Input [2]: [d_date_sk#145, d_year#146]
Condition : ((isnotnull(d_year#146) AND (d_year#146 = 2000)) AND isnotnull(d_date_sk#145))

(217) BroadcastExchange
Input [2]: [d_date_sk#145, d_year#146]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#212]


