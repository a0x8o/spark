== Physical Plan ==
TakeOrderedAndProject (71)
+- * Filter (70)
   +- * HashAggregate (69)
      +- * HashAggregate (68)
         +- * Project (67)
            +- * BroadcastHashJoin Inner BuildRight (66)
               :- Window (60)
               :  +- * Sort (59)
               :     +- Exchange (58)
               :        +- * Project (57)
               :           +- * Filter (56)
               :              +- SortMergeJoin FullOuter (55)
               :                 :- * Sort (29)
               :                 :  +- Exchange (28)
               :                 :     +- * HashAggregate (27)
               :                 :        +- Exchange (26)
               :                 :           +- * HashAggregate (25)
               :                 :              +- * Project (24)
               :                 :                 +- * BroadcastHashJoin Inner BuildRight (23)
               :                 :                    :- * Project (17)
               :                 :                    :  +- Window (16)
               :                 :                    :     +- * Sort (15)
               :                 :                    :        +- Exchange (14)
               :                 :                    :           +- * HashAggregate (13)
               :                 :                    :              +- Exchange (12)
               :                 :                    :                 +- * HashAggregate (11)
               :                 :                    :                    +- * Project (10)
               :                 :                    :                       +- * BroadcastHashJoin Inner BuildRight (9)
               :                 :                    :                          :- * Filter (3)
               :                 :                    :                          :  +- * ColumnarToRow (2)
               :                 :                    :                          :     +- Scan parquet default.web_sales (1)
               :                 :                    :                          +- BroadcastExchange (8)
               :                 :                    :                             +- * Project (7)
               :                 :                    :                                +- * Filter (6)
               :                 :                    :                                   +- * ColumnarToRow (5)
               :                 :                    :                                      +- Scan parquet default.date_dim (4)
               :                 :                    +- BroadcastExchange (22)
               :                 :                       +- * Project (21)
               :                 :                          +- Window (20)
               :                 :                             +- * Sort (19)
               :                 :                                +- ReusedExchange (18)
               :                 +- * Sort (54)
               :                    +- Exchange (53)
               :                       +- * HashAggregate (52)
               :                          +- Exchange (51)
               :                             +- * HashAggregate (50)
               :                                +- * Project (49)
               :                                   +- * BroadcastHashJoin Inner BuildRight (48)
               :                                      :- * Project (42)
               :                                      :  +- Window (41)
               :                                      :     +- * Sort (40)
               :                                      :        +- Exchange (39)
               :                                      :           +- * HashAggregate (38)
               :                                      :              +- Exchange (37)
               :                                      :                 +- * HashAggregate (36)
               :                                      :                    +- * Project (35)
               :                                      :                       +- * BroadcastHashJoin Inner BuildRight (34)
               :                                      :                          :- * Filter (32)
               :                                      :                          :  +- * ColumnarToRow (31)
               :                                      :                          :     +- Scan parquet default.store_sales (30)
               :                                      :                          +- ReusedExchange (33)
               :                                      +- BroadcastExchange (47)
               :                                         +- * Project (46)
               :                                            +- Window (45)
               :                                               +- * Sort (44)
               :                                                  +- ReusedExchange (43)
               +- BroadcastExchange (65)
                  +- * Project (64)
                     +- Window (63)
                        +- * Sort (62)
                           +- ReusedExchange (61)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#5, d_date#6]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]

(8) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(11) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#9]
Results [3]: [ws_item_sk#1, d_date#6, sum#10]

(12) Exchange
Input [3]: [ws_item_sk#1, d_date#6, sum#10]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#11]

(13) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#10]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#12]
Results [4]: [ws_item_sk#1 AS item_sk#13, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#12,17,2) AS sumws#14, ws_item_sk#1]

(14) Exchange
Input [4]: [item_sk#13, d_date#6, sumws#14, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#15]

(15) Sort [codegen id : 4]
Input [4]: [item_sk#13, d_date#6, sumws#14, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(16) Window
Input [4]: [item_sk#13, d_date#6, sumws#14, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#16], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(17) Project [codegen id : 10]
Output [4]: [item_sk#13, d_date#6, sumws#14, rk#16]
Input [5]: [item_sk#13, d_date#6, sumws#14, ws_item_sk#1, rk#16]

(18) ReusedExchange [Reuses operator id: unknown]
Output [4]: [item_sk#17, d_date#18, sumws#19, ws_item_sk#20]

(19) Sort [codegen id : 8]
Input [4]: [item_sk#17, d_date#18, sumws#19, ws_item_sk#20]
Arguments: [ws_item_sk#20 ASC NULLS FIRST, d_date#18 ASC NULLS FIRST], false, 0

(20) Window
Input [4]: [item_sk#17, d_date#18, sumws#19, ws_item_sk#20]
Arguments: [row_number() windowspecdefinition(ws_item_sk#20, d_date#18 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#21], [ws_item_sk#20], [d_date#18 ASC NULLS FIRST]

(21) Project [codegen id : 9]
Output [3]: [item_sk#17, sumws#19, rk#21]
Input [5]: [item_sk#17, d_date#18, sumws#19, ws_item_sk#20, rk#21]

(22) BroadcastExchange
Input [3]: [item_sk#17, sumws#19, rk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(23) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [item_sk#13]
Right keys [1]: [item_sk#17]
Join condition: (rk#16 >= rk#21)

(24) Project [codegen id : 10]
Output [4]: [item_sk#13, d_date#6, sumws#14, sumws#19]
Input [7]: [item_sk#13, d_date#6, sumws#14, rk#16, item_sk#17, sumws#19, rk#21]

(25) HashAggregate [codegen id : 10]
Input [4]: [item_sk#13, d_date#6, sumws#14, sumws#19]
Keys [3]: [item_sk#13, d_date#6, sumws#14]
Functions [1]: [partial_sum(sumws#19)]
Aggregate Attributes [2]: [sum#23, isEmpty#24]
Results [5]: [item_sk#13, d_date#6, sumws#14, sum#25, isEmpty#26]

(26) Exchange
Input [5]: [item_sk#13, d_date#6, sumws#14, sum#25, isEmpty#26]
Arguments: hashpartitioning(item_sk#13, d_date#6, sumws#14, 5), ENSURE_REQUIREMENTS, [id=#27]

(27) HashAggregate [codegen id : 11]
Input [5]: [item_sk#13, d_date#6, sumws#14, sum#25, isEmpty#26]
Keys [3]: [item_sk#13, d_date#6, sumws#14]
Functions [1]: [sum(sumws#19)]
Aggregate Attributes [1]: [sum(sumws#19)#28]
Results [3]: [item_sk#13, d_date#6, sum(sumws#19)#28 AS cume_sales#29]

(28) Exchange
Input [3]: [item_sk#13, d_date#6, cume_sales#29]
Arguments: hashpartitioning(item_sk#13, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#30]

(29) Sort [codegen id : 12]
Input [3]: [item_sk#13, d_date#6, cume_sales#29]
Arguments: [item_sk#13 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(30) Scan parquet default.store_sales
Output [3]: [ss_item_sk#31, ss_sales_price#32, ss_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#33), dynamicpruningexpression(ss_sold_date_sk#33 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(31) ColumnarToRow [codegen id : 14]
Input [3]: [ss_item_sk#31, ss_sales_price#32, ss_sold_date_sk#33]

(32) Filter [codegen id : 14]
Input [3]: [ss_item_sk#31, ss_sales_price#32, ss_sold_date_sk#33]
Condition : isnotnull(ss_item_sk#31)

(33) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#34, d_date#35]

(34) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#33]
Right keys [1]: [d_date_sk#34]
Join condition: None

(35) Project [codegen id : 14]
Output [3]: [ss_item_sk#31, ss_sales_price#32, d_date#35]
Input [5]: [ss_item_sk#31, ss_sales_price#32, ss_sold_date_sk#33, d_date_sk#34, d_date#35]

(36) HashAggregate [codegen id : 14]
Input [3]: [ss_item_sk#31, ss_sales_price#32, d_date#35]
Keys [2]: [ss_item_sk#31, d_date#35]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#32))]
Aggregate Attributes [1]: [sum#36]
Results [3]: [ss_item_sk#31, d_date#35, sum#37]

(37) Exchange
Input [3]: [ss_item_sk#31, d_date#35, sum#37]
Arguments: hashpartitioning(ss_item_sk#31, d_date#35, 5), ENSURE_REQUIREMENTS, [id=#38]

(38) HashAggregate [codegen id : 15]
Input [3]: [ss_item_sk#31, d_date#35, sum#37]
Keys [2]: [ss_item_sk#31, d_date#35]
Functions [1]: [sum(UnscaledValue(ss_sales_price#32))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#32))#39]
Results [4]: [ss_item_sk#31 AS item_sk#40, d_date#35, MakeDecimal(sum(UnscaledValue(ss_sales_price#32))#39,17,2) AS sumss#41, ss_item_sk#31]

(39) Exchange
Input [4]: [item_sk#40, d_date#35, sumss#41, ss_item_sk#31]
Arguments: hashpartitioning(ss_item_sk#31, 5), ENSURE_REQUIREMENTS, [id=#42]

(40) Sort [codegen id : 16]
Input [4]: [item_sk#40, d_date#35, sumss#41, ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST, d_date#35 ASC NULLS FIRST], false, 0

(41) Window
Input [4]: [item_sk#40, d_date#35, sumss#41, ss_item_sk#31]
Arguments: [row_number() windowspecdefinition(ss_item_sk#31, d_date#35 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#43], [ss_item_sk#31], [d_date#35 ASC NULLS FIRST]

(42) Project [codegen id : 22]
Output [4]: [item_sk#40, d_date#35, sumss#41, rk#43]
Input [5]: [item_sk#40, d_date#35, sumss#41, ss_item_sk#31, rk#43]

(43) ReusedExchange [Reuses operator id: unknown]
Output [4]: [item_sk#44, d_date#45, sumss#46, ss_item_sk#47]

(44) Sort [codegen id : 20]
Input [4]: [item_sk#44, d_date#45, sumss#46, ss_item_sk#47]
Arguments: [ss_item_sk#47 ASC NULLS FIRST, d_date#45 ASC NULLS FIRST], false, 0

(45) Window
Input [4]: [item_sk#44, d_date#45, sumss#46, ss_item_sk#47]
Arguments: [row_number() windowspecdefinition(ss_item_sk#47, d_date#45 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#48], [ss_item_sk#47], [d_date#45 ASC NULLS FIRST]

(46) Project [codegen id : 21]
Output [3]: [item_sk#44, sumss#46, rk#48]
Input [5]: [item_sk#44, d_date#45, sumss#46, ss_item_sk#47, rk#48]

(47) BroadcastExchange
Input [3]: [item_sk#44, sumss#46, rk#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#49]

(48) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [item_sk#40]
Right keys [1]: [item_sk#44]
Join condition: (rk#43 >= rk#48)

(49) Project [codegen id : 22]
Output [4]: [item_sk#40, d_date#35, sumss#41, sumss#46]
Input [7]: [item_sk#40, d_date#35, sumss#41, rk#43, item_sk#44, sumss#46, rk#48]

(50) HashAggregate [codegen id : 22]
Input [4]: [item_sk#40, d_date#35, sumss#41, sumss#46]
Keys [3]: [item_sk#40, d_date#35, sumss#41]
Functions [1]: [partial_sum(sumss#46)]
Aggregate Attributes [2]: [sum#50, isEmpty#51]
Results [5]: [item_sk#40, d_date#35, sumss#41, sum#52, isEmpty#53]

(51) Exchange
Input [5]: [item_sk#40, d_date#35, sumss#41, sum#52, isEmpty#53]
Arguments: hashpartitioning(item_sk#40, d_date#35, sumss#41, 5), ENSURE_REQUIREMENTS, [id=#54]

(52) HashAggregate [codegen id : 23]
Input [5]: [item_sk#40, d_date#35, sumss#41, sum#52, isEmpty#53]
Keys [3]: [item_sk#40, d_date#35, sumss#41]
Functions [1]: [sum(sumss#46)]
Aggregate Attributes [1]: [sum(sumss#46)#55]
Results [3]: [item_sk#40, d_date#35, sum(sumss#46)#55 AS cume_sales#56]

(53) Exchange
Input [3]: [item_sk#40, d_date#35, cume_sales#56]
Arguments: hashpartitioning(item_sk#40, d_date#35, 5), ENSURE_REQUIREMENTS, [id=#57]

(54) Sort [codegen id : 24]
Input [3]: [item_sk#40, d_date#35, cume_sales#56]
Arguments: [item_sk#40 ASC NULLS FIRST, d_date#35 ASC NULLS FIRST], false, 0

(55) SortMergeJoin
Left keys [2]: [item_sk#13, d_date#6]
Right keys [2]: [item_sk#40, d_date#35]
Join condition: None

(56) Filter [codegen id : 25]
Input [6]: [item_sk#13, d_date#6, cume_sales#29, item_sk#40, d_date#35, cume_sales#56]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#13) THEN item_sk#13 ELSE item_sk#40 END)

(57) Project [codegen id : 25]
Output [4]: [CASE WHEN isnotnull(item_sk#13) THEN item_sk#13 ELSE item_sk#40 END AS item_sk#58, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#35 END AS d_date#59, cume_sales#29 AS web_sales#60, cume_sales#56 AS store_sales#61]
Input [6]: [item_sk#13, d_date#6, cume_sales#29, item_sk#40, d_date#35, cume_sales#56]

(58) Exchange
Input [4]: [item_sk#58, d_date#59, web_sales#60, store_sales#61]
Arguments: hashpartitioning(item_sk#58, 5), ENSURE_REQUIREMENTS, [id=#62]

(59) Sort [codegen id : 26]
Input [4]: [item_sk#58, d_date#59, web_sales#60, store_sales#61]
Arguments: [item_sk#58 ASC NULLS FIRST, d_date#59 ASC NULLS FIRST], false, 0

(60) Window
Input [4]: [item_sk#58, d_date#59, web_sales#60, store_sales#61]
Arguments: [row_number() windowspecdefinition(item_sk#58, d_date#59 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#63], [item_sk#58], [d_date#59 ASC NULLS FIRST]

(61) ReusedExchange [Reuses operator id: unknown]
Output [4]: [item_sk#64, d_date#65, web_sales#66, store_sales#67]

(62) Sort [codegen id : 52]
Input [4]: [item_sk#64, d_date#65, web_sales#66, store_sales#67]
Arguments: [item_sk#64 ASC NULLS FIRST, d_date#65 ASC NULLS FIRST], false, 0

(63) Window
Input [4]: [item_sk#64, d_date#65, web_sales#66, store_sales#67]
Arguments: [row_number() windowspecdefinition(item_sk#64, d_date#65 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#68], [item_sk#64], [d_date#65 ASC NULLS FIRST]

(64) Project [codegen id : 53]
Output [4]: [item_sk#64, web_sales#66, store_sales#67, rk#68]
Input [5]: [item_sk#64, d_date#65, web_sales#66, store_sales#67, rk#68]

(65) BroadcastExchange
Input [4]: [item_sk#64, web_sales#66, store_sales#67, rk#68]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69]

(66) BroadcastHashJoin [codegen id : 54]
Left keys [1]: [item_sk#58]
Right keys [1]: [item_sk#64]
Join condition: (rk#63 >= rk#68)

(67) Project [codegen id : 54]
Output [6]: [item_sk#58, d_date#59, web_sales#60, store_sales#61, web_sales#66, store_sales#67]
Input [9]: [item_sk#58, d_date#59, web_sales#60, store_sales#61, rk#63, item_sk#64, web_sales#66, store_sales#67, rk#68]

(68) HashAggregate [codegen id : 54]
Input [6]: [item_sk#58, d_date#59, web_sales#60, store_sales#61, web_sales#66, store_sales#67]
Keys [4]: [item_sk#58, d_date#59, web_sales#60, store_sales#61]
Functions [2]: [partial_max(web_sales#66), partial_max(store_sales#67)]
Aggregate Attributes [2]: [max#70, max#71]
Results [6]: [item_sk#58, d_date#59, web_sales#60, store_sales#61, max#72, max#73]

(69) HashAggregate [codegen id : 54]
Input [6]: [item_sk#58, d_date#59, web_sales#60, store_sales#61, max#72, max#73]
Keys [4]: [item_sk#58, d_date#59, web_sales#60, store_sales#61]
Functions [2]: [max(web_sales#66), max(store_sales#67)]
Aggregate Attributes [2]: [max(web_sales#66)#74, max(store_sales#67)#75]
Results [6]: [item_sk#58, d_date#59, web_sales#60, store_sales#61, max(web_sales#66)#74 AS web_cumulative#76, max(store_sales#67)#75 AS store_cumulative#77]

(70) Filter [codegen id : 54]
Input [6]: [item_sk#58, d_date#59, web_sales#60, store_sales#61, web_cumulative#76, store_cumulative#77]
Condition : ((isnotnull(web_cumulative#76) AND isnotnull(store_cumulative#77)) AND (web_cumulative#76 > store_cumulative#77))

(71) TakeOrderedAndProject
Input [6]: [item_sk#58, d_date#59, web_sales#60, store_sales#61, web_cumulative#76, store_cumulative#77]
Arguments: 100, [item_sk#58 ASC NULLS FIRST, d_date#59 ASC NULLS FIRST], [item_sk#58, d_date#59, web_sales#60, store_sales#61, web_cumulative#76, store_cumulative#77]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
ReusedExchange (72)


(72) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#5, d_date#6]

Subquery:2 Hosting operator id = 30 Hosting Expression = ss_sold_date_sk#33 IN dynamicpruning#4


