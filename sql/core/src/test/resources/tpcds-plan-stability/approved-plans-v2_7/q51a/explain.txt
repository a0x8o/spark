== Physical Plan ==
TakeOrderedAndProject (67)
+- * Filter (66)
   +- * HashAggregate (65)
      +- * HashAggregate (64)
         +- * Project (63)
            +- * BroadcastHashJoin Inner BuildRight (62)
               :- Window (56)
               :  +- * Sort (55)
               :     +- Exchange (54)
               :        +- * Project (53)
               :           +- * Filter (52)
               :              +- SortMergeJoin FullOuter (51)
               :                 :- * Sort (25)
               :                 :  +- Exchange (24)
               :                 :     +- * HashAggregate (23)
               :                 :        +- Exchange (22)
               :                 :           +- * HashAggregate (21)
               :                 :              +- * Project (20)
               :                 :                 +- * BroadcastHashJoin Inner BuildRight (19)
               :                 :                    :- * Project (13)
               :                 :                    :  +- Window (12)
               :                 :                    :     +- * Sort (11)
               :                 :                    :        +- Exchange (10)
               :                 :                    :           +- * HashAggregate (9)
               :                 :                    :              +- Exchange (8)
               :                 :                    :                 +- * HashAggregate (7)
               :                 :                    :                    +- * Project (6)
               :                 :                    :                       +- * BroadcastHashJoin Inner BuildRight (5)
               :                 :                    :                          :- * Filter (3)
               :                 :                    :                          :  +- * ColumnarToRow (2)
               :                 :                    :                          :     +- Scan parquet default.web_sales (1)
               :                 :                    :                          +- ReusedExchange (4)
               :                 :                    +- BroadcastExchange (18)
               :                 :                       +- * Project (17)
               :                 :                          +- Window (16)
               :                 :                             +- * Sort (15)
               :                 :                                +- ReusedExchange (14)
               :                 +- * Sort (50)
               :                    +- Exchange (49)
               :                       +- * HashAggregate (48)
               :                          +- Exchange (47)
               :                             +- * HashAggregate (46)
               :                                +- * Project (45)
               :                                   +- * BroadcastHashJoin Inner BuildRight (44)
               :                                      :- * Project (38)
               :                                      :  +- Window (37)
               :                                      :     +- * Sort (36)
               :                                      :        +- Exchange (35)
               :                                      :           +- * HashAggregate (34)
               :                                      :              +- Exchange (33)
               :                                      :                 +- * HashAggregate (32)
               :                                      :                    +- * Project (31)
               :                                      :                       +- * BroadcastHashJoin Inner BuildRight (30)
               :                                      :                          :- * Filter (28)
               :                                      :                          :  +- * ColumnarToRow (27)
               :                                      :                          :     +- Scan parquet default.store_sales (26)
               :                                      :                          +- ReusedExchange (29)
               :                                      +- BroadcastExchange (43)
               :                                         +- * Project (42)
               :                                            +- Window (41)
               :                                               +- * Sort (40)
               :                                                  +- ReusedExchange (39)
               +- BroadcastExchange (61)
                  +- * Project (60)
                     +- Window (59)
                        +- * Sort (58)
                           +- ReusedExchange (57)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) ReusedExchange [Reuses operator id: 72]
Output [2]: [d_date_sk#5, d_date#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ws_item_sk#1, d_date#6, sum#8]

(8) Exchange
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#9]

(9) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#10]
Results [4]: [ws_item_sk#1 AS item_sk#11, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#10,17,2) AS sumws#12, ws_item_sk#1]

(10) Exchange
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#13]

(11) Sort [codegen id : 4]
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(12) Window
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#14], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(13) Project [codegen id : 10]
Output [4]: [item_sk#11, d_date#6, sumws#12, rk#14]
Input [5]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1, rk#14]

(14) ReusedExchange [Reuses operator id: 10]
Output [4]: [item_sk#15, d_date#16, sumws#17, ws_item_sk#18]

(15) Sort [codegen id : 8]
Input [4]: [item_sk#15, d_date#16, sumws#17, ws_item_sk#18]
Arguments: [ws_item_sk#18 ASC NULLS FIRST, d_date#16 ASC NULLS FIRST], false, 0

(16) Window
Input [4]: [item_sk#15, d_date#16, sumws#17, ws_item_sk#18]
Arguments: [row_number() windowspecdefinition(ws_item_sk#18, d_date#16 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#19], [ws_item_sk#18], [d_date#16 ASC NULLS FIRST]

(17) Project [codegen id : 9]
Output [3]: [item_sk#15, sumws#17, rk#19]
Input [5]: [item_sk#15, d_date#16, sumws#17, ws_item_sk#18, rk#19]

(18) BroadcastExchange
Input [3]: [item_sk#15, sumws#17, rk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(19) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [item_sk#11]
Right keys [1]: [item_sk#15]
Join condition: (rk#14 >= rk#19)

(20) Project [codegen id : 10]
Output [4]: [item_sk#11, d_date#6, sumws#12, sumws#17]
Input [7]: [item_sk#11, d_date#6, sumws#12, rk#14, item_sk#15, sumws#17, rk#19]

(21) HashAggregate [codegen id : 10]
Input [4]: [item_sk#11, d_date#6, sumws#12, sumws#17]
Keys [3]: [item_sk#11, d_date#6, sumws#12]
Functions [1]: [partial_sum(sumws#17)]
Aggregate Attributes [2]: [sum#21, isEmpty#22]
Results [5]: [item_sk#11, d_date#6, sumws#12, sum#23, isEmpty#24]

(22) Exchange
Input [5]: [item_sk#11, d_date#6, sumws#12, sum#23, isEmpty#24]
Arguments: hashpartitioning(item_sk#11, d_date#6, sumws#12, 5), ENSURE_REQUIREMENTS, [id=#25]

(23) HashAggregate [codegen id : 11]
Input [5]: [item_sk#11, d_date#6, sumws#12, sum#23, isEmpty#24]
Keys [3]: [item_sk#11, d_date#6, sumws#12]
Functions [1]: [sum(sumws#17)]
Aggregate Attributes [1]: [sum(sumws#17)#26]
Results [3]: [item_sk#11, d_date#6, sum(sumws#17)#26 AS cume_sales#27]

(24) Exchange
Input [3]: [item_sk#11, d_date#6, cume_sales#27]
Arguments: hashpartitioning(item_sk#11, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#28]

(25) Sort [codegen id : 12]
Input [3]: [item_sk#11, d_date#6, cume_sales#27]
Arguments: [item_sk#11 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(26) Scan parquet default.store_sales
Output [3]: [ss_item_sk#29, ss_sales_price#30, ss_sold_date_sk#31]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#31), dynamicpruningexpression(ss_sold_date_sk#31 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 14]
Input [3]: [ss_item_sk#29, ss_sales_price#30, ss_sold_date_sk#31]

(28) Filter [codegen id : 14]
Input [3]: [ss_item_sk#29, ss_sales_price#30, ss_sold_date_sk#31]
Condition : isnotnull(ss_item_sk#29)

(29) ReusedExchange [Reuses operator id: 72]
Output [2]: [d_date_sk#32, d_date#33]

(30) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#31]
Right keys [1]: [d_date_sk#32]
Join condition: None

(31) Project [codegen id : 14]
Output [3]: [ss_item_sk#29, ss_sales_price#30, d_date#33]
Input [5]: [ss_item_sk#29, ss_sales_price#30, ss_sold_date_sk#31, d_date_sk#32, d_date#33]

(32) HashAggregate [codegen id : 14]
Input [3]: [ss_item_sk#29, ss_sales_price#30, d_date#33]
Keys [2]: [ss_item_sk#29, d_date#33]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#30))]
Aggregate Attributes [1]: [sum#34]
Results [3]: [ss_item_sk#29, d_date#33, sum#35]

(33) Exchange
Input [3]: [ss_item_sk#29, d_date#33, sum#35]
Arguments: hashpartitioning(ss_item_sk#29, d_date#33, 5), ENSURE_REQUIREMENTS, [id=#36]

(34) HashAggregate [codegen id : 15]
Input [3]: [ss_item_sk#29, d_date#33, sum#35]
Keys [2]: [ss_item_sk#29, d_date#33]
Functions [1]: [sum(UnscaledValue(ss_sales_price#30))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#30))#37]
Results [4]: [ss_item_sk#29 AS item_sk#38, d_date#33, MakeDecimal(sum(UnscaledValue(ss_sales_price#30))#37,17,2) AS sumss#39, ss_item_sk#29]

(35) Exchange
Input [4]: [item_sk#38, d_date#33, sumss#39, ss_item_sk#29]
Arguments: hashpartitioning(ss_item_sk#29, 5), ENSURE_REQUIREMENTS, [id=#40]

(36) Sort [codegen id : 16]
Input [4]: [item_sk#38, d_date#33, sumss#39, ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST, d_date#33 ASC NULLS FIRST], false, 0

(37) Window
Input [4]: [item_sk#38, d_date#33, sumss#39, ss_item_sk#29]
Arguments: [row_number() windowspecdefinition(ss_item_sk#29, d_date#33 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#41], [ss_item_sk#29], [d_date#33 ASC NULLS FIRST]

(38) Project [codegen id : 22]
Output [4]: [item_sk#38, d_date#33, sumss#39, rk#41]
Input [5]: [item_sk#38, d_date#33, sumss#39, ss_item_sk#29, rk#41]

(39) ReusedExchange [Reuses operator id: 35]
Output [4]: [item_sk#42, d_date#43, sumss#44, ss_item_sk#45]

(40) Sort [codegen id : 20]
Input [4]: [item_sk#42, d_date#43, sumss#44, ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST, d_date#43 ASC NULLS FIRST], false, 0

(41) Window
Input [4]: [item_sk#42, d_date#43, sumss#44, ss_item_sk#45]
Arguments: [row_number() windowspecdefinition(ss_item_sk#45, d_date#43 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#46], [ss_item_sk#45], [d_date#43 ASC NULLS FIRST]

(42) Project [codegen id : 21]
Output [3]: [item_sk#42, sumss#44, rk#46]
Input [5]: [item_sk#42, d_date#43, sumss#44, ss_item_sk#45, rk#46]

(43) BroadcastExchange
Input [3]: [item_sk#42, sumss#44, rk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47]

(44) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [item_sk#38]
Right keys [1]: [item_sk#42]
Join condition: (rk#41 >= rk#46)

(45) Project [codegen id : 22]
Output [4]: [item_sk#38, d_date#33, sumss#39, sumss#44]
Input [7]: [item_sk#38, d_date#33, sumss#39, rk#41, item_sk#42, sumss#44, rk#46]

(46) HashAggregate [codegen id : 22]
Input [4]: [item_sk#38, d_date#33, sumss#39, sumss#44]
Keys [3]: [item_sk#38, d_date#33, sumss#39]
Functions [1]: [partial_sum(sumss#44)]
Aggregate Attributes [2]: [sum#48, isEmpty#49]
Results [5]: [item_sk#38, d_date#33, sumss#39, sum#50, isEmpty#51]

(47) Exchange
Input [5]: [item_sk#38, d_date#33, sumss#39, sum#50, isEmpty#51]
Arguments: hashpartitioning(item_sk#38, d_date#33, sumss#39, 5), ENSURE_REQUIREMENTS, [id=#52]

(48) HashAggregate [codegen id : 23]
Input [5]: [item_sk#38, d_date#33, sumss#39, sum#50, isEmpty#51]
Keys [3]: [item_sk#38, d_date#33, sumss#39]
Functions [1]: [sum(sumss#44)]
Aggregate Attributes [1]: [sum(sumss#44)#53]
Results [3]: [item_sk#38, d_date#33, sum(sumss#44)#53 AS cume_sales#54]

(49) Exchange
Input [3]: [item_sk#38, d_date#33, cume_sales#54]
Arguments: hashpartitioning(item_sk#38, d_date#33, 5), ENSURE_REQUIREMENTS, [id=#55]

(50) Sort [codegen id : 24]
Input [3]: [item_sk#38, d_date#33, cume_sales#54]
Arguments: [item_sk#38 ASC NULLS FIRST, d_date#33 ASC NULLS FIRST], false, 0

(51) SortMergeJoin
Left keys [2]: [item_sk#11, d_date#6]
Right keys [2]: [item_sk#38, d_date#33]
Join condition: None

(52) Filter [codegen id : 25]
Input [6]: [item_sk#11, d_date#6, cume_sales#27, item_sk#38, d_date#33, cume_sales#54]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#11) THEN item_sk#11 ELSE item_sk#38 END)

(53) Project [codegen id : 25]
Output [4]: [CASE WHEN isnotnull(item_sk#11) THEN item_sk#11 ELSE item_sk#38 END AS item_sk#56, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#33 END AS d_date#57, cume_sales#27 AS web_sales#58, cume_sales#54 AS store_sales#59]
Input [6]: [item_sk#11, d_date#6, cume_sales#27, item_sk#38, d_date#33, cume_sales#54]

(54) Exchange
Input [4]: [item_sk#56, d_date#57, web_sales#58, store_sales#59]
Arguments: hashpartitioning(item_sk#56, 5), ENSURE_REQUIREMENTS, [id=#60]

(55) Sort [codegen id : 26]
Input [4]: [item_sk#56, d_date#57, web_sales#58, store_sales#59]
Arguments: [item_sk#56 ASC NULLS FIRST, d_date#57 ASC NULLS FIRST], false, 0

(56) Window
Input [4]: [item_sk#56, d_date#57, web_sales#58, store_sales#59]
Arguments: [row_number() windowspecdefinition(item_sk#56, d_date#57 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#61], [item_sk#56], [d_date#57 ASC NULLS FIRST]

(57) ReusedExchange [Reuses operator id: 54]
Output [4]: [item_sk#62, d_date#63, web_sales#64, store_sales#65]

(58) Sort [codegen id : 52]
Input [4]: [item_sk#62, d_date#63, web_sales#64, store_sales#65]
Arguments: [item_sk#62 ASC NULLS FIRST, d_date#63 ASC NULLS FIRST], false, 0

(59) Window
Input [4]: [item_sk#62, d_date#63, web_sales#64, store_sales#65]
Arguments: [row_number() windowspecdefinition(item_sk#62, d_date#63 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#66], [item_sk#62], [d_date#63 ASC NULLS FIRST]

(60) Project [codegen id : 53]
Output [4]: [item_sk#62, web_sales#64, store_sales#65, rk#66]
Input [5]: [item_sk#62, d_date#63, web_sales#64, store_sales#65, rk#66]

(61) BroadcastExchange
Input [4]: [item_sk#62, web_sales#64, store_sales#65, rk#66]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67]

(62) BroadcastHashJoin [codegen id : 54]
Left keys [1]: [item_sk#56]
Right keys [1]: [item_sk#62]
Join condition: (rk#61 >= rk#66)

(63) Project [codegen id : 54]
Output [6]: [item_sk#56, d_date#57, web_sales#58, store_sales#59, web_sales#64, store_sales#65]
Input [9]: [item_sk#56, d_date#57, web_sales#58, store_sales#59, rk#61, item_sk#62, web_sales#64, store_sales#65, rk#66]

(64) HashAggregate [codegen id : 54]
Input [6]: [item_sk#56, d_date#57, web_sales#58, store_sales#59, web_sales#64, store_sales#65]
Keys [4]: [item_sk#56, d_date#57, web_sales#58, store_sales#59]
Functions [2]: [partial_max(web_sales#64), partial_max(store_sales#65)]
Aggregate Attributes [2]: [max#68, max#69]
Results [6]: [item_sk#56, d_date#57, web_sales#58, store_sales#59, max#70, max#71]

(65) HashAggregate [codegen id : 54]
Input [6]: [item_sk#56, d_date#57, web_sales#58, store_sales#59, max#70, max#71]
Keys [4]: [item_sk#56, d_date#57, web_sales#58, store_sales#59]
Functions [2]: [max(web_sales#64), max(store_sales#65)]
Aggregate Attributes [2]: [max(web_sales#64)#72, max(store_sales#65)#73]
Results [6]: [item_sk#56, d_date#57, web_sales#58, store_sales#59, max(web_sales#64)#72 AS web_cumulative#74, max(store_sales#65)#73 AS store_cumulative#75]

(66) Filter [codegen id : 54]
Input [6]: [item_sk#56, d_date#57, web_sales#58, store_sales#59, web_cumulative#74, store_cumulative#75]
Condition : ((isnotnull(web_cumulative#74) AND isnotnull(store_cumulative#75)) AND (web_cumulative#74 > store_cumulative#75))

(67) TakeOrderedAndProject
Input [6]: [item_sk#56, d_date#57, web_sales#58, store_sales#59, web_cumulative#74, store_cumulative#75]
Arguments: 100, [item_sk#56 ASC NULLS FIRST, d_date#57 ASC NULLS FIRST], [item_sk#56, d_date#57, web_sales#58, store_sales#59, web_cumulative#74, store_cumulative#75]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (72)
+- * Project (71)
   +- * Filter (70)
      +- * ColumnarToRow (69)
         +- Scan parquet default.date_dim (68)


(68) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#76]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(69) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#76]

(70) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#76]
Condition : (((isnotnull(d_month_seq#76) AND (d_month_seq#76 >= 1212)) AND (d_month_seq#76 <= 1223)) AND isnotnull(d_date_sk#5))

(71) Project [codegen id : 1]
Output [2]: [d_date_sk#5, d_date#6]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#76]

(72) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#77]

Subquery:2 Hosting operator id = 26 Hosting Expression = ss_sold_date_sk#31 IN dynamicpruning#4


