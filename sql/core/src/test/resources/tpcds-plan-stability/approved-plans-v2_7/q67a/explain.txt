== Physical Plan ==
TakeOrderedAndProject (71)
+- * Filter (70)
   +- Window (69)
      +- * Sort (68)
         +- Exchange (67)
            +- Union (66)
               :- * HashAggregate (25)
               :  +- Exchange (24)
               :     +- * HashAggregate (23)
               :        +- * Project (22)
               :           +- * BroadcastHashJoin Inner BuildRight (21)
               :              :- * Project (16)
               :              :  +- * BroadcastHashJoin Inner BuildRight (15)
               :              :     :- * Project (10)
               :              :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :              :     :     :- * Filter (3)
               :              :     :     :  +- * ColumnarToRow (2)
               :              :     :     :     +- Scan parquet default.store_sales (1)
               :              :     :     +- BroadcastExchange (8)
               :              :     :        +- * Project (7)
               :              :     :           +- * Filter (6)
               :              :     :              +- * ColumnarToRow (5)
               :              :     :                 +- Scan parquet default.date_dim (4)
               :              :     +- BroadcastExchange (14)
               :              :        +- * Filter (13)
               :              :           +- * ColumnarToRow (12)
               :              :              +- Scan parquet default.store (11)
               :              +- BroadcastExchange (20)
               :                 +- * Filter (19)
               :                    +- * ColumnarToRow (18)
               :                       +- Scan parquet default.item (17)
               :- * HashAggregate (30)
               :  +- Exchange (29)
               :     +- * HashAggregate (28)
               :        +- * HashAggregate (27)
               :           +- ReusedExchange (26)
               :- * HashAggregate (35)
               :  +- Exchange (34)
               :     +- * HashAggregate (33)
               :        +- * HashAggregate (32)
               :           +- ReusedExchange (31)
               :- * HashAggregate (40)
               :  +- Exchange (39)
               :     +- * HashAggregate (38)
               :        +- * HashAggregate (37)
               :           +- ReusedExchange (36)
               :- * HashAggregate (45)
               :  +- Exchange (44)
               :     +- * HashAggregate (43)
               :        +- * HashAggregate (42)
               :           +- ReusedExchange (41)
               :- * HashAggregate (50)
               :  +- Exchange (49)
               :     +- * HashAggregate (48)
               :        +- * HashAggregate (47)
               :           +- ReusedExchange (46)
               :- * HashAggregate (55)
               :  +- Exchange (54)
               :     +- * HashAggregate (53)
               :        +- * HashAggregate (52)
               :           +- ReusedExchange (51)
               :- * HashAggregate (60)
               :  +- Exchange (59)
               :     +- * HashAggregate (58)
               :        +- * HashAggregate (57)
               :           +- ReusedExchange (56)
               +- * HashAggregate (65)
                  +- Exchange (64)
                     +- * HashAggregate (63)
                        +- * HashAggregate (62)
                           +- ReusedExchange (61)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(4) Scan parquet default.date_dim
Output [5]: [d_date_sk#7, d_month_seq#8, d_year#9, d_moy#10, d_qoy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>

(5) ColumnarToRow [codegen id : 1]
Input [5]: [d_date_sk#7, d_month_seq#8, d_year#9, d_moy#10, d_qoy#11]

(6) Filter [codegen id : 1]
Input [5]: [d_date_sk#7, d_month_seq#8, d_year#9, d_moy#10, d_qoy#11]
Condition : (((isnotnull(d_month_seq#8) AND (d_month_seq#8 >= 1212)) AND (d_month_seq#8 <= 1223)) AND isnotnull(d_date_sk#7))

(7) Project [codegen id : 1]
Output [4]: [d_date_sk#7, d_year#9, d_moy#10, d_qoy#11]
Input [5]: [d_date_sk#7, d_month_seq#8, d_year#9, d_moy#10, d_qoy#11]

(8) BroadcastExchange
Input [4]: [d_date_sk#7, d_year#9, d_moy#10, d_qoy#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(10) Project [codegen id : 4]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5, d_date_sk#7, d_year#9, d_moy#10, d_qoy#11]

(11) Scan parquet default.store
Output [2]: [s_store_sk#13, s_store_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#13, s_store_id#14]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#13, s_store_id#14]
Condition : isnotnull(s_store_sk#13)

(14) BroadcastExchange
Input [2]: [s_store_sk#13, s_store_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#13]
Join condition: None

(16) Project [codegen id : 4]
Output [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_id#14]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_sk#13, s_store_id#14]

(17) Scan parquet default.item
Output [5]: [i_item_sk#16, i_brand#17, i_class#18, i_category#19, i_product_name#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(18) ColumnarToRow [codegen id : 3]
Input [5]: [i_item_sk#16, i_brand#17, i_class#18, i_category#19, i_product_name#20]

(19) Filter [codegen id : 3]
Input [5]: [i_item_sk#16, i_brand#17, i_class#18, i_category#19, i_product_name#20]
Condition : isnotnull(i_item_sk#16)

(20) BroadcastExchange
Input [5]: [i_item_sk#16, i_brand#17, i_class#18, i_category#19, i_product_name#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#16]
Join condition: None

(22) Project [codegen id : 4]
Output [10]: [ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_id#14, i_brand#17, i_class#18, i_category#19, i_product_name#20]
Input [12]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_id#14, i_item_sk#16, i_brand#17, i_class#18, i_category#19, i_product_name#20]

(23) HashAggregate [codegen id : 4]
Input [10]: [ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_id#14, i_brand#17, i_class#18, i_category#19, i_product_name#20]
Keys [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [2]: [sum#22, isEmpty#23]
Results [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#24, isEmpty#25]

(24) Exchange
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#24, isEmpty#25]
Arguments: hashpartitioning(i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, 5), ENSURE_REQUIREMENTS, [id=#26]

(25) HashAggregate [codegen id : 5]
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#24, isEmpty#25]
Keys [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#27]
Results [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, cast(sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#27 as decimal(38,2)) AS sumsales#28]

(26) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#29, isEmpty#30]

(27) HashAggregate [codegen id : 10]
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#29, isEmpty#30]
Keys [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#31]
Results [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#31 AS sumsales#32]

(28) HashAggregate [codegen id : 10]
Input [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, sumsales#32]
Keys [7]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10]
Functions [1]: [partial_sum(sumsales#32)]
Aggregate Attributes [2]: [sum#33, isEmpty#34]
Results [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, sum#35, isEmpty#36]

(29) Exchange
Input [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, sum#35, isEmpty#36]
Arguments: hashpartitioning(i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, 5), ENSURE_REQUIREMENTS, [id=#37]

(30) HashAggregate [codegen id : 11]
Input [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, sum#35, isEmpty#36]
Keys [7]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10]
Functions [1]: [sum(sumsales#32)]
Aggregate Attributes [1]: [sum(sumsales#32)#38]
Results [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, null AS s_store_id#39, sum(sumsales#32)#38 AS sumsales#40]

(31) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#41, isEmpty#42]

(32) HashAggregate [codegen id : 16]
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#41, isEmpty#42]
Keys [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#43]
Results [7]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#43 AS sumsales#32]

(33) HashAggregate [codegen id : 16]
Input [7]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, sumsales#32]
Keys [6]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11]
Functions [1]: [partial_sum(sumsales#32)]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, sum#46, isEmpty#47]

(34) Exchange
Input [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, sum#46, isEmpty#47]
Arguments: hashpartitioning(i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, 5), ENSURE_REQUIREMENTS, [id=#48]

(35) HashAggregate [codegen id : 17]
Input [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, sum#46, isEmpty#47]
Keys [6]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11]
Functions [1]: [sum(sumsales#32)]
Aggregate Attributes [1]: [sum(sumsales#32)#49]
Results [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, null AS d_moy#50, null AS s_store_id#51, sum(sumsales#32)#49 AS sumsales#52]

(36) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#53, isEmpty#54]

(37) HashAggregate [codegen id : 22]
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#53, isEmpty#54]
Keys [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#55]
Results [6]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#55 AS sumsales#32]

(38) HashAggregate [codegen id : 22]
Input [6]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, sumsales#32]
Keys [5]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9]
Functions [1]: [partial_sum(sumsales#32)]
Aggregate Attributes [2]: [sum#56, isEmpty#57]
Results [7]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, sum#58, isEmpty#59]

(39) Exchange
Input [7]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, sum#58, isEmpty#59]
Arguments: hashpartitioning(i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, 5), ENSURE_REQUIREMENTS, [id=#60]

(40) HashAggregate [codegen id : 23]
Input [7]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, sum#58, isEmpty#59]
Keys [5]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9]
Functions [1]: [sum(sumsales#32)]
Aggregate Attributes [1]: [sum(sumsales#32)#61]
Results [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, null AS d_qoy#62, null AS d_moy#63, null AS s_store_id#64, sum(sumsales#32)#61 AS sumsales#65]

(41) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#66, isEmpty#67]

(42) HashAggregate [codegen id : 28]
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#66, isEmpty#67]
Keys [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#68]
Results [5]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#68 AS sumsales#32]

(43) HashAggregate [codegen id : 28]
Input [5]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, sumsales#32]
Keys [4]: [i_category#19, i_class#18, i_brand#17, i_product_name#20]
Functions [1]: [partial_sum(sumsales#32)]
Aggregate Attributes [2]: [sum#69, isEmpty#70]
Results [6]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, sum#71, isEmpty#72]

(44) Exchange
Input [6]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, sum#71, isEmpty#72]
Arguments: hashpartitioning(i_category#19, i_class#18, i_brand#17, i_product_name#20, 5), ENSURE_REQUIREMENTS, [id=#73]

(45) HashAggregate [codegen id : 29]
Input [6]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, sum#71, isEmpty#72]
Keys [4]: [i_category#19, i_class#18, i_brand#17, i_product_name#20]
Functions [1]: [sum(sumsales#32)]
Aggregate Attributes [1]: [sum(sumsales#32)#74]
Results [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, null AS d_year#75, null AS d_qoy#76, null AS d_moy#77, null AS s_store_id#78, sum(sumsales#32)#74 AS sumsales#79]

(46) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#80, isEmpty#81]

(47) HashAggregate [codegen id : 34]
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#80, isEmpty#81]
Keys [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#82]
Results [4]: [i_category#19, i_class#18, i_brand#17, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#82 AS sumsales#32]

(48) HashAggregate [codegen id : 34]
Input [4]: [i_category#19, i_class#18, i_brand#17, sumsales#32]
Keys [3]: [i_category#19, i_class#18, i_brand#17]
Functions [1]: [partial_sum(sumsales#32)]
Aggregate Attributes [2]: [sum#83, isEmpty#84]
Results [5]: [i_category#19, i_class#18, i_brand#17, sum#85, isEmpty#86]

(49) Exchange
Input [5]: [i_category#19, i_class#18, i_brand#17, sum#85, isEmpty#86]
Arguments: hashpartitioning(i_category#19, i_class#18, i_brand#17, 5), ENSURE_REQUIREMENTS, [id=#87]

(50) HashAggregate [codegen id : 35]
Input [5]: [i_category#19, i_class#18, i_brand#17, sum#85, isEmpty#86]
Keys [3]: [i_category#19, i_class#18, i_brand#17]
Functions [1]: [sum(sumsales#32)]
Aggregate Attributes [1]: [sum(sumsales#32)#88]
Results [9]: [i_category#19, i_class#18, i_brand#17, null AS i_product_name#89, null AS d_year#90, null AS d_qoy#91, null AS d_moy#92, null AS s_store_id#93, sum(sumsales#32)#88 AS sumsales#94]

(51) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#95, isEmpty#96]

(52) HashAggregate [codegen id : 40]
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#95, isEmpty#96]
Keys [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#97]
Results [3]: [i_category#19, i_class#18, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#97 AS sumsales#32]

(53) HashAggregate [codegen id : 40]
Input [3]: [i_category#19, i_class#18, sumsales#32]
Keys [2]: [i_category#19, i_class#18]
Functions [1]: [partial_sum(sumsales#32)]
Aggregate Attributes [2]: [sum#98, isEmpty#99]
Results [4]: [i_category#19, i_class#18, sum#100, isEmpty#101]

(54) Exchange
Input [4]: [i_category#19, i_class#18, sum#100, isEmpty#101]
Arguments: hashpartitioning(i_category#19, i_class#18, 5), ENSURE_REQUIREMENTS, [id=#102]

(55) HashAggregate [codegen id : 41]
Input [4]: [i_category#19, i_class#18, sum#100, isEmpty#101]
Keys [2]: [i_category#19, i_class#18]
Functions [1]: [sum(sumsales#32)]
Aggregate Attributes [1]: [sum(sumsales#32)#103]
Results [9]: [i_category#19, i_class#18, null AS i_brand#104, null AS i_product_name#105, null AS d_year#106, null AS d_qoy#107, null AS d_moy#108, null AS s_store_id#109, sum(sumsales#32)#103 AS sumsales#110]

(56) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#111, isEmpty#112]

(57) HashAggregate [codegen id : 46]
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#111, isEmpty#112]
Keys [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#113]
Results [2]: [i_category#19, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#113 AS sumsales#32]

(58) HashAggregate [codegen id : 46]
Input [2]: [i_category#19, sumsales#32]
Keys [1]: [i_category#19]
Functions [1]: [partial_sum(sumsales#32)]
Aggregate Attributes [2]: [sum#114, isEmpty#115]
Results [3]: [i_category#19, sum#116, isEmpty#117]

(59) Exchange
Input [3]: [i_category#19, sum#116, isEmpty#117]
Arguments: hashpartitioning(i_category#19, 5), ENSURE_REQUIREMENTS, [id=#118]

(60) HashAggregate [codegen id : 47]
Input [3]: [i_category#19, sum#116, isEmpty#117]
Keys [1]: [i_category#19]
Functions [1]: [sum(sumsales#32)]
Aggregate Attributes [1]: [sum(sumsales#32)#119]
Results [9]: [i_category#19, null AS i_class#120, null AS i_brand#121, null AS i_product_name#122, null AS d_year#123, null AS d_qoy#124, null AS d_moy#125, null AS s_store_id#126, sum(sumsales#32)#119 AS sumsales#127]

(61) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#128, isEmpty#129]

(62) HashAggregate [codegen id : 52]
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#128, isEmpty#129]
Keys [8]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#130]
Results [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#130 AS sumsales#32]

(63) HashAggregate [codegen id : 52]
Input [1]: [sumsales#32]
Keys: []
Functions [1]: [partial_sum(sumsales#32)]
Aggregate Attributes [2]: [sum#131, isEmpty#132]
Results [2]: [sum#133, isEmpty#134]

(64) Exchange
Input [2]: [sum#133, isEmpty#134]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#135]

(65) HashAggregate [codegen id : 53]
Input [2]: [sum#133, isEmpty#134]
Keys: []
Functions [1]: [sum(sumsales#32)]
Aggregate Attributes [1]: [sum(sumsales#32)#136]
Results [9]: [null AS i_category#137, null AS i_class#138, null AS i_brand#139, null AS i_product_name#140, null AS d_year#141, null AS d_qoy#142, null AS d_moy#143, null AS s_store_id#144, sum(sumsales#32)#136 AS sumsales#145]

(66) Union

(67) Exchange
Input [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#28]
Arguments: hashpartitioning(i_category#19, 5), ENSURE_REQUIREMENTS, [id=#146]

(68) Sort [codegen id : 54]
Input [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#28]
Arguments: [i_category#19 ASC NULLS FIRST, sumsales#28 DESC NULLS LAST], false, 0

(69) Window
Input [9]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#28]
Arguments: [rank(sumsales#28) windowspecdefinition(i_category#19, sumsales#28 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#147], [i_category#19], [sumsales#28 DESC NULLS LAST]

(70) Filter [codegen id : 55]
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#28, rk#147]
Condition : (isnotnull(rk#147) AND (rk#147 <= 100))

(71) TakeOrderedAndProject
Input [10]: [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#28, rk#147]
Arguments: 100, [i_category#19 ASC NULLS FIRST, i_class#18 ASC NULLS FIRST, i_brand#17 ASC NULLS FIRST, i_product_name#20 ASC NULLS FIRST, d_year#9 ASC NULLS FIRST, d_qoy#11 ASC NULLS FIRST, d_moy#10 ASC NULLS FIRST, s_store_id#14 ASC NULLS FIRST, sumsales#28 ASC NULLS FIRST, rk#147 ASC NULLS FIRST], [i_category#19, i_class#18, i_brand#17, i_product_name#20, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#28, rk#147]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
ReusedExchange (72)


(72) ReusedExchange [Reuses operator id: 8]
Output [4]: [d_date_sk#7, d_year#9, d_moy#10, d_qoy#11]


