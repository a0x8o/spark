== Physical Plan ==
TakeOrderedAndProject (67)
+- * Filter (66)
   +- Window (65)
      +- * Sort (64)
         +- Exchange (63)
            +- Union (62)
               :- * HashAggregate (21)
               :  +- Exchange (20)
               :     +- * HashAggregate (19)
               :        +- * Project (18)
               :           +- * BroadcastHashJoin Inner BuildRight (17)
               :              :- * Project (12)
               :              :  +- * BroadcastHashJoin Inner BuildRight (11)
               :              :     :- * Project (6)
               :              :     :  +- * BroadcastHashJoin Inner BuildRight (5)
               :              :     :     :- * Filter (3)
               :              :     :     :  +- * ColumnarToRow (2)
               :              :     :     :     +- Scan parquet default.store_sales (1)
               :              :     :     +- ReusedExchange (4)
               :              :     +- BroadcastExchange (10)
               :              :        +- * Filter (9)
               :              :           +- * ColumnarToRow (8)
               :              :              +- Scan parquet default.store (7)
               :              +- BroadcastExchange (16)
               :                 +- * Filter (15)
               :                    +- * ColumnarToRow (14)
               :                       +- Scan parquet default.item (13)
               :- * HashAggregate (26)
               :  +- Exchange (25)
               :     +- * HashAggregate (24)
               :        +- * HashAggregate (23)
               :           +- ReusedExchange (22)
               :- * HashAggregate (31)
               :  +- Exchange (30)
               :     +- * HashAggregate (29)
               :        +- * HashAggregate (28)
               :           +- ReusedExchange (27)
               :- * HashAggregate (36)
               :  +- Exchange (35)
               :     +- * HashAggregate (34)
               :        +- * HashAggregate (33)
               :           +- ReusedExchange (32)
               :- * HashAggregate (41)
               :  +- Exchange (40)
               :     +- * HashAggregate (39)
               :        +- * HashAggregate (38)
               :           +- ReusedExchange (37)
               :- * HashAggregate (46)
               :  +- Exchange (45)
               :     +- * HashAggregate (44)
               :        +- * HashAggregate (43)
               :           +- ReusedExchange (42)
               :- * HashAggregate (51)
               :  +- Exchange (50)
               :     +- * HashAggregate (49)
               :        +- * HashAggregate (48)
               :           +- ReusedExchange (47)
               :- * HashAggregate (56)
               :  +- Exchange (55)
               :     +- * HashAggregate (54)
               :        +- * HashAggregate (53)
               :           +- ReusedExchange (52)
               +- * HashAggregate (61)
                  +- Exchange (60)
                     +- * HashAggregate (59)
                        +- * HashAggregate (58)
                           +- ReusedExchange (57)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(4) ReusedExchange [Reuses operator id: 72]
Output [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(6) Project [codegen id : 4]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5, d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(7) Scan parquet default.store
Output [2]: [s_store_sk#11, s_store_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#11, s_store_id#12]

(9) Filter [codegen id : 2]
Input [2]: [s_store_sk#11, s_store_id#12]
Condition : isnotnull(s_store_sk#11)

(10) BroadcastExchange
Input [2]: [s_store_sk#11, s_store_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#11]
Join condition: None

(12) Project [codegen id : 4]
Output [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_sk#11, s_store_id#12]

(13) Scan parquet default.item
Output [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(14) ColumnarToRow [codegen id : 3]
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]

(15) Filter [codegen id : 3]
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Condition : isnotnull(i_item_sk#14)

(16) BroadcastExchange
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#14]
Join condition: None

(18) Project [codegen id : 4]
Output [10]: [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Input [12]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]

(19) HashAggregate [codegen id : 4]
Input [10]: [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [2]: [sum#20, isEmpty#21]
Results [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#22, isEmpty#23]

(20) Exchange
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#22, isEmpty#23]
Arguments: hashpartitioning(i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, 5), ENSURE_REQUIREMENTS, [id=#24]

(21) HashAggregate [codegen id : 5]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#22, isEmpty#23]
Keys [8]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#25]
Results [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, cast(sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#25 as decimal(38,2)) AS sumsales#26]

(22) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33, s_store_id#34, sum#35, isEmpty#36]

(23) HashAggregate [codegen id : 10]
Input [10]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33, s_store_id#34, sum#35, isEmpty#36]
Keys [8]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33, s_store_id#34]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#37 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#38 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#37 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#38 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#39]
Results [8]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#37 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#38 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#39 AS sumsales#40]

(24) HashAggregate [codegen id : 10]
Input [8]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33, sumsales#40]
Keys [7]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33]
Functions [1]: [partial_sum(sumsales#40)]
Aggregate Attributes [2]: [sum#41, isEmpty#42]
Results [9]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33, sum#43, isEmpty#44]

(25) Exchange
Input [9]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33, sum#43, isEmpty#44]
Arguments: hashpartitioning(i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33, 5), ENSURE_REQUIREMENTS, [id=#45]

(26) HashAggregate [codegen id : 11]
Input [9]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33, sum#43, isEmpty#44]
Keys [7]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33]
Functions [1]: [sum(sumsales#40)]
Aggregate Attributes [1]: [sum(sumsales#40)#46]
Results [9]: [i_category#27, i_class#28, i_brand#29, i_product_name#30, d_year#31, d_qoy#32, d_moy#33, null AS s_store_id#47, sum(sumsales#40)#46 AS sumsales#48]

(27) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54, d_moy#55, s_store_id#56, sum#57, isEmpty#58]

(28) HashAggregate [codegen id : 16]
Input [10]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54, d_moy#55, s_store_id#56, sum#57, isEmpty#58]
Keys [8]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54, d_moy#55, s_store_id#56]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#59 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#60 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#59 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#60 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#61]
Results [7]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#59 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#60 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#61 AS sumsales#40]

(29) HashAggregate [codegen id : 16]
Input [7]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54, sumsales#40]
Keys [6]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54]
Functions [1]: [partial_sum(sumsales#40)]
Aggregate Attributes [2]: [sum#62, isEmpty#63]
Results [8]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54, sum#64, isEmpty#65]

(30) Exchange
Input [8]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54, sum#64, isEmpty#65]
Arguments: hashpartitioning(i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54, 5), ENSURE_REQUIREMENTS, [id=#66]

(31) HashAggregate [codegen id : 17]
Input [8]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54, sum#64, isEmpty#65]
Keys [6]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54]
Functions [1]: [sum(sumsales#40)]
Aggregate Attributes [1]: [sum(sumsales#40)#67]
Results [9]: [i_category#49, i_class#50, i_brand#51, i_product_name#52, d_year#53, d_qoy#54, null AS d_moy#68, null AS s_store_id#69, sum(sumsales#40)#67 AS sumsales#70]

(32) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75, d_qoy#76, d_moy#77, s_store_id#78, sum#79, isEmpty#80]

(33) HashAggregate [codegen id : 22]
Input [10]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75, d_qoy#76, d_moy#77, s_store_id#78, sum#79, isEmpty#80]
Keys [8]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75, d_qoy#76, d_moy#77, s_store_id#78]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#81 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#82 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#81 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#82 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#83]
Results [6]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#81 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#82 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#83 AS sumsales#40]

(34) HashAggregate [codegen id : 22]
Input [6]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75, sumsales#40]
Keys [5]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75]
Functions [1]: [partial_sum(sumsales#40)]
Aggregate Attributes [2]: [sum#84, isEmpty#85]
Results [7]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75, sum#86, isEmpty#87]

(35) Exchange
Input [7]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75, sum#86, isEmpty#87]
Arguments: hashpartitioning(i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75, 5), ENSURE_REQUIREMENTS, [id=#88]

(36) HashAggregate [codegen id : 23]
Input [7]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75, sum#86, isEmpty#87]
Keys [5]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75]
Functions [1]: [sum(sumsales#40)]
Aggregate Attributes [1]: [sum(sumsales#40)#89]
Results [9]: [i_category#71, i_class#72, i_brand#73, i_product_name#74, d_year#75, null AS d_qoy#90, null AS d_moy#91, null AS s_store_id#92, sum(sumsales#40)#89 AS sumsales#93]

(37) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#94, i_class#95, i_brand#96, i_product_name#97, d_year#98, d_qoy#99, d_moy#100, s_store_id#101, sum#102, isEmpty#103]

(38) HashAggregate [codegen id : 28]
Input [10]: [i_category#94, i_class#95, i_brand#96, i_product_name#97, d_year#98, d_qoy#99, d_moy#100, s_store_id#101, sum#102, isEmpty#103]
Keys [8]: [i_category#94, i_class#95, i_brand#96, i_product_name#97, d_year#98, d_qoy#99, d_moy#100, s_store_id#101]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#104 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#105 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#104 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#105 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#106]
Results [5]: [i_category#94, i_class#95, i_brand#96, i_product_name#97, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#104 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#105 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#106 AS sumsales#40]

(39) HashAggregate [codegen id : 28]
Input [5]: [i_category#94, i_class#95, i_brand#96, i_product_name#97, sumsales#40]
Keys [4]: [i_category#94, i_class#95, i_brand#96, i_product_name#97]
Functions [1]: [partial_sum(sumsales#40)]
Aggregate Attributes [2]: [sum#107, isEmpty#108]
Results [6]: [i_category#94, i_class#95, i_brand#96, i_product_name#97, sum#109, isEmpty#110]

(40) Exchange
Input [6]: [i_category#94, i_class#95, i_brand#96, i_product_name#97, sum#109, isEmpty#110]
Arguments: hashpartitioning(i_category#94, i_class#95, i_brand#96, i_product_name#97, 5), ENSURE_REQUIREMENTS, [id=#111]

(41) HashAggregate [codegen id : 29]
Input [6]: [i_category#94, i_class#95, i_brand#96, i_product_name#97, sum#109, isEmpty#110]
Keys [4]: [i_category#94, i_class#95, i_brand#96, i_product_name#97]
Functions [1]: [sum(sumsales#40)]
Aggregate Attributes [1]: [sum(sumsales#40)#112]
Results [9]: [i_category#94, i_class#95, i_brand#96, i_product_name#97, null AS d_year#113, null AS d_qoy#114, null AS d_moy#115, null AS s_store_id#116, sum(sumsales#40)#112 AS sumsales#117]

(42) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#118, i_class#119, i_brand#120, i_product_name#121, d_year#122, d_qoy#123, d_moy#124, s_store_id#125, sum#126, isEmpty#127]

(43) HashAggregate [codegen id : 34]
Input [10]: [i_category#118, i_class#119, i_brand#120, i_product_name#121, d_year#122, d_qoy#123, d_moy#124, s_store_id#125, sum#126, isEmpty#127]
Keys [8]: [i_category#118, i_class#119, i_brand#120, i_product_name#121, d_year#122, d_qoy#123, d_moy#124, s_store_id#125]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#128 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#129 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#128 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#129 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#130]
Results [4]: [i_category#118, i_class#119, i_brand#120, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#128 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#129 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#130 AS sumsales#40]

(44) HashAggregate [codegen id : 34]
Input [4]: [i_category#118, i_class#119, i_brand#120, sumsales#40]
Keys [3]: [i_category#118, i_class#119, i_brand#120]
Functions [1]: [partial_sum(sumsales#40)]
Aggregate Attributes [2]: [sum#131, isEmpty#132]
Results [5]: [i_category#118, i_class#119, i_brand#120, sum#133, isEmpty#134]

(45) Exchange
Input [5]: [i_category#118, i_class#119, i_brand#120, sum#133, isEmpty#134]
Arguments: hashpartitioning(i_category#118, i_class#119, i_brand#120, 5), ENSURE_REQUIREMENTS, [id=#135]

(46) HashAggregate [codegen id : 35]
Input [5]: [i_category#118, i_class#119, i_brand#120, sum#133, isEmpty#134]
Keys [3]: [i_category#118, i_class#119, i_brand#120]
Functions [1]: [sum(sumsales#40)]
Aggregate Attributes [1]: [sum(sumsales#40)#136]
Results [9]: [i_category#118, i_class#119, i_brand#120, null AS i_product_name#137, null AS d_year#138, null AS d_qoy#139, null AS d_moy#140, null AS s_store_id#141, sum(sumsales#40)#136 AS sumsales#142]

(47) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#143, i_class#144, i_brand#145, i_product_name#146, d_year#147, d_qoy#148, d_moy#149, s_store_id#150, sum#151, isEmpty#152]

(48) HashAggregate [codegen id : 40]
Input [10]: [i_category#143, i_class#144, i_brand#145, i_product_name#146, d_year#147, d_qoy#148, d_moy#149, s_store_id#150, sum#151, isEmpty#152]
Keys [8]: [i_category#143, i_class#144, i_brand#145, i_product_name#146, d_year#147, d_qoy#148, d_moy#149, s_store_id#150]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#153 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#154 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#153 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#154 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#155]
Results [3]: [i_category#143, i_class#144, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#153 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#154 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#155 AS sumsales#40]

(49) HashAggregate [codegen id : 40]
Input [3]: [i_category#143, i_class#144, sumsales#40]
Keys [2]: [i_category#143, i_class#144]
Functions [1]: [partial_sum(sumsales#40)]
Aggregate Attributes [2]: [sum#156, isEmpty#157]
Results [4]: [i_category#143, i_class#144, sum#158, isEmpty#159]

(50) Exchange
Input [4]: [i_category#143, i_class#144, sum#158, isEmpty#159]
Arguments: hashpartitioning(i_category#143, i_class#144, 5), ENSURE_REQUIREMENTS, [id=#160]

(51) HashAggregate [codegen id : 41]
Input [4]: [i_category#143, i_class#144, sum#158, isEmpty#159]
Keys [2]: [i_category#143, i_class#144]
Functions [1]: [sum(sumsales#40)]
Aggregate Attributes [1]: [sum(sumsales#40)#161]
Results [9]: [i_category#143, i_class#144, null AS i_brand#162, null AS i_product_name#163, null AS d_year#164, null AS d_qoy#165, null AS d_moy#166, null AS s_store_id#167, sum(sumsales#40)#161 AS sumsales#168]

(52) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#169, i_class#170, i_brand#171, i_product_name#172, d_year#173, d_qoy#174, d_moy#175, s_store_id#176, sum#177, isEmpty#178]

(53) HashAggregate [codegen id : 46]
Input [10]: [i_category#169, i_class#170, i_brand#171, i_product_name#172, d_year#173, d_qoy#174, d_moy#175, s_store_id#176, sum#177, isEmpty#178]
Keys [8]: [i_category#169, i_class#170, i_brand#171, i_product_name#172, d_year#173, d_qoy#174, d_moy#175, s_store_id#176]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#179 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#180 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#179 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#180 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#181]
Results [2]: [i_category#169, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#179 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#180 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#181 AS sumsales#40]

(54) HashAggregate [codegen id : 46]
Input [2]: [i_category#169, sumsales#40]
Keys [1]: [i_category#169]
Functions [1]: [partial_sum(sumsales#40)]
Aggregate Attributes [2]: [sum#182, isEmpty#183]
Results [3]: [i_category#169, sum#184, isEmpty#185]

(55) Exchange
Input [3]: [i_category#169, sum#184, isEmpty#185]
Arguments: hashpartitioning(i_category#169, 5), ENSURE_REQUIREMENTS, [id=#186]

(56) HashAggregate [codegen id : 47]
Input [3]: [i_category#169, sum#184, isEmpty#185]
Keys [1]: [i_category#169]
Functions [1]: [sum(sumsales#40)]
Aggregate Attributes [1]: [sum(sumsales#40)#187]
Results [9]: [i_category#169, null AS i_class#188, null AS i_brand#189, null AS i_product_name#190, null AS d_year#191, null AS d_qoy#192, null AS d_moy#193, null AS s_store_id#194, sum(sumsales#40)#187 AS sumsales#195]

(57) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#196, i_class#197, i_brand#198, i_product_name#199, d_year#200, d_qoy#201, d_moy#202, s_store_id#203, sum#204, isEmpty#205]

(58) HashAggregate [codegen id : 52]
Input [10]: [i_category#196, i_class#197, i_brand#198, i_product_name#199, d_year#200, d_qoy#201, d_moy#202, s_store_id#203, sum#204, isEmpty#205]
Keys [8]: [i_category#196, i_class#197, i_brand#198, i_product_name#199, d_year#200, d_qoy#201, d_moy#202, s_store_id#203]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#206 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#207 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#206 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#207 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#208]
Results [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#206 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#207 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#208 AS sumsales#40]

(59) HashAggregate [codegen id : 52]
Input [1]: [sumsales#40]
Keys: []
Functions [1]: [partial_sum(sumsales#40)]
Aggregate Attributes [2]: [sum#209, isEmpty#210]
Results [2]: [sum#211, isEmpty#212]

(60) Exchange
Input [2]: [sum#211, isEmpty#212]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#213]

(61) HashAggregate [codegen id : 53]
Input [2]: [sum#211, isEmpty#212]
Keys: []
Functions [1]: [sum(sumsales#40)]
Aggregate Attributes [1]: [sum(sumsales#40)#214]
Results [9]: [null AS i_category#215, null AS i_class#216, null AS i_brand#217, null AS i_product_name#218, null AS d_year#219, null AS d_qoy#220, null AS d_moy#221, null AS s_store_id#222, sum(sumsales#40)#214 AS sumsales#223]

(62) Union

(63) Exchange
Input [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26]
Arguments: hashpartitioning(i_category#17, 5), ENSURE_REQUIREMENTS, [id=#224]

(64) Sort [codegen id : 54]
Input [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26]
Arguments: [i_category#17 ASC NULLS FIRST, sumsales#26 DESC NULLS LAST], false, 0

(65) Window
Input [9]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26]
Arguments: [rank(sumsales#26) windowspecdefinition(i_category#17, sumsales#26 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#225], [i_category#17], [sumsales#26 DESC NULLS LAST]

(66) Filter [codegen id : 55]
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26, rk#225]
Condition : (rk#225 <= 100)

(67) TakeOrderedAndProject
Input [10]: [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26, rk#225]
Arguments: 100, [i_category#17 ASC NULLS FIRST, i_class#16 ASC NULLS FIRST, i_brand#15 ASC NULLS FIRST, i_product_name#18 ASC NULLS FIRST, d_year#8 ASC NULLS FIRST, d_qoy#10 ASC NULLS FIRST, d_moy#9 ASC NULLS FIRST, s_store_id#12 ASC NULLS FIRST, sumsales#26 ASC NULLS FIRST, rk#225 ASC NULLS FIRST], [i_category#17, i_class#16, i_brand#15, i_product_name#18, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#26, rk#225]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (72)
+- * Project (71)
   +- * Filter (70)
      +- * ColumnarToRow (69)
         +- Scan parquet default.date_dim (68)


(68) Scan parquet default.date_dim
Output [5]: [d_date_sk#7, d_month_seq#226, d_year#8, d_moy#9, d_qoy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>

(69) ColumnarToRow [codegen id : 1]
Input [5]: [d_date_sk#7, d_month_seq#226, d_year#8, d_moy#9, d_qoy#10]

(70) Filter [codegen id : 1]
Input [5]: [d_date_sk#7, d_month_seq#226, d_year#8, d_moy#9, d_qoy#10]
Condition : (((isnotnull(d_month_seq#226) AND (d_month_seq#226 >= 1212)) AND (d_month_seq#226 <= 1223)) AND isnotnull(d_date_sk#7))

(71) Project [codegen id : 1]
Output [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]
Input [5]: [d_date_sk#7, d_month_seq#226, d_year#8, d_moy#9, d_qoy#10]

(72) BroadcastExchange
Input [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#227]


