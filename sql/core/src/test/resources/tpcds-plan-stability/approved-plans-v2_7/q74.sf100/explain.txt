== Physical Plan ==
TakeOrderedAndProject (80)
+- * Project (79)
   +- * SortMergeJoin Inner (78)
      :- * Project (60)
      :  +- * SortMergeJoin Inner (59)
      :     :- * SortMergeJoin Inner (39)
      :     :  :- * Sort (21)
      :     :  :  +- Exchange (20)
      :     :  :     +- * Filter (19)
      :     :  :        +- * HashAggregate (18)
      :     :  :           +- Exchange (17)
      :     :  :              +- * HashAggregate (16)
      :     :  :                 +- * Project (15)
      :     :  :                    +- * SortMergeJoin Inner (14)
      :     :  :                       :- * Sort (8)
      :     :  :                       :  +- Exchange (7)
      :     :  :                       :     +- * Project (6)
      :     :  :                       :        +- * BroadcastHashJoin Inner BuildRight (5)
      :     :  :                       :           :- * Filter (3)
      :     :  :                       :           :  +- * ColumnarToRow (2)
      :     :  :                       :           :     +- Scan parquet default.store_sales (1)
      :     :  :                       :           +- ReusedExchange (4)
      :     :  :                       +- * Sort (13)
      :     :  :                          +- Exchange (12)
      :     :  :                             +- * Filter (11)
      :     :  :                                +- * ColumnarToRow (10)
      :     :  :                                   +- Scan parquet default.customer (9)
      :     :  +- * Sort (38)
      :     :     +- Exchange (37)
      :     :        +- * HashAggregate (36)
      :     :           +- Exchange (35)
      :     :              +- * HashAggregate (34)
      :     :                 +- * Project (33)
      :     :                    +- * SortMergeJoin Inner (32)
      :     :                       :- * Sort (29)
      :     :                       :  +- Exchange (28)
      :     :                       :     +- * Project (27)
      :     :                       :        +- * BroadcastHashJoin Inner BuildRight (26)
      :     :                       :           :- * Filter (24)
      :     :                       :           :  +- * ColumnarToRow (23)
      :     :                       :           :     +- Scan parquet default.store_sales (22)
      :     :                       :           +- ReusedExchange (25)
      :     :                       +- * Sort (31)
      :     :                          +- ReusedExchange (30)
      :     +- * Sort (58)
      :        +- Exchange (57)
      :           +- * Project (56)
      :              +- * Filter (55)
      :                 +- * HashAggregate (54)
      :                    +- Exchange (53)
      :                       +- * HashAggregate (52)
      :                          +- * Project (51)
      :                             +- * SortMergeJoin Inner (50)
      :                                :- * Sort (47)
      :                                :  +- Exchange (46)
      :                                :     +- * Project (45)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (44)
      :                                :           :- * Filter (42)
      :                                :           :  +- * ColumnarToRow (41)
      :                                :           :     +- Scan parquet default.web_sales (40)
      :                                :           +- ReusedExchange (43)
      :                                +- * Sort (49)
      :                                   +- ReusedExchange (48)
      +- * Sort (77)
         +- Exchange (76)
            +- * HashAggregate (75)
               +- Exchange (74)
                  +- * HashAggregate (73)
                     +- * Project (72)
                        +- * SortMergeJoin Inner (71)
                           :- * Sort (68)
                           :  +- Exchange (67)
                           :     +- * Project (66)
                           :        +- * BroadcastHashJoin Inner BuildRight (65)
                           :           :- * Filter (63)
                           :           :  +- * ColumnarToRow (62)
                           :           :     +- Scan parquet default.web_sales (61)
                           :           +- ReusedExchange (64)
                           +- * Sort (70)
                              +- ReusedExchange (69)


(1) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_customer_sk#1)

(4) ReusedExchange [Reuses operator id: 84]
Output [2]: [d_date_sk#5, d_year#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ss_customer_sk#1, ss_net_paid#2, d_year#6]
Input [5]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3, d_date_sk#5, d_year#6]

(7) Exchange
Input [3]: [ss_customer_sk#1, ss_net_paid#2, d_year#6]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#7]

(8) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#1, ss_net_paid#2, d_year#6]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet default.customer
Output [4]: [c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(10) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]

(11) Filter [codegen id : 4]
Input [4]: [c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]
Condition : (isnotnull(c_customer_sk#8) AND isnotnull(c_customer_id#9))

(12) Exchange
Input [4]: [c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]
Arguments: hashpartitioning(c_customer_sk#8, 5), ENSURE_REQUIREMENTS, [id=#12]

(13) Sort [codegen id : 5]
Input [4]: [c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]
Arguments: [c_customer_sk#8 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#8]
Join condition: None

(15) Project [codegen id : 6]
Output [5]: [c_customer_id#9, c_first_name#10, c_last_name#11, ss_net_paid#2, d_year#6]
Input [7]: [ss_customer_sk#1, ss_net_paid#2, d_year#6, c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]

(16) HashAggregate [codegen id : 6]
Input [5]: [c_customer_id#9, c_first_name#10, c_last_name#11, ss_net_paid#2, d_year#6]
Keys [4]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#2))]
Aggregate Attributes [1]: [sum#13]
Results [5]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6, sum#14]

(17) Exchange
Input [5]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6, sum#14]
Arguments: hashpartitioning(c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6, 5), ENSURE_REQUIREMENTS, [id=#15]

(18) HashAggregate [codegen id : 7]
Input [5]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6, sum#14]
Keys [4]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6]
Functions [1]: [sum(UnscaledValue(ss_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#2))#16]
Results [2]: [c_customer_id#9 AS customer_id#17, MakeDecimal(sum(UnscaledValue(ss_net_paid#2))#16,17,2) AS year_total#18]

(19) Filter [codegen id : 7]
Input [2]: [customer_id#17, year_total#18]
Condition : (isnotnull(year_total#18) AND (year_total#18 > 0.00))

(20) Exchange
Input [2]: [customer_id#17, year_total#18]
Arguments: hashpartitioning(customer_id#17, 5), ENSURE_REQUIREMENTS, [id=#19]

(21) Sort [codegen id : 8]
Input [2]: [customer_id#17, year_total#18]
Arguments: [customer_id#17 ASC NULLS FIRST], false, 0

(22) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#22), dynamicpruningexpression(ss_sold_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(23) ColumnarToRow [codegen id : 10]
Input [3]: [ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22]

(24) Filter [codegen id : 10]
Input [3]: [ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22]
Condition : isnotnull(ss_customer_sk#20)

(25) ReusedExchange [Reuses operator id: 88]
Output [2]: [d_date_sk#24, d_year#25]

(26) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#22]
Right keys [1]: [d_date_sk#24]
Join condition: None

(27) Project [codegen id : 10]
Output [3]: [ss_customer_sk#20, ss_net_paid#21, d_year#25]
Input [5]: [ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22, d_date_sk#24, d_year#25]

(28) Exchange
Input [3]: [ss_customer_sk#20, ss_net_paid#21, d_year#25]
Arguments: hashpartitioning(ss_customer_sk#20, 5), ENSURE_REQUIREMENTS, [id=#26]

(29) Sort [codegen id : 11]
Input [3]: [ss_customer_sk#20, ss_net_paid#21, d_year#25]
Arguments: [ss_customer_sk#20 ASC NULLS FIRST], false, 0

(30) ReusedExchange [Reuses operator id: 12]
Output [4]: [c_customer_sk#27, c_customer_id#28, c_first_name#29, c_last_name#30]

(31) Sort [codegen id : 13]
Input [4]: [c_customer_sk#27, c_customer_id#28, c_first_name#29, c_last_name#30]
Arguments: [c_customer_sk#27 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#20]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(33) Project [codegen id : 14]
Output [5]: [c_customer_id#28, c_first_name#29, c_last_name#30, ss_net_paid#21, d_year#25]
Input [7]: [ss_customer_sk#20, ss_net_paid#21, d_year#25, c_customer_sk#27, c_customer_id#28, c_first_name#29, c_last_name#30]

(34) HashAggregate [codegen id : 14]
Input [5]: [c_customer_id#28, c_first_name#29, c_last_name#30, ss_net_paid#21, d_year#25]
Keys [4]: [c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#21))]
Aggregate Attributes [1]: [sum#31]
Results [5]: [c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25, sum#32]

(35) Exchange
Input [5]: [c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25, sum#32]
Arguments: hashpartitioning(c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25, 5), ENSURE_REQUIREMENTS, [id=#33]

(36) HashAggregate [codegen id : 15]
Input [5]: [c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25, sum#32]
Keys [4]: [c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25]
Functions [1]: [sum(UnscaledValue(ss_net_paid#21))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#21))#34]
Results [4]: [c_customer_id#28 AS customer_id#35, c_first_name#29 AS customer_first_name#36, c_last_name#30 AS customer_last_name#37, MakeDecimal(sum(UnscaledValue(ss_net_paid#21))#34,17,2) AS year_total#38]

(37) Exchange
Input [4]: [customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38]
Arguments: hashpartitioning(customer_id#35, 5), ENSURE_REQUIREMENTS, [id=#39]

(38) Sort [codegen id : 16]
Input [4]: [customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38]
Arguments: [customer_id#35 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#35]
Join condition: None

(40) Scan parquet default.web_sales
Output [3]: [ws_bill_customer_sk#40, ws_net_paid#41, ws_sold_date_sk#42]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#42), dynamicpruningexpression(ws_sold_date_sk#42 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(41) ColumnarToRow [codegen id : 19]
Input [3]: [ws_bill_customer_sk#40, ws_net_paid#41, ws_sold_date_sk#42]

(42) Filter [codegen id : 19]
Input [3]: [ws_bill_customer_sk#40, ws_net_paid#41, ws_sold_date_sk#42]
Condition : isnotnull(ws_bill_customer_sk#40)

(43) ReusedExchange [Reuses operator id: 84]
Output [2]: [d_date_sk#43, d_year#44]

(44) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#42]
Right keys [1]: [d_date_sk#43]
Join condition: None

(45) Project [codegen id : 19]
Output [3]: [ws_bill_customer_sk#40, ws_net_paid#41, d_year#44]
Input [5]: [ws_bill_customer_sk#40, ws_net_paid#41, ws_sold_date_sk#42, d_date_sk#43, d_year#44]

(46) Exchange
Input [3]: [ws_bill_customer_sk#40, ws_net_paid#41, d_year#44]
Arguments: hashpartitioning(ws_bill_customer_sk#40, 5), ENSURE_REQUIREMENTS, [id=#45]

(47) Sort [codegen id : 20]
Input [3]: [ws_bill_customer_sk#40, ws_net_paid#41, d_year#44]
Arguments: [ws_bill_customer_sk#40 ASC NULLS FIRST], false, 0

(48) ReusedExchange [Reuses operator id: 12]
Output [4]: [c_customer_sk#46, c_customer_id#47, c_first_name#48, c_last_name#49]

(49) Sort [codegen id : 22]
Input [4]: [c_customer_sk#46, c_customer_id#47, c_first_name#48, c_last_name#49]
Arguments: [c_customer_sk#46 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#40]
Right keys [1]: [c_customer_sk#46]
Join condition: None

(51) Project [codegen id : 23]
Output [5]: [c_customer_id#47, c_first_name#48, c_last_name#49, ws_net_paid#41, d_year#44]
Input [7]: [ws_bill_customer_sk#40, ws_net_paid#41, d_year#44, c_customer_sk#46, c_customer_id#47, c_first_name#48, c_last_name#49]

(52) HashAggregate [codegen id : 23]
Input [5]: [c_customer_id#47, c_first_name#48, c_last_name#49, ws_net_paid#41, d_year#44]
Keys [4]: [c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#41))]
Aggregate Attributes [1]: [sum#50]
Results [5]: [c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44, sum#51]

(53) Exchange
Input [5]: [c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44, sum#51]
Arguments: hashpartitioning(c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44, 5), ENSURE_REQUIREMENTS, [id=#52]

(54) HashAggregate [codegen id : 24]
Input [5]: [c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44, sum#51]
Keys [4]: [c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44]
Functions [1]: [sum(UnscaledValue(ws_net_paid#41))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#41))#53]
Results [2]: [c_customer_id#47 AS customer_id#54, MakeDecimal(sum(UnscaledValue(ws_net_paid#41))#53,17,2) AS year_total#55]

(55) Filter [codegen id : 24]
Input [2]: [customer_id#54, year_total#55]
Condition : (isnotnull(year_total#55) AND (year_total#55 > 0.00))

(56) Project [codegen id : 24]
Output [2]: [customer_id#54 AS customer_id#56, year_total#55 AS year_total#57]
Input [2]: [customer_id#54, year_total#55]

(57) Exchange
Input [2]: [customer_id#56, year_total#57]
Arguments: hashpartitioning(customer_id#56, 5), ENSURE_REQUIREMENTS, [id=#58]

(58) Sort [codegen id : 25]
Input [2]: [customer_id#56, year_total#57]
Arguments: [customer_id#56 ASC NULLS FIRST], false, 0

(59) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#56]
Join condition: None

(60) Project [codegen id : 26]
Output [7]: [customer_id#17, year_total#18, customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38, year_total#57]
Input [8]: [customer_id#17, year_total#18, customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38, customer_id#56, year_total#57]

(61) Scan parquet default.web_sales
Output [3]: [ws_bill_customer_sk#59, ws_net_paid#60, ws_sold_date_sk#61]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#61), dynamicpruningexpression(ws_sold_date_sk#61 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(62) ColumnarToRow [codegen id : 28]
Input [3]: [ws_bill_customer_sk#59, ws_net_paid#60, ws_sold_date_sk#61]

(63) Filter [codegen id : 28]
Input [3]: [ws_bill_customer_sk#59, ws_net_paid#60, ws_sold_date_sk#61]
Condition : isnotnull(ws_bill_customer_sk#59)

(64) ReusedExchange [Reuses operator id: 88]
Output [2]: [d_date_sk#62, d_year#63]

(65) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#61]
Right keys [1]: [d_date_sk#62]
Join condition: None

(66) Project [codegen id : 28]
Output [3]: [ws_bill_customer_sk#59, ws_net_paid#60, d_year#63]
Input [5]: [ws_bill_customer_sk#59, ws_net_paid#60, ws_sold_date_sk#61, d_date_sk#62, d_year#63]

(67) Exchange
Input [3]: [ws_bill_customer_sk#59, ws_net_paid#60, d_year#63]
Arguments: hashpartitioning(ws_bill_customer_sk#59, 5), ENSURE_REQUIREMENTS, [id=#64]

(68) Sort [codegen id : 29]
Input [3]: [ws_bill_customer_sk#59, ws_net_paid#60, d_year#63]
Arguments: [ws_bill_customer_sk#59 ASC NULLS FIRST], false, 0

(69) ReusedExchange [Reuses operator id: 12]
Output [4]: [c_customer_sk#65, c_customer_id#66, c_first_name#67, c_last_name#68]

(70) Sort [codegen id : 31]
Input [4]: [c_customer_sk#65, c_customer_id#66, c_first_name#67, c_last_name#68]
Arguments: [c_customer_sk#65 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#59]
Right keys [1]: [c_customer_sk#65]
Join condition: None

(72) Project [codegen id : 32]
Output [5]: [c_customer_id#66, c_first_name#67, c_last_name#68, ws_net_paid#60, d_year#63]
Input [7]: [ws_bill_customer_sk#59, ws_net_paid#60, d_year#63, c_customer_sk#65, c_customer_id#66, c_first_name#67, c_last_name#68]

(73) HashAggregate [codegen id : 32]
Input [5]: [c_customer_id#66, c_first_name#67, c_last_name#68, ws_net_paid#60, d_year#63]
Keys [4]: [c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#60))]
Aggregate Attributes [1]: [sum#69]
Results [5]: [c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63, sum#70]

(74) Exchange
Input [5]: [c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63, sum#70]
Arguments: hashpartitioning(c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63, 5), ENSURE_REQUIREMENTS, [id=#71]

(75) HashAggregate [codegen id : 33]
Input [5]: [c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63, sum#70]
Keys [4]: [c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63]
Functions [1]: [sum(UnscaledValue(ws_net_paid#60))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#60))#72]
Results [2]: [c_customer_id#66 AS customer_id#73, MakeDecimal(sum(UnscaledValue(ws_net_paid#60))#72,17,2) AS year_total#74]

(76) Exchange
Input [2]: [customer_id#73, year_total#74]
Arguments: hashpartitioning(customer_id#73, 5), ENSURE_REQUIREMENTS, [id=#75]

(77) Sort [codegen id : 34]
Input [2]: [customer_id#73, year_total#74]
Arguments: [customer_id#73 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#73]
Join condition: (CASE WHEN (year_total#57 > 0.00) THEN CheckOverflow((promote_precision(year_total#74) / promote_precision(year_total#57)), DecimalType(37,20), true) ELSE null END > CASE WHEN (year_total#18 > 0.00) THEN CheckOverflow((promote_precision(year_total#38) / promote_precision(year_total#18)), DecimalType(37,20), true) ELSE null END)

(79) Project [codegen id : 35]
Output [3]: [customer_id#35, customer_first_name#36, customer_last_name#37]
Input [9]: [customer_id#17, year_total#18, customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38, year_total#57, customer_id#73, year_total#74]

(80) TakeOrderedAndProject
Input [3]: [customer_id#35, customer_first_name#36, customer_last_name#37]
Arguments: 100, [customer_first_name#36 ASC NULLS FIRST, customer_id#35 ASC NULLS FIRST, customer_last_name#37 ASC NULLS FIRST], [customer_id#35, customer_first_name#36, customer_last_name#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (84)
+- * Filter (83)
   +- * ColumnarToRow (82)
      +- Scan parquet default.date_dim (81)


(81) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(82) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]

(83) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]
Condition : (((isnotnull(d_year#6) AND (d_year#6 = 2001)) AND d_year#6 IN (2001,2002)) AND isnotnull(d_date_sk#5))

(84) BroadcastExchange
Input [2]: [d_date_sk#5, d_year#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#76]

Subquery:2 Hosting operator id = 22 Hosting Expression = ss_sold_date_sk#22 IN dynamicpruning#23
BroadcastExchange (88)
+- * Filter (87)
   +- * ColumnarToRow (86)
      +- Scan parquet default.date_dim (85)


(85) Scan parquet default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(86) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#25]

(87) Filter [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#25]
Condition : (((isnotnull(d_year#25) AND (d_year#25 = 2002)) AND d_year#25 IN (2001,2002)) AND isnotnull(d_date_sk#24))

(88) BroadcastExchange
Input [2]: [d_date_sk#24, d_year#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77]

Subquery:3 Hosting operator id = 40 Hosting Expression = ws_sold_date_sk#42 IN dynamicpruning#4

Subquery:4 Hosting operator id = 61 Hosting Expression = ws_sold_date_sk#61 IN dynamicpruning#23


