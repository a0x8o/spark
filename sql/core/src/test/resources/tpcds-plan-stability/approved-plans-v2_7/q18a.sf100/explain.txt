== Physical Plan ==
TakeOrderedAndProject (160)
+- Union (159)
   :- * HashAggregate (51)
   :  +- Exchange (50)
   :     +- * HashAggregate (49)
   :        +- * Project (48)
   :           +- * SortMergeJoin Inner (47)
   :              :- * Sort (25)
   :              :  +- Exchange (24)
   :              :     +- * Project (23)
   :              :        +- * BroadcastHashJoin Inner BuildRight (22)
   :              :           :- * Project (17)
   :              :           :  +- * BroadcastHashJoin Inner BuildRight (16)
   :              :           :     :- * Project (10)
   :              :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :           :     :     :- * Filter (3)
   :              :           :     :     :  +- * ColumnarToRow (2)
   :              :           :     :     :     +- Scan parquet default.catalog_sales (1)
   :              :           :     :     +- BroadcastExchange (8)
   :              :           :     :        +- * Project (7)
   :              :           :     :           +- * Filter (6)
   :              :           :     :              +- * ColumnarToRow (5)
   :              :           :     :                 +- Scan parquet default.customer_demographics (4)
   :              :           :     +- BroadcastExchange (15)
   :              :           :        +- * Project (14)
   :              :           :           +- * Filter (13)
   :              :           :              +- * ColumnarToRow (12)
   :              :           :                 +- Scan parquet default.date_dim (11)
   :              :           +- BroadcastExchange (21)
   :              :              +- * Filter (20)
   :              :                 +- * ColumnarToRow (19)
   :              :                    +- Scan parquet default.item (18)
   :              +- * Sort (46)
   :                 +- Exchange (45)
   :                    +- * Project (44)
   :                       +- * BroadcastHashJoin Inner BuildRight (43)
   :                          :- * Project (38)
   :                          :  +- * SortMergeJoin Inner (37)
   :                          :     :- * Sort (31)
   :                          :     :  +- Exchange (30)
   :                          :     :     +- * Project (29)
   :                          :     :        +- * Filter (28)
   :                          :     :           +- * ColumnarToRow (27)
   :                          :     :              +- Scan parquet default.customer (26)
   :                          :     +- * Sort (36)
   :                          :        +- Exchange (35)
   :                          :           +- * Filter (34)
   :                          :              +- * ColumnarToRow (33)
   :                          :                 +- Scan parquet default.customer_demographics (32)
   :                          +- BroadcastExchange (42)
   :                             +- * Filter (41)
   :                                +- * ColumnarToRow (40)
   :                                   +- Scan parquet default.customer_address (39)
   :- * HashAggregate (76)
   :  +- Exchange (75)
   :     +- * HashAggregate (74)
   :        +- * Project (73)
   :           +- * SortMergeJoin Inner (72)
   :              :- * Sort (53)
   :              :  +- ReusedExchange (52)
   :              +- * Sort (71)
   :                 +- Exchange (70)
   :                    +- * Project (69)
   :                       +- * SortMergeJoin Inner (68)
   :                          :- * Sort (65)
   :                          :  +- Exchange (64)
   :                          :     +- * Project (63)
   :                          :        +- * BroadcastHashJoin Inner BuildRight (62)
   :                          :           :- * Project (57)
   :                          :           :  +- * Filter (56)
   :                          :           :     +- * ColumnarToRow (55)
   :                          :           :        +- Scan parquet default.customer (54)
   :                          :           +- BroadcastExchange (61)
   :                          :              +- * Filter (60)
   :                          :                 +- * ColumnarToRow (59)
   :                          :                    +- Scan parquet default.customer_address (58)
   :                          +- * Sort (67)
   :                             +- ReusedExchange (66)
   :- * HashAggregate (102)
   :  +- Exchange (101)
   :     +- * HashAggregate (100)
   :        +- * Project (99)
   :           +- * SortMergeJoin Inner (98)
   :              :- * Sort (78)
   :              :  +- ReusedExchange (77)
   :              +- * Sort (97)
   :                 +- Exchange (96)
   :                    +- * Project (95)
   :                       +- * SortMergeJoin Inner (94)
   :                          :- * Sort (91)
   :                          :  +- Exchange (90)
   :                          :     +- * Project (89)
   :                          :        +- * BroadcastHashJoin Inner BuildRight (88)
   :                          :           :- * Project (82)
   :                          :           :  +- * Filter (81)
   :                          :           :     +- * ColumnarToRow (80)
   :                          :           :        +- Scan parquet default.customer (79)
   :                          :           +- BroadcastExchange (87)
   :                          :              +- * Project (86)
   :                          :                 +- * Filter (85)
   :                          :                    +- * ColumnarToRow (84)
   :                          :                       +- Scan parquet default.customer_address (83)
   :                          +- * Sort (93)
   :                             +- ReusedExchange (92)
   :- * HashAggregate (137)
   :  +- Exchange (136)
   :     +- * HashAggregate (135)
   :        +- * Project (134)
   :           +- * BroadcastHashJoin Inner BuildRight (133)
   :              :- * Project (131)
   :              :  +- * BroadcastHashJoin Inner BuildRight (130)
   :              :     :- * Project (111)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (110)
   :              :     :     :- * Project (108)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (107)
   :              :     :     :     :- * Filter (105)
   :              :     :     :     :  +- * ColumnarToRow (104)
   :              :     :     :     :     +- Scan parquet default.catalog_sales (103)
   :              :     :     :     +- ReusedExchange (106)
   :              :     :     +- ReusedExchange (109)
   :              :     +- BroadcastExchange (129)
   :              :        +- * Project (128)
   :              :           +- * BroadcastHashJoin Inner BuildLeft (127)
   :              :              :- BroadcastExchange (123)
   :              :              :  +- * Project (122)
   :              :              :     +- * BroadcastHashJoin Inner BuildRight (121)
   :              :              :        :- * Project (115)
   :              :              :        :  +- * Filter (114)
   :              :              :        :     +- * ColumnarToRow (113)
   :              :              :        :        +- Scan parquet default.customer (112)
   :              :              :        +- BroadcastExchange (120)
   :              :              :           +- * Project (119)
   :              :              :              +- * Filter (118)
   :              :              :                 +- * ColumnarToRow (117)
   :              :              :                    +- Scan parquet default.customer_address (116)
   :              :              +- * Filter (126)
   :              :                 +- * ColumnarToRow (125)
   :              :                    +- Scan parquet default.customer_demographics (124)
   :              +- ReusedExchange (132)
   +- * HashAggregate (158)
      +- Exchange (157)
         +- * HashAggregate (156)
            +- * Project (155)
               +- * BroadcastHashJoin Inner BuildRight (154)
                  :- * Project (152)
                  :  +- * BroadcastHashJoin Inner BuildRight (151)
                  :     :- * Project (146)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (145)
                  :     :     :- * Project (143)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (142)
                  :     :     :     :- * Filter (140)
                  :     :     :     :  +- * ColumnarToRow (139)
                  :     :     :     :     +- Scan parquet default.catalog_sales (138)
                  :     :     :     +- ReusedExchange (141)
                  :     :     +- ReusedExchange (144)
                  :     +- BroadcastExchange (150)
                  :        +- * Filter (149)
                  :           +- * ColumnarToRow (148)
                  :              +- Scan parquet default.item (147)
                  +- ReusedExchange (153)


(1) Scan parquet default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(3) Filter [codegen id : 4]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : ((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3))

(4) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#11, cd_gender#12, cd_education_status#13, cd_dep_count#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_education_status,College             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#11, cd_gender#12, cd_education_status#13, cd_dep_count#14]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#11, cd_gender#12, cd_education_status#13, cd_dep_count#14]
Condition : ((((isnotnull(cd_gender#12) AND isnotnull(cd_education_status#13)) AND (cd_gender#12 = M)) AND (cd_education_status#13 = College             )) AND isnotnull(cd_demo_sk#11))

(7) Project [codegen id : 1]
Output [2]: [cd_demo_sk#11, cd_dep_count#14]
Input [4]: [cd_demo_sk#11, cd_gender#12, cd_education_status#13, cd_dep_count#14]

(8) BroadcastExchange
Input [2]: [cd_demo_sk#11, cd_dep_count#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#11]
Join condition: None

(10) Project [codegen id : 4]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#11, cd_dep_count#14]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#16, d_year#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#16, d_year#17]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#16, d_year#17]
Condition : ((isnotnull(d_year#17) AND (d_year#17 = 2001)) AND isnotnull(d_date_sk#16))

(14) Project [codegen id : 2]
Output [1]: [d_date_sk#16]
Input [2]: [d_date_sk#16, d_year#17]

(15) BroadcastExchange
Input [1]: [d_date_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#16]
Join condition: None

(17) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14, d_date_sk#16]

(18) Scan parquet default.item
Output [2]: [i_item_sk#19, i_item_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#19, i_item_id#20]

(20) Filter [codegen id : 3]
Input [2]: [i_item_sk#19, i_item_id#20]
Condition : isnotnull(i_item_sk#19)

(21) BroadcastExchange
Input [2]: [i_item_sk#19, i_item_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#19]
Join condition: None

(23) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#20]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_sk#19, i_item_id#20]

(24) Exchange
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#20]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#22]

(25) Sort [codegen id : 5]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#20]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(26) Scan parquet default.customer
Output [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(27) ColumnarToRow [codegen id : 6]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]

(28) Filter [codegen id : 6]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]
Condition : (((c_birth_month#26 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#23)) AND isnotnull(c_current_cdemo_sk#24)) AND isnotnull(c_current_addr_sk#25))

(29) Project [codegen id : 6]
Output [4]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_year#27]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]

(30) Exchange
Input [4]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_year#27]
Arguments: hashpartitioning(c_current_cdemo_sk#24, 5), ENSURE_REQUIREMENTS, [id=#28]

(31) Sort [codegen id : 7]
Input [4]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_year#27]
Arguments: [c_current_cdemo_sk#24 ASC NULLS FIRST], false, 0

(32) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(33) ColumnarToRow [codegen id : 8]
Input [1]: [cd_demo_sk#29]

(34) Filter [codegen id : 8]
Input [1]: [cd_demo_sk#29]
Condition : isnotnull(cd_demo_sk#29)

(35) Exchange
Input [1]: [cd_demo_sk#29]
Arguments: hashpartitioning(cd_demo_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(36) Sort [codegen id : 9]
Input [1]: [cd_demo_sk#29]
Arguments: [cd_demo_sk#29 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 11]
Left keys [1]: [c_current_cdemo_sk#24]
Right keys [1]: [cd_demo_sk#29]
Join condition: None

(38) Project [codegen id : 11]
Output [3]: [c_customer_sk#23, c_current_addr_sk#25, c_birth_year#27]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_year#27, cd_demo_sk#29]

(39) Scan parquet default.customer_address
Output [4]: [ca_address_sk#31, ca_county#32, ca_state#33, ca_country#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(40) ColumnarToRow [codegen id : 10]
Input [4]: [ca_address_sk#31, ca_county#32, ca_state#33, ca_country#34]

(41) Filter [codegen id : 10]
Input [4]: [ca_address_sk#31, ca_county#32, ca_state#33, ca_country#34]
Condition : (ca_state#33 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#31))

(42) BroadcastExchange
Input [4]: [ca_address_sk#31, ca_county#32, ca_state#33, ca_country#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(43) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#25]
Right keys [1]: [ca_address_sk#31]
Join condition: None

(44) Project [codegen id : 11]
Output [5]: [c_customer_sk#23, c_birth_year#27, ca_county#32, ca_state#33, ca_country#34]
Input [7]: [c_customer_sk#23, c_current_addr_sk#25, c_birth_year#27, ca_address_sk#31, ca_county#32, ca_state#33, ca_country#34]

(45) Exchange
Input [5]: [c_customer_sk#23, c_birth_year#27, ca_county#32, ca_state#33, ca_country#34]
Arguments: hashpartitioning(c_customer_sk#23, 5), ENSURE_REQUIREMENTS, [id=#36]

(46) Sort [codegen id : 12]
Input [5]: [c_customer_sk#23, c_birth_year#27, ca_county#32, ca_state#33, ca_country#34]
Arguments: [c_customer_sk#23 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 13]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#23]
Join condition: None

(48) Project [codegen id : 13]
Output [11]: [i_item_id#20, ca_country#34, ca_state#33, ca_county#32, cast(cs_quantity#4 as decimal(12,2)) AS agg1#37, cast(cs_list_price#5 as decimal(12,2)) AS agg2#38, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#39, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#40, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#41, cast(c_birth_year#27 as decimal(12,2)) AS agg6#42, cast(cd_dep_count#14 as decimal(12,2)) AS agg7#43]
Input [13]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#20, c_customer_sk#23, c_birth_year#27, ca_county#32, ca_state#33, ca_country#34]

(49) HashAggregate [codegen id : 13]
Input [11]: [i_item_id#20, ca_country#34, ca_state#33, ca_county#32, agg1#37, agg2#38, agg3#39, agg4#40, agg5#41, agg6#42, agg7#43]
Keys [4]: [i_item_id#20, ca_country#34, ca_state#33, ca_county#32]
Functions [7]: [partial_avg(agg1#37), partial_avg(agg2#38), partial_avg(agg3#39), partial_avg(agg4#40), partial_avg(agg5#41), partial_avg(agg6#42), partial_avg(agg7#43)]
Aggregate Attributes [14]: [sum#44, count#45, sum#46, count#47, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55, sum#56, count#57]
Results [18]: [i_item_id#20, ca_country#34, ca_state#33, ca_county#32, sum#58, count#59, sum#60, count#61, sum#62, count#63, sum#64, count#65, sum#66, count#67, sum#68, count#69, sum#70, count#71]

(50) Exchange
Input [18]: [i_item_id#20, ca_country#34, ca_state#33, ca_county#32, sum#58, count#59, sum#60, count#61, sum#62, count#63, sum#64, count#65, sum#66, count#67, sum#68, count#69, sum#70, count#71]
Arguments: hashpartitioning(i_item_id#20, ca_country#34, ca_state#33, ca_county#32, 5), ENSURE_REQUIREMENTS, [id=#72]

(51) HashAggregate [codegen id : 14]
Input [18]: [i_item_id#20, ca_country#34, ca_state#33, ca_county#32, sum#58, count#59, sum#60, count#61, sum#62, count#63, sum#64, count#65, sum#66, count#67, sum#68, count#69, sum#70, count#71]
Keys [4]: [i_item_id#20, ca_country#34, ca_state#33, ca_county#32]
Functions [7]: [avg(agg1#37), avg(agg2#38), avg(agg3#39), avg(agg4#40), avg(agg5#41), avg(agg6#42), avg(agg7#43)]
Aggregate Attributes [7]: [avg(agg1#37)#73, avg(agg2#38)#74, avg(agg3#39)#75, avg(agg4#40)#76, avg(agg5#41)#77, avg(agg6#42)#78, avg(agg7#43)#79]
Results [11]: [i_item_id#20, ca_country#34, ca_state#33, ca_county#32, avg(agg1#37)#73 AS agg1#80, avg(agg2#38)#74 AS agg2#81, avg(agg3#39)#75 AS agg3#82, avg(agg4#40)#76 AS agg4#83, avg(agg5#41)#77 AS agg5#84, avg(agg6#42)#78 AS agg6#85, avg(agg7#43)#79 AS agg7#86]

(52) ReusedExchange [Reuses operator id: unknown]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#20]

(53) Sort [codegen id : 19]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#20]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(54) Scan parquet default.customer
Output [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(55) ColumnarToRow [codegen id : 21]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]

(56) Filter [codegen id : 21]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]
Condition : (((c_birth_month#26 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#23)) AND isnotnull(c_current_cdemo_sk#24)) AND isnotnull(c_current_addr_sk#25))

(57) Project [codegen id : 21]
Output [4]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_year#27]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]

(58) Scan parquet default.customer_address
Output [3]: [ca_address_sk#31, ca_state#33, ca_country#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(59) ColumnarToRow [codegen id : 20]
Input [3]: [ca_address_sk#31, ca_state#33, ca_country#34]

(60) Filter [codegen id : 20]
Input [3]: [ca_address_sk#31, ca_state#33, ca_country#34]
Condition : (ca_state#33 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#31))

(61) BroadcastExchange
Input [3]: [ca_address_sk#31, ca_state#33, ca_country#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#87]

(62) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [c_current_addr_sk#25]
Right keys [1]: [ca_address_sk#31]
Join condition: None

(63) Project [codegen id : 21]
Output [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27, ca_state#33, ca_country#34]
Input [7]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_year#27, ca_address_sk#31, ca_state#33, ca_country#34]

(64) Exchange
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27, ca_state#33, ca_country#34]
Arguments: hashpartitioning(c_current_cdemo_sk#24, 5), ENSURE_REQUIREMENTS, [id=#88]

(65) Sort [codegen id : 22]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27, ca_state#33, ca_country#34]
Arguments: [c_current_cdemo_sk#24 ASC NULLS FIRST], false, 0

(66) ReusedExchange [Reuses operator id: 35]
Output [1]: [cd_demo_sk#89]

(67) Sort [codegen id : 24]
Input [1]: [cd_demo_sk#89]
Arguments: [cd_demo_sk#89 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 25]
Left keys [1]: [c_current_cdemo_sk#24]
Right keys [1]: [cd_demo_sk#89]
Join condition: None

(69) Project [codegen id : 25]
Output [4]: [c_customer_sk#23, c_birth_year#27, ca_state#33, ca_country#34]
Input [6]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27, ca_state#33, ca_country#34, cd_demo_sk#89]

(70) Exchange
Input [4]: [c_customer_sk#23, c_birth_year#27, ca_state#33, ca_country#34]
Arguments: hashpartitioning(c_customer_sk#23, 5), ENSURE_REQUIREMENTS, [id=#90]

(71) Sort [codegen id : 26]
Input [4]: [c_customer_sk#23, c_birth_year#27, ca_state#33, ca_country#34]
Arguments: [c_customer_sk#23 ASC NULLS FIRST], false, 0

(72) SortMergeJoin [codegen id : 27]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#23]
Join condition: None

(73) Project [codegen id : 27]
Output [10]: [i_item_id#20, ca_country#34, ca_state#33, cast(cs_quantity#4 as decimal(12,2)) AS agg1#37, cast(cs_list_price#5 as decimal(12,2)) AS agg2#38, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#39, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#40, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#41, cast(c_birth_year#27 as decimal(12,2)) AS agg6#42, cast(cd_dep_count#14 as decimal(12,2)) AS agg7#43]
Input [12]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#20, c_customer_sk#23, c_birth_year#27, ca_state#33, ca_country#34]

(74) HashAggregate [codegen id : 27]
Input [10]: [i_item_id#20, ca_country#34, ca_state#33, agg1#37, agg2#38, agg3#39, agg4#40, agg5#41, agg6#42, agg7#43]
Keys [3]: [i_item_id#20, ca_country#34, ca_state#33]
Functions [7]: [partial_avg(agg1#37), partial_avg(agg2#38), partial_avg(agg3#39), partial_avg(agg4#40), partial_avg(agg5#41), partial_avg(agg6#42), partial_avg(agg7#43)]
Aggregate Attributes [14]: [sum#91, count#92, sum#93, count#94, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102, sum#103, count#104]
Results [17]: [i_item_id#20, ca_country#34, ca_state#33, sum#105, count#106, sum#107, count#108, sum#109, count#110, sum#111, count#112, sum#113, count#114, sum#115, count#116, sum#117, count#118]

(75) Exchange
Input [17]: [i_item_id#20, ca_country#34, ca_state#33, sum#105, count#106, sum#107, count#108, sum#109, count#110, sum#111, count#112, sum#113, count#114, sum#115, count#116, sum#117, count#118]
Arguments: hashpartitioning(i_item_id#20, ca_country#34, ca_state#33, 5), ENSURE_REQUIREMENTS, [id=#119]

(76) HashAggregate [codegen id : 28]
Input [17]: [i_item_id#20, ca_country#34, ca_state#33, sum#105, count#106, sum#107, count#108, sum#109, count#110, sum#111, count#112, sum#113, count#114, sum#115, count#116, sum#117, count#118]
Keys [3]: [i_item_id#20, ca_country#34, ca_state#33]
Functions [7]: [avg(agg1#37), avg(agg2#38), avg(agg3#39), avg(agg4#40), avg(agg5#41), avg(agg6#42), avg(agg7#43)]
Aggregate Attributes [7]: [avg(agg1#37)#120, avg(agg2#38)#121, avg(agg3#39)#122, avg(agg4#40)#123, avg(agg5#41)#124, avg(agg6#42)#125, avg(agg7#43)#126]
Results [11]: [i_item_id#20, ca_country#34, ca_state#33, null AS county#127, avg(agg1#37)#120 AS agg1#128, avg(agg2#38)#121 AS agg2#129, avg(agg3#39)#122 AS agg3#130, avg(agg4#40)#123 AS agg4#131, avg(agg5#41)#124 AS agg5#132, avg(agg6#42)#125 AS agg6#133, avg(agg7#43)#126 AS agg7#134]

(77) ReusedExchange [Reuses operator id: unknown]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#20]

(78) Sort [codegen id : 33]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#20]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(79) Scan parquet default.customer
Output [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(80) ColumnarToRow [codegen id : 35]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]

(81) Filter [codegen id : 35]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]
Condition : (((c_birth_month#26 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#23)) AND isnotnull(c_current_cdemo_sk#24)) AND isnotnull(c_current_addr_sk#25))

(82) Project [codegen id : 35]
Output [4]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_year#27]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]

(83) Scan parquet default.customer_address
Output [3]: [ca_address_sk#31, ca_state#33, ca_country#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(84) ColumnarToRow [codegen id : 34]
Input [3]: [ca_address_sk#31, ca_state#33, ca_country#34]

(85) Filter [codegen id : 34]
Input [3]: [ca_address_sk#31, ca_state#33, ca_country#34]
Condition : (ca_state#33 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#31))

(86) Project [codegen id : 34]
Output [2]: [ca_address_sk#31, ca_country#34]
Input [3]: [ca_address_sk#31, ca_state#33, ca_country#34]

(87) BroadcastExchange
Input [2]: [ca_address_sk#31, ca_country#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#135]

(88) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [c_current_addr_sk#25]
Right keys [1]: [ca_address_sk#31]
Join condition: None

(89) Project [codegen id : 35]
Output [4]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27, ca_country#34]
Input [6]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_year#27, ca_address_sk#31, ca_country#34]

(90) Exchange
Input [4]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27, ca_country#34]
Arguments: hashpartitioning(c_current_cdemo_sk#24, 5), ENSURE_REQUIREMENTS, [id=#136]

(91) Sort [codegen id : 36]
Input [4]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27, ca_country#34]
Arguments: [c_current_cdemo_sk#24 ASC NULLS FIRST], false, 0

(92) ReusedExchange [Reuses operator id: 35]
Output [1]: [cd_demo_sk#137]

(93) Sort [codegen id : 38]
Input [1]: [cd_demo_sk#137]
Arguments: [cd_demo_sk#137 ASC NULLS FIRST], false, 0

(94) SortMergeJoin [codegen id : 39]
Left keys [1]: [c_current_cdemo_sk#24]
Right keys [1]: [cd_demo_sk#137]
Join condition: None

(95) Project [codegen id : 39]
Output [3]: [c_customer_sk#23, c_birth_year#27, ca_country#34]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27, ca_country#34, cd_demo_sk#137]

(96) Exchange
Input [3]: [c_customer_sk#23, c_birth_year#27, ca_country#34]
Arguments: hashpartitioning(c_customer_sk#23, 5), ENSURE_REQUIREMENTS, [id=#138]

(97) Sort [codegen id : 40]
Input [3]: [c_customer_sk#23, c_birth_year#27, ca_country#34]
Arguments: [c_customer_sk#23 ASC NULLS FIRST], false, 0

(98) SortMergeJoin [codegen id : 41]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#23]
Join condition: None

(99) Project [codegen id : 41]
Output [9]: [i_item_id#20, ca_country#34, cast(cs_quantity#4 as decimal(12,2)) AS agg1#37, cast(cs_list_price#5 as decimal(12,2)) AS agg2#38, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#39, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#40, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#41, cast(c_birth_year#27 as decimal(12,2)) AS agg6#42, cast(cd_dep_count#14 as decimal(12,2)) AS agg7#43]
Input [11]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#20, c_customer_sk#23, c_birth_year#27, ca_country#34]

(100) HashAggregate [codegen id : 41]
Input [9]: [i_item_id#20, ca_country#34, agg1#37, agg2#38, agg3#39, agg4#40, agg5#41, agg6#42, agg7#43]
Keys [2]: [i_item_id#20, ca_country#34]
Functions [7]: [partial_avg(agg1#37), partial_avg(agg2#38), partial_avg(agg3#39), partial_avg(agg4#40), partial_avg(agg5#41), partial_avg(agg6#42), partial_avg(agg7#43)]
Aggregate Attributes [14]: [sum#139, count#140, sum#141, count#142, sum#143, count#144, sum#145, count#146, sum#147, count#148, sum#149, count#150, sum#151, count#152]
Results [16]: [i_item_id#20, ca_country#34, sum#153, count#154, sum#155, count#156, sum#157, count#158, sum#159, count#160, sum#161, count#162, sum#163, count#164, sum#165, count#166]

(101) Exchange
Input [16]: [i_item_id#20, ca_country#34, sum#153, count#154, sum#155, count#156, sum#157, count#158, sum#159, count#160, sum#161, count#162, sum#163, count#164, sum#165, count#166]
Arguments: hashpartitioning(i_item_id#20, ca_country#34, 5), ENSURE_REQUIREMENTS, [id=#167]

(102) HashAggregate [codegen id : 42]
Input [16]: [i_item_id#20, ca_country#34, sum#153, count#154, sum#155, count#156, sum#157, count#158, sum#159, count#160, sum#161, count#162, sum#163, count#164, sum#165, count#166]
Keys [2]: [i_item_id#20, ca_country#34]
Functions [7]: [avg(agg1#37), avg(agg2#38), avg(agg3#39), avg(agg4#40), avg(agg5#41), avg(agg6#42), avg(agg7#43)]
Aggregate Attributes [7]: [avg(agg1#37)#168, avg(agg2#38)#169, avg(agg3#39)#170, avg(agg4#40)#171, avg(agg5#41)#172, avg(agg6#42)#173, avg(agg7#43)#174]
Results [11]: [i_item_id#20, ca_country#34, null AS ca_state#175, null AS county#176, avg(agg1#37)#168 AS agg1#177, avg(agg2#38)#169 AS agg2#178, avg(agg3#39)#170 AS agg3#179, avg(agg4#40)#171 AS agg4#180, avg(agg5#41)#172 AS agg5#181, avg(agg6#42)#173 AS agg6#182, avg(agg7#43)#174 AS agg7#183]

(103) Scan parquet default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(104) ColumnarToRow [codegen id : 49]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(105) Filter [codegen id : 49]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : ((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3))

(106) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#11, cd_dep_count#14]

(107) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#11]
Join condition: None

(108) Project [codegen id : 49]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#11, cd_dep_count#14]

(109) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#16]

(110) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#16]
Join condition: None

(111) Project [codegen id : 49]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14, d_date_sk#16]

(112) Scan parquet default.customer
Output [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(113) ColumnarToRow [codegen id : 46]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]

(114) Filter [codegen id : 46]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]
Condition : (((c_birth_month#26 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#23)) AND isnotnull(c_current_cdemo_sk#24)) AND isnotnull(c_current_addr_sk#25))

(115) Project [codegen id : 46]
Output [4]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_year#27]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_month#26, c_birth_year#27]

(116) Scan parquet default.customer_address
Output [2]: [ca_address_sk#31, ca_state#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(117) ColumnarToRow [codegen id : 45]
Input [2]: [ca_address_sk#31, ca_state#33]

(118) Filter [codegen id : 45]
Input [2]: [ca_address_sk#31, ca_state#33]
Condition : (ca_state#33 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#31))

(119) Project [codegen id : 45]
Output [1]: [ca_address_sk#31]
Input [2]: [ca_address_sk#31, ca_state#33]

(120) BroadcastExchange
Input [1]: [ca_address_sk#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#184]

(121) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [c_current_addr_sk#25]
Right keys [1]: [ca_address_sk#31]
Join condition: None

(122) Project [codegen id : 46]
Output [3]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27]
Input [5]: [c_customer_sk#23, c_current_cdemo_sk#24, c_current_addr_sk#25, c_birth_year#27, ca_address_sk#31]

(123) BroadcastExchange
Input [3]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#185]

(124) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#186]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(125) ColumnarToRow
Input [1]: [cd_demo_sk#186]

(126) Filter
Input [1]: [cd_demo_sk#186]
Condition : isnotnull(cd_demo_sk#186)

(127) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [c_current_cdemo_sk#24]
Right keys [1]: [cd_demo_sk#186]
Join condition: None

(128) Project [codegen id : 47]
Output [2]: [c_customer_sk#23, c_birth_year#27]
Input [4]: [c_customer_sk#23, c_current_cdemo_sk#24, c_birth_year#27, cd_demo_sk#186]

(129) BroadcastExchange
Input [2]: [c_customer_sk#23, c_birth_year#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#187]

(130) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#23]
Join condition: None

(131) Project [codegen id : 49]
Output [8]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#27]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_customer_sk#23, c_birth_year#27]

(132) ReusedExchange [Reuses operator id: 21]
Output [2]: [i_item_sk#19, i_item_id#20]

(133) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#19]
Join condition: None

(134) Project [codegen id : 49]
Output [8]: [i_item_id#20, cast(cs_quantity#4 as decimal(12,2)) AS agg1#37, cast(cs_list_price#5 as decimal(12,2)) AS agg2#38, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#39, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#40, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#41, cast(c_birth_year#27 as decimal(12,2)) AS agg6#42, cast(cd_dep_count#14 as decimal(12,2)) AS agg7#43]
Input [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#27, i_item_sk#19, i_item_id#20]

(135) HashAggregate [codegen id : 49]
Input [8]: [i_item_id#20, agg1#37, agg2#38, agg3#39, agg4#40, agg5#41, agg6#42, agg7#43]
Keys [1]: [i_item_id#20]
Functions [7]: [partial_avg(agg1#37), partial_avg(agg2#38), partial_avg(agg3#39), partial_avg(agg4#40), partial_avg(agg5#41), partial_avg(agg6#42), partial_avg(agg7#43)]
Aggregate Attributes [14]: [sum#188, count#189, sum#190, count#191, sum#192, count#193, sum#194, count#195, sum#196, count#197, sum#198, count#199, sum#200, count#201]
Results [15]: [i_item_id#20, sum#202, count#203, sum#204, count#205, sum#206, count#207, sum#208, count#209, sum#210, count#211, sum#212, count#213, sum#214, count#215]

(136) Exchange
Input [15]: [i_item_id#20, sum#202, count#203, sum#204, count#205, sum#206, count#207, sum#208, count#209, sum#210, count#211, sum#212, count#213, sum#214, count#215]
Arguments: hashpartitioning(i_item_id#20, 5), ENSURE_REQUIREMENTS, [id=#216]

(137) HashAggregate [codegen id : 50]
Input [15]: [i_item_id#20, sum#202, count#203, sum#204, count#205, sum#206, count#207, sum#208, count#209, sum#210, count#211, sum#212, count#213, sum#214, count#215]
Keys [1]: [i_item_id#20]
Functions [7]: [avg(agg1#37), avg(agg2#38), avg(agg3#39), avg(agg4#40), avg(agg5#41), avg(agg6#42), avg(agg7#43)]
Aggregate Attributes [7]: [avg(agg1#37)#217, avg(agg2#38)#218, avg(agg3#39)#219, avg(agg4#40)#220, avg(agg5#41)#221, avg(agg6#42)#222, avg(agg7#43)#223]
Results [11]: [i_item_id#20, null AS ca_country#224, null AS ca_state#225, null AS county#226, avg(agg1#37)#217 AS agg1#227, avg(agg2#38)#218 AS agg2#228, avg(agg3#39)#219 AS agg3#229, avg(agg4#40)#220 AS agg4#230, avg(agg5#41)#221 AS agg5#231, avg(agg6#42)#222 AS agg6#232, avg(agg7#43)#223 AS agg7#233]

(138) Scan parquet default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(139) ColumnarToRow [codegen id : 57]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(140) Filter [codegen id : 57]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : ((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3))

(141) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#11, cd_dep_count#14]

(142) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#11]
Join condition: None

(143) Project [codegen id : 57]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#11, cd_dep_count#14]

(144) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#16]

(145) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#16]
Join condition: None

(146) Project [codegen id : 57]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14, d_date_sk#16]

(147) Scan parquet default.item
Output [1]: [i_item_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(148) ColumnarToRow [codegen id : 53]
Input [1]: [i_item_sk#19]

(149) Filter [codegen id : 53]
Input [1]: [i_item_sk#19]
Condition : isnotnull(i_item_sk#19)

(150) BroadcastExchange
Input [1]: [i_item_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#234]

(151) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#19]
Join condition: None

(152) Project [codegen id : 57]
Output [7]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14]
Input [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_sk#19]

(153) ReusedExchange [Reuses operator id: 129]
Output [2]: [c_customer_sk#23, c_birth_year#27]

(154) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#23]
Join condition: None

(155) Project [codegen id : 57]
Output [7]: [cast(cs_quantity#4 as decimal(12,2)) AS agg1#37, cast(cs_list_price#5 as decimal(12,2)) AS agg2#38, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#39, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#40, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#41, cast(c_birth_year#27 as decimal(12,2)) AS agg6#42, cast(cd_dep_count#14 as decimal(12,2)) AS agg7#43]
Input [9]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_customer_sk#23, c_birth_year#27]

(156) HashAggregate [codegen id : 57]
Input [7]: [agg1#37, agg2#38, agg3#39, agg4#40, agg5#41, agg6#42, agg7#43]
Keys: []
Functions [7]: [partial_avg(agg1#37), partial_avg(agg2#38), partial_avg(agg3#39), partial_avg(agg4#40), partial_avg(agg5#41), partial_avg(agg6#42), partial_avg(agg7#43)]
Aggregate Attributes [14]: [sum#235, count#236, sum#237, count#238, sum#239, count#240, sum#241, count#242, sum#243, count#244, sum#245, count#246, sum#247, count#248]
Results [14]: [sum#249, count#250, sum#251, count#252, sum#253, count#254, sum#255, count#256, sum#257, count#258, sum#259, count#260, sum#261, count#262]

(157) Exchange
Input [14]: [sum#249, count#250, sum#251, count#252, sum#253, count#254, sum#255, count#256, sum#257, count#258, sum#259, count#260, sum#261, count#262]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#263]

(158) HashAggregate [codegen id : 58]
Input [14]: [sum#249, count#250, sum#251, count#252, sum#253, count#254, sum#255, count#256, sum#257, count#258, sum#259, count#260, sum#261, count#262]
Keys: []
Functions [7]: [avg(agg1#37), avg(agg2#38), avg(agg3#39), avg(agg4#40), avg(agg5#41), avg(agg6#42), avg(agg7#43)]
Aggregate Attributes [7]: [avg(agg1#37)#264, avg(agg2#38)#265, avg(agg3#39)#266, avg(agg4#40)#267, avg(agg5#41)#268, avg(agg6#42)#269, avg(agg7#43)#270]
Results [11]: [null AS i_item_id#271, null AS ca_country#272, null AS ca_state#273, null AS county#274, avg(agg1#37)#264 AS agg1#275, avg(agg2#38)#265 AS agg2#276, avg(agg3#39)#266 AS agg3#277, avg(agg4#40)#267 AS agg4#278, avg(agg5#41)#268 AS agg5#279, avg(agg6#42)#269 AS agg6#280, avg(agg7#43)#270 AS agg7#281]

(159) Union

(160) TakeOrderedAndProject
Input [11]: [i_item_id#20, ca_country#34, ca_state#33, ca_county#32, agg1#80, agg2#81, agg3#82, agg4#83, agg5#84, agg6#85, agg7#86]
Arguments: 100, [ca_country#34 ASC NULLS FIRST, ca_state#33 ASC NULLS FIRST, ca_county#32 ASC NULLS FIRST, i_item_id#20 ASC NULLS FIRST], [i_item_id#20, ca_country#34, ca_state#33, ca_county#32, agg1#80, agg2#81, agg3#82, agg4#83, agg5#84, agg6#85, agg7#86]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10
ReusedExchange (161)


(161) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#16]

Subquery:2 Hosting operator id = 103 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10

Subquery:3 Hosting operator id = 138 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10


