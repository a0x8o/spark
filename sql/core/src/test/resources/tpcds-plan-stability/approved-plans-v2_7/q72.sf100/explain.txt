== Physical Plan ==
TakeOrderedAndProject (79)
+- * HashAggregate (78)
   +- Exchange (77)
      +- * HashAggregate (76)
         +- * Project (75)
            +- SortMergeJoin LeftOuter (74)
               :- * Sort (68)
               :  +- Exchange (67)
               :     +- * Project (66)
               :        +- * BroadcastHashJoin LeftOuter BuildRight (65)
               :           :- * Project (60)
               :           :  +- * SortMergeJoin Inner (59)
               :           :     :- * Sort (47)
               :           :     :  +- Exchange (46)
               :           :     :     +- * Project (45)
               :           :     :        +- * BroadcastHashJoin Inner BuildRight (44)
               :           :     :           :- * Project (32)
               :           :     :           :  +- * SortMergeJoin Inner (31)
               :           :     :           :     :- * Sort (25)
               :           :     :           :     :  +- Exchange (24)
               :           :     :           :     :     +- * Project (23)
               :           :     :           :     :        +- * BroadcastHashJoin Inner BuildRight (22)
               :           :     :           :     :           :- * Project (17)
               :           :     :           :     :           :  +- * BroadcastHashJoin Inner BuildRight (16)
               :           :     :           :     :           :     :- * Project (10)
               :           :     :           :     :           :     :  +- * BroadcastHashJoin Inner BuildLeft (9)
               :           :     :           :     :           :     :     :- BroadcastExchange (5)
               :           :     :           :     :           :     :     :  +- * Project (4)
               :           :     :           :     :           :     :     :     +- * Filter (3)
               :           :     :           :     :           :     :     :        +- * ColumnarToRow (2)
               :           :     :           :     :           :     :     :           +- Scan parquet default.household_demographics (1)
               :           :     :           :     :           :     :     +- * Filter (8)
               :           :     :           :     :           :     :        +- * ColumnarToRow (7)
               :           :     :           :     :           :     :           +- Scan parquet default.catalog_sales (6)
               :           :     :           :     :           :     +- BroadcastExchange (15)
               :           :     :           :     :           :        +- * Project (14)
               :           :     :           :     :           :           +- * Filter (13)
               :           :     :           :     :           :              +- * ColumnarToRow (12)
               :           :     :           :     :           :                 +- Scan parquet default.customer_demographics (11)
               :           :     :           :     :           +- BroadcastExchange (21)
               :           :     :           :     :              +- * Filter (20)
               :           :     :           :     :                 +- * ColumnarToRow (19)
               :           :     :           :     :                    +- Scan parquet default.date_dim (18)
               :           :     :           :     +- * Sort (30)
               :           :     :           :        +- Exchange (29)
               :           :     :           :           +- * Filter (28)
               :           :     :           :              +- * ColumnarToRow (27)
               :           :     :           :                 +- Scan parquet default.item (26)
               :           :     :           +- BroadcastExchange (43)
               :           :     :              +- * Project (42)
               :           :     :                 +- * BroadcastHashJoin Inner BuildRight (41)
               :           :     :                    :- * Filter (35)
               :           :     :                    :  +- * ColumnarToRow (34)
               :           :     :                    :     +- Scan parquet default.date_dim (33)
               :           :     :                    +- BroadcastExchange (40)
               :           :     :                       +- * Project (39)
               :           :     :                          +- * Filter (38)
               :           :     :                             +- * ColumnarToRow (37)
               :           :     :                                +- Scan parquet default.date_dim (36)
               :           :     +- * Sort (58)
               :           :        +- Exchange (57)
               :           :           +- * Project (56)
               :           :              +- * BroadcastHashJoin Inner BuildLeft (55)
               :           :                 :- BroadcastExchange (51)
               :           :                 :  +- * Filter (50)
               :           :                 :     +- * ColumnarToRow (49)
               :           :                 :        +- Scan parquet default.warehouse (48)
               :           :                 +- * Filter (54)
               :           :                    +- * ColumnarToRow (53)
               :           :                       +- Scan parquet default.inventory (52)
               :           +- BroadcastExchange (64)
               :              +- * Filter (63)
               :                 +- * ColumnarToRow (62)
               :                    +- Scan parquet default.promotion (61)
               +- * Sort (73)
                  +- Exchange (72)
                     +- * Filter (71)
                        +- * ColumnarToRow (70)
                           +- Scan parquet default.catalog_returns (69)


(1) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#1, hd_buy_potential#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [hd_demo_sk#1, hd_buy_potential#2]

(3) Filter [codegen id : 1]
Input [2]: [hd_demo_sk#1, hd_buy_potential#2]
Condition : ((isnotnull(hd_buy_potential#2) AND (hd_buy_potential#2 = 1001-5000)) AND isnotnull(hd_demo_sk#1))

(4) Project [codegen id : 1]
Output [1]: [hd_demo_sk#1]
Input [2]: [hd_demo_sk#1, hd_buy_potential#2]

(5) BroadcastExchange
Input [1]: [hd_demo_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#3]

(6) Scan parquet default.catalog_sales
Output [8]: [cs_sold_date_sk#4, cs_ship_date_sk#5, cs_bill_cdemo_sk#6, cs_bill_hdemo_sk#7, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hdemo_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_ship_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int>

(7) ColumnarToRow
Input [8]: [cs_sold_date_sk#4, cs_ship_date_sk#5, cs_bill_cdemo_sk#6, cs_bill_hdemo_sk#7, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11]

(8) Filter
Input [8]: [cs_sold_date_sk#4, cs_ship_date_sk#5, cs_bill_cdemo_sk#6, cs_bill_hdemo_sk#7, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11]
Condition : (((((isnotnull(cs_quantity#11) AND isnotnull(cs_item_sk#8)) AND isnotnull(cs_bill_cdemo_sk#6)) AND isnotnull(cs_bill_hdemo_sk#7)) AND isnotnull(cs_sold_date_sk#4)) AND isnotnull(cs_ship_date_sk#5))

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [hd_demo_sk#1]
Right keys [1]: [cs_bill_hdemo_sk#7]
Join condition: None

(10) Project [codegen id : 4]
Output [7]: [cs_sold_date_sk#4, cs_ship_date_sk#5, cs_bill_cdemo_sk#6, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11]
Input [9]: [hd_demo_sk#1, cs_sold_date_sk#4, cs_ship_date_sk#5, cs_bill_cdemo_sk#6, cs_bill_hdemo_sk#7, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11]

(11) Scan parquet default.customer_demographics
Output [2]: [cd_demo_sk#12, cd_marital_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [cd_demo_sk#12, cd_marital_status#13]

(13) Filter [codegen id : 2]
Input [2]: [cd_demo_sk#12, cd_marital_status#13]
Condition : ((isnotnull(cd_marital_status#13) AND (cd_marital_status#13 = M)) AND isnotnull(cd_demo_sk#12))

(14) Project [codegen id : 2]
Output [1]: [cd_demo_sk#12]
Input [2]: [cd_demo_sk#12, cd_marital_status#13]

(15) BroadcastExchange
Input [1]: [cd_demo_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#6]
Right keys [1]: [cd_demo_sk#12]
Join condition: None

(17) Project [codegen id : 4]
Output [6]: [cs_sold_date_sk#4, cs_ship_date_sk#5, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11]
Input [8]: [cs_sold_date_sk#4, cs_ship_date_sk#5, cs_bill_cdemo_sk#6, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, cd_demo_sk#12]

(18) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_date#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#15, d_date#16]

(20) Filter [codegen id : 3]
Input [2]: [d_date_sk#15, d_date#16]
Condition : (isnotnull(d_date#16) AND isnotnull(d_date_sk#15))

(21) BroadcastExchange
Input [2]: [d_date_sk#15, d_date#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_ship_date_sk#5]
Right keys [1]: [d_date_sk#15]
Join condition: None

(23) Project [codegen id : 4]
Output [6]: [cs_sold_date_sk#4, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, d_date#16]
Input [8]: [cs_sold_date_sk#4, cs_ship_date_sk#5, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, d_date_sk#15, d_date#16]

(24) Exchange
Input [6]: [cs_sold_date_sk#4, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, d_date#16]
Arguments: hashpartitioning(cs_item_sk#8, 5), true, [id=#18]

(25) Sort [codegen id : 5]
Input [6]: [cs_sold_date_sk#4, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, d_date#16]
Arguments: [cs_item_sk#8 ASC NULLS FIRST], false, 0

(26) Scan parquet default.item
Output [2]: [i_item_sk#19, i_item_desc#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#19, i_item_desc#20]

(28) Filter [codegen id : 6]
Input [2]: [i_item_sk#19, i_item_desc#20]
Condition : isnotnull(i_item_sk#19)

(29) Exchange
Input [2]: [i_item_sk#19, i_item_desc#20]
Arguments: hashpartitioning(i_item_sk#19, 5), true, [id=#21]

(30) Sort [codegen id : 7]
Input [2]: [i_item_sk#19, i_item_desc#20]
Arguments: [i_item_sk#19 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#8]
Right keys [1]: [i_item_sk#19]
Join condition: None

(32) Project [codegen id : 10]
Output [7]: [cs_sold_date_sk#4, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, d_date#16, i_item_desc#20]
Input [8]: [cs_sold_date_sk#4, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, d_date#16, i_item_sk#19, i_item_desc#20]

(33) Scan parquet default.date_dim
Output [2]: [d_date_sk#22, d_week_seq#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(34) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#22, d_week_seq#23]

(35) Filter [codegen id : 9]
Input [2]: [d_date_sk#22, d_week_seq#23]
Condition : (isnotnull(d_week_seq#23) AND isnotnull(d_date_sk#22))

(36) Scan parquet default.date_dim
Output [4]: [d_date_sk#24, d_date#25, d_week_seq#26, d_year#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>

(37) ColumnarToRow [codegen id : 8]
Input [4]: [d_date_sk#24, d_date#25, d_week_seq#26, d_year#27]

(38) Filter [codegen id : 8]
Input [4]: [d_date_sk#24, d_date#25, d_week_seq#26, d_year#27]
Condition : ((((isnotnull(d_year#27) AND (d_year#27 = 2001)) AND isnotnull(d_date_sk#24)) AND isnotnull(d_week_seq#26)) AND isnotnull(d_date#25))

(39) Project [codegen id : 8]
Output [3]: [d_date_sk#24, d_date#25, d_week_seq#26]
Input [4]: [d_date_sk#24, d_date#25, d_week_seq#26, d_year#27]

(40) BroadcastExchange
Input [3]: [d_date_sk#24, d_date#25, d_week_seq#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#28]

(41) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [d_week_seq#23]
Right keys [1]: [d_week_seq#26]
Join condition: None

(42) Project [codegen id : 9]
Output [4]: [d_date_sk#22, d_date_sk#24, d_date#25, d_week_seq#26]
Input [5]: [d_date_sk#22, d_week_seq#23, d_date_sk#24, d_date#25, d_week_seq#26]

(43) BroadcastExchange
Input [4]: [d_date_sk#22, d_date_sk#24, d_date#25, d_week_seq#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#29]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#4]
Right keys [1]: [d_date_sk#24]
Join condition: (d_date#16 > d_date#25 + 5 days)

(45) Project [codegen id : 10]
Output [7]: [cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, i_item_desc#20, d_date_sk#22, d_week_seq#26]
Input [11]: [cs_sold_date_sk#4, cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, d_date#16, i_item_desc#20, d_date_sk#22, d_date_sk#24, d_date#25, d_week_seq#26]

(46) Exchange
Input [7]: [cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, i_item_desc#20, d_date_sk#22, d_week_seq#26]
Arguments: hashpartitioning(cs_item_sk#8, d_date_sk#22, 5), true, [id=#30]

(47) Sort [codegen id : 11]
Input [7]: [cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, i_item_desc#20, d_date_sk#22, d_week_seq#26]
Arguments: [cs_item_sk#8 ASC NULLS FIRST, d_date_sk#22 ASC NULLS FIRST], false, 0

(48) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#31, w_warehouse_name#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(49) ColumnarToRow [codegen id : 12]
Input [2]: [w_warehouse_sk#31, w_warehouse_name#32]

(50) Filter [codegen id : 12]
Input [2]: [w_warehouse_sk#31, w_warehouse_name#32]
Condition : isnotnull(w_warehouse_sk#31)

(51) BroadcastExchange
Input [2]: [w_warehouse_sk#31, w_warehouse_name#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33]

(52) Scan parquet default.inventory
Output [4]: [inv_date_sk#34, inv_item_sk#35, inv_warehouse_sk#36, inv_quantity_on_hand#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(53) ColumnarToRow
Input [4]: [inv_date_sk#34, inv_item_sk#35, inv_warehouse_sk#36, inv_quantity_on_hand#37]

(54) Filter
Input [4]: [inv_date_sk#34, inv_item_sk#35, inv_warehouse_sk#36, inv_quantity_on_hand#37]
Condition : (((isnotnull(inv_quantity_on_hand#37) AND isnotnull(inv_item_sk#35)) AND isnotnull(inv_warehouse_sk#36)) AND isnotnull(inv_date_sk#34))

(55) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [w_warehouse_sk#31]
Right keys [1]: [inv_warehouse_sk#36]
Join condition: None

(56) Project [codegen id : 13]
Output [4]: [w_warehouse_name#32, inv_date_sk#34, inv_item_sk#35, inv_quantity_on_hand#37]
Input [6]: [w_warehouse_sk#31, w_warehouse_name#32, inv_date_sk#34, inv_item_sk#35, inv_warehouse_sk#36, inv_quantity_on_hand#37]

(57) Exchange
Input [4]: [w_warehouse_name#32, inv_date_sk#34, inv_item_sk#35, inv_quantity_on_hand#37]
Arguments: hashpartitioning(inv_item_sk#35, inv_date_sk#34, 5), true, [id=#38]

(58) Sort [codegen id : 14]
Input [4]: [w_warehouse_name#32, inv_date_sk#34, inv_item_sk#35, inv_quantity_on_hand#37]
Arguments: [inv_item_sk#35 ASC NULLS FIRST, inv_date_sk#34 ASC NULLS FIRST], false, 0

(59) SortMergeJoin [codegen id : 16]
Left keys [2]: [cs_item_sk#8, d_date_sk#22]
Right keys [2]: [inv_item_sk#35, inv_date_sk#34]
Join condition: (inv_quantity_on_hand#37 < cs_quantity#11)

(60) Project [codegen id : 16]
Output [6]: [cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, w_warehouse_name#32, i_item_desc#20, d_week_seq#26]
Input [11]: [cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, cs_quantity#11, i_item_desc#20, d_date_sk#22, d_week_seq#26, w_warehouse_name#32, inv_date_sk#34, inv_item_sk#35, inv_quantity_on_hand#37]

(61) Scan parquet default.promotion
Output [1]: [p_promo_sk#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(62) ColumnarToRow [codegen id : 15]
Input [1]: [p_promo_sk#39]

(63) Filter [codegen id : 15]
Input [1]: [p_promo_sk#39]
Condition : isnotnull(p_promo_sk#39)

(64) BroadcastExchange
Input [1]: [p_promo_sk#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#40]

(65) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [cs_promo_sk#9]
Right keys [1]: [p_promo_sk#39]
Join condition: None

(66) Project [codegen id : 16]
Output [5]: [cs_item_sk#8, cs_order_number#10, w_warehouse_name#32, i_item_desc#20, d_week_seq#26]
Input [7]: [cs_item_sk#8, cs_promo_sk#9, cs_order_number#10, w_warehouse_name#32, i_item_desc#20, d_week_seq#26, p_promo_sk#39]

(67) Exchange
Input [5]: [cs_item_sk#8, cs_order_number#10, w_warehouse_name#32, i_item_desc#20, d_week_seq#26]
Arguments: hashpartitioning(cs_item_sk#8, cs_order_number#10, 5), true, [id=#41]

(68) Sort [codegen id : 17]
Input [5]: [cs_item_sk#8, cs_order_number#10, w_warehouse_name#32, i_item_desc#20, d_week_seq#26]
Arguments: [cs_item_sk#8 ASC NULLS FIRST, cs_order_number#10 ASC NULLS FIRST], false, 0

(69) Scan parquet default.catalog_returns
Output [2]: [cr_item_sk#42, cr_order_number#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(70) ColumnarToRow [codegen id : 18]
Input [2]: [cr_item_sk#42, cr_order_number#43]

(71) Filter [codegen id : 18]
Input [2]: [cr_item_sk#42, cr_order_number#43]
Condition : (isnotnull(cr_item_sk#42) AND isnotnull(cr_order_number#43))

(72) Exchange
Input [2]: [cr_item_sk#42, cr_order_number#43]
Arguments: hashpartitioning(cr_item_sk#42, cr_order_number#43, 5), true, [id=#44]

(73) Sort [codegen id : 19]
Input [2]: [cr_item_sk#42, cr_order_number#43]
Arguments: [cr_item_sk#42 ASC NULLS FIRST, cr_order_number#43 ASC NULLS FIRST], false, 0

(74) SortMergeJoin
Left keys [2]: [cs_item_sk#8, cs_order_number#10]
Right keys [2]: [cr_item_sk#42, cr_order_number#43]
Join condition: None

(75) Project [codegen id : 20]
Output [3]: [w_warehouse_name#32, i_item_desc#20, d_week_seq#26]
Input [7]: [cs_item_sk#8, cs_order_number#10, w_warehouse_name#32, i_item_desc#20, d_week_seq#26, cr_item_sk#42, cr_order_number#43]

(76) HashAggregate [codegen id : 20]
Input [3]: [w_warehouse_name#32, i_item_desc#20, d_week_seq#26]
Keys [3]: [i_item_desc#20, w_warehouse_name#32, d_week_seq#26]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#45]
Results [4]: [i_item_desc#20, w_warehouse_name#32, d_week_seq#26, count#46]

(77) Exchange
Input [4]: [i_item_desc#20, w_warehouse_name#32, d_week_seq#26, count#46]
Arguments: hashpartitioning(i_item_desc#20, w_warehouse_name#32, d_week_seq#26, 5), true, [id=#47]

(78) HashAggregate [codegen id : 21]
Input [4]: [i_item_desc#20, w_warehouse_name#32, d_week_seq#26, count#46]
Keys [3]: [i_item_desc#20, w_warehouse_name#32, d_week_seq#26]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#48]
Results [6]: [i_item_desc#20, w_warehouse_name#32, d_week_seq#26, count(1)#48 AS no_promo#49, count(1)#48 AS promo#50, count(1)#48 AS total_cnt#51]

(79) TakeOrderedAndProject
Input [6]: [i_item_desc#20, w_warehouse_name#32, d_week_seq#26, no_promo#49, promo#50, total_cnt#51]
Arguments: 100, [total_cnt#51 DESC NULLS LAST, i_item_desc#20 ASC NULLS FIRST, w_warehouse_name#32 ASC NULLS FIRST, d_week_seq#26 ASC NULLS FIRST], [i_item_desc#20, w_warehouse_name#32, d_week_seq#26, no_promo#49, promo#50, total_cnt#51]

