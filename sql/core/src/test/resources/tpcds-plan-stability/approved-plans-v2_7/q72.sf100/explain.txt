== Physical Plan ==
TakeOrderedAndProject (70)
+- * HashAggregate (69)
   +- Exchange (68)
      +- * HashAggregate (67)
         +- * Project (66)
            +- * SortMergeJoin LeftOuter (65)
               :- * Sort (58)
               :  +- Exchange (57)
               :     +- * Project (56)
               :        +- * BroadcastHashJoin LeftOuter BuildRight (55)
               :           :- * Project (50)
               :           :  +- * SortMergeJoin Inner (49)
               :           :     :- * Sort (37)
               :           :     :  +- Exchange (36)
               :           :     :     +- * Project (35)
               :           :     :        +- * BroadcastHashJoin Inner BuildRight (34)
               :           :     :           :- * Project (32)
               :           :     :           :  +- * SortMergeJoin Inner (31)
               :           :     :           :     :- * Sort (25)
               :           :     :           :     :  +- Exchange (24)
               :           :     :           :     :     +- * Project (23)
               :           :     :           :     :        +- * BroadcastHashJoin Inner BuildRight (22)
               :           :     :           :     :           :- * Project (17)
               :           :     :           :     :           :  +- * BroadcastHashJoin Inner BuildRight (16)
               :           :     :           :     :           :     :- * Project (10)
               :           :     :           :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :     :           :     :           :     :     :- * Filter (3)
               :           :     :           :     :           :     :     :  +- * ColumnarToRow (2)
               :           :     :           :     :           :     :     :     +- Scan parquet default.catalog_sales (1)
               :           :     :           :     :           :     :     +- BroadcastExchange (8)
               :           :     :           :     :           :     :        +- * Project (7)
               :           :     :           :     :           :     :           +- * Filter (6)
               :           :     :           :     :           :     :              +- * ColumnarToRow (5)
               :           :     :           :     :           :     :                 +- Scan parquet default.household_demographics (4)
               :           :     :           :     :           :     +- BroadcastExchange (15)
               :           :     :           :     :           :        +- * Project (14)
               :           :     :           :     :           :           +- * Filter (13)
               :           :     :           :     :           :              +- * ColumnarToRow (12)
               :           :     :           :     :           :                 +- Scan parquet default.customer_demographics (11)
               :           :     :           :     :           +- BroadcastExchange (21)
               :           :     :           :     :              +- * Filter (20)
               :           :     :           :     :                 +- * ColumnarToRow (19)
               :           :     :           :     :                    +- Scan parquet default.date_dim (18)
               :           :     :           :     +- * Sort (30)
               :           :     :           :        +- Exchange (29)
               :           :     :           :           +- * Filter (28)
               :           :     :           :              +- * ColumnarToRow (27)
               :           :     :           :                 +- Scan parquet default.item (26)
               :           :     :           +- ReusedExchange (33)
               :           :     +- * Sort (48)
               :           :        +- Exchange (47)
               :           :           +- * Project (46)
               :           :              +- * BroadcastHashJoin Inner BuildRight (45)
               :           :                 :- * Filter (40)
               :           :                 :  +- * ColumnarToRow (39)
               :           :                 :     +- Scan parquet default.inventory (38)
               :           :                 +- BroadcastExchange (44)
               :           :                    +- * Filter (43)
               :           :                       +- * ColumnarToRow (42)
               :           :                          +- Scan parquet default.warehouse (41)
               :           +- BroadcastExchange (54)
               :              +- * Filter (53)
               :                 +- * ColumnarToRow (52)
               :                    +- Scan parquet default.promotion (51)
               +- * Sort (64)
                  +- Exchange (63)
                     +- * Project (62)
                        +- * Filter (61)
                           +- * ColumnarToRow (60)
                              +- Scan parquet default.catalog_returns (59)


(1) Scan parquet default.catalog_sales
Output [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#8), dynamicpruningexpression(cs_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hdemo_sk), IsNotNull(cs_ship_date_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int>

(2) ColumnarToRow [codegen id : 4]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]

(3) Filter [codegen id : 4]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Condition : ((((isnotnull(cs_quantity#7) AND isnotnull(cs_item_sk#4)) AND isnotnull(cs_bill_cdemo_sk#2)) AND isnotnull(cs_bill_hdemo_sk#3)) AND isnotnull(cs_ship_date_sk#1))

(4) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#10, hd_buy_potential#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000      ), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [hd_demo_sk#10, hd_buy_potential#11]

(6) Filter [codegen id : 1]
Input [2]: [hd_demo_sk#10, hd_buy_potential#11]
Condition : ((isnotnull(hd_buy_potential#11) AND (hd_buy_potential#11 = 1001-5000      )) AND isnotnull(hd_demo_sk#10))

(7) Project [codegen id : 1]
Output [1]: [hd_demo_sk#10]
Input [2]: [hd_demo_sk#10, hd_buy_potential#11]

(8) BroadcastExchange
Input [1]: [hd_demo_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#10]
Join condition: None

(10) Project [codegen id : 4]
Output [7]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Input [9]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, hd_demo_sk#10]

(11) Scan parquet default.customer_demographics
Output [2]: [cd_demo_sk#13, cd_marital_status#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [cd_demo_sk#13, cd_marital_status#14]

(13) Filter [codegen id : 2]
Input [2]: [cd_demo_sk#13, cd_marital_status#14]
Condition : ((isnotnull(cd_marital_status#14) AND (cd_marital_status#14 = M)) AND isnotnull(cd_demo_sk#13))

(14) Project [codegen id : 2]
Output [1]: [cd_demo_sk#13]
Input [2]: [cd_demo_sk#13, cd_marital_status#14]

(15) BroadcastExchange
Input [1]: [cd_demo_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join condition: None

(17) Project [codegen id : 4]
Output [6]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, cd_demo_sk#13]

(18) Scan parquet default.date_dim
Output [2]: [d_date_sk#16, d_date#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#16, d_date#17]

(20) Filter [codegen id : 3]
Input [2]: [d_date_sk#16, d_date#17]
Condition : (isnotnull(d_date#17) AND isnotnull(d_date_sk#16))

(21) BroadcastExchange
Input [2]: [d_date_sk#16, d_date#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_ship_date_sk#1]
Right keys [1]: [d_date_sk#16]
Join condition: None

(23) Project [codegen id : 4]
Output [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17]
Input [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date_sk#16, d_date#17]

(24) Exchange
Input [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17]
Arguments: hashpartitioning(cs_item_sk#4, 5), ENSURE_REQUIREMENTS, [id=#19]

(25) Sort [codegen id : 5]
Input [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17]
Arguments: [cs_item_sk#4 ASC NULLS FIRST], false, 0

(26) Scan parquet default.item
Output [2]: [i_item_sk#20, i_item_desc#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#20, i_item_desc#21]

(28) Filter [codegen id : 6]
Input [2]: [i_item_sk#20, i_item_desc#21]
Condition : isnotnull(i_item_sk#20)

(29) Exchange
Input [2]: [i_item_sk#20, i_item_desc#21]
Arguments: hashpartitioning(i_item_sk#20, 5), ENSURE_REQUIREMENTS, [id=#22]

(30) Sort [codegen id : 7]
Input [2]: [i_item_sk#20, i_item_desc#21]
Arguments: [i_item_sk#20 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#20]
Join condition: None

(32) Project [codegen id : 10]
Output [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17, i_item_desc#21]
Input [8]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17, i_item_sk#20, i_item_desc#21]

(33) ReusedExchange [Reuses operator id: 81]
Output [4]: [d_date_sk#23, d_date#24, d_week_seq#25, d_date_sk#26]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#8]
Right keys [1]: [d_date_sk#23]
Join condition: (d_date#17 > date_add(d_date#24, 5))

(35) Project [codegen id : 10]
Output [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#21, d_week_seq#25, d_date_sk#26]
Input [11]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17, i_item_desc#21, d_date_sk#23, d_date#24, d_week_seq#25, d_date_sk#26]

(36) Exchange
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#21, d_week_seq#25, d_date_sk#26]
Arguments: hashpartitioning(cs_item_sk#4, d_date_sk#26, 5), ENSURE_REQUIREMENTS, [id=#27]

(37) Sort [codegen id : 11]
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#21, d_week_seq#25, d_date_sk#26]
Arguments: [cs_item_sk#4 ASC NULLS FIRST, d_date_sk#26 ASC NULLS FIRST], false, 0

(38) Scan parquet default.inventory
Output [4]: [inv_item_sk#28, inv_warehouse_sk#29, inv_quantity_on_hand#30, inv_date_sk#31]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#31), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(39) ColumnarToRow [codegen id : 13]
Input [4]: [inv_item_sk#28, inv_warehouse_sk#29, inv_quantity_on_hand#30, inv_date_sk#31]

(40) Filter [codegen id : 13]
Input [4]: [inv_item_sk#28, inv_warehouse_sk#29, inv_quantity_on_hand#30, inv_date_sk#31]
Condition : ((isnotnull(inv_quantity_on_hand#30) AND isnotnull(inv_item_sk#28)) AND isnotnull(inv_warehouse_sk#29))

(41) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#32, w_warehouse_name#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(42) ColumnarToRow [codegen id : 12]
Input [2]: [w_warehouse_sk#32, w_warehouse_name#33]

(43) Filter [codegen id : 12]
Input [2]: [w_warehouse_sk#32, w_warehouse_name#33]
Condition : isnotnull(w_warehouse_sk#32)

(44) BroadcastExchange
Input [2]: [w_warehouse_sk#32, w_warehouse_name#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34]

(45) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [inv_warehouse_sk#29]
Right keys [1]: [w_warehouse_sk#32]
Join condition: None

(46) Project [codegen id : 13]
Output [4]: [inv_item_sk#28, inv_quantity_on_hand#30, inv_date_sk#31, w_warehouse_name#33]
Input [6]: [inv_item_sk#28, inv_warehouse_sk#29, inv_quantity_on_hand#30, inv_date_sk#31, w_warehouse_sk#32, w_warehouse_name#33]

(47) Exchange
Input [4]: [inv_item_sk#28, inv_quantity_on_hand#30, inv_date_sk#31, w_warehouse_name#33]
Arguments: hashpartitioning(inv_item_sk#28, inv_date_sk#31, 5), ENSURE_REQUIREMENTS, [id=#35]

(48) Sort [codegen id : 14]
Input [4]: [inv_item_sk#28, inv_quantity_on_hand#30, inv_date_sk#31, w_warehouse_name#33]
Arguments: [inv_item_sk#28 ASC NULLS FIRST, inv_date_sk#31 ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 16]
Left keys [2]: [cs_item_sk#4, d_date_sk#26]
Right keys [2]: [inv_item_sk#28, inv_date_sk#31]
Join condition: (inv_quantity_on_hand#30 < cs_quantity#7)

(50) Project [codegen id : 16]
Output [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#33, i_item_desc#21, d_week_seq#25]
Input [11]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#21, d_week_seq#25, d_date_sk#26, inv_item_sk#28, inv_quantity_on_hand#30, inv_date_sk#31, w_warehouse_name#33]

(51) Scan parquet default.promotion
Output [1]: [p_promo_sk#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(52) ColumnarToRow [codegen id : 15]
Input [1]: [p_promo_sk#36]

(53) Filter [codegen id : 15]
Input [1]: [p_promo_sk#36]
Condition : isnotnull(p_promo_sk#36)

(54) BroadcastExchange
Input [1]: [p_promo_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#37]

(55) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [cs_promo_sk#5]
Right keys [1]: [p_promo_sk#36]
Join condition: None

(56) Project [codegen id : 16]
Output [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#33, i_item_desc#21, d_week_seq#25]
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#33, i_item_desc#21, d_week_seq#25, p_promo_sk#36]

(57) Exchange
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#33, i_item_desc#21, d_week_seq#25]
Arguments: hashpartitioning(cs_item_sk#4, cs_order_number#6, 5), ENSURE_REQUIREMENTS, [id=#38]

(58) Sort [codegen id : 17]
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#33, i_item_desc#21, d_week_seq#25]
Arguments: [cs_item_sk#4 ASC NULLS FIRST, cs_order_number#6 ASC NULLS FIRST], false, 0

(59) Scan parquet default.catalog_returns
Output [3]: [cr_item_sk#39, cr_order_number#40, cr_returned_date_sk#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(60) ColumnarToRow [codegen id : 18]
Input [3]: [cr_item_sk#39, cr_order_number#40, cr_returned_date_sk#41]

(61) Filter [codegen id : 18]
Input [3]: [cr_item_sk#39, cr_order_number#40, cr_returned_date_sk#41]
Condition : (isnotnull(cr_item_sk#39) AND isnotnull(cr_order_number#40))

(62) Project [codegen id : 18]
Output [2]: [cr_item_sk#39, cr_order_number#40]
Input [3]: [cr_item_sk#39, cr_order_number#40, cr_returned_date_sk#41]

(63) Exchange
Input [2]: [cr_item_sk#39, cr_order_number#40]
Arguments: hashpartitioning(cr_item_sk#39, cr_order_number#40, 5), ENSURE_REQUIREMENTS, [id=#42]

(64) Sort [codegen id : 19]
Input [2]: [cr_item_sk#39, cr_order_number#40]
Arguments: [cr_item_sk#39 ASC NULLS FIRST, cr_order_number#40 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 20]
Left keys [2]: [cs_item_sk#4, cs_order_number#6]
Right keys [2]: [cr_item_sk#39, cr_order_number#40]
Join condition: None

(66) Project [codegen id : 20]
Output [3]: [w_warehouse_name#33, i_item_desc#21, d_week_seq#25]
Input [7]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#33, i_item_desc#21, d_week_seq#25, cr_item_sk#39, cr_order_number#40]

(67) HashAggregate [codegen id : 20]
Input [3]: [w_warehouse_name#33, i_item_desc#21, d_week_seq#25]
Keys [3]: [i_item_desc#21, w_warehouse_name#33, d_week_seq#25]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#43]
Results [4]: [i_item_desc#21, w_warehouse_name#33, d_week_seq#25, count#44]

(68) Exchange
Input [4]: [i_item_desc#21, w_warehouse_name#33, d_week_seq#25, count#44]
Arguments: hashpartitioning(i_item_desc#21, w_warehouse_name#33, d_week_seq#25, 5), ENSURE_REQUIREMENTS, [id=#45]

(69) HashAggregate [codegen id : 21]
Input [4]: [i_item_desc#21, w_warehouse_name#33, d_week_seq#25, count#44]
Keys [3]: [i_item_desc#21, w_warehouse_name#33, d_week_seq#25]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#46]
Results [6]: [i_item_desc#21, w_warehouse_name#33, d_week_seq#25, count(1)#46 AS no_promo#47, count(1)#46 AS promo#48, count(1)#46 AS total_cnt#49]

(70) TakeOrderedAndProject
Input [6]: [i_item_desc#21, w_warehouse_name#33, d_week_seq#25, no_promo#47, promo#48, total_cnt#49]
Arguments: 100, [total_cnt#49 DESC NULLS LAST, i_item_desc#21 ASC NULLS FIRST, w_warehouse_name#33 ASC NULLS FIRST, d_week_seq#25 ASC NULLS FIRST], [i_item_desc#21, w_warehouse_name#33, d_week_seq#25, no_promo#47, promo#48, total_cnt#49]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (81)
+- * Project (80)
   +- * BroadcastHashJoin Inner BuildLeft (79)
      :- BroadcastExchange (75)
      :  +- * Project (74)
      :     +- * Filter (73)
      :        +- * ColumnarToRow (72)
      :           +- Scan parquet default.date_dim (71)
      +- * Filter (78)
         +- * ColumnarToRow (77)
            +- Scan parquet default.date_dim (76)


(71) Scan parquet default.date_dim
Output [4]: [d_date_sk#23, d_date#24, d_week_seq#25, d_year#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>

(72) ColumnarToRow [codegen id : 1]
Input [4]: [d_date_sk#23, d_date#24, d_week_seq#25, d_year#50]

(73) Filter [codegen id : 1]
Input [4]: [d_date_sk#23, d_date#24, d_week_seq#25, d_year#50]
Condition : ((((isnotnull(d_year#50) AND (d_year#50 = 2001)) AND isnotnull(d_date_sk#23)) AND isnotnull(d_week_seq#25)) AND isnotnull(d_date#24))

(74) Project [codegen id : 1]
Output [3]: [d_date_sk#23, d_date#24, d_week_seq#25]
Input [4]: [d_date_sk#23, d_date#24, d_week_seq#25, d_year#50]

(75) BroadcastExchange
Input [3]: [d_date_sk#23, d_date#24, d_week_seq#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#51]

(76) Scan parquet default.date_dim
Output [2]: [d_date_sk#26, d_week_seq#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(77) ColumnarToRow
Input [2]: [d_date_sk#26, d_week_seq#52]

(78) Filter
Input [2]: [d_date_sk#26, d_week_seq#52]
Condition : (isnotnull(d_week_seq#52) AND isnotnull(d_date_sk#26))

(79) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_week_seq#25]
Right keys [1]: [d_week_seq#52]
Join condition: None

(80) Project [codegen id : 2]
Output [4]: [d_date_sk#23, d_date#24, d_week_seq#25, d_date_sk#26]
Input [5]: [d_date_sk#23, d_date#24, d_week_seq#25, d_date_sk#26, d_week_seq#52]

(81) BroadcastExchange
Input [4]: [d_date_sk#23, d_date#24, d_week_seq#25, d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#53]


