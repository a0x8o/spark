== Physical Plan ==
TakeOrderedAndProject (53)
+- * Project (52)
   +- * SortMergeJoin Inner (51)
      :- * Project (44)
      :  +- * SortMergeJoin Inner (43)
      :     :- * Sort (34)
      :     :  +- Exchange (33)
      :     :     +- * Filter (32)
      :     :        +- Window (31)
      :     :           +- * Sort (30)
      :     :              +- Exchange (29)
      :     :                 +- * Project (28)
      :     :                    +- Window (27)
      :     :                       +- * Sort (26)
      :     :                          +- Exchange (25)
      :     :                             +- * HashAggregate (24)
      :     :                                +- Exchange (23)
      :     :                                   +- * HashAggregate (22)
      :     :                                      +- * Project (21)
      :     :                                         +- * SortMergeJoin Inner (20)
      :     :                                            :- * Sort (14)
      :     :                                            :  +- Exchange (13)
      :     :                                            :     +- * Project (12)
      :     :                                            :        +- * BroadcastHashJoin Inner BuildRight (11)
      :     :                                            :           :- * Project (6)
      :     :                                            :           :  +- * BroadcastHashJoin Inner BuildRight (5)
      :     :                                            :           :     :- * Filter (3)
      :     :                                            :           :     :  +- * ColumnarToRow (2)
      :     :                                            :           :     :     +- Scan parquet default.catalog_sales (1)
      :     :                                            :           :     +- ReusedExchange (4)
      :     :                                            :           +- BroadcastExchange (10)
      :     :                                            :              +- * Filter (9)
      :     :                                            :                 +- * ColumnarToRow (8)
      :     :                                            :                    +- Scan parquet default.call_center (7)
      :     :                                            +- * Sort (19)
      :     :                                               +- Exchange (18)
      :     :                                                  +- * Filter (17)
      :     :                                                     +- * ColumnarToRow (16)
      :     :                                                        +- Scan parquet default.item (15)
      :     +- * Sort (42)
      :        +- Exchange (41)
      :           +- * Project (40)
      :              +- Window (39)
      :                 +- * Sort (38)
      :                    +- Exchange (37)
      :                       +- * HashAggregate (36)
      :                          +- ReusedExchange (35)
      +- * Sort (50)
         +- Exchange (49)
            +- * Project (48)
               +- Window (47)
                  +- * Sort (46)
                     +- ReusedExchange (45)


(1) Scan parquet default.catalog_sales
Output [4]: [cs_call_center_sk#1, cs_item_sk#2, cs_sales_price#3, cs_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#4), dynamicpruningexpression(cs_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [cs_call_center_sk#1, cs_item_sk#2, cs_sales_price#3, cs_sold_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [cs_call_center_sk#1, cs_item_sk#2, cs_sales_price#3, cs_sold_date_sk#4]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_call_center_sk#1))

(4) ReusedExchange [Reuses operator id: 57]
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Project [codegen id : 3]
Output [5]: [cs_call_center_sk#1, cs_item_sk#2, cs_sales_price#3, d_year#7, d_moy#8]
Input [7]: [cs_call_center_sk#1, cs_item_sk#2, cs_sales_price#3, cs_sold_date_sk#4, d_date_sk#6, d_year#7, d_moy#8]

(7) Scan parquet default.call_center
Output [2]: [cc_call_center_sk#9, cc_name#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)]
ReadSchema: struct<cc_call_center_sk:int,cc_name:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [cc_call_center_sk#9, cc_name#10]

(9) Filter [codegen id : 2]
Input [2]: [cc_call_center_sk#9, cc_name#10]
Condition : (isnotnull(cc_call_center_sk#9) AND isnotnull(cc_name#10))

(10) BroadcastExchange
Input [2]: [cc_call_center_sk#9, cc_name#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_call_center_sk#1]
Right keys [1]: [cc_call_center_sk#9]
Join condition: None

(12) Project [codegen id : 3]
Output [5]: [cs_item_sk#2, cs_sales_price#3, d_year#7, d_moy#8, cc_name#10]
Input [7]: [cs_call_center_sk#1, cs_item_sk#2, cs_sales_price#3, d_year#7, d_moy#8, cc_call_center_sk#9, cc_name#10]

(13) Exchange
Input [5]: [cs_item_sk#2, cs_sales_price#3, d_year#7, d_moy#8, cc_name#10]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#12]

(14) Sort [codegen id : 4]
Input [5]: [cs_item_sk#2, cs_sales_price#3, d_year#7, d_moy#8, cc_name#10]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(15) Scan parquet default.item
Output [3]: [i_item_sk#13, i_brand#14, i_category#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(16) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#13, i_brand#14, i_category#15]

(17) Filter [codegen id : 5]
Input [3]: [i_item_sk#13, i_brand#14, i_category#15]
Condition : ((isnotnull(i_item_sk#13) AND isnotnull(i_category#15)) AND isnotnull(i_brand#14))

(18) Exchange
Input [3]: [i_item_sk#13, i_brand#14, i_category#15]
Arguments: hashpartitioning(i_item_sk#13, 5), ENSURE_REQUIREMENTS, [id=#16]

(19) Sort [codegen id : 6]
Input [3]: [i_item_sk#13, i_brand#14, i_category#15]
Arguments: [i_item_sk#13 ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [i_item_sk#13]
Join condition: None

(21) Project [codegen id : 7]
Output [6]: [i_brand#14, i_category#15, cs_sales_price#3, d_year#7, d_moy#8, cc_name#10]
Input [8]: [cs_item_sk#2, cs_sales_price#3, d_year#7, d_moy#8, cc_name#10, i_item_sk#13, i_brand#14, i_category#15]

(22) HashAggregate [codegen id : 7]
Input [6]: [i_brand#14, i_category#15, cs_sales_price#3, d_year#7, d_moy#8, cc_name#10]
Keys [5]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#3))]
Aggregate Attributes [1]: [sum#17]
Results [6]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum#18]

(23) Exchange
Input [6]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum#18]
Arguments: hashpartitioning(i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, 5), ENSURE_REQUIREMENTS, [id=#19]

(24) HashAggregate [codegen id : 8]
Input [6]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum#18]
Keys [5]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8]
Functions [1]: [sum(UnscaledValue(cs_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#3))#20]
Results [7]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, MakeDecimal(sum(UnscaledValue(cs_sales_price#3))#20,17,2) AS sum_sales#21, MakeDecimal(sum(UnscaledValue(cs_sales_price#3))#20,17,2) AS _w0#22]

(25) Exchange
Input [7]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, _w0#22]
Arguments: hashpartitioning(i_category#15, i_brand#14, cc_name#10, d_year#7, 5), ENSURE_REQUIREMENTS, [id=#23]

(26) Sort [codegen id : 9]
Input [7]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, _w0#22]
Arguments: [i_category#15 ASC NULLS FIRST, i_brand#14 ASC NULLS FIRST, cc_name#10 ASC NULLS FIRST, d_year#7 ASC NULLS FIRST], false, 0

(27) Window
Input [7]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, _w0#22]
Arguments: [avg(_w0#22) windowspecdefinition(i_category#15, i_brand#14, cc_name#10, d_year#7, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#24], [i_category#15, i_brand#14, cc_name#10, d_year#7]

(28) Project [codegen id : 10]
Output [7]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, avg_monthly_sales#24]
Input [8]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, _w0#22, avg_monthly_sales#24]

(29) Exchange
Input [7]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, avg_monthly_sales#24]
Arguments: hashpartitioning(i_category#15, i_brand#14, cc_name#10, 5), ENSURE_REQUIREMENTS, [id=#25]

(30) Sort [codegen id : 11]
Input [7]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, avg_monthly_sales#24]
Arguments: [i_category#15 ASC NULLS FIRST, i_brand#14 ASC NULLS FIRST, cc_name#10 ASC NULLS FIRST, d_year#7 ASC NULLS FIRST, d_moy#8 ASC NULLS FIRST], false, 0

(31) Window
Input [7]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, avg_monthly_sales#24]
Arguments: [rank(d_year#7, d_moy#8) windowspecdefinition(i_category#15, i_brand#14, cc_name#10, d_year#7 ASC NULLS FIRST, d_moy#8 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#26], [i_category#15, i_brand#14, cc_name#10], [d_year#7 ASC NULLS FIRST, d_moy#8 ASC NULLS FIRST]

(32) Filter [codegen id : 12]
Input [8]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, avg_monthly_sales#24, rn#26]
Condition : ((((isnotnull(d_year#7) AND isnotnull(avg_monthly_sales#24)) AND (d_year#7 = 1999)) AND (avg_monthly_sales#24 > 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#21 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(22,6), true), false)) / promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000))

(33) Exchange
Input [8]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, avg_monthly_sales#24, rn#26]
Arguments: hashpartitioning(i_category#15, i_brand#14, cc_name#10, rn#26, 5), ENSURE_REQUIREMENTS, [id=#27]

(34) Sort [codegen id : 13]
Input [8]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, avg_monthly_sales#24, rn#26]
Arguments: [i_category#15 ASC NULLS FIRST, i_brand#14 ASC NULLS FIRST, cc_name#10 ASC NULLS FIRST, rn#26 ASC NULLS FIRST], false, 0

(35) ReusedExchange [Reuses operator id: 23]
Output [6]: [i_category#28, i_brand#29, cc_name#30, d_year#31, d_moy#32, sum#33]

(36) HashAggregate [codegen id : 21]
Input [6]: [i_category#28, i_brand#29, cc_name#30, d_year#31, d_moy#32, sum#33]
Keys [5]: [i_category#28, i_brand#29, cc_name#30, d_year#31, d_moy#32]
Functions [1]: [sum(UnscaledValue(cs_sales_price#34))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#34))#35]
Results [6]: [i_category#28, i_brand#29, cc_name#30, d_year#31, d_moy#32, MakeDecimal(sum(UnscaledValue(cs_sales_price#34))#35,17,2) AS sum_sales#36]

(37) Exchange
Input [6]: [i_category#28, i_brand#29, cc_name#30, d_year#31, d_moy#32, sum_sales#36]
Arguments: hashpartitioning(i_category#28, i_brand#29, cc_name#30, 5), ENSURE_REQUIREMENTS, [id=#37]

(38) Sort [codegen id : 22]
Input [6]: [i_category#28, i_brand#29, cc_name#30, d_year#31, d_moy#32, sum_sales#36]
Arguments: [i_category#28 ASC NULLS FIRST, i_brand#29 ASC NULLS FIRST, cc_name#30 ASC NULLS FIRST, d_year#31 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST], false, 0

(39) Window
Input [6]: [i_category#28, i_brand#29, cc_name#30, d_year#31, d_moy#32, sum_sales#36]
Arguments: [rank(d_year#31, d_moy#32) windowspecdefinition(i_category#28, i_brand#29, cc_name#30, d_year#31 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#38], [i_category#28, i_brand#29, cc_name#30], [d_year#31 ASC NULLS FIRST, d_moy#32 ASC NULLS FIRST]

(40) Project [codegen id : 23]
Output [5]: [i_category#28, i_brand#29, cc_name#30, sum_sales#36, rn#38]
Input [7]: [i_category#28, i_brand#29, cc_name#30, d_year#31, d_moy#32, sum_sales#36, rn#38]

(41) Exchange
Input [5]: [i_category#28, i_brand#29, cc_name#30, sum_sales#36, rn#38]
Arguments: hashpartitioning(i_category#28, i_brand#29, cc_name#30, (rn#38 + 1), 5), ENSURE_REQUIREMENTS, [id=#39]

(42) Sort [codegen id : 24]
Input [5]: [i_category#28, i_brand#29, cc_name#30, sum_sales#36, rn#38]
Arguments: [i_category#28 ASC NULLS FIRST, i_brand#29 ASC NULLS FIRST, cc_name#30 ASC NULLS FIRST, (rn#38 + 1) ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 25]
Left keys [4]: [i_category#15, i_brand#14, cc_name#10, rn#26]
Right keys [4]: [i_category#28, i_brand#29, cc_name#30, (rn#38 + 1)]
Join condition: None

(44) Project [codegen id : 25]
Output [9]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, avg_monthly_sales#24, rn#26, sum_sales#36]
Input [13]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, avg_monthly_sales#24, rn#26, i_category#28, i_brand#29, cc_name#30, sum_sales#36, rn#38]

(45) ReusedExchange [Reuses operator id: 37]
Output [6]: [i_category#40, i_brand#41, cc_name#42, d_year#43, d_moy#44, sum_sales#45]

(46) Sort [codegen id : 34]
Input [6]: [i_category#40, i_brand#41, cc_name#42, d_year#43, d_moy#44, sum_sales#45]
Arguments: [i_category#40 ASC NULLS FIRST, i_brand#41 ASC NULLS FIRST, cc_name#42 ASC NULLS FIRST, d_year#43 ASC NULLS FIRST, d_moy#44 ASC NULLS FIRST], false, 0

(47) Window
Input [6]: [i_category#40, i_brand#41, cc_name#42, d_year#43, d_moy#44, sum_sales#45]
Arguments: [rank(d_year#43, d_moy#44) windowspecdefinition(i_category#40, i_brand#41, cc_name#42, d_year#43 ASC NULLS FIRST, d_moy#44 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#46], [i_category#40, i_brand#41, cc_name#42], [d_year#43 ASC NULLS FIRST, d_moy#44 ASC NULLS FIRST]

(48) Project [codegen id : 35]
Output [5]: [i_category#40, i_brand#41, cc_name#42, sum_sales#45, rn#46]
Input [7]: [i_category#40, i_brand#41, cc_name#42, d_year#43, d_moy#44, sum_sales#45, rn#46]

(49) Exchange
Input [5]: [i_category#40, i_brand#41, cc_name#42, sum_sales#45, rn#46]
Arguments: hashpartitioning(i_category#40, i_brand#41, cc_name#42, (rn#46 - 1), 5), ENSURE_REQUIREMENTS, [id=#47]

(50) Sort [codegen id : 36]
Input [5]: [i_category#40, i_brand#41, cc_name#42, sum_sales#45, rn#46]
Arguments: [i_category#40 ASC NULLS FIRST, i_brand#41 ASC NULLS FIRST, cc_name#42 ASC NULLS FIRST, (rn#46 - 1) ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 37]
Left keys [4]: [i_category#15, i_brand#14, cc_name#10, rn#26]
Right keys [4]: [i_category#40, i_brand#41, cc_name#42, (rn#46 - 1)]
Join condition: None

(52) Project [codegen id : 37]
Output [8]: [i_category#15, i_brand#14, d_year#7, d_moy#8, avg_monthly_sales#24, sum_sales#21, sum_sales#36 AS psum#48, sum_sales#45 AS nsum#49]
Input [14]: [i_category#15, i_brand#14, cc_name#10, d_year#7, d_moy#8, sum_sales#21, avg_monthly_sales#24, rn#26, sum_sales#36, i_category#40, i_brand#41, cc_name#42, sum_sales#45, rn#46]

(53) TakeOrderedAndProject
Input [8]: [i_category#15, i_brand#14, d_year#7, d_moy#8, avg_monthly_sales#24, sum_sales#21, psum#48, nsum#49]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#21 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, d_year#7 ASC NULLS FIRST], [i_category#15, i_brand#14, d_year#7, d_moy#8, avg_monthly_sales#24, sum_sales#21, psum#48, nsum#49]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (57)
+- * Filter (56)
   +- * ColumnarToRow (55)
      +- Scan parquet default.date_dim (54)


(54) Scan parquet default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(55) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(56) Filter [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((d_year#7 = 1999) OR ((d_year#7 = 1998) AND (d_moy#8 = 12))) OR ((d_year#7 = 2000) AND (d_moy#8 = 1))) AND isnotnull(d_date_sk#6))

(57) BroadcastExchange
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50]


