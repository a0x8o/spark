== Physical Plan ==
TakeOrderedAndProject (77)
+- Union (76)
   :- * HashAggregate (32)
   :  +- Exchange (31)
   :     +- * HashAggregate (30)
   :        +- * Project (29)
   :           +- * BroadcastHashJoin Inner BuildRight (28)
   :              :- * Project (23)
   :              :  +- * BroadcastHashJoin Inner BuildRight (22)
   :              :     :- * Project (17)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (16)
   :              :     :     :- * Project (10)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :     :     :     :- * Filter (3)
   :              :     :     :     :  +- * ColumnarToRow (2)
   :              :     :     :     :     +- Scan parquet default.store_sales (1)
   :              :     :     :     +- BroadcastExchange (8)
   :              :     :     :        +- * Project (7)
   :              :     :     :           +- * Filter (6)
   :              :     :     :              +- * ColumnarToRow (5)
   :              :     :     :                 +- Scan parquet default.customer_demographics (4)
   :              :     :     +- BroadcastExchange (15)
   :              :     :        +- * Project (14)
   :              :     :           +- * Filter (13)
   :              :     :              +- * ColumnarToRow (12)
   :              :     :                 +- Scan parquet default.date_dim (11)
   :              :     +- BroadcastExchange (21)
   :              :        +- * Filter (20)
   :              :           +- * ColumnarToRow (19)
   :              :              +- Scan parquet default.store (18)
   :              +- BroadcastExchange (27)
   :                 +- * Filter (26)
   :                    +- * ColumnarToRow (25)
   :                       +- Scan parquet default.item (24)
   :- * HashAggregate (54)
   :  +- Exchange (53)
   :     +- * HashAggregate (52)
   :        +- * Project (51)
   :           +- * BroadcastHashJoin Inner BuildRight (50)
   :              :- * Project (48)
   :              :  +- * BroadcastHashJoin Inner BuildRight (47)
   :              :     :- * Project (45)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (44)
   :              :     :     :- * Project (38)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (37)
   :              :     :     :     :- * Filter (35)
   :              :     :     :     :  +- * ColumnarToRow (34)
   :              :     :     :     :     +- Scan parquet default.store_sales (33)
   :              :     :     :     +- ReusedExchange (36)
   :              :     :     +- BroadcastExchange (43)
   :              :     :        +- * Project (42)
   :              :     :           +- * Filter (41)
   :              :     :              +- * ColumnarToRow (40)
   :              :     :                 +- Scan parquet default.store (39)
   :              :     +- ReusedExchange (46)
   :              +- ReusedExchange (49)
   +- * HashAggregate (75)
      +- Exchange (74)
         +- * HashAggregate (73)
            +- * Project (72)
               +- * BroadcastHashJoin Inner BuildRight (71)
                  :- * Project (66)
                  :  +- * BroadcastHashJoin Inner BuildRight (65)
                  :     :- * Project (63)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (62)
                  :     :     :- * Project (60)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (59)
                  :     :     :     :- * Filter (57)
                  :     :     :     :  +- * ColumnarToRow (56)
                  :     :     :     :     +- Scan parquet default.store_sales (55)
                  :     :     :     +- ReusedExchange (58)
                  :     :     +- ReusedExchange (61)
                  :     +- ReusedExchange (64)
                  +- BroadcastExchange (70)
                     +- * Filter (69)
                        +- * ColumnarToRow (68)
                           +- Scan parquet default.item (67)


(1) Scan parquet default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(3) Filter [codegen id : 5]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(4) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_marital_status,W), EqualTo(cd_education_status,Primary             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Condition : ((((((isnotnull(cd_gender#11) AND isnotnull(cd_marital_status#12)) AND isnotnull(cd_education_status#13)) AND (cd_gender#11 = F)) AND (cd_marital_status#12 = W)) AND (cd_education_status#13 = Primary             )) AND isnotnull(cd_demo_sk#10))

(7) Project [codegen id : 1]
Output [1]: [cd_demo_sk#10]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]

(8) BroadcastExchange
Input [1]: [cd_demo_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(10) Project [codegen id : 5]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#15, d_year#16]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#15, d_year#16]
Condition : ((isnotnull(d_year#16) AND (d_year#16 = 1998)) AND isnotnull(d_date_sk#15))

(14) Project [codegen id : 2]
Output [1]: [d_date_sk#15]
Input [2]: [d_date_sk#15, d_year#16]

(15) BroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(16) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#15]
Join condition: None

(17) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#15]

(18) Scan parquet default.store
Output [2]: [s_store_sk#18, s_state#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#18, s_state#19]

(20) Filter [codegen id : 3]
Input [2]: [s_store_sk#18, s_state#19]
Condition : ((isnotnull(s_state#19) AND (s_state#19 = TN)) AND isnotnull(s_store_sk#18))

(21) BroadcastExchange
Input [2]: [s_store_sk#18, s_state#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#18]
Join condition: None

(23) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#19]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#18, s_state#19]

(24) Scan parquet default.item
Output [2]: [i_item_sk#21, i_item_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(25) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#21, i_item_id#22]

(26) Filter [codegen id : 4]
Input [2]: [i_item_sk#21, i_item_id#22]
Condition : isnotnull(i_item_sk#21)

(27) BroadcastExchange
Input [2]: [i_item_sk#21, i_item_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(28) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#21]
Join condition: None

(29) Project [codegen id : 5]
Output [6]: [i_item_id#22, s_state#19, ss_quantity#4 AS agg1#24, ss_list_price#5 AS agg2#25, ss_coupon_amt#7 AS agg3#26, ss_sales_price#6 AS agg4#27]
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#19, i_item_sk#21, i_item_id#22]

(30) HashAggregate [codegen id : 5]
Input [6]: [i_item_id#22, s_state#19, agg1#24, agg2#25, agg3#26, agg4#27]
Keys [2]: [i_item_id#22, s_state#19]
Functions [4]: [partial_avg(agg1#24), partial_avg(UnscaledValue(agg2#25)), partial_avg(UnscaledValue(agg3#26)), partial_avg(UnscaledValue(agg4#27))]
Aggregate Attributes [8]: [sum#28, count#29, sum#30, count#31, sum#32, count#33, sum#34, count#35]
Results [10]: [i_item_id#22, s_state#19, sum#36, count#37, sum#38, count#39, sum#40, count#41, sum#42, count#43]

(31) Exchange
Input [10]: [i_item_id#22, s_state#19, sum#36, count#37, sum#38, count#39, sum#40, count#41, sum#42, count#43]
Arguments: hashpartitioning(i_item_id#22, s_state#19, 5), ENSURE_REQUIREMENTS, [id=#44]

(32) HashAggregate [codegen id : 6]
Input [10]: [i_item_id#22, s_state#19, sum#36, count#37, sum#38, count#39, sum#40, count#41, sum#42, count#43]
Keys [2]: [i_item_id#22, s_state#19]
Functions [4]: [avg(agg1#24), avg(UnscaledValue(agg2#25)), avg(UnscaledValue(agg3#26)), avg(UnscaledValue(agg4#27))]
Aggregate Attributes [4]: [avg(agg1#24)#45, avg(UnscaledValue(agg2#25))#46, avg(UnscaledValue(agg3#26))#47, avg(UnscaledValue(agg4#27))#48]
Results [7]: [i_item_id#22, s_state#19, 0 AS g_state#49, avg(agg1#24)#45 AS agg1#50, cast((avg(UnscaledValue(agg2#25))#46 / 100.0) as decimal(11,6)) AS agg2#51, cast((avg(UnscaledValue(agg3#26))#47 / 100.0) as decimal(11,6)) AS agg3#52, cast((avg(UnscaledValue(agg4#27))#48 / 100.0) as decimal(11,6)) AS agg4#53]

(33) Scan parquet default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(34) ColumnarToRow [codegen id : 11]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(35) Filter [codegen id : 11]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(36) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#10]

(37) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(38) Project [codegen id : 11]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]

(39) Scan parquet default.store
Output [2]: [s_store_sk#18, s_state#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(40) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#18, s_state#19]

(41) Filter [codegen id : 8]
Input [2]: [s_store_sk#18, s_state#19]
Condition : ((isnotnull(s_state#19) AND (s_state#19 = TN)) AND isnotnull(s_store_sk#18))

(42) Project [codegen id : 8]
Output [1]: [s_store_sk#18]
Input [2]: [s_store_sk#18, s_state#19]

(43) BroadcastExchange
Input [1]: [s_store_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54]

(44) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#18]
Join condition: None

(45) Project [codegen id : 11]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, s_store_sk#18]

(46) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#15]

(47) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#15]
Join condition: None

(48) Project [codegen id : 11]
Output [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#15]

(49) ReusedExchange [Reuses operator id: 27]
Output [2]: [i_item_sk#21, i_item_id#22]

(50) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#21]
Join condition: None

(51) Project [codegen id : 11]
Output [5]: [i_item_id#22, ss_quantity#4 AS agg1#24, ss_list_price#5 AS agg2#25, ss_coupon_amt#7 AS agg3#26, ss_sales_price#6 AS agg4#27]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#21, i_item_id#22]

(52) HashAggregate [codegen id : 11]
Input [5]: [i_item_id#22, agg1#24, agg2#25, agg3#26, agg4#27]
Keys [1]: [i_item_id#22]
Functions [4]: [partial_avg(agg1#24), partial_avg(UnscaledValue(agg2#25)), partial_avg(UnscaledValue(agg3#26)), partial_avg(UnscaledValue(agg4#27))]
Aggregate Attributes [8]: [sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62]
Results [9]: [i_item_id#22, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70]

(53) Exchange
Input [9]: [i_item_id#22, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70]
Arguments: hashpartitioning(i_item_id#22, 5), ENSURE_REQUIREMENTS, [id=#71]

(54) HashAggregate [codegen id : 12]
Input [9]: [i_item_id#22, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70]
Keys [1]: [i_item_id#22]
Functions [4]: [avg(agg1#24), avg(UnscaledValue(agg2#25)), avg(UnscaledValue(agg3#26)), avg(UnscaledValue(agg4#27))]
Aggregate Attributes [4]: [avg(agg1#24)#72, avg(UnscaledValue(agg2#25))#73, avg(UnscaledValue(agg3#26))#74, avg(UnscaledValue(agg4#27))#75]
Results [7]: [i_item_id#22, null AS s_state#76, 1 AS g_state#77, avg(agg1#24)#72 AS agg1#78, cast((avg(UnscaledValue(agg2#25))#73 / 100.0) as decimal(11,6)) AS agg2#79, cast((avg(UnscaledValue(agg3#26))#74 / 100.0) as decimal(11,6)) AS agg3#80, cast((avg(UnscaledValue(agg4#27))#75 / 100.0) as decimal(11,6)) AS agg4#81]

(55) Scan parquet default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(56) ColumnarToRow [codegen id : 17]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(57) Filter [codegen id : 17]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(58) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#10]

(59) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(60) Project [codegen id : 17]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]

(61) ReusedExchange [Reuses operator id: 43]
Output [1]: [s_store_sk#18]

(62) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#18]
Join condition: None

(63) Project [codegen id : 17]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, s_store_sk#18]

(64) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#15]

(65) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#15]
Join condition: None

(66) Project [codegen id : 17]
Output [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#15]

(67) Scan parquet default.item
Output [1]: [i_item_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(68) ColumnarToRow [codegen id : 16]
Input [1]: [i_item_sk#21]

(69) Filter [codegen id : 16]
Input [1]: [i_item_sk#21]
Condition : isnotnull(i_item_sk#21)

(70) BroadcastExchange
Input [1]: [i_item_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#82]

(71) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#21]
Join condition: None

(72) Project [codegen id : 17]
Output [4]: [ss_quantity#4 AS agg1#24, ss_list_price#5 AS agg2#25, ss_coupon_amt#7 AS agg3#26, ss_sales_price#6 AS agg4#27]
Input [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#21]

(73) HashAggregate [codegen id : 17]
Input [4]: [agg1#24, agg2#25, agg3#26, agg4#27]
Keys: []
Functions [4]: [partial_avg(agg1#24), partial_avg(UnscaledValue(agg2#25)), partial_avg(UnscaledValue(agg3#26)), partial_avg(UnscaledValue(agg4#27))]
Aggregate Attributes [8]: [sum#83, count#84, sum#85, count#86, sum#87, count#88, sum#89, count#90]
Results [8]: [sum#91, count#92, sum#93, count#94, sum#95, count#96, sum#97, count#98]

(74) Exchange
Input [8]: [sum#91, count#92, sum#93, count#94, sum#95, count#96, sum#97, count#98]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#99]

(75) HashAggregate [codegen id : 18]
Input [8]: [sum#91, count#92, sum#93, count#94, sum#95, count#96, sum#97, count#98]
Keys: []
Functions [4]: [avg(agg1#24), avg(UnscaledValue(agg2#25)), avg(UnscaledValue(agg3#26)), avg(UnscaledValue(agg4#27))]
Aggregate Attributes [4]: [avg(agg1#24)#100, avg(UnscaledValue(agg2#25))#101, avg(UnscaledValue(agg3#26))#102, avg(UnscaledValue(agg4#27))#103]
Results [7]: [null AS i_item_id#104, null AS s_state#105, 1 AS g_state#106, avg(agg1#24)#100 AS agg1#107, cast((avg(UnscaledValue(agg2#25))#101 / 100.0) as decimal(11,6)) AS agg2#108, cast((avg(UnscaledValue(agg3#26))#102 / 100.0) as decimal(11,6)) AS agg3#109, cast((avg(UnscaledValue(agg4#27))#103 / 100.0) as decimal(11,6)) AS agg4#110]

(76) Union

(77) TakeOrderedAndProject
Input [7]: [i_item_id#22, s_state#19, g_state#49, agg1#50, agg2#51, agg3#52, agg4#53]
Arguments: 100, [i_item_id#22 ASC NULLS FIRST, s_state#19 ASC NULLS FIRST], [i_item_id#22, s_state#19, g_state#49, agg1#50, agg2#51, agg3#52, agg4#53]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
ReusedExchange (78)


(78) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#15]

Subquery:2 Hosting operator id = 33 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9

Subquery:3 Hosting operator id = 55 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9


