== Physical Plan ==
TakeOrderedAndProject (94)
+- * HashAggregate (93)
   +- Exchange (92)
      +- * HashAggregate (91)
         +- Union (90)
            :- * HashAggregate (79)
            :  +- Exchange (78)
            :     +- * HashAggregate (77)
            :        +- Union (76)
            :           :- * HashAggregate (25)
            :           :  +- Exchange (24)
            :           :     +- * HashAggregate (23)
            :           :        +- * Project (22)
            :           :           +- * BroadcastHashJoin Inner BuildRight (21)
            :           :              :- * Project (15)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (14)
            :           :              :     :- Union (9)
            :           :              :     :  :- * Project (4)
            :           :              :     :  :  +- * Filter (3)
            :           :              :     :  :     +- * ColumnarToRow (2)
            :           :              :     :  :        +- Scan parquet default.store_sales (1)
            :           :              :     :  +- * Project (8)
            :           :              :     :     +- * Filter (7)
            :           :              :     :        +- * ColumnarToRow (6)
            :           :              :     :           +- Scan parquet default.store_returns (5)
            :           :              :     +- BroadcastExchange (13)
            :           :              :        +- * Filter (12)
            :           :              :           +- * ColumnarToRow (11)
            :           :              :              +- Scan parquet default.store (10)
            :           :              +- BroadcastExchange (20)
            :           :                 +- * Project (19)
            :           :                    +- * Filter (18)
            :           :                       +- * ColumnarToRow (17)
            :           :                          +- Scan parquet default.date_dim (16)
            :           :- * HashAggregate (46)
            :           :  +- Exchange (45)
            :           :     +- * HashAggregate (44)
            :           :        +- * Project (43)
            :           :           +- * BroadcastHashJoin Inner BuildRight (42)
            :           :              :- * Project (40)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (39)
            :           :              :     :- Union (34)
            :           :              :     :  :- * Project (29)
            :           :              :     :  :  +- * Filter (28)
            :           :              :     :  :     +- * ColumnarToRow (27)
            :           :              :     :  :        +- Scan parquet default.catalog_sales (26)
            :           :              :     :  +- * Project (33)
            :           :              :     :     +- * Filter (32)
            :           :              :     :        +- * ColumnarToRow (31)
            :           :              :     :           +- Scan parquet default.catalog_returns (30)
            :           :              :     +- BroadcastExchange (38)
            :           :              :        +- * Filter (37)
            :           :              :           +- * ColumnarToRow (36)
            :           :              :              +- Scan parquet default.catalog_page (35)
            :           :              +- ReusedExchange (41)
            :           +- * HashAggregate (75)
            :              +- Exchange (74)
            :                 +- * HashAggregate (73)
            :                    +- * Project (72)
            :                       +- * BroadcastHashJoin Inner BuildRight (71)
            :                          :- * Project (69)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (68)
            :                          :     :- Union (63)
            :                          :     :  :- * Project (50)
            :                          :     :  :  +- * Filter (49)
            :                          :     :  :     +- * ColumnarToRow (48)
            :                          :     :  :        +- Scan parquet default.web_sales (47)
            :                          :     :  +- * Project (62)
            :                          :     :     +- * SortMergeJoin Inner (61)
            :                          :     :        :- * Sort (54)
            :                          :     :        :  +- Exchange (53)
            :                          :     :        :     +- * ColumnarToRow (52)
            :                          :     :        :        +- Scan parquet default.web_returns (51)
            :                          :     :        +- * Sort (60)
            :                          :     :           +- Exchange (59)
            :                          :     :              +- * Project (58)
            :                          :     :                 +- * Filter (57)
            :                          :     :                    +- * ColumnarToRow (56)
            :                          :     :                       +- Scan parquet default.web_sales (55)
            :                          :     +- BroadcastExchange (67)
            :                          :        +- * Filter (66)
            :                          :           +- * ColumnarToRow (65)
            :                          :              +- Scan parquet default.web_site (64)
            :                          +- ReusedExchange (70)
            :- * HashAggregate (84)
            :  +- Exchange (83)
            :     +- * HashAggregate (82)
            :        +- * HashAggregate (81)
            :           +- ReusedExchange (80)
            +- * HashAggregate (89)
               +- Exchange (88)
                  +- * HashAggregate (87)
                     +- * HashAggregate (86)
                        +- ReusedExchange (85)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) Project [codegen id : 1]
Output [6]: [ss_store_sk#1 AS store_sk#6, ss_sold_date_sk#4 AS date_sk#7, ss_ext_sales_price#2 AS sales_price#8, ss_net_profit#3 AS profit#9, 0.00 AS return_amt#10, 0.00 AS net_loss#11]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) Scan parquet default.store_returns
Output [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#15), dynamicpruningexpression(sr_returned_date_sk#15 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(7) Filter [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Condition : isnotnull(sr_store_sk#12)

(8) Project [codegen id : 2]
Output [6]: [sr_store_sk#12 AS store_sk#16, sr_returned_date_sk#15 AS date_sk#17, 0.00 AS sales_price#18, 0.00 AS profit#19, sr_return_amt#13 AS return_amt#20, sr_net_loss#14 AS net_loss#21]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(9) Union

(10) Scan parquet default.store
Output [2]: [s_store_sk#22, s_store_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(11) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#22, s_store_id#23]

(12) Filter [codegen id : 3]
Input [2]: [s_store_sk#22, s_store_id#23]
Condition : isnotnull(s_store_sk#22)

(13) BroadcastExchange
Input [2]: [s_store_sk#22, s_store_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [store_sk#6]
Right keys [1]: [s_store_sk#22]
Join condition: None

(15) Project [codegen id : 5]
Output [6]: [date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Input [8]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_sk#22, s_store_id#23]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#25, d_date#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#25, d_date#26]

(18) Filter [codegen id : 4]
Input [2]: [d_date_sk#25, d_date#26]
Condition : (((isnotnull(d_date#26) AND (d_date#26 >= 1998-08-04)) AND (d_date#26 <= 1998-08-18)) AND isnotnull(d_date_sk#25))

(19) Project [codegen id : 4]
Output [1]: [d_date_sk#25]
Input [2]: [d_date_sk#25, d_date#26]

(20) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [date_sk#7]
Right keys [1]: [d_date_sk#25]
Join condition: None

(22) Project [codegen id : 5]
Output [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Input [7]: [date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23, d_date_sk#25]

(23) HashAggregate [codegen id : 5]
Input [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Keys [1]: [s_store_id#23]
Functions [4]: [partial_sum(UnscaledValue(sales_price#8)), partial_sum(UnscaledValue(return_amt#10)), partial_sum(UnscaledValue(profit#9)), partial_sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum#28, sum#29, sum#30, sum#31]
Results [5]: [s_store_id#23, sum#32, sum#33, sum#34, sum#35]

(24) Exchange
Input [5]: [s_store_id#23, sum#32, sum#33, sum#34, sum#35]
Arguments: hashpartitioning(s_store_id#23, 5), ENSURE_REQUIREMENTS, [id=#36]

(25) HashAggregate [codegen id : 6]
Input [5]: [s_store_id#23, sum#32, sum#33, sum#34, sum#35]
Keys [1]: [s_store_id#23]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#37, sum(UnscaledValue(return_amt#10))#38, sum(UnscaledValue(profit#9))#39, sum(UnscaledValue(net_loss#11))#40]
Results [5]: [store channel AS channel#41, concat(store, s_store_id#23) AS id#42, MakeDecimal(sum(UnscaledValue(sales_price#8))#37,17,2) AS sales#43, MakeDecimal(sum(UnscaledValue(return_amt#10))#38,17,2) AS returns#44, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#9))#39,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#11))#40,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#45]

(26) Scan parquet default.catalog_sales
Output [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#49), dynamicpruningexpression(cs_sold_date_sk#49 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]

(28) Filter [codegen id : 7]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]
Condition : isnotnull(cs_catalog_page_sk#46)

(29) Project [codegen id : 7]
Output [6]: [cs_catalog_page_sk#46 AS page_sk#50, cs_sold_date_sk#49 AS date_sk#51, cs_ext_sales_price#47 AS sales_price#52, cs_net_profit#48 AS profit#53, 0.00 AS return_amt#54, 0.00 AS net_loss#55]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]

(30) Scan parquet default.catalog_returns
Output [4]: [cr_catalog_page_sk#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#59), dynamicpruningexpression(cr_returned_date_sk#59 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(31) ColumnarToRow [codegen id : 8]
Input [4]: [cr_catalog_page_sk#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]

(32) Filter [codegen id : 8]
Input [4]: [cr_catalog_page_sk#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]
Condition : isnotnull(cr_catalog_page_sk#56)

(33) Project [codegen id : 8]
Output [6]: [cr_catalog_page_sk#56 AS page_sk#60, cr_returned_date_sk#59 AS date_sk#61, 0.00 AS sales_price#62, 0.00 AS profit#63, cr_return_amount#57 AS return_amt#64, cr_net_loss#58 AS net_loss#65]
Input [4]: [cr_catalog_page_sk#56, cr_return_amount#57, cr_net_loss#58, cr_returned_date_sk#59]

(34) Union

(35) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(36) ColumnarToRow [codegen id : 9]
Input [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]

(37) Filter [codegen id : 9]
Input [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]
Condition : isnotnull(cp_catalog_page_sk#66)

(38) BroadcastExchange
Input [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#68]

(39) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [page_sk#50]
Right keys [1]: [cp_catalog_page_sk#66]
Join condition: None

(40) Project [codegen id : 11]
Output [6]: [date_sk#51, sales_price#52, profit#53, return_amt#54, net_loss#55, cp_catalog_page_id#67]
Input [8]: [page_sk#50, date_sk#51, sales_price#52, profit#53, return_amt#54, net_loss#55, cp_catalog_page_sk#66, cp_catalog_page_id#67]

(41) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#69]

(42) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [date_sk#51]
Right keys [1]: [d_date_sk#69]
Join condition: None

(43) Project [codegen id : 11]
Output [5]: [sales_price#52, profit#53, return_amt#54, net_loss#55, cp_catalog_page_id#67]
Input [7]: [date_sk#51, sales_price#52, profit#53, return_amt#54, net_loss#55, cp_catalog_page_id#67, d_date_sk#69]

(44) HashAggregate [codegen id : 11]
Input [5]: [sales_price#52, profit#53, return_amt#54, net_loss#55, cp_catalog_page_id#67]
Keys [1]: [cp_catalog_page_id#67]
Functions [4]: [partial_sum(UnscaledValue(sales_price#52)), partial_sum(UnscaledValue(return_amt#54)), partial_sum(UnscaledValue(profit#53)), partial_sum(UnscaledValue(net_loss#55))]
Aggregate Attributes [4]: [sum#70, sum#71, sum#72, sum#73]
Results [5]: [cp_catalog_page_id#67, sum#74, sum#75, sum#76, sum#77]

(45) Exchange
Input [5]: [cp_catalog_page_id#67, sum#74, sum#75, sum#76, sum#77]
Arguments: hashpartitioning(cp_catalog_page_id#67, 5), ENSURE_REQUIREMENTS, [id=#78]

(46) HashAggregate [codegen id : 12]
Input [5]: [cp_catalog_page_id#67, sum#74, sum#75, sum#76, sum#77]
Keys [1]: [cp_catalog_page_id#67]
Functions [4]: [sum(UnscaledValue(sales_price#52)), sum(UnscaledValue(return_amt#54)), sum(UnscaledValue(profit#53)), sum(UnscaledValue(net_loss#55))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#52))#79, sum(UnscaledValue(return_amt#54))#80, sum(UnscaledValue(profit#53))#81, sum(UnscaledValue(net_loss#55))#82]
Results [5]: [catalog channel AS channel#83, concat(catalog_page, cp_catalog_page_id#67) AS id#84, MakeDecimal(sum(UnscaledValue(sales_price#52))#79,17,2) AS sales#85, MakeDecimal(sum(UnscaledValue(return_amt#54))#80,17,2) AS returns#86, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#53))#81,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#55))#82,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#87]

(47) Scan parquet default.web_sales
Output [4]: [ws_web_site_sk#88, ws_ext_sales_price#89, ws_net_profit#90, ws_sold_date_sk#91]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#91), dynamicpruningexpression(ws_sold_date_sk#91 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(48) ColumnarToRow [codegen id : 13]
Input [4]: [ws_web_site_sk#88, ws_ext_sales_price#89, ws_net_profit#90, ws_sold_date_sk#91]

(49) Filter [codegen id : 13]
Input [4]: [ws_web_site_sk#88, ws_ext_sales_price#89, ws_net_profit#90, ws_sold_date_sk#91]
Condition : isnotnull(ws_web_site_sk#88)

(50) Project [codegen id : 13]
Output [6]: [ws_web_site_sk#88 AS wsr_web_site_sk#92, ws_sold_date_sk#91 AS date_sk#93, ws_ext_sales_price#89 AS sales_price#94, ws_net_profit#90 AS profit#95, 0.00 AS return_amt#96, 0.00 AS net_loss#97]
Input [4]: [ws_web_site_sk#88, ws_ext_sales_price#89, ws_net_profit#90, ws_sold_date_sk#91]

(51) Scan parquet default.web_returns
Output [5]: [wr_item_sk#98, wr_order_number#99, wr_return_amt#100, wr_net_loss#101, wr_returned_date_sk#102]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#102), dynamicpruningexpression(wr_returned_date_sk#102 IN dynamicpruning#5)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(52) ColumnarToRow [codegen id : 14]
Input [5]: [wr_item_sk#98, wr_order_number#99, wr_return_amt#100, wr_net_loss#101, wr_returned_date_sk#102]

(53) Exchange
Input [5]: [wr_item_sk#98, wr_order_number#99, wr_return_amt#100, wr_net_loss#101, wr_returned_date_sk#102]
Arguments: hashpartitioning(wr_item_sk#98, wr_order_number#99, 5), ENSURE_REQUIREMENTS, [id=#103]

(54) Sort [codegen id : 15]
Input [5]: [wr_item_sk#98, wr_order_number#99, wr_return_amt#100, wr_net_loss#101, wr_returned_date_sk#102]
Arguments: [wr_item_sk#98 ASC NULLS FIRST, wr_order_number#99 ASC NULLS FIRST], false, 0

(55) Scan parquet default.web_sales
Output [4]: [ws_item_sk#104, ws_web_site_sk#105, ws_order_number#106, ws_sold_date_sk#107]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(56) ColumnarToRow [codegen id : 16]
Input [4]: [ws_item_sk#104, ws_web_site_sk#105, ws_order_number#106, ws_sold_date_sk#107]

(57) Filter [codegen id : 16]
Input [4]: [ws_item_sk#104, ws_web_site_sk#105, ws_order_number#106, ws_sold_date_sk#107]
Condition : ((isnotnull(ws_item_sk#104) AND isnotnull(ws_order_number#106)) AND isnotnull(ws_web_site_sk#105))

(58) Project [codegen id : 16]
Output [3]: [ws_item_sk#104, ws_web_site_sk#105, ws_order_number#106]
Input [4]: [ws_item_sk#104, ws_web_site_sk#105, ws_order_number#106, ws_sold_date_sk#107]

(59) Exchange
Input [3]: [ws_item_sk#104, ws_web_site_sk#105, ws_order_number#106]
Arguments: hashpartitioning(ws_item_sk#104, ws_order_number#106, 5), ENSURE_REQUIREMENTS, [id=#108]

(60) Sort [codegen id : 17]
Input [3]: [ws_item_sk#104, ws_web_site_sk#105, ws_order_number#106]
Arguments: [ws_item_sk#104 ASC NULLS FIRST, ws_order_number#106 ASC NULLS FIRST], false, 0

(61) SortMergeJoin [codegen id : 18]
Left keys [2]: [wr_item_sk#98, wr_order_number#99]
Right keys [2]: [ws_item_sk#104, ws_order_number#106]
Join condition: None

(62) Project [codegen id : 18]
Output [6]: [ws_web_site_sk#105 AS wsr_web_site_sk#109, wr_returned_date_sk#102 AS date_sk#110, 0.00 AS sales_price#111, 0.00 AS profit#112, wr_return_amt#100 AS return_amt#113, wr_net_loss#101 AS net_loss#114]
Input [8]: [wr_item_sk#98, wr_order_number#99, wr_return_amt#100, wr_net_loss#101, wr_returned_date_sk#102, ws_item_sk#104, ws_web_site_sk#105, ws_order_number#106]

(63) Union

(64) Scan parquet default.web_site
Output [2]: [web_site_sk#115, web_site_id#116]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(65) ColumnarToRow [codegen id : 19]
Input [2]: [web_site_sk#115, web_site_id#116]

(66) Filter [codegen id : 19]
Input [2]: [web_site_sk#115, web_site_id#116]
Condition : isnotnull(web_site_sk#115)

(67) BroadcastExchange
Input [2]: [web_site_sk#115, web_site_id#116]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#117]

(68) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [wsr_web_site_sk#92]
Right keys [1]: [web_site_sk#115]
Join condition: None

(69) Project [codegen id : 21]
Output [6]: [date_sk#93, sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_id#116]
Input [8]: [wsr_web_site_sk#92, date_sk#93, sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_sk#115, web_site_id#116]

(70) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#118]

(71) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [date_sk#93]
Right keys [1]: [d_date_sk#118]
Join condition: None

(72) Project [codegen id : 21]
Output [5]: [sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_id#116]
Input [7]: [date_sk#93, sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_id#116, d_date_sk#118]

(73) HashAggregate [codegen id : 21]
Input [5]: [sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_id#116]
Keys [1]: [web_site_id#116]
Functions [4]: [partial_sum(UnscaledValue(sales_price#94)), partial_sum(UnscaledValue(return_amt#96)), partial_sum(UnscaledValue(profit#95)), partial_sum(UnscaledValue(net_loss#97))]
Aggregate Attributes [4]: [sum#119, sum#120, sum#121, sum#122]
Results [5]: [web_site_id#116, sum#123, sum#124, sum#125, sum#126]

(74) Exchange
Input [5]: [web_site_id#116, sum#123, sum#124, sum#125, sum#126]
Arguments: hashpartitioning(web_site_id#116, 5), ENSURE_REQUIREMENTS, [id=#127]

(75) HashAggregate [codegen id : 22]
Input [5]: [web_site_id#116, sum#123, sum#124, sum#125, sum#126]
Keys [1]: [web_site_id#116]
Functions [4]: [sum(UnscaledValue(sales_price#94)), sum(UnscaledValue(return_amt#96)), sum(UnscaledValue(profit#95)), sum(UnscaledValue(net_loss#97))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#94))#128, sum(UnscaledValue(return_amt#96))#129, sum(UnscaledValue(profit#95))#130, sum(UnscaledValue(net_loss#97))#131]
Results [5]: [web channel AS channel#132, concat(web_site, web_site_id#116) AS id#133, MakeDecimal(sum(UnscaledValue(sales_price#94))#128,17,2) AS sales#134, MakeDecimal(sum(UnscaledValue(return_amt#96))#129,17,2) AS returns#135, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#95))#130,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#97))#131,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#136]

(76) Union

(77) HashAggregate [codegen id : 23]
Input [5]: [channel#41, id#42, sales#43, returns#44, profit#45]
Keys [2]: [channel#41, id#42]
Functions [3]: [partial_sum(sales#43), partial_sum(returns#44), partial_sum(profit#45)]
Aggregate Attributes [6]: [sum#137, isEmpty#138, sum#139, isEmpty#140, sum#141, isEmpty#142]
Results [8]: [channel#41, id#42, sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148]

(78) Exchange
Input [8]: [channel#41, id#42, sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148]
Arguments: hashpartitioning(channel#41, id#42, 5), ENSURE_REQUIREMENTS, [id=#149]

(79) HashAggregate [codegen id : 24]
Input [8]: [channel#41, id#42, sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#45)]
Aggregate Attributes [3]: [sum(sales#43)#150, sum(returns#44)#151, sum(profit#45)#152]
Results [5]: [channel#41, id#42, cast(sum(sales#43)#150 as decimal(37,2)) AS sales#153, cast(sum(returns#44)#151 as decimal(37,2)) AS returns#154, cast(sum(profit#45)#152 as decimal(38,2)) AS profit#155]

(80) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#41, id#42, sum#156, isEmpty#157, sum#158, isEmpty#159, sum#160, isEmpty#161]

(81) HashAggregate [codegen id : 48]
Input [8]: [channel#41, id#42, sum#156, isEmpty#157, sum#158, isEmpty#159, sum#160, isEmpty#161]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#45)]
Aggregate Attributes [3]: [sum(sales#43)#162, sum(returns#44)#163, sum(profit#45)#164]
Results [4]: [channel#41, sum(sales#43)#162 AS sales#165, sum(returns#44)#163 AS returns#166, sum(profit#45)#164 AS profit#167]

(82) HashAggregate [codegen id : 48]
Input [4]: [channel#41, sales#165, returns#166, profit#167]
Keys [1]: [channel#41]
Functions [3]: [partial_sum(sales#165), partial_sum(returns#166), partial_sum(profit#167)]
Aggregate Attributes [6]: [sum#168, isEmpty#169, sum#170, isEmpty#171, sum#172, isEmpty#173]
Results [7]: [channel#41, sum#174, isEmpty#175, sum#176, isEmpty#177, sum#178, isEmpty#179]

(83) Exchange
Input [7]: [channel#41, sum#174, isEmpty#175, sum#176, isEmpty#177, sum#178, isEmpty#179]
Arguments: hashpartitioning(channel#41, 5), ENSURE_REQUIREMENTS, [id=#180]

(84) HashAggregate [codegen id : 49]
Input [7]: [channel#41, sum#174, isEmpty#175, sum#176, isEmpty#177, sum#178, isEmpty#179]
Keys [1]: [channel#41]
Functions [3]: [sum(sales#165), sum(returns#166), sum(profit#167)]
Aggregate Attributes [3]: [sum(sales#165)#181, sum(returns#166)#182, sum(profit#167)#183]
Results [5]: [channel#41, null AS id#184, sum(sales#165)#181 AS sum(sales)#185, sum(returns#166)#182 AS sum(returns)#186, sum(profit#167)#183 AS sum(profit)#187]

(85) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#41, id#42, sum#188, isEmpty#189, sum#190, isEmpty#191, sum#192, isEmpty#193]

(86) HashAggregate [codegen id : 73]
Input [8]: [channel#41, id#42, sum#188, isEmpty#189, sum#190, isEmpty#191, sum#192, isEmpty#193]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#45)]
Aggregate Attributes [3]: [sum(sales#43)#194, sum(returns#44)#195, sum(profit#45)#196]
Results [3]: [sum(sales#43)#194 AS sales#165, sum(returns#44)#195 AS returns#166, sum(profit#45)#196 AS profit#167]

(87) HashAggregate [codegen id : 73]
Input [3]: [sales#165, returns#166, profit#167]
Keys: []
Functions [3]: [partial_sum(sales#165), partial_sum(returns#166), partial_sum(profit#167)]
Aggregate Attributes [6]: [sum#197, isEmpty#198, sum#199, isEmpty#200, sum#201, isEmpty#202]
Results [6]: [sum#203, isEmpty#204, sum#205, isEmpty#206, sum#207, isEmpty#208]

(88) Exchange
Input [6]: [sum#203, isEmpty#204, sum#205, isEmpty#206, sum#207, isEmpty#208]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#209]

(89) HashAggregate [codegen id : 74]
Input [6]: [sum#203, isEmpty#204, sum#205, isEmpty#206, sum#207, isEmpty#208]
Keys: []
Functions [3]: [sum(sales#165), sum(returns#166), sum(profit#167)]
Aggregate Attributes [3]: [sum(sales#165)#210, sum(returns#166)#211, sum(profit#167)#212]
Results [5]: [null AS channel#213, null AS id#214, sum(sales#165)#210 AS sum(sales)#215, sum(returns#166)#211 AS sum(returns)#216, sum(profit#167)#212 AS sum(profit)#217]

(90) Union

(91) HashAggregate [codegen id : 75]
Input [5]: [channel#41, id#42, sales#153, returns#154, profit#155]
Keys [5]: [channel#41, id#42, sales#153, returns#154, profit#155]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#41, id#42, sales#153, returns#154, profit#155]

(92) Exchange
Input [5]: [channel#41, id#42, sales#153, returns#154, profit#155]
Arguments: hashpartitioning(channel#41, id#42, sales#153, returns#154, profit#155, 5), ENSURE_REQUIREMENTS, [id=#218]

(93) HashAggregate [codegen id : 76]
Input [5]: [channel#41, id#42, sales#153, returns#154, profit#155]
Keys [5]: [channel#41, id#42, sales#153, returns#154, profit#155]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#41, id#42, sales#153, returns#154, profit#155]

(94) TakeOrderedAndProject
Input [5]: [channel#41, id#42, sales#153, returns#154, profit#155]
Arguments: 100, [channel#41 ASC NULLS FIRST, id#42 ASC NULLS FIRST], [channel#41, id#42, sales#153, returns#154, profit#155]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (95)


(95) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#25]

Subquery:2 Hosting operator id = 5 Hosting Expression = sr_returned_date_sk#15 IN dynamicpruning#5

Subquery:3 Hosting operator id = 26 Hosting Expression = cs_sold_date_sk#49 IN dynamicpruning#5

Subquery:4 Hosting operator id = 30 Hosting Expression = cr_returned_date_sk#59 IN dynamicpruning#5

Subquery:5 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#91 IN dynamicpruning#5

Subquery:6 Hosting operator id = 51 Hosting Expression = wr_returned_date_sk#102 IN dynamicpruning#5


