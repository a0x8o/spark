== Physical Plan ==
TakeOrderedAndProject (91)
+- * HashAggregate (90)
   +- Exchange (89)
      +- * HashAggregate (88)
         +- Union (87)
            :- * HashAggregate (76)
            :  +- Exchange (75)
            :     +- * HashAggregate (74)
            :        +- Union (73)
            :           :- * HashAggregate (25)
            :           :  +- Exchange (24)
            :           :     +- * HashAggregate (23)
            :           :        +- * Project (22)
            :           :           +- * BroadcastHashJoin Inner BuildRight (21)
            :           :              :- * Project (16)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (15)
            :           :              :     :- Union (9)
            :           :              :     :  :- * Project (4)
            :           :              :     :  :  +- * Filter (3)
            :           :              :     :  :     +- * ColumnarToRow (2)
            :           :              :     :  :        +- Scan parquet default.store_sales (1)
            :           :              :     :  +- * Project (8)
            :           :              :     :     +- * Filter (7)
            :           :              :     :        +- * ColumnarToRow (6)
            :           :              :     :           +- Scan parquet default.store_returns (5)
            :           :              :     +- BroadcastExchange (14)
            :           :              :        +- * Project (13)
            :           :              :           +- * Filter (12)
            :           :              :              +- * ColumnarToRow (11)
            :           :              :                 +- Scan parquet default.date_dim (10)
            :           :              +- BroadcastExchange (20)
            :           :                 +- * Filter (19)
            :           :                    +- * ColumnarToRow (18)
            :           :                       +- Scan parquet default.store (17)
            :           :- * HashAggregate (46)
            :           :  +- Exchange (45)
            :           :     +- * HashAggregate (44)
            :           :        +- * Project (43)
            :           :           +- * BroadcastHashJoin Inner BuildRight (42)
            :           :              :- * Project (37)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (36)
            :           :              :     :- Union (34)
            :           :              :     :  :- * Project (29)
            :           :              :     :  :  +- * Filter (28)
            :           :              :     :  :     +- * ColumnarToRow (27)
            :           :              :     :  :        +- Scan parquet default.catalog_sales (26)
            :           :              :     :  +- * Project (33)
            :           :              :     :     +- * Filter (32)
            :           :              :     :        +- * ColumnarToRow (31)
            :           :              :     :           +- Scan parquet default.catalog_returns (30)
            :           :              :     +- ReusedExchange (35)
            :           :              +- BroadcastExchange (41)
            :           :                 +- * Filter (40)
            :           :                    +- * ColumnarToRow (39)
            :           :                       +- Scan parquet default.catalog_page (38)
            :           +- * HashAggregate (72)
            :              +- Exchange (71)
            :                 +- * HashAggregate (70)
            :                    +- * Project (69)
            :                       +- * BroadcastHashJoin Inner BuildRight (68)
            :                          :- * Project (63)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (62)
            :                          :     :- Union (60)
            :                          :     :  :- * Project (50)
            :                          :     :  :  +- * Filter (49)
            :                          :     :  :     +- * ColumnarToRow (48)
            :                          :     :  :        +- Scan parquet default.web_sales (47)
            :                          :     :  +- * Project (59)
            :                          :     :     +- * BroadcastHashJoin Inner BuildLeft (58)
            :                          :     :        :- BroadcastExchange (53)
            :                          :     :        :  +- * ColumnarToRow (52)
            :                          :     :        :     +- Scan parquet default.web_returns (51)
            :                          :     :        +- * Project (57)
            :                          :     :           +- * Filter (56)
            :                          :     :              +- * ColumnarToRow (55)
            :                          :     :                 +- Scan parquet default.web_sales (54)
            :                          :     +- ReusedExchange (61)
            :                          +- BroadcastExchange (67)
            :                             +- * Filter (66)
            :                                +- * ColumnarToRow (65)
            :                                   +- Scan parquet default.web_site (64)
            :- * HashAggregate (81)
            :  +- Exchange (80)
            :     +- * HashAggregate (79)
            :        +- * HashAggregate (78)
            :           +- ReusedExchange (77)
            +- * HashAggregate (86)
               +- Exchange (85)
                  +- * HashAggregate (84)
                     +- * HashAggregate (83)
                        +- ReusedExchange (82)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cast(ss_sold_date_sk#4 as bigint)), dynamicpruningexpression(cast(ss_sold_date_sk#4 as bigint) IN dynamicpruning#5)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(cast(ss_store_sk#1 as bigint))

(4) Project [codegen id : 1]
Output [6]: [cast(ss_store_sk#1 as bigint) AS store_sk#6, cast(ss_sold_date_sk#4 as bigint) AS date_sk#7, ss_ext_sales_price#2 AS sales_price#8, ss_net_profit#3 AS profit#9, 0.00 AS return_amt#10, 0.00 AS net_loss#11]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) Scan parquet default.store_returns
Output [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#15), dynamicpruningexpression(sr_returned_date_sk#15 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(7) Filter [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Condition : isnotnull(sr_store_sk#12)

(8) Project [codegen id : 2]
Output [6]: [sr_store_sk#12 AS store_sk#16, sr_returned_date_sk#15 AS date_sk#17, 0.00 AS sales_price#18, 0.00 AS profit#19, sr_return_amt#13 AS return_amt#20, sr_net_loss#14 AS net_loss#21]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(9) Union

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#22, d_date#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(11) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#22, d_date#23]

(12) Filter [codegen id : 3]
Input [2]: [d_date_sk#22, d_date#23]
Condition : (((isnotnull(d_date#23) AND (d_date#23 >= 10442)) AND (d_date#23 <= 10456)) AND isnotnull(d_date_sk#22))

(13) Project [codegen id : 3]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_date#23]

(14) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(15) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [date_sk#7]
Right keys [1]: [cast(d_date_sk#22 as bigint)]
Join condition: None

(16) Project [codegen id : 5]
Output [5]: [store_sk#6, sales_price#8, profit#9, return_amt#10, net_loss#11]
Input [7]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, d_date_sk#22]

(17) Scan parquet default.store
Output [2]: [s_store_sk#25, s_store_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(18) ColumnarToRow [codegen id : 4]
Input [2]: [s_store_sk#25, s_store_id#26]

(19) Filter [codegen id : 4]
Input [2]: [s_store_sk#25, s_store_id#26]
Condition : isnotnull(s_store_sk#25)

(20) BroadcastExchange
Input [2]: [s_store_sk#25, s_store_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [store_sk#6]
Right keys [1]: [cast(s_store_sk#25 as bigint)]
Join condition: None

(22) Project [codegen id : 5]
Output [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#26]
Input [7]: [store_sk#6, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_sk#25, s_store_id#26]

(23) HashAggregate [codegen id : 5]
Input [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#26]
Keys [1]: [s_store_id#26]
Functions [4]: [partial_sum(UnscaledValue(sales_price#8)), partial_sum(UnscaledValue(return_amt#10)), partial_sum(UnscaledValue(profit#9)), partial_sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum#28, sum#29, sum#30, sum#31]
Results [5]: [s_store_id#26, sum#32, sum#33, sum#34, sum#35]

(24) Exchange
Input [5]: [s_store_id#26, sum#32, sum#33, sum#34, sum#35]
Arguments: hashpartitioning(s_store_id#26, 5), ENSURE_REQUIREMENTS, [id=#36]

(25) HashAggregate [codegen id : 6]
Input [5]: [s_store_id#26, sum#32, sum#33, sum#34, sum#35]
Keys [1]: [s_store_id#26]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#37, sum(UnscaledValue(return_amt#10))#38, sum(UnscaledValue(profit#9))#39, sum(UnscaledValue(net_loss#11))#40]
Results [5]: [store channel AS channel#41, concat(store, s_store_id#26) AS id#42, MakeDecimal(sum(UnscaledValue(sales_price#8))#37,17,2) AS sales#43, MakeDecimal(sum(UnscaledValue(return_amt#10))#38,17,2) AS returns#44, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#9))#39,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#11))#40,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#45]

(26) Scan parquet default.catalog_sales
Output [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#49), dynamicpruningexpression(cs_sold_date_sk#49 IN dynamicpruning#50)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]

(28) Filter [codegen id : 7]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]
Condition : isnotnull(cs_catalog_page_sk#46)

(29) Project [codegen id : 7]
Output [6]: [cs_catalog_page_sk#46 AS page_sk#51, cs_sold_date_sk#49 AS date_sk#52, cs_ext_sales_price#47 AS sales_price#53, cs_net_profit#48 AS profit#54, 0.00 AS return_amt#55, 0.00 AS net_loss#56]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]

(30) Scan parquet default.catalog_returns
Output [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#60), dynamicpruningexpression(cr_returned_date_sk#60 IN dynamicpruning#50)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(31) ColumnarToRow [codegen id : 8]
Input [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]

(32) Filter [codegen id : 8]
Input [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]
Condition : isnotnull(cr_catalog_page_sk#57)

(33) Project [codegen id : 8]
Output [6]: [cr_catalog_page_sk#57 AS page_sk#61, cr_returned_date_sk#60 AS date_sk#62, 0.00 AS sales_price#63, 0.00 AS profit#64, cr_return_amount#58 AS return_amt#65, cr_net_loss#59 AS net_loss#66]
Input [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]

(34) Union

(35) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#22]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [date_sk#52]
Right keys [1]: [d_date_sk#22]
Join condition: None

(37) Project [codegen id : 11]
Output [5]: [page_sk#51, sales_price#53, profit#54, return_amt#55, net_loss#56]
Input [7]: [page_sk#51, date_sk#52, sales_price#53, profit#54, return_amt#55, net_loss#56, d_date_sk#22]

(38) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#67, cp_catalog_page_id#68]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(39) ColumnarToRow [codegen id : 10]
Input [2]: [cp_catalog_page_sk#67, cp_catalog_page_id#68]

(40) Filter [codegen id : 10]
Input [2]: [cp_catalog_page_sk#67, cp_catalog_page_id#68]
Condition : isnotnull(cp_catalog_page_sk#67)

(41) BroadcastExchange
Input [2]: [cp_catalog_page_sk#67, cp_catalog_page_id#68]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69]

(42) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [page_sk#51]
Right keys [1]: [cp_catalog_page_sk#67]
Join condition: None

(43) Project [codegen id : 11]
Output [5]: [sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_id#68]
Input [7]: [page_sk#51, sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_sk#67, cp_catalog_page_id#68]

(44) HashAggregate [codegen id : 11]
Input [5]: [sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_id#68]
Keys [1]: [cp_catalog_page_id#68]
Functions [4]: [partial_sum(UnscaledValue(sales_price#53)), partial_sum(UnscaledValue(return_amt#55)), partial_sum(UnscaledValue(profit#54)), partial_sum(UnscaledValue(net_loss#56))]
Aggregate Attributes [4]: [sum#70, sum#71, sum#72, sum#73]
Results [5]: [cp_catalog_page_id#68, sum#74, sum#75, sum#76, sum#77]

(45) Exchange
Input [5]: [cp_catalog_page_id#68, sum#74, sum#75, sum#76, sum#77]
Arguments: hashpartitioning(cp_catalog_page_id#68, 5), ENSURE_REQUIREMENTS, [id=#78]

(46) HashAggregate [codegen id : 12]
Input [5]: [cp_catalog_page_id#68, sum#74, sum#75, sum#76, sum#77]
Keys [1]: [cp_catalog_page_id#68]
Functions [4]: [sum(UnscaledValue(sales_price#53)), sum(UnscaledValue(return_amt#55)), sum(UnscaledValue(profit#54)), sum(UnscaledValue(net_loss#56))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#53))#79, sum(UnscaledValue(return_amt#55))#80, sum(UnscaledValue(profit#54))#81, sum(UnscaledValue(net_loss#56))#82]
Results [5]: [catalog channel AS channel#83, concat(catalog_page, cp_catalog_page_id#68) AS id#84, MakeDecimal(sum(UnscaledValue(sales_price#53))#79,17,2) AS sales#85, MakeDecimal(sum(UnscaledValue(return_amt#55))#80,17,2) AS returns#86, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#54))#81,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#56))#82,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#87]

(47) Scan parquet default.web_sales
Output [4]: [ws_web_site_sk#88, ws_ext_sales_price#89, ws_net_profit#90, ws_sold_date_sk#91]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cast(ws_sold_date_sk#91 as bigint)), dynamicpruningexpression(cast(ws_sold_date_sk#91 as bigint) IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(48) ColumnarToRow [codegen id : 13]
Input [4]: [ws_web_site_sk#88, ws_ext_sales_price#89, ws_net_profit#90, ws_sold_date_sk#91]

(49) Filter [codegen id : 13]
Input [4]: [ws_web_site_sk#88, ws_ext_sales_price#89, ws_net_profit#90, ws_sold_date_sk#91]
Condition : isnotnull(ws_web_site_sk#88)

(50) Project [codegen id : 13]
Output [6]: [ws_web_site_sk#88 AS wsr_web_site_sk#92, cast(ws_sold_date_sk#91 as bigint) AS date_sk#93, ws_ext_sales_price#89 AS sales_price#94, ws_net_profit#90 AS profit#95, 0.00 AS return_amt#96, 0.00 AS net_loss#97]
Input [4]: [ws_web_site_sk#88, ws_ext_sales_price#89, ws_net_profit#90, ws_sold_date_sk#91]

(51) Scan parquet default.web_returns
Output [5]: [wr_item_sk#98, wr_order_number#99, wr_return_amt#100, wr_net_loss#101, wr_returned_date_sk#102]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#102), dynamicpruningexpression(wr_returned_date_sk#102 IN dynamicpruning#5)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(52) ColumnarToRow [codegen id : 14]
Input [5]: [wr_item_sk#98, wr_order_number#99, wr_return_amt#100, wr_net_loss#101, wr_returned_date_sk#102]

(53) BroadcastExchange
Input [5]: [wr_item_sk#98, wr_order_number#99, wr_return_amt#100, wr_net_loss#101, wr_returned_date_sk#102]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true], input[1, bigint, true]),false), [id=#103]

(54) Scan parquet default.web_sales
Output [4]: [ws_item_sk#104, ws_web_site_sk#88, ws_order_number#105, ws_sold_date_sk#91]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(55) ColumnarToRow
Input [4]: [ws_item_sk#104, ws_web_site_sk#88, ws_order_number#105, ws_sold_date_sk#91]

(56) Filter
Input [4]: [ws_item_sk#104, ws_web_site_sk#88, ws_order_number#105, ws_sold_date_sk#91]
Condition : ((isnotnull(ws_item_sk#104) AND isnotnull(ws_order_number#105)) AND isnotnull(ws_web_site_sk#88))

(57) Project
Output [3]: [ws_item_sk#104, ws_web_site_sk#88, ws_order_number#105]
Input [4]: [ws_item_sk#104, ws_web_site_sk#88, ws_order_number#105, ws_sold_date_sk#91]

(58) BroadcastHashJoin [codegen id : 15]
Left keys [2]: [wr_item_sk#98, wr_order_number#99]
Right keys [2]: [cast(ws_item_sk#104 as bigint), cast(ws_order_number#105 as bigint)]
Join condition: None

(59) Project [codegen id : 15]
Output [6]: [ws_web_site_sk#88 AS wsr_web_site_sk#106, wr_returned_date_sk#102 AS date_sk#107, 0.00 AS sales_price#108, 0.00 AS profit#109, wr_return_amt#100 AS return_amt#110, wr_net_loss#101 AS net_loss#111]
Input [8]: [wr_item_sk#98, wr_order_number#99, wr_return_amt#100, wr_net_loss#101, wr_returned_date_sk#102, ws_item_sk#104, ws_web_site_sk#88, ws_order_number#105]

(60) Union

(61) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#22]

(62) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [date_sk#93]
Right keys [1]: [cast(d_date_sk#22 as bigint)]
Join condition: None

(63) Project [codegen id : 18]
Output [5]: [wsr_web_site_sk#92, sales_price#94, profit#95, return_amt#96, net_loss#97]
Input [7]: [wsr_web_site_sk#92, date_sk#93, sales_price#94, profit#95, return_amt#96, net_loss#97, d_date_sk#22]

(64) Scan parquet default.web_site
Output [2]: [web_site_sk#112, web_site_id#113]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(65) ColumnarToRow [codegen id : 17]
Input [2]: [web_site_sk#112, web_site_id#113]

(66) Filter [codegen id : 17]
Input [2]: [web_site_sk#112, web_site_id#113]
Condition : isnotnull(web_site_sk#112)

(67) BroadcastExchange
Input [2]: [web_site_sk#112, web_site_id#113]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114]

(68) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [wsr_web_site_sk#92]
Right keys [1]: [web_site_sk#112]
Join condition: None

(69) Project [codegen id : 18]
Output [5]: [sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_id#113]
Input [7]: [wsr_web_site_sk#92, sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_sk#112, web_site_id#113]

(70) HashAggregate [codegen id : 18]
Input [5]: [sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_id#113]
Keys [1]: [web_site_id#113]
Functions [4]: [partial_sum(UnscaledValue(sales_price#94)), partial_sum(UnscaledValue(return_amt#96)), partial_sum(UnscaledValue(profit#95)), partial_sum(UnscaledValue(net_loss#97))]
Aggregate Attributes [4]: [sum#115, sum#116, sum#117, sum#118]
Results [5]: [web_site_id#113, sum#119, sum#120, sum#121, sum#122]

(71) Exchange
Input [5]: [web_site_id#113, sum#119, sum#120, sum#121, sum#122]
Arguments: hashpartitioning(web_site_id#113, 5), ENSURE_REQUIREMENTS, [id=#123]

(72) HashAggregate [codegen id : 19]
Input [5]: [web_site_id#113, sum#119, sum#120, sum#121, sum#122]
Keys [1]: [web_site_id#113]
Functions [4]: [sum(UnscaledValue(sales_price#94)), sum(UnscaledValue(return_amt#96)), sum(UnscaledValue(profit#95)), sum(UnscaledValue(net_loss#97))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#94))#124, sum(UnscaledValue(return_amt#96))#125, sum(UnscaledValue(profit#95))#126, sum(UnscaledValue(net_loss#97))#127]
Results [5]: [web channel AS channel#128, concat(web_site, web_site_id#113) AS id#129, MakeDecimal(sum(UnscaledValue(sales_price#94))#124,17,2) AS sales#130, MakeDecimal(sum(UnscaledValue(return_amt#96))#125,17,2) AS returns#131, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#95))#126,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#97))#127,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#132]

(73) Union

(74) HashAggregate [codegen id : 20]
Input [5]: [channel#41, id#42, sales#43, returns#44, profit#45]
Keys [2]: [channel#41, id#42]
Functions [3]: [partial_sum(sales#43), partial_sum(returns#44), partial_sum(profit#45)]
Aggregate Attributes [6]: [sum#133, isEmpty#134, sum#135, isEmpty#136, sum#137, isEmpty#138]
Results [8]: [channel#41, id#42, sum#139, isEmpty#140, sum#141, isEmpty#142, sum#143, isEmpty#144]

(75) Exchange
Input [8]: [channel#41, id#42, sum#139, isEmpty#140, sum#141, isEmpty#142, sum#143, isEmpty#144]
Arguments: hashpartitioning(channel#41, id#42, 5), ENSURE_REQUIREMENTS, [id=#145]

(76) HashAggregate [codegen id : 21]
Input [8]: [channel#41, id#42, sum#139, isEmpty#140, sum#141, isEmpty#142, sum#143, isEmpty#144]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#45)]
Aggregate Attributes [3]: [sum(sales#43)#146, sum(returns#44)#147, sum(profit#45)#148]
Results [5]: [channel#41, id#42, cast(sum(sales#43)#146 as decimal(37,2)) AS sales#149, cast(sum(returns#44)#147 as decimal(37,2)) AS returns#150, cast(sum(profit#45)#148 as decimal(38,2)) AS profit#151]

(77) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#41, id#42, sum#152, isEmpty#153, sum#154, isEmpty#155, sum#156, isEmpty#157]

(78) HashAggregate [codegen id : 42]
Input [8]: [channel#41, id#42, sum#152, isEmpty#153, sum#154, isEmpty#155, sum#156, isEmpty#157]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#158)]
Aggregate Attributes [3]: [sum(sales#43)#159, sum(returns#44)#160, sum(profit#158)#161]
Results [4]: [channel#41, sum(sales#43)#159 AS sales#162, sum(returns#44)#160 AS returns#163, sum(profit#158)#161 AS profit#164]

(79) HashAggregate [codegen id : 42]
Input [4]: [channel#41, sales#162, returns#163, profit#164]
Keys [1]: [channel#41]
Functions [3]: [partial_sum(sales#162), partial_sum(returns#163), partial_sum(profit#164)]
Aggregate Attributes [6]: [sum#165, isEmpty#166, sum#167, isEmpty#168, sum#169, isEmpty#170]
Results [7]: [channel#41, sum#171, isEmpty#172, sum#173, isEmpty#174, sum#175, isEmpty#176]

(80) Exchange
Input [7]: [channel#41, sum#171, isEmpty#172, sum#173, isEmpty#174, sum#175, isEmpty#176]
Arguments: hashpartitioning(channel#41, 5), ENSURE_REQUIREMENTS, [id=#177]

(81) HashAggregate [codegen id : 43]
Input [7]: [channel#41, sum#171, isEmpty#172, sum#173, isEmpty#174, sum#175, isEmpty#176]
Keys [1]: [channel#41]
Functions [3]: [sum(sales#162), sum(returns#163), sum(profit#164)]
Aggregate Attributes [3]: [sum(sales#162)#178, sum(returns#163)#179, sum(profit#164)#180]
Results [5]: [channel#41, null AS id#181, sum(sales#162)#178 AS sum(sales)#182, sum(returns#163)#179 AS sum(returns)#183, sum(profit#164)#180 AS sum(profit)#184]

(82) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#41, id#42, sum#185, isEmpty#186, sum#187, isEmpty#188, sum#189, isEmpty#190]

(83) HashAggregate [codegen id : 64]
Input [8]: [channel#41, id#42, sum#185, isEmpty#186, sum#187, isEmpty#188, sum#189, isEmpty#190]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#191)]
Aggregate Attributes [3]: [sum(sales#43)#192, sum(returns#44)#193, sum(profit#191)#194]
Results [3]: [sum(sales#43)#192 AS sales#162, sum(returns#44)#193 AS returns#163, sum(profit#191)#194 AS profit#164]

(84) HashAggregate [codegen id : 64]
Input [3]: [sales#162, returns#163, profit#164]
Keys: []
Functions [3]: [partial_sum(sales#162), partial_sum(returns#163), partial_sum(profit#164)]
Aggregate Attributes [6]: [sum#195, isEmpty#196, sum#197, isEmpty#198, sum#199, isEmpty#200]
Results [6]: [sum#201, isEmpty#202, sum#203, isEmpty#204, sum#205, isEmpty#206]

(85) Exchange
Input [6]: [sum#201, isEmpty#202, sum#203, isEmpty#204, sum#205, isEmpty#206]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#207]

(86) HashAggregate [codegen id : 65]
Input [6]: [sum#201, isEmpty#202, sum#203, isEmpty#204, sum#205, isEmpty#206]
Keys: []
Functions [3]: [sum(sales#162), sum(returns#163), sum(profit#164)]
Aggregate Attributes [3]: [sum(sales#162)#208, sum(returns#163)#209, sum(profit#164)#210]
Results [5]: [null AS channel#211, null AS id#212, sum(sales#162)#208 AS sum(sales)#213, sum(returns#163)#209 AS sum(returns)#214, sum(profit#164)#210 AS sum(profit)#215]

(87) Union

(88) HashAggregate [codegen id : 66]
Input [5]: [channel#41, id#42, sales#149, returns#150, profit#151]
Keys [5]: [channel#41, id#42, sales#149, returns#150, profit#151]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#41, id#42, sales#149, returns#150, profit#151]

(89) Exchange
Input [5]: [channel#41, id#42, sales#149, returns#150, profit#151]
Arguments: hashpartitioning(channel#41, id#42, sales#149, returns#150, profit#151, 5), ENSURE_REQUIREMENTS, [id=#216]

(90) HashAggregate [codegen id : 67]
Input [5]: [channel#41, id#42, sales#149, returns#150, profit#151]
Keys [5]: [channel#41, id#42, sales#149, returns#150, profit#151]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#41, id#42, sales#149, returns#150, profit#151]

(91) TakeOrderedAndProject
Input [5]: [channel#41, id#42, sales#149, returns#150, profit#151]
Arguments: 100, [channel#41 ASC NULLS FIRST, id#42 ASC NULLS FIRST], [channel#41, id#42, sales#149, returns#150, profit#151]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cast(ss_sold_date_sk#4 as bigint) IN dynamicpruning#5
ReusedExchange (92)


(92) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#22]

Subquery:2 Hosting operator id = 5 Hosting Expression = sr_returned_date_sk#15 IN dynamicpruning#5

Subquery:3 Hosting operator id = 26 Hosting Expression = cs_sold_date_sk#49 IN dynamicpruning#50
ReusedExchange (93)


(93) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#22]

Subquery:4 Hosting operator id = 30 Hosting Expression = cr_returned_date_sk#60 IN dynamicpruning#50

Subquery:5 Hosting operator id = 47 Hosting Expression = cast(ws_sold_date_sk#91 as bigint) IN dynamicpruning#5

Subquery:6 Hosting operator id = 51 Hosting Expression = wr_returned_date_sk#102 IN dynamicpruning#5


