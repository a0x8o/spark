== Physical Plan ==
TakeOrderedAndProject (60)
+- * Project (59)
   +- Window (58)
      +- * Sort (57)
         +- Exchange (56)
            +- * HashAggregate (55)
               +- Exchange (54)
                  +- * HashAggregate (53)
                     +- Union (52)
                        :- * HashAggregate (41)
                        :  +- Exchange (40)
                        :     +- * HashAggregate (39)
                        :        +- * Project (38)
                        :           +- * BroadcastHashJoin Inner BuildRight (37)
                        :              :- * Project (10)
                        :              :  +- * BroadcastHashJoin Inner BuildRight (9)
                        :              :     :- * Filter (3)
                        :              :     :  +- * ColumnarToRow (2)
                        :              :     :     +- Scan parquet default.store_sales (1)
                        :              :     +- BroadcastExchange (8)
                        :              :        +- * Project (7)
                        :              :           +- * Filter (6)
                        :              :              +- * ColumnarToRow (5)
                        :              :                 +- Scan parquet default.date_dim (4)
                        :              +- BroadcastExchange (36)
                        :                 +- * BroadcastHashJoin LeftSemi BuildRight (35)
                        :                    :- * Filter (13)
                        :                    :  +- * ColumnarToRow (12)
                        :                    :     +- Scan parquet default.store (11)
                        :                    +- BroadcastExchange (34)
                        :                       +- * Project (33)
                        :                          +- * Filter (32)
                        :                             +- Window (31)
                        :                                +- * Sort (30)
                        :                                   +- Exchange (29)
                        :                                      +- * HashAggregate (28)
                        :                                         +- Exchange (27)
                        :                                            +- * HashAggregate (26)
                        :                                               +- * Project (25)
                        :                                                  +- * BroadcastHashJoin Inner BuildRight (24)
                        :                                                     :- * Project (22)
                        :                                                     :  +- * BroadcastHashJoin Inner BuildRight (21)
                        :                                                     :     :- * Filter (16)
                        :                                                     :     :  +- * ColumnarToRow (15)
                        :                                                     :     :     +- Scan parquet default.store_sales (14)
                        :                                                     :     +- BroadcastExchange (20)
                        :                                                     :        +- * Filter (19)
                        :                                                     :           +- * ColumnarToRow (18)
                        :                                                     :              +- Scan parquet default.store (17)
                        :                                                     +- ReusedExchange (23)
                        :- * HashAggregate (46)
                        :  +- Exchange (45)
                        :     +- * HashAggregate (44)
                        :        +- * HashAggregate (43)
                        :           +- ReusedExchange (42)
                        +- * HashAggregate (51)
                           +- Exchange (50)
                              +- * HashAggregate (49)
                                 +- * HashAggregate (48)
                                    +- ReusedExchange (47)


(1) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 9]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 9]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#6]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#6]

(8) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 9]
Output [2]: [ss_store_sk#1, ss_net_profit#2]
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#5]

(11) Scan parquet default.store
Output [3]: [s_store_sk#8, s_county#9, s_state#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(12) ColumnarToRow [codegen id : 8]
Input [3]: [s_store_sk#8, s_county#9, s_state#10]

(13) Filter [codegen id : 8]
Input [3]: [s_store_sk#8, s_county#9, s_state#10]
Condition : isnotnull(s_store_sk#8)

(14) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(15) ColumnarToRow [codegen id : 4]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(16) Filter [codegen id : 4]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(17) Scan parquet default.store
Output [2]: [s_store_sk#8, s_state#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(18) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#8, s_state#10]

(19) Filter [codegen id : 2]
Input [2]: [s_store_sk#8, s_state#10]
Condition : isnotnull(s_store_sk#8)

(20) BroadcastExchange
Input [2]: [s_store_sk#8, s_state#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#8]
Join condition: None

(22) Project [codegen id : 4]
Output [3]: [ss_net_profit#2, ss_sold_date_sk#3, s_state#10]
Input [5]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, s_store_sk#8, s_state#10]

(23) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#5]

(24) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(25) Project [codegen id : 4]
Output [2]: [ss_net_profit#2, s_state#10]
Input [4]: [ss_net_profit#2, ss_sold_date_sk#3, s_state#10, d_date_sk#5]

(26) HashAggregate [codegen id : 4]
Input [2]: [ss_net_profit#2, s_state#10]
Keys [1]: [s_state#10]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#12]
Results [2]: [s_state#10, sum#13]

(27) Exchange
Input [2]: [s_state#10, sum#13]
Arguments: hashpartitioning(s_state#10, 5), ENSURE_REQUIREMENTS, [id=#14]

(28) HashAggregate [codegen id : 5]
Input [2]: [s_state#10, sum#13]
Keys [1]: [s_state#10]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#15]
Results [3]: [s_state#10 AS s_state#16, s_state#10, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#15,17,2) AS _w2#17]

(29) Exchange
Input [3]: [s_state#16, s_state#10, _w2#17]
Arguments: hashpartitioning(s_state#10, 5), ENSURE_REQUIREMENTS, [id=#18]

(30) Sort [codegen id : 6]
Input [3]: [s_state#16, s_state#10, _w2#17]
Arguments: [s_state#10 ASC NULLS FIRST, _w2#17 DESC NULLS LAST], false, 0

(31) Window
Input [3]: [s_state#16, s_state#10, _w2#17]
Arguments: [rank(_w2#17) windowspecdefinition(s_state#10, _w2#17 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#19], [s_state#10], [_w2#17 DESC NULLS LAST]

(32) Filter [codegen id : 7]
Input [4]: [s_state#16, s_state#10, _w2#17, ranking#19]
Condition : (isnotnull(ranking#19) AND (ranking#19 <= 5))

(33) Project [codegen id : 7]
Output [1]: [s_state#16]
Input [4]: [s_state#16, s_state#10, _w2#17, ranking#19]

(34) BroadcastExchange
Input [1]: [s_state#16]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#20]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [s_state#10]
Right keys [1]: [s_state#16]
Join condition: None

(36) BroadcastExchange
Input [3]: [s_store_sk#8, s_county#9, s_state#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#8]
Join condition: None

(38) Project [codegen id : 9]
Output [3]: [ss_net_profit#2, s_county#9, s_state#10]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#8, s_county#9, s_state#10]

(39) HashAggregate [codegen id : 9]
Input [3]: [ss_net_profit#2, s_county#9, s_state#10]
Keys [2]: [s_state#10, s_county#9]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#22]
Results [3]: [s_state#10, s_county#9, sum#23]

(40) Exchange
Input [3]: [s_state#10, s_county#9, sum#23]
Arguments: hashpartitioning(s_state#10, s_county#9, 5), ENSURE_REQUIREMENTS, [id=#24]

(41) HashAggregate [codegen id : 10]
Input [3]: [s_state#10, s_county#9, sum#23]
Keys [2]: [s_state#10, s_county#9]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#25]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#25,17,2) as decimal(27,2)) AS total_sum#26, s_state#10, s_county#9, 0 AS g_state#27, 0 AS g_county#28, 0 AS lochierarchy#29]

(42) ReusedExchange [Reuses operator id: unknown]
Output [3]: [s_state#10, s_county#9, sum#30]

(43) HashAggregate [codegen id : 20]
Input [3]: [s_state#10, s_county#9, sum#30]
Keys [2]: [s_state#10, s_county#9]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#31]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#31,17,2) AS total_sum#32, s_state#10]

(44) HashAggregate [codegen id : 20]
Input [2]: [total_sum#32, s_state#10]
Keys [1]: [s_state#10]
Functions [1]: [partial_sum(total_sum#32)]
Aggregate Attributes [2]: [sum#33, isEmpty#34]
Results [3]: [s_state#10, sum#35, isEmpty#36]

(45) Exchange
Input [3]: [s_state#10, sum#35, isEmpty#36]
Arguments: hashpartitioning(s_state#10, 5), ENSURE_REQUIREMENTS, [id=#37]

(46) HashAggregate [codegen id : 21]
Input [3]: [s_state#10, sum#35, isEmpty#36]
Keys [1]: [s_state#10]
Functions [1]: [sum(total_sum#32)]
Aggregate Attributes [1]: [sum(total_sum#32)#38]
Results [6]: [sum(total_sum#32)#38 AS total_sum#39, s_state#10, null AS s_county#40, 0 AS g_state#41, 1 AS g_county#42, 1 AS lochierarchy#43]

(47) ReusedExchange [Reuses operator id: unknown]
Output [3]: [s_state#10, s_county#9, sum#44]

(48) HashAggregate [codegen id : 31]
Input [3]: [s_state#10, s_county#9, sum#44]
Keys [2]: [s_state#10, s_county#9]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#45]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#45,17,2) AS total_sum#32]

(49) HashAggregate [codegen id : 31]
Input [1]: [total_sum#32]
Keys: []
Functions [1]: [partial_sum(total_sum#32)]
Aggregate Attributes [2]: [sum#46, isEmpty#47]
Results [2]: [sum#48, isEmpty#49]

(50) Exchange
Input [2]: [sum#48, isEmpty#49]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#50]

(51) HashAggregate [codegen id : 32]
Input [2]: [sum#48, isEmpty#49]
Keys: []
Functions [1]: [sum(total_sum#32)]
Aggregate Attributes [1]: [sum(total_sum#32)#51]
Results [6]: [sum(total_sum#32)#51 AS total_sum#52, null AS s_state#53, null AS s_county#54, 1 AS g_state#55, 1 AS g_county#56, 2 AS lochierarchy#57]

(52) Union

(53) HashAggregate [codegen id : 33]
Input [6]: [total_sum#26, s_state#10, s_county#9, g_state#27, g_county#28, lochierarchy#29]
Keys [6]: [total_sum#26, s_state#10, s_county#9, g_state#27, g_county#28, lochierarchy#29]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#26, s_state#10, s_county#9, g_state#27, g_county#28, lochierarchy#29]

(54) Exchange
Input [6]: [total_sum#26, s_state#10, s_county#9, g_state#27, g_county#28, lochierarchy#29]
Arguments: hashpartitioning(total_sum#26, s_state#10, s_county#9, g_state#27, g_county#28, lochierarchy#29, 5), ENSURE_REQUIREMENTS, [id=#58]

(55) HashAggregate [codegen id : 34]
Input [6]: [total_sum#26, s_state#10, s_county#9, g_state#27, g_county#28, lochierarchy#29]
Keys [6]: [total_sum#26, s_state#10, s_county#9, g_state#27, g_county#28, lochierarchy#29]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#26, s_state#10, s_county#9, lochierarchy#29, CASE WHEN (g_county#28 = 0) THEN s_state#10 END AS _w0#59]

(56) Exchange
Input [5]: [total_sum#26, s_state#10, s_county#9, lochierarchy#29, _w0#59]
Arguments: hashpartitioning(lochierarchy#29, _w0#59, 5), ENSURE_REQUIREMENTS, [id=#60]

(57) Sort [codegen id : 35]
Input [5]: [total_sum#26, s_state#10, s_county#9, lochierarchy#29, _w0#59]
Arguments: [lochierarchy#29 ASC NULLS FIRST, _w0#59 ASC NULLS FIRST, total_sum#26 DESC NULLS LAST], false, 0

(58) Window
Input [5]: [total_sum#26, s_state#10, s_county#9, lochierarchy#29, _w0#59]
Arguments: [rank(total_sum#26) windowspecdefinition(lochierarchy#29, _w0#59, total_sum#26 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#61], [lochierarchy#29, _w0#59], [total_sum#26 DESC NULLS LAST]

(59) Project [codegen id : 36]
Output [5]: [total_sum#26, s_state#10, s_county#9, lochierarchy#29, rank_within_parent#61]
Input [6]: [total_sum#26, s_state#10, s_county#9, lochierarchy#29, _w0#59, rank_within_parent#61]

(60) TakeOrderedAndProject
Input [5]: [total_sum#26, s_state#10, s_county#9, lochierarchy#29, rank_within_parent#61]
Arguments: 100, [lochierarchy#29 DESC NULLS LAST, CASE WHEN (lochierarchy#29 = 0) THEN s_state#10 END ASC NULLS FIRST, rank_within_parent#61 ASC NULLS FIRST], [total_sum#26, s_state#10, s_county#9, lochierarchy#29, rank_within_parent#61]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
ReusedExchange (61)


(61) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#5]

Subquery:2 Hosting operator id = 14 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4


