== Physical Plan ==
TakeOrderedAndProject (54)
+- * HashAggregate (53)
   +- Exchange (52)
      +- * HashAggregate (51)
         +- * Project (50)
            +- * SortMergeJoin Inner (49)
               :- * Sort (43)
               :  +- Exchange (42)
               :     +- * Project (41)
               :        +- * SortMergeJoin Inner (40)
               :           :- * Sort (34)
               :           :  +- Exchange (33)
               :           :     +- * Project (32)
               :           :        +- SortMergeJoin LeftSemi (31)
               :           :           :- SortMergeJoin LeftSemi (17)
               :           :           :  :- * Sort (5)
               :           :           :  :  +- Exchange (4)
               :           :           :  :     +- * Filter (3)
               :           :           :  :        +- * ColumnarToRow (2)
               :           :           :  :           +- Scan parquet default.customer (1)
               :           :           :  +- * Sort (16)
               :           :           :     +- Exchange (15)
               :           :           :        +- * Project (14)
               :           :           :           +- * BroadcastHashJoin Inner BuildRight (13)
               :           :           :              :- * ColumnarToRow (7)
               :           :           :              :  +- Scan parquet default.store_sales (6)
               :           :           :              +- BroadcastExchange (12)
               :           :           :                 +- * Project (11)
               :           :           :                    +- * Filter (10)
               :           :           :                       +- * ColumnarToRow (9)
               :           :           :                          +- Scan parquet default.date_dim (8)
               :           :           +- * Sort (30)
               :           :              +- Exchange (29)
               :           :                 +- Union (28)
               :           :                    :- * Project (22)
               :           :                    :  +- * BroadcastHashJoin Inner BuildRight (21)
               :           :                    :     :- * ColumnarToRow (19)
               :           :                    :     :  +- Scan parquet default.web_sales (18)
               :           :                    :     +- ReusedExchange (20)
               :           :                    +- * Project (27)
               :           :                       +- * BroadcastHashJoin Inner BuildRight (26)
               :           :                          :- * ColumnarToRow (24)
               :           :                          :  +- Scan parquet default.catalog_sales (23)
               :           :                          +- ReusedExchange (25)
               :           +- * Sort (39)
               :              +- Exchange (38)
               :                 +- * Filter (37)
               :                    +- * ColumnarToRow (36)
               :                       +- Scan parquet default.customer_address (35)
               +- * Sort (48)
                  +- Exchange (47)
                     +- * Filter (46)
                        +- * ColumnarToRow (45)
                           +- Scan parquet default.customer_demographics (44)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#4]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
ReadSchema: struct<ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_customer_sk#5, ss_sold_date_sk#6]

(8) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_year#9, d_qoy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,1999), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(9) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#8, d_year#9, d_qoy#10]

(10) Filter [codegen id : 3]
Input [3]: [d_date_sk#8, d_year#9, d_qoy#10]
Condition : ((((isnotnull(d_year#9) AND isnotnull(d_qoy#10)) AND (d_year#9 = 1999)) AND (d_qoy#10 < 4)) AND isnotnull(d_date_sk#8))

(11) Project [codegen id : 3]
Output [1]: [d_date_sk#8]
Input [3]: [d_date_sk#8, d_year#9, d_qoy#10]

(12) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(13) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(14) Project [codegen id : 4]
Output [1]: [ss_customer_sk#5]
Input [3]: [ss_customer_sk#5, ss_sold_date_sk#6, d_date_sk#8]

(15) Exchange
Input [1]: [ss_customer_sk#5]
Arguments: hashpartitioning(ss_customer_sk#5, 5), ENSURE_REQUIREMENTS, [id=#12]

(16) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#5]
Arguments: [ss_customer_sk#5 ASC NULLS FIRST], false, 0

(17) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#5]
Join condition: None

(18) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#13, ws_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#14), dynamicpruningexpression(ws_sold_date_sk#14 IN dynamicpruning#7)]
ReadSchema: struct<ws_bill_customer_sk:int>

(19) ColumnarToRow [codegen id : 7]
Input [2]: [ws_bill_customer_sk#13, ws_sold_date_sk#14]

(20) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#15]

(21) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ws_sold_date_sk#14]
Right keys [1]: [d_date_sk#15]
Join condition: None

(22) Project [codegen id : 7]
Output [1]: [ws_bill_customer_sk#13 AS customsk#16]
Input [3]: [ws_bill_customer_sk#13, ws_sold_date_sk#14, d_date_sk#15]

(23) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#7)]
ReadSchema: struct<cs_ship_customer_sk:int>

(24) ColumnarToRow [codegen id : 9]
Input [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]

(25) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#19]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#19]
Join condition: None

(27) Project [codegen id : 9]
Output [1]: [cs_ship_customer_sk#17 AS customsk#20]
Input [3]: [cs_ship_customer_sk#17, cs_sold_date_sk#18, d_date_sk#19]

(28) Union

(29) Exchange
Input [1]: [customsk#16]
Arguments: hashpartitioning(customsk#16, 5), ENSURE_REQUIREMENTS, [id=#21]

(30) Sort [codegen id : 10]
Input [1]: [customsk#16]
Arguments: [customsk#16 ASC NULLS FIRST], false, 0

(31) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customsk#16]
Join condition: None

(32) Project [codegen id : 11]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(33) Exchange
Input [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_current_addr_sk#3, 5), ENSURE_REQUIREMENTS, [id=#22]

(34) Sort [codegen id : 12]
Input [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_current_addr_sk#3 ASC NULLS FIRST], false, 0

(35) Scan parquet default.customer_address
Output [2]: [ca_address_sk#23, ca_state#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(36) ColumnarToRow [codegen id : 13]
Input [2]: [ca_address_sk#23, ca_state#24]

(37) Filter [codegen id : 13]
Input [2]: [ca_address_sk#23, ca_state#24]
Condition : isnotnull(ca_address_sk#23)

(38) Exchange
Input [2]: [ca_address_sk#23, ca_state#24]
Arguments: hashpartitioning(ca_address_sk#23, 5), ENSURE_REQUIREMENTS, [id=#25]

(39) Sort [codegen id : 14]
Input [2]: [ca_address_sk#23, ca_state#24]
Arguments: [ca_address_sk#23 ASC NULLS FIRST], false, 0

(40) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#23]
Join condition: None

(41) Project [codegen id : 15]
Output [2]: [c_current_cdemo_sk#2, ca_state#24]
Input [4]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#23, ca_state#24]

(42) Exchange
Input [2]: [c_current_cdemo_sk#2, ca_state#24]
Arguments: hashpartitioning(c_current_cdemo_sk#2, 5), ENSURE_REQUIREMENTS, [id=#26]

(43) Sort [codegen id : 16]
Input [2]: [c_current_cdemo_sk#2, ca_state#24]
Arguments: [c_current_cdemo_sk#2 ASC NULLS FIRST], false, 0

(44) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#27, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(45) ColumnarToRow [codegen id : 17]
Input [6]: [cd_demo_sk#27, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]

(46) Filter [codegen id : 17]
Input [6]: [cd_demo_sk#27, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Condition : isnotnull(cd_demo_sk#27)

(47) Exchange
Input [6]: [cd_demo_sk#27, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Arguments: hashpartitioning(cd_demo_sk#27, 5), ENSURE_REQUIREMENTS, [id=#33]

(48) Sort [codegen id : 18]
Input [6]: [cd_demo_sk#27, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Arguments: [cd_demo_sk#27 ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 19]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#27]
Join condition: None

(50) Project [codegen id : 19]
Output [6]: [ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Input [8]: [c_current_cdemo_sk#2, ca_state#24, cd_demo_sk#27, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]

(51) HashAggregate [codegen id : 19]
Input [6]: [ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Keys [6]: [ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Functions [10]: [partial_count(1), partial_avg(cd_dep_count#30), partial_max(cd_dep_count#30), partial_sum(cd_dep_count#30), partial_avg(cd_dep_employed_count#31), partial_max(cd_dep_employed_count#31), partial_sum(cd_dep_employed_count#31), partial_avg(cd_dep_college_count#32), partial_max(cd_dep_college_count#32), partial_sum(cd_dep_college_count#32)]
Aggregate Attributes [13]: [count#34, sum#35, count#36, max#37, sum#38, sum#39, count#40, max#41, sum#42, sum#43, count#44, max#45, sum#46]
Results [19]: [ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32, count#47, sum#48, count#49, max#50, sum#51, sum#52, count#53, max#54, sum#55, sum#56, count#57, max#58, sum#59]

(52) Exchange
Input [19]: [ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32, count#47, sum#48, count#49, max#50, sum#51, sum#52, count#53, max#54, sum#55, sum#56, count#57, max#58, sum#59]
Arguments: hashpartitioning(ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32, 5), ENSURE_REQUIREMENTS, [id=#60]

(53) HashAggregate [codegen id : 20]
Input [19]: [ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32, count#47, sum#48, count#49, max#50, sum#51, sum#52, count#53, max#54, sum#55, sum#56, count#57, max#58, sum#59]
Keys [6]: [ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Functions [10]: [count(1), avg(cd_dep_count#30), max(cd_dep_count#30), sum(cd_dep_count#30), avg(cd_dep_employed_count#31), max(cd_dep_employed_count#31), sum(cd_dep_employed_count#31), avg(cd_dep_college_count#32), max(cd_dep_college_count#32), sum(cd_dep_college_count#32)]
Aggregate Attributes [10]: [count(1)#61, avg(cd_dep_count#30)#62, max(cd_dep_count#30)#63, sum(cd_dep_count#30)#64, avg(cd_dep_employed_count#31)#65, max(cd_dep_employed_count#31)#66, sum(cd_dep_employed_count#31)#67, avg(cd_dep_college_count#32)#68, max(cd_dep_college_count#32)#69, sum(cd_dep_college_count#32)#70]
Results [18]: [ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, count(1)#61 AS cnt1#71, avg(cd_dep_count#30)#62 AS avg(cd_dep_count)#72, max(cd_dep_count#30)#63 AS max(cd_dep_count)#73, sum(cd_dep_count#30)#64 AS sum(cd_dep_count)#74, cd_dep_employed_count#31, count(1)#61 AS cnt2#75, avg(cd_dep_employed_count#31)#65 AS avg(cd_dep_employed_count)#76, max(cd_dep_employed_count#31)#66 AS max(cd_dep_employed_count)#77, sum(cd_dep_employed_count#31)#67 AS sum(cd_dep_employed_count)#78, cd_dep_college_count#32, count(1)#61 AS cnt3#79, avg(cd_dep_college_count#32)#68 AS avg(cd_dep_college_count)#80, max(cd_dep_college_count#32)#69 AS max(cd_dep_college_count)#81, sum(cd_dep_college_count#32)#70 AS sum(cd_dep_college_count)#82]

(54) TakeOrderedAndProject
Input [18]: [ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cnt1#71, avg(cd_dep_count)#72, max(cd_dep_count)#73, sum(cd_dep_count)#74, cd_dep_employed_count#31, cnt2#75, avg(cd_dep_employed_count)#76, max(cd_dep_employed_count)#77, sum(cd_dep_employed_count)#78, cd_dep_college_count#32, cnt3#79, avg(cd_dep_college_count)#80, max(cd_dep_college_count)#81, sum(cd_dep_college_count)#82]
Arguments: 100, [ca_state#24 ASC NULLS FIRST, cd_gender#28 ASC NULLS FIRST, cd_marital_status#29 ASC NULLS FIRST, cd_dep_count#30 ASC NULLS FIRST, cd_dep_employed_count#31 ASC NULLS FIRST, cd_dep_college_count#32 ASC NULLS FIRST], [ca_state#24, cd_gender#28, cd_marital_status#29, cd_dep_count#30, cnt1#71, avg(cd_dep_count)#72, max(cd_dep_count)#73, sum(cd_dep_count)#74, cd_dep_employed_count#31, cnt2#75, avg(cd_dep_employed_count)#76, max(cd_dep_employed_count)#77, sum(cd_dep_employed_count)#78, cd_dep_college_count#32, cnt3#79, avg(cd_dep_college_count)#80, max(cd_dep_college_count)#81, sum(cd_dep_college_count)#82]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
ReusedExchange (55)


(55) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#8]

Subquery:2 Hosting operator id = 18 Hosting Expression = ws_sold_date_sk#14 IN dynamicpruning#7

Subquery:3 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#7


