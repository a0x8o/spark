== Physical Plan ==
TakeOrderedAndProject (102)
+- * HashAggregate (101)
   +- Exchange (100)
      +- * HashAggregate (99)
         +- Union (98)
            :- * HashAggregate (87)
            :  +- Exchange (86)
            :     +- * HashAggregate (85)
            :        +- Union (84)
            :           :- * Project (34)
            :           :  +- * BroadcastHashJoin LeftOuter BuildRight (33)
            :           :     :- * HashAggregate (19)
            :           :     :  +- Exchange (18)
            :           :     :     +- * HashAggregate (17)
            :           :     :        +- * Project (16)
            :           :     :           +- * BroadcastHashJoin Inner BuildRight (15)
            :           :     :              :- * Project (10)
            :           :     :              :  +- * BroadcastHashJoin Inner BuildRight (9)
            :           :     :              :     :- * Filter (3)
            :           :     :              :     :  +- * ColumnarToRow (2)
            :           :     :              :     :     +- Scan parquet default.store_sales (1)
            :           :     :              :     +- BroadcastExchange (8)
            :           :     :              :        +- * Project (7)
            :           :     :              :           +- * Filter (6)
            :           :     :              :              +- * ColumnarToRow (5)
            :           :     :              :                 +- Scan parquet default.date_dim (4)
            :           :     :              +- BroadcastExchange (14)
            :           :     :                 +- * Filter (13)
            :           :     :                    +- * ColumnarToRow (12)
            :           :     :                       +- Scan parquet default.store (11)
            :           :     +- BroadcastExchange (32)
            :           :        +- * HashAggregate (31)
            :           :           +- Exchange (30)
            :           :              +- * HashAggregate (29)
            :           :                 +- * Project (28)
            :           :                    +- * BroadcastHashJoin Inner BuildRight (27)
            :           :                       :- * Project (25)
            :           :                       :  +- * BroadcastHashJoin Inner BuildRight (24)
            :           :                       :     :- * Filter (22)
            :           :                       :     :  +- * ColumnarToRow (21)
            :           :                       :     :     +- Scan parquet default.store_returns (20)
            :           :                       :     +- ReusedExchange (23)
            :           :                       +- ReusedExchange (26)
            :           :- * Project (53)
            :           :  +- * BroadcastNestedLoopJoin Inner BuildRight (52)
            :           :     :- * HashAggregate (42)
            :           :     :  +- Exchange (41)
            :           :     :     +- * HashAggregate (40)
            :           :     :        +- * Project (39)
            :           :     :           +- * BroadcastHashJoin Inner BuildRight (38)
            :           :     :              :- * ColumnarToRow (36)
            :           :     :              :  +- Scan parquet default.catalog_sales (35)
            :           :     :              +- ReusedExchange (37)
            :           :     +- BroadcastExchange (51)
            :           :        +- * HashAggregate (50)
            :           :           +- Exchange (49)
            :           :              +- * HashAggregate (48)
            :           :                 +- * Project (47)
            :           :                    +- * BroadcastHashJoin Inner BuildRight (46)
            :           :                       :- * ColumnarToRow (44)
            :           :                       :  +- Scan parquet default.catalog_returns (43)
            :           :                       +- ReusedExchange (45)
            :           +- * Project (83)
            :              +- * BroadcastHashJoin LeftOuter BuildRight (82)
            :                 :- * HashAggregate (68)
            :                 :  +- Exchange (67)
            :                 :     +- * HashAggregate (66)
            :                 :        +- * Project (65)
            :                 :           +- * BroadcastHashJoin Inner BuildRight (64)
            :                 :              :- * Project (59)
            :                 :              :  +- * BroadcastHashJoin Inner BuildRight (58)
            :                 :              :     :- * Filter (56)
            :                 :              :     :  +- * ColumnarToRow (55)
            :                 :              :     :     +- Scan parquet default.web_sales (54)
            :                 :              :     +- ReusedExchange (57)
            :                 :              +- BroadcastExchange (63)
            :                 :                 +- * Filter (62)
            :                 :                    +- * ColumnarToRow (61)
            :                 :                       +- Scan parquet default.web_page (60)
            :                 +- BroadcastExchange (81)
            :                    +- * HashAggregate (80)
            :                       +- Exchange (79)
            :                          +- * HashAggregate (78)
            :                             +- * Project (77)
            :                                +- * BroadcastHashJoin Inner BuildRight (76)
            :                                   :- * Project (74)
            :                                   :  +- * BroadcastHashJoin Inner BuildRight (73)
            :                                   :     :- * Filter (71)
            :                                   :     :  +- * ColumnarToRow (70)
            :                                   :     :     +- Scan parquet default.web_returns (69)
            :                                   :     +- ReusedExchange (72)
            :                                   +- ReusedExchange (75)
            :- * HashAggregate (92)
            :  +- Exchange (91)
            :     +- * HashAggregate (90)
            :        +- * HashAggregate (89)
            :           +- ReusedExchange (88)
            +- * HashAggregate (97)
               +- Exchange (96)
                  +- * HashAggregate (95)
                     +- * HashAggregate (94)
                        +- ReusedExchange (93)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_date#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 1998-08-04)) AND (d_date#7 <= 1998-09-03)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 3]
Output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#6]

(11) Scan parquet default.store
Output [1]: [s_store_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(12) ColumnarToRow [codegen id : 2]
Input [1]: [s_store_sk#9]

(13) Filter [codegen id : 2]
Input [1]: [s_store_sk#9]
Condition : isnotnull(s_store_sk#9)

(14) BroadcastExchange
Input [1]: [s_store_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#9]
Join condition: None

(16) Project [codegen id : 3]
Output [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#9]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#9]

(17) HashAggregate [codegen id : 3]
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#9]
Keys [1]: [s_store_sk#9]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#11, sum#12]
Results [3]: [s_store_sk#9, sum#13, sum#14]

(18) Exchange
Input [3]: [s_store_sk#9, sum#13, sum#14]
Arguments: hashpartitioning(s_store_sk#9, 5), ENSURE_REQUIREMENTS, [id=#15]

(19) HashAggregate [codegen id : 8]
Input [3]: [s_store_sk#9, sum#13, sum#14]
Keys [1]: [s_store_sk#9]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_ext_sales_price#2))#16, sum(UnscaledValue(ss_net_profit#3))#17]
Results [3]: [s_store_sk#9, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#16,17,2) AS sales#18, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#17,17,2) AS profit#19]

(20) Scan parquet default.store_returns
Output [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(21) ColumnarToRow [codegen id : 6]
Input [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23]

(22) Filter [codegen id : 6]
Input [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23]
Condition : isnotnull(sr_store_sk#20)

(23) ReusedExchange [Reuses operator id: 14]
Output [1]: [s_store_sk#25]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_store_sk#20]
Right keys [1]: [cast(s_store_sk#25 as bigint)]
Join condition: None

(25) Project [codegen id : 6]
Output [4]: [sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23, s_store_sk#25]
Input [5]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23, s_store_sk#25]

(26) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#26]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_returned_date_sk#23]
Right keys [1]: [cast(d_date_sk#26 as bigint)]
Join condition: None

(28) Project [codegen id : 6]
Output [3]: [sr_return_amt#21, sr_net_loss#22, s_store_sk#25]
Input [5]: [sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23, s_store_sk#25, d_date_sk#26]

(29) HashAggregate [codegen id : 6]
Input [3]: [sr_return_amt#21, sr_net_loss#22, s_store_sk#25]
Keys [1]: [s_store_sk#25]
Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#21)), partial_sum(UnscaledValue(sr_net_loss#22))]
Aggregate Attributes [2]: [sum#27, sum#28]
Results [3]: [s_store_sk#25, sum#29, sum#30]

(30) Exchange
Input [3]: [s_store_sk#25, sum#29, sum#30]
Arguments: hashpartitioning(s_store_sk#25, 5), ENSURE_REQUIREMENTS, [id=#31]

(31) HashAggregate [codegen id : 7]
Input [3]: [s_store_sk#25, sum#29, sum#30]
Keys [1]: [s_store_sk#25]
Functions [2]: [sum(UnscaledValue(sr_return_amt#21)), sum(UnscaledValue(sr_net_loss#22))]
Aggregate Attributes [2]: [sum(UnscaledValue(sr_return_amt#21))#32, sum(UnscaledValue(sr_net_loss#22))#33]
Results [3]: [s_store_sk#25, MakeDecimal(sum(UnscaledValue(sr_return_amt#21))#32,17,2) AS returns#34, MakeDecimal(sum(UnscaledValue(sr_net_loss#22))#33,17,2) AS profit_loss#35]

(32) BroadcastExchange
Input [3]: [s_store_sk#25, returns#34, profit_loss#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#36]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [s_store_sk#9]
Right keys [1]: [s_store_sk#25]
Join condition: None

(34) Project [codegen id : 8]
Output [5]: [store channel AS channel#37, s_store_sk#9 AS id#38, sales#18, coalesce(returns#34, 0.00) AS returns#39, CheckOverflow((promote_precision(cast(profit#19 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#35, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#40]
Input [6]: [s_store_sk#9, sales#18, profit#19, s_store_sk#25, returns#34, profit_loss#35]

(35) Scan parquet default.catalog_sales
Output [4]: [cs_call_center_sk#41, cs_ext_sales_price#42, cs_net_profit#43, cs_sold_date_sk#44]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#44), dynamicpruningexpression(cs_sold_date_sk#44 IN dynamicpruning#5)]
ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(36) ColumnarToRow [codegen id : 10]
Input [4]: [cs_call_center_sk#41, cs_ext_sales_price#42, cs_net_profit#43, cs_sold_date_sk#44]

(37) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#45]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#44]
Right keys [1]: [d_date_sk#45]
Join condition: None

(39) Project [codegen id : 10]
Output [3]: [cs_call_center_sk#41, cs_ext_sales_price#42, cs_net_profit#43]
Input [5]: [cs_call_center_sk#41, cs_ext_sales_price#42, cs_net_profit#43, cs_sold_date_sk#44, d_date_sk#45]

(40) HashAggregate [codegen id : 10]
Input [3]: [cs_call_center_sk#41, cs_ext_sales_price#42, cs_net_profit#43]
Keys [1]: [cs_call_center_sk#41]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#42)), partial_sum(UnscaledValue(cs_net_profit#43))]
Aggregate Attributes [2]: [sum#46, sum#47]
Results [3]: [cs_call_center_sk#41, sum#48, sum#49]

(41) Exchange
Input [3]: [cs_call_center_sk#41, sum#48, sum#49]
Arguments: hashpartitioning(cs_call_center_sk#41, 5), ENSURE_REQUIREMENTS, [id=#50]

(42) HashAggregate [codegen id : 14]
Input [3]: [cs_call_center_sk#41, sum#48, sum#49]
Keys [1]: [cs_call_center_sk#41]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#42)), sum(UnscaledValue(cs_net_profit#43))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_sales_price#42))#51, sum(UnscaledValue(cs_net_profit#43))#52]
Results [3]: [cs_call_center_sk#41, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#42))#51,17,2) AS sales#53, MakeDecimal(sum(UnscaledValue(cs_net_profit#43))#52,17,2) AS profit#54]

(43) Scan parquet default.catalog_returns
Output [3]: [cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#57), dynamicpruningexpression(cr_returned_date_sk#57 IN dynamicpruning#5)]
ReadSchema: struct<cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(44) ColumnarToRow [codegen id : 12]
Input [3]: [cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57]

(45) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#58]

(46) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cr_returned_date_sk#57]
Right keys [1]: [d_date_sk#58]
Join condition: None

(47) Project [codegen id : 12]
Output [2]: [cr_return_amount#55, cr_net_loss#56]
Input [4]: [cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57, d_date_sk#58]

(48) HashAggregate [codegen id : 12]
Input [2]: [cr_return_amount#55, cr_net_loss#56]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#55)), partial_sum(UnscaledValue(cr_net_loss#56))]
Aggregate Attributes [2]: [sum#59, sum#60]
Results [2]: [sum#61, sum#62]

(49) Exchange
Input [2]: [sum#61, sum#62]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#63]

(50) HashAggregate [codegen id : 13]
Input [2]: [sum#61, sum#62]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#55)), sum(UnscaledValue(cr_net_loss#56))]
Aggregate Attributes [2]: [sum(UnscaledValue(cr_return_amount#55))#64, sum(UnscaledValue(cr_net_loss#56))#65]
Results [2]: [MakeDecimal(sum(UnscaledValue(cr_return_amount#55))#64,17,2) AS returns#66, MakeDecimal(sum(UnscaledValue(cr_net_loss#56))#65,17,2) AS profit_loss#67]

(51) BroadcastExchange
Input [2]: [returns#66, profit_loss#67]
Arguments: IdentityBroadcastMode, [id=#68]

(52) BroadcastNestedLoopJoin [codegen id : 14]
Join condition: None

(53) Project [codegen id : 14]
Output [5]: [catalog channel AS channel#69, cs_call_center_sk#41 AS id#70, sales#53, returns#66, CheckOverflow((promote_precision(cast(profit#54 as decimal(18,2))) - promote_precision(cast(profit_loss#67 as decimal(18,2)))), DecimalType(18,2), true) AS profit#71]
Input [5]: [cs_call_center_sk#41, sales#53, profit#54, returns#66, profit_loss#67]

(54) Scan parquet default.web_sales
Output [4]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74, ws_sold_date_sk#75]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#75), dynamicpruningexpression(ws_sold_date_sk#75 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(55) ColumnarToRow [codegen id : 17]
Input [4]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74, ws_sold_date_sk#75]

(56) Filter [codegen id : 17]
Input [4]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74, ws_sold_date_sk#75]
Condition : isnotnull(ws_web_page_sk#72)

(57) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#76]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#75]
Right keys [1]: [d_date_sk#76]
Join condition: None

(59) Project [codegen id : 17]
Output [3]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74]
Input [5]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74, ws_sold_date_sk#75, d_date_sk#76]

(60) Scan parquet default.web_page
Output [1]: [wp_web_page_sk#77]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(61) ColumnarToRow [codegen id : 16]
Input [1]: [wp_web_page_sk#77]

(62) Filter [codegen id : 16]
Input [1]: [wp_web_page_sk#77]
Condition : isnotnull(wp_web_page_sk#77)

(63) BroadcastExchange
Input [1]: [wp_web_page_sk#77]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#78]

(64) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_web_page_sk#72]
Right keys [1]: [wp_web_page_sk#77]
Join condition: None

(65) Project [codegen id : 17]
Output [3]: [ws_ext_sales_price#73, ws_net_profit#74, wp_web_page_sk#77]
Input [4]: [ws_web_page_sk#72, ws_ext_sales_price#73, ws_net_profit#74, wp_web_page_sk#77]

(66) HashAggregate [codegen id : 17]
Input [3]: [ws_ext_sales_price#73, ws_net_profit#74, wp_web_page_sk#77]
Keys [1]: [wp_web_page_sk#77]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#73)), partial_sum(UnscaledValue(ws_net_profit#74))]
Aggregate Attributes [2]: [sum#79, sum#80]
Results [3]: [wp_web_page_sk#77, sum#81, sum#82]

(67) Exchange
Input [3]: [wp_web_page_sk#77, sum#81, sum#82]
Arguments: hashpartitioning(wp_web_page_sk#77, 5), ENSURE_REQUIREMENTS, [id=#83]

(68) HashAggregate [codegen id : 22]
Input [3]: [wp_web_page_sk#77, sum#81, sum#82]
Keys [1]: [wp_web_page_sk#77]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#73)), sum(UnscaledValue(ws_net_profit#74))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_sales_price#73))#84, sum(UnscaledValue(ws_net_profit#74))#85]
Results [3]: [wp_web_page_sk#77, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#73))#84,17,2) AS sales#86, MakeDecimal(sum(UnscaledValue(ws_net_profit#74))#85,17,2) AS profit#87]

(69) Scan parquet default.web_returns
Output [4]: [wr_web_page_sk#88, wr_return_amt#89, wr_net_loss#90, wr_returned_date_sk#91]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#91), dynamicpruningexpression(wr_returned_date_sk#91 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(wr_web_page_sk)]
ReadSchema: struct<wr_web_page_sk:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(70) ColumnarToRow [codegen id : 20]
Input [4]: [wr_web_page_sk#88, wr_return_amt#89, wr_net_loss#90, wr_returned_date_sk#91]

(71) Filter [codegen id : 20]
Input [4]: [wr_web_page_sk#88, wr_return_amt#89, wr_net_loss#90, wr_returned_date_sk#91]
Condition : isnotnull(wr_web_page_sk#88)

(72) ReusedExchange [Reuses operator id: 63]
Output [1]: [wp_web_page_sk#92]

(73) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_web_page_sk#88]
Right keys [1]: [cast(wp_web_page_sk#92 as bigint)]
Join condition: None

(74) Project [codegen id : 20]
Output [4]: [wr_return_amt#89, wr_net_loss#90, wr_returned_date_sk#91, wp_web_page_sk#92]
Input [5]: [wr_web_page_sk#88, wr_return_amt#89, wr_net_loss#90, wr_returned_date_sk#91, wp_web_page_sk#92]

(75) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#93]

(76) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_returned_date_sk#91]
Right keys [1]: [cast(d_date_sk#93 as bigint)]
Join condition: None

(77) Project [codegen id : 20]
Output [3]: [wr_return_amt#89, wr_net_loss#90, wp_web_page_sk#92]
Input [5]: [wr_return_amt#89, wr_net_loss#90, wr_returned_date_sk#91, wp_web_page_sk#92, d_date_sk#93]

(78) HashAggregate [codegen id : 20]
Input [3]: [wr_return_amt#89, wr_net_loss#90, wp_web_page_sk#92]
Keys [1]: [wp_web_page_sk#92]
Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#89)), partial_sum(UnscaledValue(wr_net_loss#90))]
Aggregate Attributes [2]: [sum#94, sum#95]
Results [3]: [wp_web_page_sk#92, sum#96, sum#97]

(79) Exchange
Input [3]: [wp_web_page_sk#92, sum#96, sum#97]
Arguments: hashpartitioning(wp_web_page_sk#92, 5), ENSURE_REQUIREMENTS, [id=#98]

(80) HashAggregate [codegen id : 21]
Input [3]: [wp_web_page_sk#92, sum#96, sum#97]
Keys [1]: [wp_web_page_sk#92]
Functions [2]: [sum(UnscaledValue(wr_return_amt#89)), sum(UnscaledValue(wr_net_loss#90))]
Aggregate Attributes [2]: [sum(UnscaledValue(wr_return_amt#89))#99, sum(UnscaledValue(wr_net_loss#90))#100]
Results [3]: [wp_web_page_sk#92, MakeDecimal(sum(UnscaledValue(wr_return_amt#89))#99,17,2) AS returns#101, MakeDecimal(sum(UnscaledValue(wr_net_loss#90))#100,17,2) AS profit_loss#102]

(81) BroadcastExchange
Input [3]: [wp_web_page_sk#92, returns#101, profit_loss#102]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#103]

(82) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [wp_web_page_sk#77]
Right keys [1]: [wp_web_page_sk#92]
Join condition: None

(83) Project [codegen id : 22]
Output [5]: [web channel AS channel#104, wp_web_page_sk#77 AS id#105, sales#86, coalesce(returns#101, 0.00) AS returns#106, CheckOverflow((promote_precision(cast(profit#87 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#102, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#107]
Input [6]: [wp_web_page_sk#77, sales#86, profit#87, wp_web_page_sk#92, returns#101, profit_loss#102]

(84) Union

(85) HashAggregate [codegen id : 23]
Input [5]: [channel#37, id#38, sales#18, returns#39, profit#40]
Keys [2]: [channel#37, id#38]
Functions [3]: [partial_sum(sales#18), partial_sum(returns#39), partial_sum(profit#40)]
Aggregate Attributes [6]: [sum#108, isEmpty#109, sum#110, isEmpty#111, sum#112, isEmpty#113]
Results [8]: [channel#37, id#38, sum#114, isEmpty#115, sum#116, isEmpty#117, sum#118, isEmpty#119]

(86) Exchange
Input [8]: [channel#37, id#38, sum#114, isEmpty#115, sum#116, isEmpty#117, sum#118, isEmpty#119]
Arguments: hashpartitioning(channel#37, id#38, 5), ENSURE_REQUIREMENTS, [id=#120]

(87) HashAggregate [codegen id : 24]
Input [8]: [channel#37, id#38, sum#114, isEmpty#115, sum#116, isEmpty#117, sum#118, isEmpty#119]
Keys [2]: [channel#37, id#38]
Functions [3]: [sum(sales#18), sum(returns#39), sum(profit#40)]
Aggregate Attributes [3]: [sum(sales#18)#121, sum(returns#39)#122, sum(profit#40)#123]
Results [5]: [channel#37, id#38, cast(sum(sales#18)#121 as decimal(37,2)) AS sales#124, cast(sum(returns#39)#122 as decimal(37,2)) AS returns#125, cast(sum(profit#40)#123 as decimal(38,2)) AS profit#126]

(88) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#37, id#38, sum#127, isEmpty#128, sum#129, isEmpty#130, sum#131, isEmpty#132]

(89) HashAggregate [codegen id : 48]
Input [8]: [channel#37, id#38, sum#127, isEmpty#128, sum#129, isEmpty#130, sum#131, isEmpty#132]
Keys [2]: [channel#37, id#38]
Functions [3]: [sum(sales#18), sum(returns#39), sum(profit#133)]
Aggregate Attributes [3]: [sum(sales#18)#134, sum(returns#39)#135, sum(profit#133)#136]
Results [4]: [channel#37, sum(sales#18)#134 AS sales#137, sum(returns#39)#135 AS returns#138, sum(profit#133)#136 AS profit#139]

(90) HashAggregate [codegen id : 48]
Input [4]: [channel#37, sales#137, returns#138, profit#139]
Keys [1]: [channel#37]
Functions [3]: [partial_sum(sales#137), partial_sum(returns#138), partial_sum(profit#139)]
Aggregate Attributes [6]: [sum#140, isEmpty#141, sum#142, isEmpty#143, sum#144, isEmpty#145]
Results [7]: [channel#37, sum#146, isEmpty#147, sum#148, isEmpty#149, sum#150, isEmpty#151]

(91) Exchange
Input [7]: [channel#37, sum#146, isEmpty#147, sum#148, isEmpty#149, sum#150, isEmpty#151]
Arguments: hashpartitioning(channel#37, 5), ENSURE_REQUIREMENTS, [id=#152]

(92) HashAggregate [codegen id : 49]
Input [7]: [channel#37, sum#146, isEmpty#147, sum#148, isEmpty#149, sum#150, isEmpty#151]
Keys [1]: [channel#37]
Functions [3]: [sum(sales#137), sum(returns#138), sum(profit#139)]
Aggregate Attributes [3]: [sum(sales#137)#153, sum(returns#138)#154, sum(profit#139)#155]
Results [5]: [channel#37, null AS id#156, sum(sales#137)#153 AS sales#157, sum(returns#138)#154 AS returns#158, sum(profit#139)#155 AS profit#159]

(93) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#37, id#38, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]

(94) HashAggregate [codegen id : 73]
Input [8]: [channel#37, id#38, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]
Keys [2]: [channel#37, id#38]
Functions [3]: [sum(sales#18), sum(returns#39), sum(profit#166)]
Aggregate Attributes [3]: [sum(sales#18)#167, sum(returns#39)#168, sum(profit#166)#169]
Results [3]: [sum(sales#18)#167 AS sales#137, sum(returns#39)#168 AS returns#138, sum(profit#166)#169 AS profit#139]

(95) HashAggregate [codegen id : 73]
Input [3]: [sales#137, returns#138, profit#139]
Keys: []
Functions [3]: [partial_sum(sales#137), partial_sum(returns#138), partial_sum(profit#139)]
Aggregate Attributes [6]: [sum#170, isEmpty#171, sum#172, isEmpty#173, sum#174, isEmpty#175]
Results [6]: [sum#176, isEmpty#177, sum#178, isEmpty#179, sum#180, isEmpty#181]

(96) Exchange
Input [6]: [sum#176, isEmpty#177, sum#178, isEmpty#179, sum#180, isEmpty#181]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#182]

(97) HashAggregate [codegen id : 74]
Input [6]: [sum#176, isEmpty#177, sum#178, isEmpty#179, sum#180, isEmpty#181]
Keys: []
Functions [3]: [sum(sales#137), sum(returns#138), sum(profit#139)]
Aggregate Attributes [3]: [sum(sales#137)#183, sum(returns#138)#184, sum(profit#139)#185]
Results [5]: [null AS channel#186, null AS id#187, sum(sales#137)#183 AS sales#188, sum(returns#138)#184 AS returns#189, sum(profit#139)#185 AS profit#190]

(98) Union

(99) HashAggregate [codegen id : 75]
Input [5]: [channel#37, id#38, sales#124, returns#125, profit#126]
Keys [5]: [channel#37, id#38, sales#124, returns#125, profit#126]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#37, id#38, sales#124, returns#125, profit#126]

(100) Exchange
Input [5]: [channel#37, id#38, sales#124, returns#125, profit#126]
Arguments: hashpartitioning(channel#37, id#38, sales#124, returns#125, profit#126, 5), ENSURE_REQUIREMENTS, [id=#191]

(101) HashAggregate [codegen id : 76]
Input [5]: [channel#37, id#38, sales#124, returns#125, profit#126]
Keys [5]: [channel#37, id#38, sales#124, returns#125, profit#126]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#37, id#38, sales#124, returns#125, profit#126]

(102) TakeOrderedAndProject
Input [5]: [channel#37, id#38, sales#124, returns#125, profit#126]
Arguments: 100, [channel#37 ASC NULLS FIRST, id#38 ASC NULLS FIRST], [channel#37, id#38, sales#124, returns#125, profit#126]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (103)


(103) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#6]

Subquery:2 Hosting operator id = 20 Hosting Expression = sr_returned_date_sk#23 IN dynamicpruning#24
ReusedExchange (104)


(104) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#26]

Subquery:3 Hosting operator id = 35 Hosting Expression = cs_sold_date_sk#44 IN dynamicpruning#5

Subquery:4 Hosting operator id = 43 Hosting Expression = cr_returned_date_sk#57 IN dynamicpruning#5

Subquery:5 Hosting operator id = 54 Hosting Expression = ws_sold_date_sk#75 IN dynamicpruning#5

Subquery:6 Hosting operator id = 69 Hosting Expression = wr_returned_date_sk#91 IN dynamicpruning#24


