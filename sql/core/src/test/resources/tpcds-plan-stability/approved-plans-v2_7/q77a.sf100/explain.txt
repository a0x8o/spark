== Physical Plan ==
TakeOrderedAndProject (102)
+- * HashAggregate (101)
   +- Exchange (100)
      +- * HashAggregate (99)
         +- Union (98)
            :- * HashAggregate (87)
            :  +- Exchange (86)
            :     +- * HashAggregate (85)
            :        +- Union (84)
            :           :- * Project (34)
            :           :  +- * BroadcastHashJoin LeftOuter BuildRight (33)
            :           :     :- * HashAggregate (19)
            :           :     :  +- Exchange (18)
            :           :     :     +- * HashAggregate (17)
            :           :     :        +- * Project (16)
            :           :     :           +- * BroadcastHashJoin Inner BuildRight (15)
            :           :     :              :- * Project (10)
            :           :     :              :  +- * BroadcastHashJoin Inner BuildRight (9)
            :           :     :              :     :- * Filter (3)
            :           :     :              :     :  +- * ColumnarToRow (2)
            :           :     :              :     :     +- Scan parquet default.store_sales (1)
            :           :     :              :     +- BroadcastExchange (8)
            :           :     :              :        +- * Project (7)
            :           :     :              :           +- * Filter (6)
            :           :     :              :              +- * ColumnarToRow (5)
            :           :     :              :                 +- Scan parquet default.date_dim (4)
            :           :     :              +- BroadcastExchange (14)
            :           :     :                 +- * Filter (13)
            :           :     :                    +- * ColumnarToRow (12)
            :           :     :                       +- Scan parquet default.store (11)
            :           :     +- BroadcastExchange (32)
            :           :        +- * HashAggregate (31)
            :           :           +- Exchange (30)
            :           :              +- * HashAggregate (29)
            :           :                 +- * Project (28)
            :           :                    +- * BroadcastHashJoin Inner BuildRight (27)
            :           :                       :- * Project (25)
            :           :                       :  +- * BroadcastHashJoin Inner BuildRight (24)
            :           :                       :     :- * Filter (22)
            :           :                       :     :  +- * ColumnarToRow (21)
            :           :                       :     :     +- Scan parquet default.store_returns (20)
            :           :                       :     +- ReusedExchange (23)
            :           :                       +- ReusedExchange (26)
            :           :- * Project (53)
            :           :  +- * BroadcastNestedLoopJoin Inner BuildRight (52)
            :           :     :- * HashAggregate (42)
            :           :     :  +- Exchange (41)
            :           :     :     +- * HashAggregate (40)
            :           :     :        +- * Project (39)
            :           :     :           +- * BroadcastHashJoin Inner BuildRight (38)
            :           :     :              :- * ColumnarToRow (36)
            :           :     :              :  +- Scan parquet default.catalog_sales (35)
            :           :     :              +- ReusedExchange (37)
            :           :     +- BroadcastExchange (51)
            :           :        +- * HashAggregate (50)
            :           :           +- Exchange (49)
            :           :              +- * HashAggregate (48)
            :           :                 +- * Project (47)
            :           :                    +- * BroadcastHashJoin Inner BuildRight (46)
            :           :                       :- * ColumnarToRow (44)
            :           :                       :  +- Scan parquet default.catalog_returns (43)
            :           :                       +- ReusedExchange (45)
            :           +- * Project (83)
            :              +- * BroadcastHashJoin LeftOuter BuildRight (82)
            :                 :- * HashAggregate (68)
            :                 :  +- Exchange (67)
            :                 :     +- * HashAggregate (66)
            :                 :        +- * Project (65)
            :                 :           +- * BroadcastHashJoin Inner BuildRight (64)
            :                 :              :- * Project (59)
            :                 :              :  +- * BroadcastHashJoin Inner BuildRight (58)
            :                 :              :     :- * Filter (56)
            :                 :              :     :  +- * ColumnarToRow (55)
            :                 :              :     :     +- Scan parquet default.web_sales (54)
            :                 :              :     +- ReusedExchange (57)
            :                 :              +- BroadcastExchange (63)
            :                 :                 +- * Filter (62)
            :                 :                    +- * ColumnarToRow (61)
            :                 :                       +- Scan parquet default.web_page (60)
            :                 +- BroadcastExchange (81)
            :                    +- * HashAggregate (80)
            :                       +- Exchange (79)
            :                          +- * HashAggregate (78)
            :                             +- * Project (77)
            :                                +- * BroadcastHashJoin Inner BuildRight (76)
            :                                   :- * Project (74)
            :                                   :  +- * BroadcastHashJoin Inner BuildRight (73)
            :                                   :     :- * Filter (71)
            :                                   :     :  +- * ColumnarToRow (70)
            :                                   :     :     +- Scan parquet default.web_returns (69)
            :                                   :     +- ReusedExchange (72)
            :                                   +- ReusedExchange (75)
            :- * HashAggregate (92)
            :  +- Exchange (91)
            :     +- * HashAggregate (90)
            :        +- * HashAggregate (89)
            :           +- ReusedExchange (88)
            +- * HashAggregate (97)
               +- Exchange (96)
                  +- * HashAggregate (95)
                     +- * HashAggregate (94)
                        +- ReusedExchange (93)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_date#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 1998-08-04)) AND (d_date#7 <= 1998-09-03)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 3]
Output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#6]

(11) Scan parquet default.store
Output [1]: [s_store_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(12) ColumnarToRow [codegen id : 2]
Input [1]: [s_store_sk#9]

(13) Filter [codegen id : 2]
Input [1]: [s_store_sk#9]
Condition : isnotnull(s_store_sk#9)

(14) BroadcastExchange
Input [1]: [s_store_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#9]
Join condition: None

(16) Project [codegen id : 3]
Output [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#9]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#9]

(17) HashAggregate [codegen id : 3]
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#9]
Keys [1]: [s_store_sk#9]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#11, sum#12]
Results [3]: [s_store_sk#9, sum#13, sum#14]

(18) Exchange
Input [3]: [s_store_sk#9, sum#13, sum#14]
Arguments: hashpartitioning(s_store_sk#9, 5), ENSURE_REQUIREMENTS, [id=#15]

(19) HashAggregate [codegen id : 8]
Input [3]: [s_store_sk#9, sum#13, sum#14]
Keys [1]: [s_store_sk#9]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_ext_sales_price#2))#16, sum(UnscaledValue(ss_net_profit#3))#17]
Results [3]: [s_store_sk#9, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#16,17,2) AS sales#18, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#17,17,2) AS profit#19]

(20) Scan parquet default.store_returns
Output [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#23), dynamicpruningexpression(sr_returned_date_sk#23 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(21) ColumnarToRow [codegen id : 6]
Input [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23]

(22) Filter [codegen id : 6]
Input [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23]
Condition : isnotnull(sr_store_sk#20)

(23) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#24]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_returned_date_sk#23]
Right keys [1]: [d_date_sk#24]
Join condition: None

(25) Project [codegen id : 6]
Output [3]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22]
Input [5]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, sr_returned_date_sk#23, d_date_sk#24]

(26) ReusedExchange [Reuses operator id: 14]
Output [1]: [s_store_sk#25]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_store_sk#20]
Right keys [1]: [s_store_sk#25]
Join condition: None

(28) Project [codegen id : 6]
Output [3]: [sr_return_amt#21, sr_net_loss#22, s_store_sk#25]
Input [4]: [sr_store_sk#20, sr_return_amt#21, sr_net_loss#22, s_store_sk#25]

(29) HashAggregate [codegen id : 6]
Input [3]: [sr_return_amt#21, sr_net_loss#22, s_store_sk#25]
Keys [1]: [s_store_sk#25]
Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#21)), partial_sum(UnscaledValue(sr_net_loss#22))]
Aggregate Attributes [2]: [sum#26, sum#27]
Results [3]: [s_store_sk#25, sum#28, sum#29]

(30) Exchange
Input [3]: [s_store_sk#25, sum#28, sum#29]
Arguments: hashpartitioning(s_store_sk#25, 5), ENSURE_REQUIREMENTS, [id=#30]

(31) HashAggregate [codegen id : 7]
Input [3]: [s_store_sk#25, sum#28, sum#29]
Keys [1]: [s_store_sk#25]
Functions [2]: [sum(UnscaledValue(sr_return_amt#21)), sum(UnscaledValue(sr_net_loss#22))]
Aggregate Attributes [2]: [sum(UnscaledValue(sr_return_amt#21))#31, sum(UnscaledValue(sr_net_loss#22))#32]
Results [3]: [s_store_sk#25, MakeDecimal(sum(UnscaledValue(sr_return_amt#21))#31,17,2) AS returns#33, MakeDecimal(sum(UnscaledValue(sr_net_loss#22))#32,17,2) AS profit_loss#34]

(32) BroadcastExchange
Input [3]: [s_store_sk#25, returns#33, profit_loss#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#35]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [s_store_sk#9]
Right keys [1]: [s_store_sk#25]
Join condition: None

(34) Project [codegen id : 8]
Output [5]: [store channel AS channel#36, s_store_sk#9 AS id#37, sales#18, coalesce(returns#33, 0.00) AS returns#38, CheckOverflow((promote_precision(cast(profit#19 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#34, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#39]
Input [6]: [s_store_sk#9, sales#18, profit#19, s_store_sk#25, returns#33, profit_loss#34]

(35) Scan parquet default.catalog_sales
Output [4]: [cs_call_center_sk#40, cs_ext_sales_price#41, cs_net_profit#42, cs_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#43), dynamicpruningexpression(cs_sold_date_sk#43 IN dynamicpruning#5)]
ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(36) ColumnarToRow [codegen id : 10]
Input [4]: [cs_call_center_sk#40, cs_ext_sales_price#41, cs_net_profit#42, cs_sold_date_sk#43]

(37) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#44]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#43]
Right keys [1]: [d_date_sk#44]
Join condition: None

(39) Project [codegen id : 10]
Output [3]: [cs_call_center_sk#40, cs_ext_sales_price#41, cs_net_profit#42]
Input [5]: [cs_call_center_sk#40, cs_ext_sales_price#41, cs_net_profit#42, cs_sold_date_sk#43, d_date_sk#44]

(40) HashAggregate [codegen id : 10]
Input [3]: [cs_call_center_sk#40, cs_ext_sales_price#41, cs_net_profit#42]
Keys [1]: [cs_call_center_sk#40]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#41)), partial_sum(UnscaledValue(cs_net_profit#42))]
Aggregate Attributes [2]: [sum#45, sum#46]
Results [3]: [cs_call_center_sk#40, sum#47, sum#48]

(41) Exchange
Input [3]: [cs_call_center_sk#40, sum#47, sum#48]
Arguments: hashpartitioning(cs_call_center_sk#40, 5), ENSURE_REQUIREMENTS, [id=#49]

(42) HashAggregate [codegen id : 14]
Input [3]: [cs_call_center_sk#40, sum#47, sum#48]
Keys [1]: [cs_call_center_sk#40]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#41)), sum(UnscaledValue(cs_net_profit#42))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_sales_price#41))#50, sum(UnscaledValue(cs_net_profit#42))#51]
Results [3]: [cs_call_center_sk#40, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#41))#50,17,2) AS sales#52, MakeDecimal(sum(UnscaledValue(cs_net_profit#42))#51,17,2) AS profit#53]

(43) Scan parquet default.catalog_returns
Output [3]: [cr_return_amount#54, cr_net_loss#55, cr_returned_date_sk#56]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#56), dynamicpruningexpression(cr_returned_date_sk#56 IN dynamicpruning#5)]
ReadSchema: struct<cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(44) ColumnarToRow [codegen id : 12]
Input [3]: [cr_return_amount#54, cr_net_loss#55, cr_returned_date_sk#56]

(45) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#57]

(46) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cr_returned_date_sk#56]
Right keys [1]: [d_date_sk#57]
Join condition: None

(47) Project [codegen id : 12]
Output [2]: [cr_return_amount#54, cr_net_loss#55]
Input [4]: [cr_return_amount#54, cr_net_loss#55, cr_returned_date_sk#56, d_date_sk#57]

(48) HashAggregate [codegen id : 12]
Input [2]: [cr_return_amount#54, cr_net_loss#55]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#54)), partial_sum(UnscaledValue(cr_net_loss#55))]
Aggregate Attributes [2]: [sum#58, sum#59]
Results [2]: [sum#60, sum#61]

(49) Exchange
Input [2]: [sum#60, sum#61]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#62]

(50) HashAggregate [codegen id : 13]
Input [2]: [sum#60, sum#61]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#54)), sum(UnscaledValue(cr_net_loss#55))]
Aggregate Attributes [2]: [sum(UnscaledValue(cr_return_amount#54))#63, sum(UnscaledValue(cr_net_loss#55))#64]
Results [2]: [MakeDecimal(sum(UnscaledValue(cr_return_amount#54))#63,17,2) AS returns#65, MakeDecimal(sum(UnscaledValue(cr_net_loss#55))#64,17,2) AS profit_loss#66]

(51) BroadcastExchange
Input [2]: [returns#65, profit_loss#66]
Arguments: IdentityBroadcastMode, [id=#67]

(52) BroadcastNestedLoopJoin [codegen id : 14]
Join condition: None

(53) Project [codegen id : 14]
Output [5]: [catalog channel AS channel#68, cs_call_center_sk#40 AS id#69, sales#52, returns#65, CheckOverflow((promote_precision(cast(profit#53 as decimal(18,2))) - promote_precision(cast(profit_loss#66 as decimal(18,2)))), DecimalType(18,2), true) AS profit#70]
Input [5]: [cs_call_center_sk#40, sales#52, profit#53, returns#65, profit_loss#66]

(54) Scan parquet default.web_sales
Output [4]: [ws_web_page_sk#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#74), dynamicpruningexpression(ws_sold_date_sk#74 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(55) ColumnarToRow [codegen id : 17]
Input [4]: [ws_web_page_sk#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74]

(56) Filter [codegen id : 17]
Input [4]: [ws_web_page_sk#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74]
Condition : isnotnull(ws_web_page_sk#71)

(57) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#75]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#74]
Right keys [1]: [d_date_sk#75]
Join condition: None

(59) Project [codegen id : 17]
Output [3]: [ws_web_page_sk#71, ws_ext_sales_price#72, ws_net_profit#73]
Input [5]: [ws_web_page_sk#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74, d_date_sk#75]

(60) Scan parquet default.web_page
Output [1]: [wp_web_page_sk#76]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(61) ColumnarToRow [codegen id : 16]
Input [1]: [wp_web_page_sk#76]

(62) Filter [codegen id : 16]
Input [1]: [wp_web_page_sk#76]
Condition : isnotnull(wp_web_page_sk#76)

(63) BroadcastExchange
Input [1]: [wp_web_page_sk#76]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77]

(64) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_web_page_sk#71]
Right keys [1]: [wp_web_page_sk#76]
Join condition: None

(65) Project [codegen id : 17]
Output [3]: [ws_ext_sales_price#72, ws_net_profit#73, wp_web_page_sk#76]
Input [4]: [ws_web_page_sk#71, ws_ext_sales_price#72, ws_net_profit#73, wp_web_page_sk#76]

(66) HashAggregate [codegen id : 17]
Input [3]: [ws_ext_sales_price#72, ws_net_profit#73, wp_web_page_sk#76]
Keys [1]: [wp_web_page_sk#76]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#72)), partial_sum(UnscaledValue(ws_net_profit#73))]
Aggregate Attributes [2]: [sum#78, sum#79]
Results [3]: [wp_web_page_sk#76, sum#80, sum#81]

(67) Exchange
Input [3]: [wp_web_page_sk#76, sum#80, sum#81]
Arguments: hashpartitioning(wp_web_page_sk#76, 5), ENSURE_REQUIREMENTS, [id=#82]

(68) HashAggregate [codegen id : 22]
Input [3]: [wp_web_page_sk#76, sum#80, sum#81]
Keys [1]: [wp_web_page_sk#76]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#72)), sum(UnscaledValue(ws_net_profit#73))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_sales_price#72))#83, sum(UnscaledValue(ws_net_profit#73))#84]
Results [3]: [wp_web_page_sk#76, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#72))#83,17,2) AS sales#85, MakeDecimal(sum(UnscaledValue(ws_net_profit#73))#84,17,2) AS profit#86]

(69) Scan parquet default.web_returns
Output [4]: [wr_web_page_sk#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#90), dynamicpruningexpression(wr_returned_date_sk#90 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(wr_web_page_sk)]
ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(70) ColumnarToRow [codegen id : 20]
Input [4]: [wr_web_page_sk#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90]

(71) Filter [codegen id : 20]
Input [4]: [wr_web_page_sk#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90]
Condition : isnotnull(wr_web_page_sk#87)

(72) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#91]

(73) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_returned_date_sk#90]
Right keys [1]: [d_date_sk#91]
Join condition: None

(74) Project [codegen id : 20]
Output [3]: [wr_web_page_sk#87, wr_return_amt#88, wr_net_loss#89]
Input [5]: [wr_web_page_sk#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90, d_date_sk#91]

(75) ReusedExchange [Reuses operator id: 63]
Output [1]: [wp_web_page_sk#92]

(76) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_web_page_sk#87]
Right keys [1]: [wp_web_page_sk#92]
Join condition: None

(77) Project [codegen id : 20]
Output [3]: [wr_return_amt#88, wr_net_loss#89, wp_web_page_sk#92]
Input [4]: [wr_web_page_sk#87, wr_return_amt#88, wr_net_loss#89, wp_web_page_sk#92]

(78) HashAggregate [codegen id : 20]
Input [3]: [wr_return_amt#88, wr_net_loss#89, wp_web_page_sk#92]
Keys [1]: [wp_web_page_sk#92]
Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#88)), partial_sum(UnscaledValue(wr_net_loss#89))]
Aggregate Attributes [2]: [sum#93, sum#94]
Results [3]: [wp_web_page_sk#92, sum#95, sum#96]

(79) Exchange
Input [3]: [wp_web_page_sk#92, sum#95, sum#96]
Arguments: hashpartitioning(wp_web_page_sk#92, 5), ENSURE_REQUIREMENTS, [id=#97]

(80) HashAggregate [codegen id : 21]
Input [3]: [wp_web_page_sk#92, sum#95, sum#96]
Keys [1]: [wp_web_page_sk#92]
Functions [2]: [sum(UnscaledValue(wr_return_amt#88)), sum(UnscaledValue(wr_net_loss#89))]
Aggregate Attributes [2]: [sum(UnscaledValue(wr_return_amt#88))#98, sum(UnscaledValue(wr_net_loss#89))#99]
Results [3]: [wp_web_page_sk#92, MakeDecimal(sum(UnscaledValue(wr_return_amt#88))#98,17,2) AS returns#100, MakeDecimal(sum(UnscaledValue(wr_net_loss#89))#99,17,2) AS profit_loss#101]

(81) BroadcastExchange
Input [3]: [wp_web_page_sk#92, returns#100, profit_loss#101]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#102]

(82) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [wp_web_page_sk#76]
Right keys [1]: [wp_web_page_sk#92]
Join condition: None

(83) Project [codegen id : 22]
Output [5]: [web channel AS channel#103, wp_web_page_sk#76 AS id#104, sales#85, coalesce(returns#100, 0.00) AS returns#105, CheckOverflow((promote_precision(cast(profit#86 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#101, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#106]
Input [6]: [wp_web_page_sk#76, sales#85, profit#86, wp_web_page_sk#92, returns#100, profit_loss#101]

(84) Union

(85) HashAggregate [codegen id : 23]
Input [5]: [channel#36, id#37, sales#18, returns#38, profit#39]
Keys [2]: [channel#36, id#37]
Functions [3]: [partial_sum(sales#18), partial_sum(returns#38), partial_sum(profit#39)]
Aggregate Attributes [6]: [sum#107, isEmpty#108, sum#109, isEmpty#110, sum#111, isEmpty#112]
Results [8]: [channel#36, id#37, sum#113, isEmpty#114, sum#115, isEmpty#116, sum#117, isEmpty#118]

(86) Exchange
Input [8]: [channel#36, id#37, sum#113, isEmpty#114, sum#115, isEmpty#116, sum#117, isEmpty#118]
Arguments: hashpartitioning(channel#36, id#37, 5), ENSURE_REQUIREMENTS, [id=#119]

(87) HashAggregate [codegen id : 24]
Input [8]: [channel#36, id#37, sum#113, isEmpty#114, sum#115, isEmpty#116, sum#117, isEmpty#118]
Keys [2]: [channel#36, id#37]
Functions [3]: [sum(sales#18), sum(returns#38), sum(profit#39)]
Aggregate Attributes [3]: [sum(sales#18)#120, sum(returns#38)#121, sum(profit#39)#122]
Results [5]: [channel#36, id#37, cast(sum(sales#18)#120 as decimal(37,2)) AS sales#123, cast(sum(returns#38)#121 as decimal(37,2)) AS returns#124, cast(sum(profit#39)#122 as decimal(38,2)) AS profit#125]

(88) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#36, id#37, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]

(89) HashAggregate [codegen id : 48]
Input [8]: [channel#36, id#37, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]
Keys [2]: [channel#36, id#37]
Functions [3]: [sum(sales#18), sum(returns#38), sum(profit#132)]
Aggregate Attributes [3]: [sum(sales#18)#133, sum(returns#38)#134, sum(profit#132)#135]
Results [4]: [channel#36, sum(sales#18)#133 AS sales#136, sum(returns#38)#134 AS returns#137, sum(profit#132)#135 AS profit#138]

(90) HashAggregate [codegen id : 48]
Input [4]: [channel#36, sales#136, returns#137, profit#138]
Keys [1]: [channel#36]
Functions [3]: [partial_sum(sales#136), partial_sum(returns#137), partial_sum(profit#138)]
Aggregate Attributes [6]: [sum#139, isEmpty#140, sum#141, isEmpty#142, sum#143, isEmpty#144]
Results [7]: [channel#36, sum#145, isEmpty#146, sum#147, isEmpty#148, sum#149, isEmpty#150]

(91) Exchange
Input [7]: [channel#36, sum#145, isEmpty#146, sum#147, isEmpty#148, sum#149, isEmpty#150]
Arguments: hashpartitioning(channel#36, 5), ENSURE_REQUIREMENTS, [id=#151]

(92) HashAggregate [codegen id : 49]
Input [7]: [channel#36, sum#145, isEmpty#146, sum#147, isEmpty#148, sum#149, isEmpty#150]
Keys [1]: [channel#36]
Functions [3]: [sum(sales#136), sum(returns#137), sum(profit#138)]
Aggregate Attributes [3]: [sum(sales#136)#152, sum(returns#137)#153, sum(profit#138)#154]
Results [5]: [channel#36, null AS id#155, sum(sales#136)#152 AS sales#156, sum(returns#137)#153 AS returns#157, sum(profit#138)#154 AS profit#158]

(93) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#36, id#37, sum#159, isEmpty#160, sum#161, isEmpty#162, sum#163, isEmpty#164]

(94) HashAggregate [codegen id : 73]
Input [8]: [channel#36, id#37, sum#159, isEmpty#160, sum#161, isEmpty#162, sum#163, isEmpty#164]
Keys [2]: [channel#36, id#37]
Functions [3]: [sum(sales#18), sum(returns#38), sum(profit#165)]
Aggregate Attributes [3]: [sum(sales#18)#166, sum(returns#38)#167, sum(profit#165)#168]
Results [3]: [sum(sales#18)#166 AS sales#136, sum(returns#38)#167 AS returns#137, sum(profit#165)#168 AS profit#138]

(95) HashAggregate [codegen id : 73]
Input [3]: [sales#136, returns#137, profit#138]
Keys: []
Functions [3]: [partial_sum(sales#136), partial_sum(returns#137), partial_sum(profit#138)]
Aggregate Attributes [6]: [sum#169, isEmpty#170, sum#171, isEmpty#172, sum#173, isEmpty#174]
Results [6]: [sum#175, isEmpty#176, sum#177, isEmpty#178, sum#179, isEmpty#180]

(96) Exchange
Input [6]: [sum#175, isEmpty#176, sum#177, isEmpty#178, sum#179, isEmpty#180]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#181]

(97) HashAggregate [codegen id : 74]
Input [6]: [sum#175, isEmpty#176, sum#177, isEmpty#178, sum#179, isEmpty#180]
Keys: []
Functions [3]: [sum(sales#136), sum(returns#137), sum(profit#138)]
Aggregate Attributes [3]: [sum(sales#136)#182, sum(returns#137)#183, sum(profit#138)#184]
Results [5]: [null AS channel#185, null AS id#186, sum(sales#136)#182 AS sales#187, sum(returns#137)#183 AS returns#188, sum(profit#138)#184 AS profit#189]

(98) Union

(99) HashAggregate [codegen id : 75]
Input [5]: [channel#36, id#37, sales#123, returns#124, profit#125]
Keys [5]: [channel#36, id#37, sales#123, returns#124, profit#125]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#36, id#37, sales#123, returns#124, profit#125]

(100) Exchange
Input [5]: [channel#36, id#37, sales#123, returns#124, profit#125]
Arguments: hashpartitioning(channel#36, id#37, sales#123, returns#124, profit#125, 5), ENSURE_REQUIREMENTS, [id=#190]

(101) HashAggregate [codegen id : 76]
Input [5]: [channel#36, id#37, sales#123, returns#124, profit#125]
Keys [5]: [channel#36, id#37, sales#123, returns#124, profit#125]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#36, id#37, sales#123, returns#124, profit#125]

(102) TakeOrderedAndProject
Input [5]: [channel#36, id#37, sales#123, returns#124, profit#125]
Arguments: 100, [channel#36 ASC NULLS FIRST, id#37 ASC NULLS FIRST], [channel#36, id#37, sales#123, returns#124, profit#125]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (103)


(103) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#6]

Subquery:2 Hosting operator id = 20 Hosting Expression = sr_returned_date_sk#23 IN dynamicpruning#5

Subquery:3 Hosting operator id = 35 Hosting Expression = cs_sold_date_sk#43 IN dynamicpruning#5

Subquery:4 Hosting operator id = 43 Hosting Expression = cr_returned_date_sk#56 IN dynamicpruning#5

Subquery:5 Hosting operator id = 54 Hosting Expression = ws_sold_date_sk#74 IN dynamicpruning#5

Subquery:6 Hosting operator id = 69 Hosting Expression = wr_returned_date_sk#90 IN dynamicpruning#5


