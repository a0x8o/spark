== Physical Plan ==
* Sort (35)
+- Exchange (34)
   +- * HashAggregate (33)
      +- Exchange (32)
         +- * HashAggregate (31)
            +- * Project (30)
               +- * BroadcastHashJoin Inner BuildRight (29)
                  :- * Project (27)
                  :  +- * BroadcastHashJoin Inner BuildRight (26)
                  :     :- * Project (21)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (20)
                  :     :     :- * Project (15)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                  :     :     :     :- * Project (9)
                  :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                  :     :     :     :     :- * Filter (3)
                  :     :     :     :     :  +- * ColumnarToRow (2)
                  :     :     :     :     :     +- Scan parquet default.supplier (1)
                  :     :     :     :     +- BroadcastExchange (7)
                  :     :     :     :        +- * Filter (6)
                  :     :     :     :           +- * ColumnarToRow (5)
                  :     :     :     :              +- Scan parquet default.lineitem (4)
                  :     :     :     +- BroadcastExchange (13)
                  :     :     :        +- * Filter (12)
                  :     :     :           +- * ColumnarToRow (11)
                  :     :     :              +- Scan parquet default.orders (10)
                  :     :     +- BroadcastExchange (19)
                  :     :        +- * Filter (18)
                  :     :           +- * ColumnarToRow (17)
                  :     :              +- Scan parquet default.customer (16)
                  :     +- BroadcastExchange (25)
                  :        +- * Filter (24)
                  :           +- * ColumnarToRow (23)
                  :              +- Scan parquet default.nation (22)
                  +- ReusedExchange (28)


(1) Scan parquet default.supplier
Output [2]: [s_suppkey#1, s_nationkey#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(2) ColumnarToRow [codegen id : 6]
Input [2]: [s_suppkey#1, s_nationkey#2]

(3) Filter [codegen id : 6]
Input [2]: [s_suppkey#1, s_nationkey#2]
Condition : (isnotnull(s_suppkey#1) AND isnotnull(s_nationkey#2))

(4) Scan parquet default.lineitem
Output [5]: [l_orderkey#3, l_suppkey#4, l_extendedprice#5, l_discount#6, l_shipdate#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/lineitem]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-01-01), LessThanOrEqual(l_shipdate,1996-12-31), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(10,0),l_discount:decimal(10,0),l_shipdate:date>

(5) ColumnarToRow [codegen id : 1]
Input [5]: [l_orderkey#3, l_suppkey#4, l_extendedprice#5, l_discount#6, l_shipdate#7]

(6) Filter [codegen id : 1]
Input [5]: [l_orderkey#3, l_suppkey#4, l_extendedprice#5, l_discount#6, l_shipdate#7]
Condition : ((((isnotnull(l_shipdate#7) AND (l_shipdate#7 >= 1995-01-01)) AND (l_shipdate#7 <= 1996-12-31)) AND isnotnull(l_suppkey#4)) AND isnotnull(l_orderkey#3))

(7) BroadcastExchange
Input [5]: [l_orderkey#3, l_suppkey#4, l_extendedprice#5, l_discount#6, l_shipdate#7]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, false]),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [s_suppkey#1]
Right keys [1]: [l_suppkey#4]
Join condition: None

(9) Project [codegen id : 6]
Output [5]: [s_nationkey#2, l_orderkey#3, l_extendedprice#5, l_discount#6, l_shipdate#7]
Input [7]: [s_suppkey#1, s_nationkey#2, l_orderkey#3, l_suppkey#4, l_extendedprice#5, l_discount#6, l_shipdate#7]

(10) Scan parquet default.orders
Output [2]: [o_orderkey#9, o_custkey#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/orders]
PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [o_orderkey#9, o_custkey#10]

(12) Filter [codegen id : 2]
Input [2]: [o_orderkey#9, o_custkey#10]
Condition : (isnotnull(o_orderkey#9) AND isnotnull(o_custkey#10))

(13) BroadcastExchange
Input [2]: [o_orderkey#9, o_custkey#10]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#11]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [l_orderkey#3]
Right keys [1]: [o_orderkey#9]
Join condition: None

(15) Project [codegen id : 6]
Output [5]: [s_nationkey#2, l_extendedprice#5, l_discount#6, l_shipdate#7, o_custkey#10]
Input [7]: [s_nationkey#2, l_orderkey#3, l_extendedprice#5, l_discount#6, l_shipdate#7, o_orderkey#9, o_custkey#10]

(16) Scan parquet default.customer
Output [2]: [c_custkey#12, c_nationkey#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(17) ColumnarToRow [codegen id : 3]
Input [2]: [c_custkey#12, c_nationkey#13]

(18) Filter [codegen id : 3]
Input [2]: [c_custkey#12, c_nationkey#13]
Condition : (isnotnull(c_custkey#12) AND isnotnull(c_nationkey#13))

(19) BroadcastExchange
Input [2]: [c_custkey#12, c_nationkey#13]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#14]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [o_custkey#10]
Right keys [1]: [c_custkey#12]
Join condition: None

(21) Project [codegen id : 6]
Output [5]: [s_nationkey#2, l_extendedprice#5, l_discount#6, l_shipdate#7, c_nationkey#13]
Input [7]: [s_nationkey#2, l_extendedprice#5, l_discount#6, l_shipdate#7, o_custkey#10, c_custkey#12, c_nationkey#13]

(22) Scan parquet default.nation
Output [2]: [n_nationkey#15, n_name#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/nation]
PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,FRANCE),EqualTo(n_name,GERMANY))]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(23) ColumnarToRow [codegen id : 4]
Input [2]: [n_nationkey#15, n_name#16]

(24) Filter [codegen id : 4]
Input [2]: [n_nationkey#15, n_name#16]
Condition : (isnotnull(n_nationkey#15) AND ((n_name#16 = FRANCE) OR (n_name#16 = GERMANY)))

(25) BroadcastExchange
Input [2]: [n_nationkey#15, n_name#16]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#17]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [s_nationkey#2]
Right keys [1]: [n_nationkey#15]
Join condition: None

(27) Project [codegen id : 6]
Output [5]: [l_extendedprice#5, l_discount#6, l_shipdate#7, c_nationkey#13, n_name#16]
Input [7]: [s_nationkey#2, l_extendedprice#5, l_discount#6, l_shipdate#7, c_nationkey#13, n_nationkey#15, n_name#16]

(28) ReusedExchange [Reuses operator id: 25]
Output [2]: [n_nationkey#18, n_name#19]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_nationkey#13]
Right keys [1]: [n_nationkey#18]
Join condition: (((n_name#16 = FRANCE) AND (n_name#19 = GERMANY)) OR ((n_name#16 = GERMANY) AND (n_name#19 = FRANCE)))

(30) Project [codegen id : 6]
Output [4]: [n_name#16 AS supp_nation#20, n_name#19 AS cust_nation#21, year(l_shipdate#7) AS l_year#22, CheckOverflow((promote_precision(cast(l_extendedprice#5 as decimal(11,0))) * promote_precision(CheckOverflow((1 - promote_precision(cast(l_discount#6 as decimal(11,0)))), DecimalType(11,0), true))), DecimalType(22,0), true) AS volume#23]
Input [7]: [l_extendedprice#5, l_discount#6, l_shipdate#7, c_nationkey#13, n_name#16, n_nationkey#18, n_name#19]

(31) HashAggregate [codegen id : 6]
Input [4]: [supp_nation#20, cust_nation#21, l_year#22, volume#23]
Keys [3]: [supp_nation#20, cust_nation#21, l_year#22]
Functions [1]: [partial_sum(volume#23)]
Aggregate Attributes [2]: [sum#24, isEmpty#25]
Results [5]: [supp_nation#20, cust_nation#21, l_year#22, sum#26, isEmpty#27]

(32) Exchange
Input [5]: [supp_nation#20, cust_nation#21, l_year#22, sum#26, isEmpty#27]
Arguments: hashpartitioning(supp_nation#20, cust_nation#21, l_year#22, 5), ENSURE_REQUIREMENTS, [id=#28]

(33) HashAggregate [codegen id : 7]
Input [5]: [supp_nation#20, cust_nation#21, l_year#22, sum#26, isEmpty#27]
Keys [3]: [supp_nation#20, cust_nation#21, l_year#22]
Functions [1]: [sum(volume#23)]
Aggregate Attributes [1]: [sum(volume#23)#29]
Results [4]: [supp_nation#20, cust_nation#21, l_year#22, sum(volume#23)#29 AS revenue#30]

(34) Exchange
Input [4]: [supp_nation#20, cust_nation#21, l_year#22, revenue#30]
Arguments: rangepartitioning(supp_nation#20 ASC NULLS FIRST, cust_nation#21 ASC NULLS FIRST, l_year#22 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#31]

(35) Sort [codegen id : 8]
Input [4]: [supp_nation#20, cust_nation#21, l_year#22, revenue#30]
Arguments: [supp_nation#20 ASC NULLS FIRST, cust_nation#21 ASC NULLS FIRST, l_year#22 ASC NULLS FIRST], true, 0

