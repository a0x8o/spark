-- Automatically generated by SQLQueryTestSuite
-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('aaa', 'aaa')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('AAA', 'AAA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('bbb', 'bbb')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('BBB', 'BBB')
-- !query schema
struct<>
-- !query output



-- !query
describe table t1
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
utf8_binary         	string              	                    
utf8_lcase          	string collate UTF8_LCASE


-- !query
select count(*) from t1 group by utf8_binary
-- !query schema
struct<count(1):bigint>
-- !query output
1
1
1
1


-- !query
select count(*) from t1 group by utf8_lcase
-- !query schema
struct<count(1):bigint>
-- !query output
2
2


-- !query
select * from t1 where utf8_binary = 'aaa'
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
aaa	aaa


-- !query
select * from t1 where utf8_lcase = 'aaa' collate utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
aaa	aaa


-- !query
select * from t1 where utf8_binary < 'bbb'
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
BBB	BBB
aaa	aaa


-- !query
select * from t1 where utf8_lcase < 'bbb' collate utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
aaa	aaa


-- !query
select l.utf8_binary, r.utf8_lcase from t1 l join t1 r on l.utf8_lcase = r.utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
AAA	aaa
BBB	BBB
BBB	bbb
aaa	AAA
aaa	aaa
bbb	BBB
bbb	bbb


-- !query
create table t2(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values('aaa', 'aaa')
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values('bbb', 'bbb')
-- !query schema
struct<>
-- !query output



-- !query
select * from t1 anti join t2 on t1.utf8_lcase = t2.utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output



-- !query
drop table t2
-- !query schema
struct<>
-- !query output



-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except all select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb
zzz
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union all select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
AAA
BBB
ZZZ
aaa
aaa
bbb
bbb
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') intersect select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb


-- !query
create table t1 (c1 struct<utf8_binary: string collate utf8_binary, utf8_lcase: string collate utf8_lcase>) USING PARQUET
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (named_struct('utf8_binary', 'aaa', 'utf8_lcase', 'aaa'))
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (named_struct('utf8_binary', 'AAA', 'utf8_lcase', 'AAA'))
-- !query schema
struct<>
-- !query output



-- !query
select count(*) from t1 group by c1.utf8_binary
-- !query schema
struct<count(1):bigint>
-- !query output
1
1


-- !query
select count(*) from t1 group by c1.utf8_lcase
-- !query schema
struct<count(1):bigint>
-- !query output
2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
select array_contains(ARRAY('aaa' collate utf8_lcase),'AAA' collate utf8_lcase)
-- !query schema
struct<array_contains(array(collate(aaa, utf8_lcase)), collate(AAA, utf8_lcase)):boolean>
-- !query output
true


-- !query
select array_position(ARRAY('aaa' collate utf8_lcase, 'bbb' collate utf8_lcase),'BBB' collate utf8_lcase)
-- !query schema
struct<array_position(array(collate(aaa, utf8_lcase), collate(bbb, utf8_lcase)), collate(BBB, utf8_lcase)):bigint>
-- !query output
2


-- !query
select nullif('aaa' COLLATE utf8_lcase, 'AAA' COLLATE utf8_lcase)
-- !query schema
struct<nullif(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
NULL


-- !query
select least('aaa' COLLATE utf8_lcase, 'AAA' collate utf8_lcase, 'a' collate utf8_lcase)
-- !query schema
struct<least(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase), collate(a, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
a


-- !query
select arrays_overlap(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<arrays_overlap(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):boolean>
-- !query output
true


-- !query
select array_distinct(array('aaa' collate utf8_lcase, 'AAA' collate utf8_lcase))
-- !query schema
struct<array_distinct(array(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_union(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_union(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_intersect(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_intersect(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_except(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_except(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
[]


-- !query
select 'a' collate unicode < 'A'
-- !query schema
struct<(collate(a, unicode) < A):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ci = 'A'
-- !query schema
struct<(collate(a, unicode_ci) = A):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ai = 'å'
-- !query schema
struct<(collate(a, unicode_ai) = å):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ci_ai = 'Å'
-- !query schema
struct<(collate(a, unicode_ci_ai) = Å):boolean>
-- !query output
true


-- !query
select 'a' collate en < 'A'
-- !query schema
struct<(collate(a, en) < A):boolean>
-- !query output
true


-- !query
select 'a' collate en_ci = 'A'
-- !query schema
struct<(collate(a, en_ci) = A):boolean>
-- !query output
true


-- !query
select 'a' collate en_ai = 'å'
-- !query schema
struct<(collate(a, en_ai) = å):boolean>
-- !query output
true


-- !query
select 'a' collate en_ci_ai = 'Å'
-- !query schema
struct<(collate(a, en_ci_ai) = Å):boolean>
-- !query output
true


-- !query
select 'Kypper' collate sv < 'Köpfe'
-- !query schema
struct<(collate(Kypper, sv) < Köpfe):boolean>
-- !query output
true


-- !query
select 'Kypper' collate de > 'Köpfe'
-- !query schema
struct<(collate(Kypper, de) > Köpfe):boolean>
-- !query output
true


-- !query
select 'I' collate tr_ci = 'ı'
-- !query schema
struct<(collate(I, tr_ci) = ı):boolean>
-- !query output
true


-- !query
create table t4 (text string collate utf8_binary, pairDelim string collate utf8_lcase, keyValueDelim string collate utf8_binary) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t4 values('a:1,b:2,c:3', ',', ':')
-- !query schema
struct<>
-- !query output



-- !query
select str_to_map(text, pairDelim, keyValueDelim) from t4
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select str_to_map(text collate utf8_binary, pairDelim collate utf8_lcase, keyValueDelim collate utf8_binary) from t4
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "`string`, `string collate UTF8_LCASE`"
  }
}


-- !query
select str_to_map(text collate utf8_binary, pairDelim collate utf8_binary, keyValueDelim collate utf8_binary) from t4
-- !query schema
struct<str_to_map(collate(text, utf8_binary), collate(pairDelim, utf8_binary), collate(keyValueDelim, utf8_binary)):map<string,string>>
-- !query output
{"a":"1","b":"2","c":"3"}


-- !query
drop table t4
-- !query schema
struct<>
-- !query output



-- !query
create table t5(str string collate utf8_binary, delimiter string collate utf8_lcase, partNum int) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t5 values('11AB12AB13', 'AB', 2)
-- !query schema
struct<>
-- !query output



-- !query
select split_part(str, delimiter, partNum) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select split_part(str collate utf8_binary, delimiter collate utf8_lcase, partNum) from t5
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "`string`, `string collate UTF8_LCASE`"
  }
}


-- !query
select split_part(str collate utf8_binary, delimiter collate utf8_binary, partNum) from t5
-- !query schema
struct<split_part(collate(str, utf8_binary), collate(delimiter, utf8_binary), partNum):string>
-- !query output
12


-- !query
drop table t5
-- !query schema
struct<>
-- !query output

