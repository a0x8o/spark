-- Automatically generated by SQLQueryTestSuite
-- !query
select concat_ws()
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
requirement failed: concat_ws requires at least one argument.; line 1 pos 7


-- !query
select format_string()
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
requirement failed: format_string() should take at least 1 argument; line 1 pos 7


-- !query
select 'a' || 'b' || 'c'
-- !query schema
struct<concat(concat(a, b), c):string>
-- !query output
abc


-- !query
select replace('abc', 'b', '123')
-- !query schema
struct<replace(abc, b, 123):string>
-- !query output
a123c


-- !query
select replace('abc', 'b')
-- !query schema
struct<replace(abc, b, ):string>
-- !query output
ac


-- !query
select length(uuid()), (uuid() <> uuid())
-- !query schema
struct<length(uuid()):int,(NOT (uuid() = uuid())):boolean>
-- !query output
36	true


-- !query
select position('bar' in 'foobarbar'), position(null, 'foobarbar'), position('aaads', null)
-- !query schema
struct<locate(bar, foobarbar, 1):int,position(NULL, foobarbar, 1):int,position(aaads, NULL, 1):int>
-- !query output
4	NULL	NULL


-- !query
select left("abcd", 2), left("abcd", 5), left("abcd", '2'), left("abcd", null)
-- !query schema
struct<left(abcd, 2):string,left(abcd, 5):string,left(abcd, 2):string,left(abcd, NULL):string>
-- !query output
ab	abcd	ab	NULL


-- !query
select left(null, -2)
-- !query schema
struct<left(NULL, -2):string>
-- !query output
NULL


-- !query
select left("abcd", -2), left("abcd", 0), left("abcd", 'a')
-- !query schema
struct<left(abcd, -2):string,left(abcd, 0):string,left(abcd, a):string>
-- !query output
		NULL


-- !query
select right("abcd", 2), right("abcd", 5), right("abcd", '2'), right("abcd", null)
-- !query schema
struct<right(abcd, 2):string,right(abcd, 5):string,right(abcd, 2):string,right(abcd, NULL):string>
-- !query output
cd	abcd	cd	NULL


-- !query
select right(null, -2)
-- !query schema
struct<right(NULL, -2):string>
-- !query output
NULL


-- !query
select right("abcd", -2), right("abcd", 0), right("abcd", 'a')
-- !query schema
struct<right(abcd, -2):string,right(abcd, 0):string,right(abcd, a):string>
-- !query output
		NULL


-- !query
SELECT split('aa1cc2ee3', '[1-9]+')
-- !query schema
struct<split(aa1cc2ee3, [1-9]+, -1):array<string>>
-- !query output
["aa","cc","ee",""]


-- !query
SELECT split('aa1cc2ee3', '[1-9]+', 2)
-- !query schema
struct<split(aa1cc2ee3, [1-9]+, 2):array<string>>
-- !query output
["aa","cc2ee3"]


-- !query
SELECT split_part('11.12.13', '.', 2)
-- !query schema
struct<split_part(11.12.13, ., 2):string>
-- !query output
12


-- !query
SELECT split_part('11.12.13', '.', -1)
-- !query schema
struct<split_part(11.12.13, ., -1):string>
-- !query output
13


-- !query
SELECT split_part('11.12.13', '.', -3)
-- !query schema
struct<split_part(11.12.13, ., -3):string>
-- !query output
11


-- !query
SELECT split_part('11.12.13', '', 1)
-- !query schema
struct<split_part(11.12.13, , 1):string>
-- !query output
11.12.13


-- !query
SELECT split_part('11ab12ab13', 'ab', 1)
-- !query schema
struct<split_part(11ab12ab13, ab, 1):string>
-- !query output
11


-- !query
SELECT split_part('11.12.13', '.', 0)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
[ELEMENT_AT_BY_INDEX_ZERO] The index 0 is invalid. An index shall be either < 0 or > 0 (the first element has index 1).


-- !query
SELECT split_part('11.12.13', '.', 4)
-- !query schema
struct<split_part(11.12.13, ., 4):string>
-- !query output



-- !query
SELECT split_part('11.12.13', '.', 5)
-- !query schema
struct<split_part(11.12.13, ., 5):string>
-- !query output



-- !query
SELECT split_part('11.12.13', '.', -5)
-- !query schema
struct<split_part(11.12.13, ., -5):string>
-- !query output



-- !query
SELECT split_part(null, '.', 1)
-- !query schema
struct<split_part(NULL, ., 1):string>
-- !query output
NULL


-- !query
SELECT substr('Spark SQL', 5)
-- !query schema
struct<substr(Spark SQL, 5, 2147483647):string>
-- !query output
k SQL


-- !query
SELECT substr('Spark SQL', -3)
-- !query schema
struct<substr(Spark SQL, -3, 2147483647):string>
-- !query output
SQL


-- !query
SELECT substr('Spark SQL', 5, 1)
-- !query schema
struct<substr(Spark SQL, 5, 1):string>
-- !query output
k


-- !query
SELECT substr('Spark SQL' from 5)
-- !query schema
struct<substring(Spark SQL, 5, 2147483647):string>
-- !query output
k SQL


-- !query
SELECT substr('Spark SQL' from -3)
-- !query schema
struct<substring(Spark SQL, -3, 2147483647):string>
-- !query output
SQL


-- !query
SELECT substr('Spark SQL' from 5 for 1)
-- !query schema
struct<substring(Spark SQL, 5, 1):string>
-- !query output
k


-- !query
SELECT substring('Spark SQL', 5)
-- !query schema
struct<substring(Spark SQL, 5, 2147483647):string>
-- !query output
k SQL


-- !query
SELECT substring('Spark SQL', -3)
-- !query schema
struct<substring(Spark SQL, -3, 2147483647):string>
-- !query output
SQL


-- !query
SELECT substring('Spark SQL', 5, 1)
-- !query schema
struct<substring(Spark SQL, 5, 1):string>
-- !query output
k


-- !query
SELECT substring('Spark SQL' from 5)
-- !query schema
struct<substring(Spark SQL, 5, 2147483647):string>
-- !query output
k SQL


-- !query
SELECT substring('Spark SQL' from -3)
-- !query schema
struct<substring(Spark SQL, -3, 2147483647):string>
-- !query output
SQL


-- !query
SELECT substring('Spark SQL' from 5 for 1)
-- !query schema
struct<substring(Spark SQL, 5, 1):string>
-- !query output
k


-- !query
SELECT trim(" xyz "), ltrim(" xyz "), rtrim(" xyz ")
-- !query schema
struct<trim( xyz ):string,ltrim( xyz ):string,rtrim( xyz ):string>
-- !query output
xyz	xyz 	 xyz


-- !query
SELECT trim(BOTH 'xyz' FROM 'yxTomxx'), trim('xyz' FROM 'yxTomxx')
-- !query schema
struct<TRIM(BOTH xyz FROM yxTomxx):string,TRIM(BOTH xyz FROM yxTomxx):string>
-- !query output
Tom	Tom


-- !query
SELECT trim(BOTH 'x' FROM 'xxxbarxxx'), trim('x' FROM 'xxxbarxxx')
-- !query schema
struct<TRIM(BOTH x FROM xxxbarxxx):string,TRIM(BOTH x FROM xxxbarxxx):string>
-- !query output
bar	bar


-- !query
SELECT trim(LEADING 'xyz' FROM 'zzzytest')
-- !query schema
struct<TRIM(LEADING xyz FROM zzzytest):string>
-- !query output
test


-- !query
SELECT trim(LEADING 'xyz' FROM 'zzzytestxyz')
-- !query schema
struct<TRIM(LEADING xyz FROM zzzytestxyz):string>
-- !query output
testxyz


-- !query
SELECT trim(LEADING 'xy' FROM 'xyxXxyLAST WORD')
-- !query schema
struct<TRIM(LEADING xy FROM xyxXxyLAST WORD):string>
-- !query output
XxyLAST WORD


-- !query
SELECT trim(TRAILING 'xyz' FROM 'testxxzx')
-- !query schema
struct<TRIM(TRAILING xyz FROM testxxzx):string>
-- !query output
test


-- !query
SELECT trim(TRAILING 'xyz' FROM 'xyztestxxzx')
-- !query schema
struct<TRIM(TRAILING xyz FROM xyztestxxzx):string>
-- !query output
xyztest


-- !query
SELECT trim(TRAILING 'xy' FROM 'TURNERyxXxy')
-- !query schema
struct<TRIM(TRAILING xy FROM TURNERyxXxy):string>
-- !query output
TURNERyxX


-- !query
SELECT btrim('xyxtrimyyx', 'xy')
-- !query schema
struct<btrim(xyxtrimyyx, xy):string>
-- !query output
trim


-- !query
SELECT btrim(encode(" xyz ", 'utf-8'))
-- !query schema
struct<btrim(encode( xyz , utf-8)):string>
-- !query output
xyz


-- !query
SELECT btrim(encode('yxTomxx', 'utf-8'), encode('xyz', 'utf-8'))
-- !query schema
struct<btrim(encode(yxTomxx, utf-8), encode(xyz, utf-8)):string>
-- !query output
Tom


-- !query
SELECT btrim(encode('xxxbarxxx', 'utf-8'), encode('x', 'utf-8'))
-- !query schema
struct<btrim(encode(xxxbarxxx, utf-8), encode(x, utf-8)):string>
-- !query output
bar


-- !query
SELECT lpad('hi', 'invalid_length')
-- !query schema
struct<lpad(hi, invalid_length,  ):string>
-- !query output
NULL


-- !query
SELECT rpad('hi', 'invalid_length')
-- !query schema
struct<rpad(hi, invalid_length,  ):string>
-- !query output
NULL


-- !query
SELECT hex(lpad(unhex(''), 5))
-- !query schema
struct<hex(lpad(unhex(), 5, X'00')):string>
-- !query output
0000000000


-- !query
SELECT hex(lpad(unhex('aabb'), 5))
-- !query schema
struct<hex(lpad(unhex(aabb), 5, X'00')):string>
-- !query output
000000AABB


-- !query
SELECT hex(lpad(unhex('aabbcc'), 2))
-- !query schema
struct<hex(lpad(unhex(aabbcc), 2, X'00')):string>
-- !query output
AABB


-- !query
SELECT hex(lpad(unhex(''), 5, unhex('1f')))
-- !query schema
struct<hex(lpad(unhex(), 5, unhex(1f))):string>
-- !query output
1F1F1F1F1F


-- !query
SELECT hex(lpad(unhex('aa'), 5, unhex('1f')))
-- !query schema
struct<hex(lpad(unhex(aa), 5, unhex(1f))):string>
-- !query output
1F1F1F1FAA


-- !query
SELECT hex(lpad(unhex('aa'), 6, unhex('1f')))
-- !query schema
struct<hex(lpad(unhex(aa), 6, unhex(1f))):string>
-- !query output
1F1F1F1F1FAA


-- !query
SELECT hex(lpad(unhex(''), 5, unhex('1f2e')))
-- !query schema
struct<hex(lpad(unhex(), 5, unhex(1f2e))):string>
-- !query output
1F2E1F2E1F


-- !query
SELECT hex(lpad(unhex('aa'), 5, unhex('1f2e')))
-- !query schema
struct<hex(lpad(unhex(aa), 5, unhex(1f2e))):string>
-- !query output
1F2E1F2EAA


-- !query
SELECT hex(lpad(unhex('aa'), 6, unhex('1f2e')))
-- !query schema
struct<hex(lpad(unhex(aa), 6, unhex(1f2e))):string>
-- !query output
1F2E1F2E1FAA


-- !query
SELECT hex(lpad(unhex(''), 6, unhex('')))
-- !query schema
struct<hex(lpad(unhex(), 6, unhex())):string>
-- !query output



-- !query
SELECT hex(lpad(unhex('aabbcc'), 6, unhex('')))
-- !query schema
struct<hex(lpad(unhex(aabbcc), 6, unhex())):string>
-- !query output
AABBCC


-- !query
SELECT hex(lpad(unhex('aabbcc'), 2, unhex('ff')))
-- !query schema
struct<hex(lpad(unhex(aabbcc), 2, unhex(ff))):string>
-- !query output
AABB


-- !query
SELECT hex(rpad(unhex(''), 5))
-- !query schema
struct<hex(rpad(unhex(), 5, X'00')):string>
-- !query output
0000000000


-- !query
SELECT hex(rpad(unhex('aabb'), 5))
-- !query schema
struct<hex(rpad(unhex(aabb), 5, X'00')):string>
-- !query output
AABB000000


-- !query
SELECT hex(rpad(unhex('aabbcc'), 2))
-- !query schema
struct<hex(rpad(unhex(aabbcc), 2, X'00')):string>
-- !query output
AABB


-- !query
SELECT hex(rpad(unhex(''), 5, unhex('1f')))
-- !query schema
struct<hex(rpad(unhex(), 5, unhex(1f))):string>
-- !query output
1F1F1F1F1F


-- !query
SELECT hex(rpad(unhex('aa'), 5, unhex('1f')))
-- !query schema
struct<hex(rpad(unhex(aa), 5, unhex(1f))):string>
-- !query output
AA1F1F1F1F


-- !query
SELECT hex(rpad(unhex('aa'), 6, unhex('1f')))
-- !query schema
struct<hex(rpad(unhex(aa), 6, unhex(1f))):string>
-- !query output
AA1F1F1F1F1F


-- !query
SELECT hex(rpad(unhex(''), 5, unhex('1f2e')))
-- !query schema
struct<hex(rpad(unhex(), 5, unhex(1f2e))):string>
-- !query output
1F2E1F2E1F


-- !query
SELECT hex(rpad(unhex('aa'), 5, unhex('1f2e')))
-- !query schema
struct<hex(rpad(unhex(aa), 5, unhex(1f2e))):string>
-- !query output
AA1F2E1F2E


-- !query
SELECT hex(rpad(unhex('aa'), 6, unhex('1f2e')))
-- !query schema
struct<hex(rpad(unhex(aa), 6, unhex(1f2e))):string>
-- !query output
AA1F2E1F2E1F


-- !query
SELECT hex(rpad(unhex(''), 6, unhex('')))
-- !query schema
struct<hex(rpad(unhex(), 6, unhex())):string>
-- !query output



-- !query
SELECT hex(rpad(unhex('aabbcc'), 6, unhex('')))
-- !query schema
struct<hex(rpad(unhex(aabbcc), 6, unhex())):string>
-- !query output
AABBCC


-- !query
SELECT hex(rpad(unhex('aabbcc'), 2, unhex('ff')))
-- !query schema
struct<hex(rpad(unhex(aabbcc), 2, unhex(ff))):string>
-- !query output
AABB


-- !query
SELECT lpad('abc', 5, x'57')
-- !query schema
struct<lpad(abc, 5, X'57'):string>
-- !query output
WWabc


-- !query
SELECT lpad(x'57', 5, 'abc')
-- !query schema
struct<lpad(X'57', 5, abc):string>
-- !query output
abcaW


-- !query
SELECT rpad('abc', 5, x'57')
-- !query schema
struct<rpad(abc, 5, X'57'):string>
-- !query output
abcWW


-- !query
SELECT rpad(x'57', 5, 'abc')
-- !query schema
struct<rpad(X'57', 5, abc):string>
-- !query output
Wabca


-- !query
select decode()
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Invalid number of arguments for function decode. Expected: 2; Found: 0; line 1 pos 7


-- !query
select decode(encode('abc', 'utf-8'))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Invalid number of arguments for function decode. Expected: 2; Found: 1; line 1 pos 7


-- !query
select decode(encode('abc', 'utf-8'), 'utf-8')
-- !query schema
struct<decode(encode(abc, utf-8), utf-8):string>
-- !query output
abc


-- !query
select decode(1, 1, 'Southlake')
-- !query schema
struct<decode(1, 1, Southlake):string>
-- !query output
Southlake


-- !query
select decode(2, 1, 'Southlake')
-- !query schema
struct<decode(2, 1, Southlake):string>
-- !query output
NULL


-- !query
select decode(2, 1, 'Southlake', 2, 'San Francisco', 3, 'New Jersey', 4, 'Seattle', 'Non domestic')
-- !query schema
struct<decode(2, 1, Southlake, 2, San Francisco, 3, New Jersey, 4, Seattle, Non domestic):string>
-- !query output
San Francisco


-- !query
select decode(6, 1, 'Southlake', 2, 'San Francisco', 3, 'New Jersey', 4, 'Seattle', 'Non domestic')
-- !query schema
struct<decode(6, 1, Southlake, 2, San Francisco, 3, New Jersey, 4, Seattle, Non domestic):string>
-- !query output
Non domestic


-- !query
select decode(6, 1, 'Southlake', 2, 'San Francisco', 3, 'New Jersey', 4, 'Seattle')
-- !query schema
struct<decode(6, 1, Southlake, 2, San Francisco, 3, New Jersey, 4, Seattle):string>
-- !query output
NULL


-- !query
SELECT CONTAINS(null, 'Spark')
-- !query schema
struct<contains(NULL, Spark):boolean>
-- !query output
NULL


-- !query
SELECT CONTAINS('Spark SQL', null)
-- !query schema
struct<contains(Spark SQL, NULL):boolean>
-- !query output
NULL


-- !query
SELECT CONTAINS(null, null)
-- !query schema
struct<contains(NULL, NULL):boolean>
-- !query output
NULL


-- !query
SELECT CONTAINS('Spark SQL', 'Spark')
-- !query schema
struct<contains(Spark SQL, Spark):boolean>
-- !query output
true


-- !query
SELECT CONTAINS('Spark SQL', 'SQL')
-- !query schema
struct<contains(Spark SQL, SQL):boolean>
-- !query output
true


-- !query
SELECT CONTAINS('Spark SQL', 'SPARK')
-- !query schema
struct<contains(Spark SQL, SPARK):boolean>
-- !query output
false


-- !query
SELECT startswith('Spark SQL', 'ark')
-- !query schema
struct<startswith(Spark SQL, ark):boolean>
-- !query output
false


-- !query
SELECT startswith('Spark SQL', 'Spa')
-- !query schema
struct<startswith(Spark SQL, Spa):boolean>
-- !query output
true


-- !query
SELECT startswith(null, 'Spark')
-- !query schema
struct<startswith(NULL, Spark):boolean>
-- !query output
NULL


-- !query
SELECT startswith('Spark', null)
-- !query schema
struct<startswith(Spark, NULL):boolean>
-- !query output
NULL


-- !query
SELECT startswith(null, null)
-- !query schema
struct<startswith(NULL, NULL):boolean>
-- !query output
NULL


-- !query
SELECT endswith('Spark SQL', 'QL')
-- !query schema
struct<endswith(Spark SQL, QL):boolean>
-- !query output
true


-- !query
SELECT endswith('Spark SQL', 'Spa')
-- !query schema
struct<endswith(Spark SQL, Spa):boolean>
-- !query output
false


-- !query
SELECT endswith(null, 'Spark')
-- !query schema
struct<endswith(NULL, Spark):boolean>
-- !query output
NULL


-- !query
SELECT endswith('Spark', null)
-- !query schema
struct<endswith(Spark, NULL):boolean>
-- !query output
NULL


-- !query
SELECT endswith(null, null)
-- !query schema
struct<endswith(NULL, NULL):boolean>
-- !query output
NULL


-- !query
SELECT contains(x'537061726b2053514c', x'537061726b')
-- !query schema
struct<contains(X'537061726B2053514C', X'537061726B'):boolean>
-- !query output
true


-- !query
SELECT contains(x'', x'')
-- !query schema
struct<contains(X'', X''):boolean>
-- !query output
true


-- !query
SELECT contains(x'537061726b2053514c', null)
-- !query schema
struct<contains(X'537061726B2053514C', NULL):boolean>
-- !query output
NULL


-- !query
SELECT contains(12, '1')
-- !query schema
struct<contains(12, 1):boolean>
-- !query output
true


-- !query
SELECT contains(true, 'ru')
-- !query schema
struct<contains(true, ru):boolean>
-- !query output
true


-- !query
SELECT contains(x'12', 12)
-- !query schema
struct<contains(X'12', 12):boolean>
-- !query output
false


-- !query
SELECT contains(true, false)
-- !query schema
struct<contains(true, false):boolean>
-- !query output
false


-- !query
SELECT startswith(x'537061726b2053514c', x'537061726b')
-- !query schema
struct<startswith(X'537061726B2053514C', X'537061726B'):boolean>
-- !query output
true


-- !query
SELECT startswith(x'537061726b2053514c', x'')
-- !query schema
struct<startswith(X'537061726B2053514C', X''):boolean>
-- !query output
true


-- !query
SELECT startswith(x'', x'')
-- !query schema
struct<startswith(X'', X''):boolean>
-- !query output
true


-- !query
SELECT startswith(x'537061726b2053514c', null)
-- !query schema
struct<startswith(X'537061726B2053514C', NULL):boolean>
-- !query output
NULL


-- !query
SELECT endswith(x'537061726b2053514c', x'53516c')
-- !query schema
struct<endswith(X'537061726B2053514C', X'53516C'):boolean>
-- !query output
false


-- !query
SELECT endsWith(x'537061726b2053514c', x'537061726b')
-- !query schema
struct<endswith(X'537061726B2053514C', X'537061726B'):boolean>
-- !query output
false


-- !query
SELECT endsWith(x'537061726b2053514c', x'')
-- !query schema
struct<endswith(X'537061726B2053514C', X''):boolean>
-- !query output
true


-- !query
SELECT endsWith(x'', x'')
-- !query schema
struct<endswith(X'', X''):boolean>
-- !query output
true


-- !query
SELECT endsWith(x'537061726b2053514c', null)
-- !query schema
struct<endswith(X'537061726B2053514C', NULL):boolean>
-- !query output
NULL


-- !query
select to_number('454', '000')
-- !query schema
struct<to_number(454, 000):decimal(3,0)>
-- !query output
454


-- !query
select to_number('454.2', '000.0')
-- !query schema
struct<to_number(454.2, 000.0):decimal(4,1)>
-- !query output
454.2


-- !query
select to_number('12,454', '00,000')
-- !query schema
struct<to_number(12,454, 00,000):decimal(5,0)>
-- !query output
12454


-- !query
select to_number('$78.12', '$00.00')
-- !query schema
struct<to_number($78.12, $00.00):decimal(4,2)>
-- !query output
78.12


-- !query
select to_number('+454', 'S000')
-- !query schema
struct<to_number(+454, S000):decimal(3,0)>
-- !query output
454


-- !query
select to_number('-454', 'S000')
-- !query schema
struct<to_number(-454, S000):decimal(3,0)>
-- !query output
-454


-- !query
select to_number('12,454.8-', '00,000.9MI')
-- !query schema
struct<to_number(12,454.8-, 00,000.9MI):decimal(6,1)>
-- !query output
-12454.8


-- !query
select to_number('00,454.8-', '00,000.9MI')
-- !query schema
struct<to_number(00,454.8-, 00,000.9MI):decimal(6,1)>
-- !query output
-454.8


-- !query
select to_number('<00,454.8>', '00,000.9PR')
-- !query schema
struct<to_number(<00,454.8>, 00,000.9PR):decimal(6,1)>
-- !query output
-454.8


-- !query
select to_binary('abc')
-- !query schema
struct<to_binary(abc):binary>
-- !query output
� 


-- !query
select to_binary('abc', 'utf-8')
-- !query schema
struct<to_binary(abc, utf-8):binary>
-- !query output
abc


-- !query
select to_binary('abc', 'base64')
-- !query schema
struct<to_binary(abc, base64):binary>
-- !query output
i�


-- !query
select to_binary('abc', 'hex')
-- !query schema
struct<to_binary(abc, hex):binary>
-- !query output
� 


-- !query
select to_binary('abc', concat('utf', '-8'))
-- !query schema
struct<to_binary(abc, concat(utf, -8)):binary>
-- !query output
abc


-- !query
select to_binary('abc', 'Hex')
-- !query schema
struct<to_binary(abc, Hex):binary>
-- !query output
� 


-- !query
select to_binary('abc', null)
-- !query schema
struct<to_binary(abc, NULL):binary>
-- !query output
NULL


-- !query
select to_binary(null, 'utf-8')
-- !query schema
struct<to_binary(NULL, utf-8):binary>
-- !query output
NULL


-- !query
select to_binary(null, null)
-- !query schema
struct<to_binary(NULL, NULL):binary>
-- !query output
NULL


-- !query
select to_binary(null, cast(null as string))
-- !query schema
struct<to_binary(NULL, CAST(NULL AS STRING)):binary>
-- !query output
NULL


-- !query
select to_binary(null, cast(null as int))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
The 'format' parameter of function 'to_binary' needs to be a string literal.; line 1 pos 7


-- !query
select to_binary('abc', 1)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
The 'format' parameter of function 'to_binary' needs to be a string literal.; line 1 pos 7


-- !query
select to_binary('abc', 'invalidFormat')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Invalid value for the 'format' parameter of function 'to_binary': invalidformat. The value has to be a case-insensitive string literal of 'hex', 'utf-8', or 'base64'.


-- !query
select to_binary('a!', 'base64')
-- !query schema
struct<>
-- !query output
java.lang.IllegalArgumentException
Last unit does not have enough valid bits
