-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE VIEW t1(c1, c2) AS VALUES (0, 1), (1, 2)
-- !query schema
struct<>
-- !query output



-- !query
CREATE VIEW t2(c1, c2) AS VALUES (0, 2), (0, 3)
-- !query schema
struct<>
-- !query output



-- !query
CREATE VIEW t3(c1, c2) AS VALUES (0, ARRAY(0, 1)), (1, ARRAY(2)), (2, ARRAY()), (null, ARRAY(4))
-- !query schema
struct<>
-- !query output



-- !query
CREATE VIEW t4(c1, c2) AS VALUES (0, 1), (0, 2), (1, 1), (1, 3)
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM t1, LATERAL (SELECT c1)
-- !query schema
struct<c1:int,c2:int,c1:int>
-- !query output
0	1	0
1	2	1


-- !query
SELECT * FROM t1, LATERAL (SELECT c1 FROM t2)
-- !query schema
struct<c1:int,c2:int,c1:int>
-- !query output
0	1	0
0	1	0
1	2	0
1	2	0


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.c1 FROM t2)
-- !query schema
struct<c1:int,c2:int,c1:int>
-- !query output
0	1	0
0	1	0
1	2	1
1	2	1


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.c1 + t2.c1 FROM t2)
-- !query schema
struct<c1:int,c2:int,(outer(spark_catalog.default.t1.c1) + c1):int>
-- !query output
0	1	0
0	1	0
1	2	1
1	2	1


-- !query
SELECT * FROM t1, LATERAL (SELECT *)
-- !query schema
struct<c1:int,c2:int>
-- !query output
0	1
1	2


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM t2)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int>
-- !query output
0	1	0	2
0	1	0	3
1	2	0	2
1	2	0	3


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.*)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int>
-- !query output
0	1	0	1
1	2	1	2


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.*, t2.* FROM t2)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int,c1:int,c2:int>
-- !query output
0	1	0	1	0	2
0	1	0	1	0	3
1	2	1	2	0	2
1	2	1	2	0	3


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.* FROM t2 AS t1)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int>
-- !query output
0	1	0	2
0	1	0	3
1	2	0	2
1	2	0	3


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.*, t2.* FROM t2, LATERAL (SELECT t1.*, t2.*, t3.* FROM t2 AS t3))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_1051",
  "messageParameters" : {
    "columns" : "c1, c2",
    "targetString" : "t1"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 71,
    "stopIndex" : 74,
    "fragment" : "t1.*"
  } ]
}


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT c1 + c2 AS c3) ON c2 = c3
-- !query schema
struct<c1:int,c2:int,c3:int>
-- !query output
0	1	1


-- !query
SELECT * FROM t1 LEFT JOIN LATERAL (SELECT c1 + c2 AS c3) ON c2 = c3
-- !query schema
struct<c1:int,c2:int,c3:int>
-- !query output
0	1	1
1	2	NULL


-- !query
SELECT * FROM t1 CROSS JOIN LATERAL (SELECT c1 + c2 AS c3)
-- !query schema
struct<c1:int,c2:int,c3:int>
-- !query output
0	1	1
1	2	3


-- !query
SELECT * FROM t1 NATURAL JOIN LATERAL (SELECT c1 + c2 AS c2)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "INCOMPATIBLE_JOIN_TYPES",
  "sqlState" : "42613",
  "messageParameters" : {
    "joinType1" : "LATERAL",
    "joinType2" : "NATURAL"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 18,
    "stopIndex" : 60,
    "fragment" : "NATURAL JOIN LATERAL (SELECT c1 + c2 AS c2)"
  } ]
}


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT c1 + c2 AS c2) USING (c2)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.LATERAL_JOIN_USING",
  "sqlState" : "0A000",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 18,
    "stopIndex" : 63,
    "fragment" : "JOIN LATERAL (SELECT c1 + c2 AS c2) USING (c2)"
  } ]
}


-- !query
SELECT * FROM LATERAL (SELECT * FROM t1)
-- !query schema
struct<c1:int,c2:int>
-- !query output
0	1
1	2


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM t2)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int>
-- !query output
0	1	0	2
0	1	0	3
1	2	0	2
1	2	0	3


-- !query
SELECT * FROM LATERAL (SELECT * FROM t1), LATERAL (SELECT * FROM t2)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int>
-- !query output
0	1	0	2
0	1	0	3
1	2	0	2
1	2	0	3


-- !query
SELECT * FROM LATERAL (SELECT * FROM t1) JOIN LATERAL (SELECT * FROM t2)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int>
-- !query output
0	1	0	2
0	1	0	3
1	2	0	2
1	2	0	3


-- !query
SELECT a, b FROM t1, LATERAL (SELECT c1, c2) s(a, b)
-- !query schema
struct<a:int,b:int>
-- !query output
0	1
1	2


-- !query
SELECT * FROM (SELECT 1 AS c1, 2 AS c2), LATERAL (SELECT c1, c2)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int>
-- !query output
1	2	1	2


-- !query
SELECT * FROM t1, LATERAL (SELECT c2 FROM t2 WHERE t1.c1 = t2.c1)
-- !query schema
struct<c1:int,c2:int,c2:int>
-- !query output
0	1	2
0	1	3


-- !query
SELECT * FROM t1, LATERAL (SELECT c2 FROM t2 WHERE t1.c2 < t2.c2)
-- !query schema
struct<c1:int,c2:int,c2:int>
-- !query output
0	1	2
0	1	3
1	2	3


-- !query
SELECT * FROM t1, LATERAL (SELECT max(c2) AS m FROM t2 WHERE t1.c2 < t2.c2)
-- !query schema
struct<c1:int,c2:int,m:int>
-- !query output
0	1	3
1	2	3


-- !query
SELECT * FROM t1 JOIN t2 JOIN LATERAL (SELECT t1.c2 + t2.c2)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int,(outer(spark_catalog.default.t1.c2) + outer(spark_catalog.default.t2.c2)):int>
-- !query output
0	1	0	2	3
0	1	0	3	4
1	2	0	2	4
1	2	0	3	5


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT t1.c1 AS a, t2.c1 AS b) s JOIN t2 ON s.b = t2.c1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITHOUT_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`t2`.`c1`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 51,
    "stopIndex" : 55,
    "fragment" : "t2.c1"
  } ]
}


-- !query
SELECT x FROM VALUES (0) t(x) JOIN LATERAL (SELECT x + rand(0) AS y)
-- !query schema
struct<x:int>
-- !query output
0


-- !query
SELECT x FROM (SELECT SUM(c1) AS x FROM t1), LATERAL (SELECT x + rand(0) AS y)
-- !query schema
struct<x:bigint>
-- !query output
1


-- !query
SELECT * FROM t1, LATERAL (SELECT c1 + c2 + rand(0) AS c3)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.NON_DETERMINISTIC_LATERAL_SUBQUERIES",
  "sqlState" : "0A000",
  "messageParameters" : {
    "treeNode" : "LateralJoin lateral-subquery#x [c1#x && c2#x], Inner\n:  +- SubqueryAlias __auto_generated_subquery_name\n:     +- Project [(cast((outer(c1#x) + outer(c2#x)) as double) + rand(0)) AS c3#x]\n:        +- OneRowRelation\n+- SubqueryAlias spark_catalog.default.t1\n   +- View (`spark_catalog`.`default`.`t1`, [c1#x,c2#x])\n      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]\n         +- LocalRelation [col1#x, col2#x]\n"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 58,
    "fragment" : "FROM t1, LATERAL (SELECT c1 + c2 + rand(0) AS c3)"
  } ]
}


-- !query
SELECT * FROM t1, LATERAL (SELECT rand(0) FROM t2)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.NON_DETERMINISTIC_LATERAL_SUBQUERIES",
  "sqlState" : "0A000",
  "messageParameters" : {
    "treeNode" : "LateralJoin lateral-subquery#x [], Inner\n:  +- SubqueryAlias __auto_generated_subquery_name\n:     +- Project [rand(0) AS rand(0)#x]\n:        +- SubqueryAlias spark_catalog.default.t2\n:           +- View (`spark_catalog`.`default`.`t2`, [c1#x,c2#x])\n:              +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]\n:                 +- LocalRelation [col1#x, col2#x]\n+- SubqueryAlias spark_catalog.default.t1\n   +- View (`spark_catalog`.`default`.`t1`, [c1#x,c2#x])\n      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]\n         +- LocalRelation [col1#x, col2#x]\n"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 50,
    "fragment" : "FROM t1, LATERAL (SELECT rand(0) FROM t2)"
  } ]
}


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT * FROM t2) s ON t1.c1 + rand(0) = s.c1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.LATERAL_JOIN_CONDITION_NON_DETERMINISTIC",
  "sqlState" : "0A000",
  "messageParameters" : {
    "condition" : "((CAST(spark_catalog.default.t1.c1 AS DOUBLE) + rand(0)) = CAST(s.c1 AS DOUBLE))"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 55,
    "stopIndex" : 76,
    "fragment" : "t1.c1 + rand(0) = s.c1"
  } ]
}


-- !query
SELECT * FROM t1,
LATERAL (SELECT c1 + c2 AS a),
LATERAL (SELECT c1 - c2 AS b),
LATERAL (SELECT a * b AS c)
-- !query schema
struct<c1:int,c2:int,a:int,b:int,c:int>
-- !query output
0	1	1	-1	-1
1	2	3	-1	-3


-- !query
SELECT * FROM t1
LEFT OUTER JOIN LATERAL (SELECT c2 FROM t2 WHERE t1.c1 = t2.c1) s
LEFT OUTER JOIN t1 t3 ON s.c2 = t3.c2
-- !query schema
struct<c1:int,c2:int,c2:int,c1:int,c2:int>
-- !query output
0	1	2	1	2
0	1	3	NULL	NULL
1	2	NULL	NULL	NULL


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM t2, LATERAL (SELECT c1))
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int,c1:int>
-- !query output
0	1	0	2	0
0	1	0	3	0
1	2	0	2	0
1	2	0	3	0


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM (SELECT c1 + 1 AS c1), LATERAL (SELECT c1))
-- !query schema
struct<c1:int,c2:int,c1:int,c1:int>
-- !query output
0	1	1	1
1	2	2	2


-- !query
SELECT * FROM t1, LATERAL (
  SELECT * FROM (SELECT c1, MIN(c2) m FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c1) s,
  LATERAL (SELECT m WHERE m > c1)
)
-- !query schema
struct<c1:int,c2:int,c1:int,m:int,m:int>
-- !query output
0	1	0	2	2


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM t2, LATERAL (SELECT t1.c1 + t2.c1))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITHOUT_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`t1`.`c1`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 62,
    "stopIndex" : 66,
    "fragment" : "t1.c1"
  } ]
}


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM (SELECT c1), LATERAL (SELECT c2))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITHOUT_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`c2`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 71,
    "stopIndex" : 72,
    "fragment" : "c2"
  } ]
}


-- !query
SELECT * FROM t1, LATERAL (SELECT c2, (SELECT MIN(c2) FROM t2))
-- !query schema
struct<c1:int,c2:int,c2:int,scalarsubquery():int>
-- !query output
0	1	1	2
1	2	2	2


-- !query
SELECT * FROM t1, LATERAL (SELECT (SELECT SUM(c2) FROM t2 WHERE c1 = a) FROM (SELECT c1 AS a))
-- !query schema
struct<c1:int,c2:int,scalarsubquery(a):bigint>
-- !query output
0	1	5
1	2	NULL


-- !query
SELECT * FROM t1, LATERAL (SELECT c1, (SELECT SUM(c2) FROM t2 WHERE c1 = t1.c1))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`t1`.`c1`",
    "proposal" : "`spark_catalog`.`default`.`t2`.`c1`, `spark_catalog`.`default`.`t2`.`c2`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 74,
    "stopIndex" : 78,
    "fragment" : "t1.c1"
  } ]
}


-- !query
SELECT * FROM t1 WHERE c1 = (SELECT MIN(a) FROM t2, LATERAL (SELECT c1 AS a))
-- !query schema
struct<c1:int,c2:int>
-- !query output
0	1


-- !query
SELECT * FROM t1 WHERE c1 = (SELECT MIN(a) FROM t2, LATERAL (SELECT c1 AS a) WHERE c1 = t1.c1)
-- !query schema
struct<c1:int,c2:int>
-- !query output
0	1


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) cnt FROM t2 WHERE c1 = t1.c1)
-- !query schema
struct<c1:int,c2:int,cnt:bigint>
-- !query output
0	1	2
1	2	0


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) cnt, SUM(c2) sum FROM t2 WHERE c1 = t1.c1)
-- !query schema
struct<c1:int,c2:int,cnt:bigint,sum:bigint>
-- !query output
0	1	2	5
1	2	0	NULL


-- !query
SELECT * FROM t1, LATERAL (SELECT SUM(c2) IS NULL FROM t2 WHERE t1.c1 = t2.c1)
-- !query schema
struct<c1:int,c2:int,(sum(c2) IS NULL):boolean>
-- !query output
0	1	false
1	2	true


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) + CASE WHEN sum(c2) IS NULL THEN 0 ELSE sum(c2) END FROM t2 WHERE t1.c1 = t2.c1)
-- !query schema
struct<c1:int,c2:int,(count(1) + CASE WHEN (sum(c2) IS NULL) THEN 0 ELSE sum(c2) END):bigint>
-- !query output
0	1	7
1	2	0


-- !query
SELECT * FROM t1, LATERAL (SELECT c1, COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c1)
-- !query schema
struct<c1:int,c2:int,c1:int,cnt:bigint>
-- !query output
0	1	0	2


-- !query
SELECT * FROM t1, LATERAL (SELECT c2, COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c2)
-- !query schema
struct<c1:int,c2:int,c2:int,cnt:bigint>
-- !query output
0	1	2	1
0	1	3	1


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
-- !query schema
struct<c1:int,c2:int,cnt:bigint>
-- !query output
0	1	2
1	2	0


-- !query
SELECT * FROM t1 LEFT JOIN LATERAL (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
-- !query schema
struct<c1:int,c2:int,cnt:bigint>
-- !query output
0	1	2
1	2	0


-- !query
SELECT * FROM t1 CROSS JOIN LATERAL (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
-- !query schema
struct<c1:int,c2:int,cnt:bigint>
-- !query output
0	1	2
1	2	0


-- !query
SELECT * FROM t1 LEFT JOIN LATERAL (SELECT c1, COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c1)
-- !query schema
struct<c1:int,c2:int,c1:int,cnt:bigint>
-- !query output
0	1	0	2
1	2	NULL	NULL


-- !query
SELECT * FROM t1 CROSS JOIN LATERAL (SELECT c1, COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c1)
-- !query schema
struct<c1:int,c2:int,c1:int,cnt:bigint>
-- !query output
0	1	0	2


-- !query
SELECT * FROM t1 JOIN LATERAL (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1) ON cnt + 1 = c1
-- !query schema
struct<c1:int,c2:int,cnt:bigint>
-- !query output
1	2	0


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) cnt FROM t1 t2 WHERE t1.c1 = t2.c1)
-- !query schema
struct<c1:int,c2:int,cnt:bigint>
-- !query output
0	1	1
1	2	1


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) cnt FROM t1 t2 WHERE t1.c1 = t2.c1 HAVING cnt > 0)
-- !query schema
struct<c1:int,c2:int,cnt:bigint>
-- !query output
0	1	1
1	2	1


-- !query
SELECT * FROM t1, LATERAL (SELECT SUM(cnt) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1))
-- !query schema
struct<c1:int,c2:int,sum(cnt):bigint>
-- !query output
0	1	2
1	2	0


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(cnt) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1))
-- !query schema
struct<c1:int,c2:int,count(cnt):bigint>
-- !query output
0	1	1
1	2	1


-- !query
SELECT * FROM t1, LATERAL (SELECT SUM(cnt) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1 GROUP BY c1))
-- !query schema
struct<c1:int,c2:int,sum(cnt):bigint>
-- !query output
0	1	2
1	2	NULL


-- !query
SELECT * FROM t1, LATERAL (
  SELECT COUNT(*) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
  JOIN t2 ON cnt = t2.c1
)
-- !query schema
struct<c1:int,c2:int,count(1):bigint>
-- !query output
0	1	0
1	2	2


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1) WHERE cnt = c1 - 1)
-- !query schema
struct<c1:int,c2:int,cnt:bigint>
-- !query output
1	2	0


-- !query
SELECT * FROM t1, LATERAL (SELECT COUNT(*) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1) WHERE cnt = c1 - 1)
-- !query schema
struct<c1:int,c2:int,count(1):bigint>
-- !query output
0	1	0
1	2	1


-- !query
SELECT * FROM t1, LATERAL (
  SELECT COUNT(*) FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
  WHERE cnt = c1 - 1 GROUP BY cnt
)
-- !query schema
struct<c1:int,c2:int,count(1):bigint>
-- !query output
1	2	1


-- !query
SELECT * FROM t1, LATERAL (
  SELECT * FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1)
  JOIN t2 ON cnt = t2.c1
)
-- !query schema
struct<c1:int,c2:int,cnt:bigint,c1:int,c2:int>
-- !query output
1	2	0	0	2
1	2	0	0	3


-- !query
SELECT * FROM t1, LATERAL (
  SELECT l.cnt + r.cnt
  FROM (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1) l
  JOIN (SELECT COUNT(*) cnt FROM t2 WHERE t1.c1 = t2.c1) r
)
-- !query schema
struct<c1:int,c2:int,(cnt + cnt):bigint>
-- !query output
0	1	4
1	2	0


-- !query
SELECT * FROM t1 LEFT JOIN LATERAL (SELECT MIN(c2) FROM t2 WHERE c1 = t1.c1 GROUP BY c1)
-- !query schema
struct<c1:int,c2:int,min(c2):int>
-- !query output
0	1	2
1	2	NULL


-- !query
WITH cte1 AS (
  SELECT c1 FROM t1
), cte2 AS (
  SELECT s.* FROM cte1, LATERAL (SELECT * FROM t2 WHERE c1 = cte1.c1) s
)
SELECT * FROM cte2
-- !query schema
struct<c1:int,c2:int>
-- !query output
0	2
0	3


-- !query
SELECT * FROM t3 JOIN LATERAL (SELECT EXPLODE(c2))
-- !query schema
struct<c1:int,c2:array<int>,col:int>
-- !query output
0	[0,1]	0
0	[0,1]	1
1	[2]	2
NULL	[4]	4


-- !query
SELECT * FROM t3 JOIN LATERAL (SELECT EXPLODE_OUTER(c2))
-- !query schema
struct<c1:int,c2:array<int>,col:int>
-- !query output
0	[0,1]	0
0	[0,1]	1
1	[2]	2
2	[]	NULL
NULL	[4]	4


-- !query
SELECT * FROM t3 JOIN LATERAL (SELECT EXPLODE(c2)) t(c3) ON c1 = c3
-- !query schema
struct<c1:int,c2:array<int>,c3:int>
-- !query output
0	[0,1]	0


-- !query
SELECT * FROM t3 LEFT JOIN LATERAL (SELECT EXPLODE(c2)) t(c3) ON c1 = c3
-- !query schema
struct<c1:int,c2:array<int>,c3:int>
-- !query output
0	[0,1]	0
1	[2]	NULL
2	[]	NULL
NULL	[4]	NULL


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT sum(t2.c2) over (order by t2.c1)
  FROM   t2
  WHERE  t2.c1 >= t1.c1)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.ACCESSING_OUTER_QUERY_COLUMN_IS_NOT_ALLOWED",
  "sqlState" : "0A000",
  "messageParameters" : {
    "treeNode" : "Filter (c1#x >= outer(c1#x))\n+- SubqueryAlias spark_catalog.default.t2\n   +- View (`spark_catalog`.`default`.`t2`, [c1#x,c2#x])\n      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]\n         +- LocalRelation [col1#x, col2#x]\n"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 34,
    "stopIndex" : 108,
    "fragment" : "SELECT sum(t2.c2) over (order by t2.c1)\n  FROM   t2\n  WHERE  t2.c1 >= t1.c1"
  } ]
}


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 = t1.c1)
-- !query schema
struct<c1:int,c2:int,c2:int>
-- !query output
0	1	1
0	1	2
0	1	2
0	1	3
1	2	1
1	2	3


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION DISTINCT
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 > t1.c2)
-- !query schema
struct<c1:int,c2:int,c2:int>
-- !query output
0	1	2
0	1	3


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT COUNT(t2.c2)
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION DISTINCT
  SELECT COUNT(t4.c2)
  FROM   t4
  WHERE  t4.c1 > t1.c2)
-- !query schema
struct<c1:int,c2:int,count(c2):bigint>
-- !query output
0	1	0
0	1	2
1	2	0


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c1, t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION ALL
  SELECT t4.c2, t4.c1
  FROM   t4
  WHERE  t4.c1 = t1.c1)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int>
-- !query output
0	1	0	2
0	1	0	3
0	1	1	0
0	1	2	0
1	2	1	1
1	2	3	1


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1 and t2.c2 >= t1.c2
  UNION ALL
  SELECT t4.c2
  FROM   t4)
-- !query schema
struct<c1:int,c2:int,c2:int>
-- !query output
0	1	1
0	1	1
0	1	2
0	1	2
0	1	3
0	1	3
1	2	1
1	2	1
1	2	2
1	2	3


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4)
-- !query schema
struct<c1:int,c2:int,c2:int>
-- !query output
0	1	1
0	1	1
0	1	2
0	1	2
0	1	3
0	1	3
1	2	1
1	2	1
1	2	2
1	2	3


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  GROUP BY t2.c2
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 > t1.c2
  GROUP BY t4.c2)
-- !query schema
struct<c1:int,c2:int,c2:int>
-- !query output
0	1	2
0	1	3


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c1 - t1.c1
  FROM   t2
  GROUP BY t2.c1 - t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 > t1.c2
  GROUP BY t4.c2)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.CORRELATED_REFERENCE",
  "sqlState" : "0A000",
  "messageParameters" : {
    "sqlExprs" : "\"(c1 - c1)\",\"(c1 - c1) AS `(c1 - outer(spark_catalog.default.t1.c1))`\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 69,
    "stopIndex" : 90,
    "fragment" : "GROUP BY t2.c1 - t1.c1"
  } ]
}


-- !query
SELECT * FROM t1 JOIN LATERAL
  (SELECT sum(t2.c2) over (order by t2.c1)
  FROM   t2
  WHERE  t2.c1 >= t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNSUPPORTED_SUBQUERY_EXPRESSION_CATEGORY.ACCESSING_OUTER_QUERY_COLUMN_IS_NOT_ALLOWED",
  "sqlState" : "0A000",
  "messageParameters" : {
    "treeNode" : "Filter (c1#x >= outer(c1#x))\n+- SubqueryAlias spark_catalog.default.t2\n   +- View (`spark_catalog`.`default`.`t2`, [c1#x,c2#x])\n      +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]\n         +- LocalRelation [col1#x, col2#x]\n"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 34,
    "stopIndex" : 108,
    "fragment" : "SELECT sum(t2.c2) over (order by t2.c1)\n  FROM   t2\n  WHERE  t2.c1 >= t1.c1"
  } ]
}


-- !query
(SELECT * FROM t1 JOIN LATERAL (SELECT * FROM t2 WHERE t2.c1 = t1.c1))
UNION ALL
(SELECT * FROM t1 JOIN t4)
-- !query schema
struct<c1:int,c2:int,c1:int,c2:int>
-- !query output
0	1	0	1
0	1	0	2
0	1	0	2
0	1	0	3
0	1	1	1
0	1	1	3
1	2	0	1
1	2	0	2
1	2	1	1
1	2	1	3


-- !query
(SELECT * FROM t1 JOIN LATERAL
  (SELECT t2.c2
  FROM   t2
  WHERE  t2.c1 = t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 = t1.c1))
UNION ALL
(SELECT * FROM t2 JOIN LATERAL
  (SELECT t1.c2
  FROM   t1
  WHERE  t2.c1 <= t1.c1
  UNION ALL
  SELECT t4.c2
  FROM   t4
  WHERE  t4.c1 < t2.c1))
-- !query schema
struct<c1:int,c2:int,c2:int>
-- !query output
0	1	1
0	1	2
0	1	2
0	1	3
0	2	1
0	2	2
0	3	1
0	3	2
1	2	1
1	2	3


-- !query
SELECT * FROM LATERAL EXPLODE(ARRAY(1, 2))
-- !query schema
struct<col:int>
-- !query output
1
2


-- !query
SELECT * FROM t1, LATERAL RANGE(3)
-- !query schema
struct<c1:int,c2:int,id:bigint>
-- !query output
0	1	0
0	1	1
0	1	2
1	2	0
1	2	1
1	2	2


-- !query
SELECT * FROM t1, LATERAL EXPLODE(ARRAY(c1, c2)) t2(c3)
-- !query schema
struct<c1:int,c2:int,c3:int>
-- !query output
0	1	0
0	1	1
1	2	1
1	2	2


-- !query
SELECT * FROM t3, LATERAL EXPLODE(c2) t2(v)
-- !query schema
struct<c1:int,c2:array<int>,v:int>
-- !query output
0	[0,1]	0
0	[0,1]	1
1	[2]	2
NULL	[4]	4


-- !query
SELECT * FROM t3, LATERAL EXPLODE_OUTER(c2) t2(v)
-- !query schema
struct<c1:int,c2:array<int>,v:int>
-- !query output
0	[0,1]	0
0	[0,1]	1
1	[2]	2
2	[]	NULL
NULL	[4]	4


-- !query
SELECT * FROM EXPLODE(ARRAY(1, 2)) t(v), LATERAL (SELECT v + 1)
-- !query schema
struct<v:int,(outer(t.v) + 1):int>
-- !query output
1	2
2	3


-- !query
SELECT * FROM t1 JOIN LATERAL EXPLODE(ARRAY(c1, c2)) t(c3) ON t1.c1 = c3
-- !query schema
struct<c1:int,c2:int,c3:int>
-- !query output
0	1	0
1	2	1


-- !query
SELECT * FROM t3 JOIN LATERAL EXPLODE(c2) t(c3) ON t3.c1 = c3
-- !query schema
struct<c1:int,c2:array<int>,c3:int>
-- !query output
0	[0,1]	0


-- !query
SELECT * FROM t3 LEFT JOIN LATERAL EXPLODE(c2) t(c3) ON t3.c1 = c3
-- !query schema
struct<c1:int,c2:array<int>,c3:int>
-- !query output
0	[0,1]	0
1	[2]	NULL
2	[]	NULL
NULL	[4]	NULL


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM EXPLODE(ARRAY(c1, c2)))
-- !query schema
struct<c1:int,c2:int,col:int>
-- !query output
0	1	0
0	1	1
1	2	1
1	2	2


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.c1 + c3 FROM EXPLODE(ARRAY(c1, c2)) t(c3))
-- !query schema
struct<c1:int,c2:int,(outer(spark_catalog.default.t1.c1) + c3):int>
-- !query output
0	1	0
0	1	1
1	2	2
1	2	3


-- !query
SELECT * FROM t1, LATERAL (SELECT t1.c1 + c3 FROM EXPLODE(ARRAY(c1, c2)) t(c3) WHERE t1.c2 > 1)
-- !query schema
struct<c1:int,c2:int,(outer(spark_catalog.default.t1.c1) + c3):int>
-- !query output
1	2	2
1	2	3


-- !query
SELECT * FROM t1, LATERAL (SELECT * FROM EXPLODE(ARRAY(c1, c2)) l(x) JOIN EXPLODE(ARRAY(c2, c1)) r(y) ON x = y)
-- !query schema
struct<c1:int,c2:int,x:int,y:int>
-- !query output
0	1	0	0
0	1	1	1
1	2	1	1
1	2	2	2


-- !query
CREATE OR REPLACE TEMPORARY VIEW array_struct(id, arr) AS VALUES
    (1, ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))),
    (2, ARRAY()),
    (3, ARRAY(STRUCT(3, 'c')))
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM t1, LATERAL INLINE(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b')))
-- !query schema
struct<c1:int,c2:int,col1:int,col2:string>
-- !query output
0	1	1	a
0	1	2	b
1	2	1	a
1	2	2	b


-- !query
SELECT c1, t.* FROM t1, LATERAL INLINE(ARRAY(STRUCT(1, 'a'), STRUCT(2, 'b'))) t(x, y)
-- !query schema
struct<c1:int,x:int,y:string>
-- !query output
0	1	a
0	2	b
1	1	a
1	2	b


-- !query
SELECT * FROM array_struct JOIN LATERAL INLINE(arr)
-- !query schema
struct<id:int,arr:array<struct<col1:int,col2:string>>,col1:int,col2:string>
-- !query output
1	[{"col1":1,"col2":"a"},{"col1":2,"col2":"b"}]	1	a
1	[{"col1":1,"col2":"a"},{"col1":2,"col2":"b"}]	2	b
3	[{"col1":3,"col2":"c"}]	3	c


-- !query
SELECT * FROM array_struct LEFT JOIN LATERAL INLINE(arr) t(k, v) ON id = k
-- !query schema
struct<id:int,arr:array<struct<col1:int,col2:string>>,k:int,v:string>
-- !query output
1	[{"col1":1,"col2":"a"},{"col1":2,"col2":"b"}]	1	a
2	[]	NULL	NULL
3	[{"col1":3,"col2":"c"}]	3	c


-- !query
SELECT * FROM array_struct JOIN LATERAL INLINE_OUTER(arr)
-- !query schema
struct<id:int,arr:array<struct<col1:int,col2:string>>,col1:int,col2:string>
-- !query output
1	[{"col1":1,"col2":"a"},{"col1":2,"col2":"b"}]	1	a
1	[{"col1":1,"col2":"a"},{"col1":2,"col2":"b"}]	2	b
2	[]	NULL	NULL
3	[{"col1":3,"col2":"c"}]	3	c


-- !query
DROP VIEW array_struct
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW t1
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW t2
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW t3
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW t4
-- !query schema
struct<>
-- !query output

