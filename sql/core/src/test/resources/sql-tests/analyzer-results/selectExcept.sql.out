-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW tbl_view AS SELECT * FROM VALUES
  (10, "name1", named_struct("f1", 1, "s2", named_struct("f2", 101, "f3", "a"))),
  (20, "name2", named_struct("f1", 2, "s2", named_struct("f2", 202, "f3", "b"))),
  (30, "name3", named_struct("f1", 3, "s2", named_struct("f2", 303, "f3", "c"))),
  (40, "name4", named_struct("f1", 4, "s2", named_struct("f2", 404, "f3", "d"))),
  (50, "name5", named_struct("f1", 5, "s2", named_struct("f2", 505, "f3", "e"))),
  (60, "name6", named_struct("f1", 6, "s2", named_struct("f2", 606, "f3", "f"))),
  (70, "name7", named_struct("f1", 7, "s2", named_struct("f2", 707, "f3", "g")))
AS tbl_view(id, name, data)
-- !query analysis
CreateViewCommand `tbl_view`, SELECT * FROM VALUES
  (10, "name1", named_struct("f1", 1, "s2", named_struct("f2", 101, "f3", "a"))),
  (20, "name2", named_struct("f1", 2, "s2", named_struct("f2", 202, "f3", "b"))),
  (30, "name3", named_struct("f1", 3, "s2", named_struct("f2", 303, "f3", "c"))),
  (40, "name4", named_struct("f1", 4, "s2", named_struct("f2", 404, "f3", "d"))),
  (50, "name5", named_struct("f1", 5, "s2", named_struct("f2", 505, "f3", "e"))),
  (60, "name6", named_struct("f1", 6, "s2", named_struct("f2", 606, "f3", "f"))),
  (70, "name7", named_struct("f1", 7, "s2", named_struct("f2", 707, "f3", "g")))
AS tbl_view(id, name, data), false, false, LocalTempView, true
   +- Project [id#x, name#x, data#x]
      +- SubqueryAlias tbl_view
         +- LocalRelation [id#x, name#x, data#x]


-- !query
CREATE TABLE ids (id INT) USING CSV
-- !query analysis
org.apache.spark.sql.catalyst.analysis.TableAlreadyExistsException
{
  "errorClass" : "TABLE_OR_VIEW_ALREADY_EXISTS",
  "sqlState" : "42P07",
  "messageParameters" : {
    "relationName" : "`spark_catalog`.`default`.`ids`"
  }
}


-- !query
SELECT * FROM tbl_view
-- !query analysis
Project [id#x, name#x, data#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT * EXCEPT (id) FROM tbl_view
-- !query analysis
Project [name#x, data#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT * EXCEPT (name) FROM tbl_view
-- !query analysis
Project [id#x, data#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT * EXCEPT (data) FROM tbl_view
-- !query analysis
Project [id#x, name#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT * EXCEPT (data.f1) FROM tbl_view
-- !query analysis
Project [id#x, name#x, named_struct(s2, data#x.s2) AS data#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT * EXCEPT (data.s2) FROM tbl_view
-- !query analysis
Project [id#x, name#x, named_struct(f1, data#x.f1) AS data#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT * EXCEPT (data.s2.f2) FROM tbl_view
-- !query analysis
Project [id#x, name#x, named_struct(f1, data#x.f1, s2, named_struct(f3, data#x.s2.f3)) AS data#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT * EXCEPT (id, name, data) FROM tbl_view
-- !query analysis
Project
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT * EXCEPT (`a-b-c`) FROM (SELECT 1 a_b_c, 2 `a-b-c`)
-- !query analysis
Project [a_b_c#x]
+- SubqueryAlias __auto_generated_subquery_name
   +- Project [1 AS a_b_c#x, 2 AS a-b-c#x]
      +- OneRowRelation


-- !query
SELECT tbl_view.* EXCEPT (name) FROM tbl_view
-- !query analysis
Project [id#x, data#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
INSERT INTO ids
SELECT * EXCEPT (name, data) FROM tbl_view
-- !query analysis
InsertIntoHadoopFsRelationCommand file:[not included in comparison]/{warehouse_dir}/ids, false, CSV, [path=file:[not included in comparison]/{warehouse_dir}/ids], Append, `spark_catalog`.`default`.`ids`, org.apache.spark.sql.execution.datasources.InMemoryFileIndex(file:[not included in comparison]/{warehouse_dir}/ids), [id]
+- Project [id#x]
   +- SubqueryAlias tbl_view
      +- View (`tbl_view`, [id#x,name#x,data#x])
         +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
            +- Project [id#x, name#x, data#x]
               +- SubqueryAlias tbl_view
                  +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT * FROM ids
-- !query analysis
Project [id#x]
+- SubqueryAlias spark_catalog.default.ids
   +- Relation spark_catalog.default.ids[id#x] csv


-- !query
SELECT * EXCEPT (ids.id) FROM ids
-- !query analysis
Project
+- SubqueryAlias spark_catalog.default.ids
   +- Relation spark_catalog.default.ids[id#x] csv


-- !query
SELECT data.* EXCEPT (s2) FROM tbl_view
-- !query analysis
Project [data#x.f1 AS f1#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT data.* EXCEPT (s2.f2) FROM tbl_view
-- !query analysis
Project [data#x.f1 AS f1#x, named_struct(f3, data#x.s2.f3) AS s2#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT data.s2.* EXCEPT (f2) FROM tbl_view
-- !query analysis
Project [data#x.s2.f3 AS f3#x]
+- SubqueryAlias tbl_view
   +- View (`tbl_view`, [id#x,name#x,data#x])
      +- Project [cast(id#x as int) AS id#x, cast(name#x as string) AS name#x, cast(data#x as struct<f1:int,s2:struct<f2:int,f3:string>>) AS data#x]
         +- Project [id#x, name#x, data#x]
            +- SubqueryAlias tbl_view
               +- LocalRelation [id#x, name#x, data#x]


-- !query
SELECT * EXCEPT name FROM tbl_view
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "'name'",
    "hint" : ""
  }
}


-- !query
SELECT * EXCEPT() name FROM tbl_view
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "PARSE_SYNTAX_ERROR",
  "sqlState" : "42601",
  "messageParameters" : {
    "error" : "')'",
    "hint" : ""
  }
}


-- !query
SELECT * EXCEPT(invalid_column) FROM tbl_view
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`invalid_column`",
    "proposal" : "`id`, `name`, `data`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 31,
    "fragment" : "* EXCEPT(invalid_column)"
  } ]
}


-- !query
SELECT * EXCEPT(id, invalid_column) FROM tbl_view
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRESOLVED_COLUMN.WITH_SUGGESTION",
  "sqlState" : "42703",
  "messageParameters" : {
    "objectName" : "`invalid_column`",
    "proposal" : "`id`, `name`, `data`"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 35,
    "fragment" : "* EXCEPT(id, invalid_column)"
  } ]
}


-- !query
SELECT * EXCEPT(id, id) FROM tbl_view
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "EXCEPT_OVERLAPPING_COLUMNS",
  "sqlState" : "42702",
  "messageParameters" : {
    "columns" : "id, id"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 23,
    "fragment" : "* EXCEPT(id, id)"
  } ]
}


-- !query
SELECT * EXCEPT(data.s2, data.s2.f2) FROM tbl_view
-- !query analysis
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "EXCEPT_OVERLAPPING_COLUMNS",
  "sqlState" : "42702",
  "messageParameters" : {
    "columns" : "data.s2, data.s2.f2"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 36,
    "fragment" : "* EXCEPT(data.s2, data.s2.f2)"
  } ]
}
